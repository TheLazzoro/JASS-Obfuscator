globals
//globals from Ascii:
constant boolean LIBRARY_Ascii=true
integer array Ascii__i
integer array Ascii__h
integer array Ascii__y
string array Ascii__c
//endglobals from Ascii
//globals from CTL:
constant boolean LIBRARY_CTL=true
integer CTL__tgc= 0
integer array CTL__tgr
        
integer CTL__ic=0
integer CTL__tc=0
integer array CTL__rf
integer array CTL__n
integer array CTL__p
integer array CTL__th
integer array CTL__ns
trigger CTL__t=CreateTrigger()
timer CTL__m=CreateTimer()
triggercondition array CTL__ct
conditionfunc array CTL__rc
        
boolean array CTL__e32
integer array CTL__i32r
integer CTL__i32cr= 0
boolean array CTL__ir32
boolean array CTL__id32
//endglobals from CTL
//globals from CamCommand:
constant boolean LIBRARY_CamCommand=true
//endglobals from CamCommand
//globals from CreateScaledEffect:
constant boolean LIBRARY_CreateScaledEffect=true
//endglobals from CreateScaledEffect
//globals from DamageEngine:
constant boolean LIBRARY_DamageEngine=true
constant boolean DamageEngine__USE_GUI= true
                                                       
constant boolean DamageEngine__USE_SCALING= DamageEngine__USE_GUI
constant boolean DamageEngine__USE_EXTRA= true
constant boolean DamageEngine__USE_ARMOR_MOD= true
constant boolean DamageEngine__USE_MELEE_RANGE= true
constant boolean DamageEngine__USE_LETHAL= true
   
constant integer DamageEngine__LIMBO= 16
   
constant integer DamageEngine_TYPE_CODE= 1
constant integer DamageEngine_TYPE_PURE= 2
constant real DamageEngine__DEATH_VAL= 0.405
timer DamageEngine__alarm= null
boolean DamageEngine__alarmSet= false
    //Values to track the original pre-spirit Link/defensive damage values
integer DamageEngine__lastInstance= 0
boolean DamageEngine__canKick= true
boolean DamageEngine__totem= false
boolean array DamageEngine__attacksImmune
boolean array DamageEngine__damagesImmune
    //Made global in order to use enable/disable behavior.
trigger DamageEngine__t1= null
trigger DamageEngine__t2= null
trigger DamageEngine__t3= null
    //These variables coincide with Blizzard's "limitop" type definitions so as to enable users (GUI in particular) with some nice performance perks.
constant integer DamageEngine_FILTER_ATTACK= 0
constant integer DamageEngine_FILTER_MELEE= 1
constant integer DamageEngine_FILTER_OTHER= 2
constant integer DamageEngine_FILTER_RANGED= 3
constant integer DamageEngine_FILTER_SPELL= 4
constant integer DamageEngine_FILTER_CODE= 5
constant integer DamageEngine_FILTER_MAX= 6
integer DamageEngine__eventFilter= DamageEngine_FILTER_OTHER
boolean DamageEngine_inception= false
boolean DamageEngine__dreaming= false
integer DamageEngine__sleepLevel= 0
group DamageEngine__proclusGlobal= null
group DamageEngine__fischerMorrow= null
boolean DamageEngine__kicking= false
boolean DamageEngine__eventsRun= false
   
boolean DamageEngine__hasLethal= false
//endglobals from DamageEngine
//globals from Event:
constant boolean LIBRARY_Event=true
//endglobals from Event
//globals from GetClosestWidget:
constant boolean LIBRARY_GetClosestWidget=true
constant boolean GetClosestWidget__UNITS_MODULE= true
constant boolean GetClosestWidget__GROUP_MODULE= true
constant boolean GetClosestWidget__ITEMS_MODULE= true
constant boolean GetClosestWidget__DESTS_MODULE= false

constant real GetClosestWidget__START_DISTANCE= 800
constant real GetClosestWidget__FINAL_DISTANCE= 3200
real GetClosestWidget__distance
real GetClosestWidget__coordX
real GetClosestWidget__coordY
//endglobals from GetClosestWidget
//globals from GetPlayer:
constant boolean LIBRARY_GetPlayer=true
//endglobals from GetPlayer
//globals from GetTerrainZ:
constant boolean LIBRARY_GetTerrainZ=true
constant location GetTerrainZ__L= Location(0, 0)
//endglobals from GetTerrainZ
//globals from InitTasks:
constant boolean LIBRARY_InitTasks=true
integer Tasks
//endglobals from InitTasks
//globals from IsPlayer:
constant boolean LIBRARY_IsPlayer=true
//endglobals from IsPlayer
//globals from IsTerrainWalkable:
constant boolean LIBRARY_IsTerrainWalkable=true
	
        // this value is how far from a point the item may end up for the point to be considered pathable
constant real IsTerrainWalkable__MAX_RANGE=10.
		
        // the following two variables are set to the position of the item after each pathing check
        // that way, if a point isn't pathable, these will be the coordinates of the nearest point that is
real IsTerrainWalkable_X=0.
real IsTerrainWalkable_Y=0.
rect IsTerrainWalkable__r
item IsTerrainWalkable__check
item array IsTerrainWalkable__hidden
integer IsTerrainWalkable__hiddenMax=0
//endglobals from IsTerrainWalkable
//globals from IsUnitTypeEx:
constant boolean LIBRARY_IsUnitTypeEx=true
//endglobals from IsUnitTypeEx
//globals from Knockback:
constant boolean LIBRARY_Knockback=true
//endglobals from Knockback
//globals from LS:
constant boolean LIBRARY_LS=true
//endglobals from LS
//globals from MoveSpeedXGUI:
constant boolean LIBRARY_MoveSpeedXGUI=true
constant real MoveSpeedXGUI__PERIOD= 0.03125
        //  This is the period on which all units will be run.
        // If you lower this value, movement bonuses will be smoother,
        // but will require more processing power (lag more).
        //  Also, the lower this is, the higher the move speed can be
        // before it starts bugging on waypoints. The lowest valid
        // period is 0.00125. A period of 0.00625 is very robust.
constant real MoveSpeedXGUI__MARGIN= 0.01
        // This is the margin of approximation when comparing reals.
        // You will most likely not need to change this.
//endglobals from MoveSpeedXGUI
//globals from PathingFuncs:
constant boolean LIBRARY_PathingFuncs=true
constant real PathingFuncs__ItemSafeX= 133.
constant real PathingFuncs__ItemSafeY= 133.
        //The itemSafeX and Y are slightly above the Niffy's cargo bay, for reference.
item PathingFuncs__I
unit PathingFuncs__U
//endglobals from PathingFuncs
//globals from PauseUnitTimer:
constant boolean LIBRARY_PauseUnitTimer=true
//endglobals from PauseUnitTimer
//globals from PlayerUtils:
constant boolean LIBRARY_PlayerUtils=true
        // automatically change unit colors when changing player color
constant boolean PlayerUtils__AUTO_COLOR_UNITS= true
   
        // use an array for name / color lookups (instead of function calls)
constant boolean PlayerUtils__ARRAY_LOOKUP= false
   
        // this only applies if ARRAY_LOOKUP is true
constant boolean PlayerUtils__HOOK_SAFETY= false
   
constant force FORCE_PLAYING= CreateForce()
   
string array PlayerUtils__Name
string array PlayerUtils__Hex
string array PlayerUtils__OriginalHex
playercolor array PlayerUtils__CurrentColor
//endglobals from PlayerUtils
//globals from PreventSave:
constant boolean LIBRARY_PreventSave=true
boolean GameAllowSave= false
dialog PreventSave__D= DialogCreate()
timer PreventSave__T= CreateTimer()
player PreventSave__p
//endglobals from PreventSave
//globals from RegisterSpell:
constant boolean LIBRARY_RegisterSpell=true
//endglobals from RegisterSpell
//globals from Sector:
constant boolean LIBRARY_Sector=true
//endglobals from Sector
//globals from String:
constant boolean LIBRARY_String=true
//endglobals from String
//globals from Table:
constant boolean LIBRARY_Table=true
integer Table__less= 0
integer Table__more= 8190
    //Configure it if you use more than 8190 "key" variables in your map (this will never happen though).
   
hashtable Table__ht= InitHashtable()
constant integer Table__sizeK=2
constant integer Table__listK=3
//endglobals from Table
//globals from ThorlarSpaceships:
constant boolean LIBRARY_ThorlarSpaceships=true
//endglobals from ThorlarSpaceships
//globals from TimedAbility:
constant boolean LIBRARY_TimedAbility=true
constant boolean TimedAbility__DEBUG= true
constant real TimedAbility__INTERVAL= 0.10
integer TimedAbility__maxId= 0
unit array TimedAbility__instTarget
integer array TimedAbility__instAbilityId
real array TimedAbility__instDuration
boolean array TimedAbility__instRemoveWhenUnitDies
integer array TimedAbility__instBuffId
real array TimedAbility__instBuffCheckDelay
integer array TimedAbility__instCounter
boolean array TimedAbility__instBuffSet
effect array TimedAbility__instEffect
integer array TimedAbility__externalAbiLevel
timer TimedAbility__t= CreateTimer()
//endglobals from TimedAbility
//globals from UnitIndexerGUI:
constant boolean LIBRARY_UnitIndexerGUI=true
trigger UnitIndexerGUI__index= null
trigger UnitIndexerGUI__deindex= null
trigger UnitIndexerGUI__init= null
trigger UnitIndexerGUI__tempTrig
//endglobals from UnitIndexerGUI
//globals from WithinDistance:
constant boolean LIBRARY_WithinDistance=true
//endglobals from WithinDistance
//globals from WorldBounds:
constant boolean LIBRARY_WorldBounds=true
//endglobals from WorldBounds
//globals from Alloc:
constant boolean LIBRARY_Alloc=true
constant integer Alloc__stack=4
//endglobals from Alloc
//globals from AntiTK:
constant boolean LIBRARY_AntiTK=true
//endglobals from AntiTK
//globals from AutoFly:
constant boolean LIBRARY_AutoFly=true
//endglobals from AutoFly
//globals from DamageAreaForPlayer:
constant boolean LIBRARY_DamageAreaForPlayer=true
//endglobals from DamageAreaForPlayer
//globals from DummyRecycler:
constant boolean LIBRARY_DummyRecycler=true
        //The rawcode of the Dummy Unit
constant integer DummyRecycler__DUMMY_ID= 'e03P'
     
        //The owner of the Dummy Unit
constant player DummyRecycler__OWNER= Player(PLAYER_NEUTRAL_PASSIVE)
     
        //The number of indexed angle. The higher the value the:
        // - Lesser the turning time for the Dummy Units.
        // - Higher the total number of Dummy Units created at Map Initialization.
        //          Recommended Value: 10 (Max difference of 18 degrees)
constant integer DummyRecycler__ANGLES_COUNT= 10
     
        //The number of Dummy units per ANGLES_COUNT. The higher the value the:
        // - Higher the number of units that can be recycled per angle, when
        //   no more units are in queue, the system will resort to use CreateUnit.
        // - Higher the total number of Dummy Units created at Map Initialization.
        //    Recommended Value: 3 to 5 (for less overhead in Map Loading Screen)
constant integer DummyRecycler__STORED_UNIT_COUNT= 3
     
        //The maximum number of Dummy units that can exist. When the system resort
        //to using CreateUnit, the unit will be permanently added to the Dummy
        //List. To avoid spamming Dummy Units and having too much free Dummy
        //Units to allocate, the maximum number of Dummy Units is capped.
        //               Recommended Value: 80 to 120
constant integer DummyRecycler__MAX_DUMMY_COUNT= 100
     
        //When a certain angle have less than BORROW_REQUEST units in its list,
        //it will start to borrow Dummy Units from the list with the highest
        //Dummy Unit count.
        //      Recommended Value: Half of maximum STORED_UNIT_COUNT
constant integer DummyRecycler__BORROW_REQUEST= 5
     
        //It will only return a Dummy if the current dummy is close
        //to it's appropriate facing angle. This is to avoid returning
        //a Dummy which is still turning to face it's list angle.
constant real DummyRecycler__ANGLE_TOLERANCE= 10.0
     
        //An additional option to automatically hide recycled dummy units in the
        //corner of the map camera bounds
constant boolean DummyRecycler__HIDE_ON_MAP_CORNER= true
integer DummyRecycler__dummyCount= DummyRecycler__ANGLES_COUNT * DummyRecycler__STORED_UNIT_COUNT
real array DummyRecycler__angle
integer array DummyRecycler__count
integer array DummyRecycler__countHead
integer array DummyRecycler__countNext
integer array DummyRecycler__countPrev
integer array DummyRecycler__next
integer array DummyRecycler__prev
unit array DummyRecycler__dummy
integer DummyRecycler__upper
integer DummyRecycler__lower
integer DummyRecycler__lastInstance
constant real DummyRecycler__FACING_OFFSET= 180.0 / DummyRecycler__ANGLES_COUNT
//endglobals from DummyRecycler
//globals from IsUnitMoving:
constant boolean LIBRARY_IsUnitMoving=true
    //-----------------------------------------------------------------------
    // Time between coordinate scans. You should increase it if you have move-
    // ment-oriented spells/systems with slower timers.
    //
constant real IsUnitMoving__TIMEOUT= 0.03125

integer IsUnitMoving__get= 0
//endglobals from IsUnitMoving
//globals from PulsingEnergy:
constant boolean LIBRARY_PulsingEnergy=true
//endglobals from PulsingEnergy
//globals from RegisterNativeEvent:
constant boolean LIBRARY_RegisterNativeEvent=true
integer RegisterNativeEvent__eventIndex= 500
//endglobals from RegisterNativeEvent
//globals from ResourcePreloader:
constant boolean LIBRARY_ResourcePreloader=true
        
integer ResourcePreloader_PRELOAD_UNIT_TYPE_ID= 'uloc'
        
player ResourcePreloader_PRELOAD_UNIT_OWNER= Player(PLAYER_NEUTRAL_PASSIVE)
        
real ResourcePreloader_PRELOAD_UNIT_Y_BOUNDS_EXTENSION= 0.00
//endglobals from ResourcePreloader
//globals from StringIndexer:
constant boolean LIBRARY_StringIndexer=true
string array StringIndexer__strings
integer StringIndexer__count= 0
//endglobals from StringIndexer
//globals from TimerUtilsEx:
constant boolean LIBRARY_TimerUtilsEx=true
        // Use hashtable, or fast array?
constant boolean TimerUtilsEx__USE_HASH= false
        // Max Number of Timers Held in Stack
constant integer TimerUtilsEx__QUANTITY= 256
timer array TimerUtilsEx__tT
integer TimerUtilsEx__tN= 0
//endglobals from TimerUtilsEx
//globals from WRSPreDamage:
constant boolean LIBRARY_WRSPreDamage=true
//endglobals from WRSPreDamage
//globals from unitData:
constant boolean LIBRARY_unitData=true
//endglobals from unitData
//globals from IPool:
constant boolean LIBRARY_IPool=true
//endglobals from IPool
//globals from ListT:
constant boolean LIBRARY_ListT=true
//endglobals from ListT
//globals from MagneticPull:
constant boolean LIBRARY_MagneticPull=true
//endglobals from MagneticPull
//globals from MissileEffect:
constant boolean LIBRARY_MissileEffect=true
//endglobals from MissileEffect
//globals from RegisterPlayerEvent:
constant boolean LIBRARY_RegisterPlayerEvent=true
//endglobals from RegisterPlayerEvent
//globals from RegisterPlayerUnitEvent:
constant boolean LIBRARY_RegisterPlayerUnitEvent=true
//endglobals from RegisterPlayerUnitEvent
//globals from RegisterUnitEvent:
constant boolean LIBRARY_RegisterUnitEvent=true
//endglobals from RegisterUnitEvent
//globals from TimerUtils:
constant boolean LIBRARY_TimerUtils=true
//endglobals from TimerUtils
//globals from Missiles:
constant boolean LIBRARY_Missiles=true
        // The update period of the system
constant real Missiles_PERIOD= 1. / 40.
        // The max amount of Missiles processed in a PERIOD
        // You can play around with both these values to find
        // your sweet spot. If equal to 0, the system will
        // process all missiles at once every period.
constant real Missiles_SWEET_SPOT= 150
        // the avarage collision size compensation when detecting collisions
constant real Missiles__COLLISION_SIZE= 128.
        // item size used in z collision
constant real Missiles__ITEM_SIZE= 16.
        // Raw code of the dummy unit used for vision
constant integer Missiles__DUMMY= 'dumi'
        // Needed, don't touch.
location Missiles__LOC= Location(0., 0.)
//endglobals from Missiles
//globals from Missilies:
constant boolean LIBRARY_Missilies=true
integer Miss
//endglobals from Missilies
//globals from Movespeed:
constant boolean LIBRARY_Movespeed=true
integer Mover
//endglobals from Movespeed
//globals from PolarityChange:
constant boolean LIBRARY_PolarityChange=true
//endglobals from PolarityChange
//globals from Push:
constant boolean LIBRARY_Push=true
//endglobals from Push
//globals from RiseAndFall:
constant boolean LIBRARY_RiseAndFall=true
constant real RiseAndFall__INTERVAL= .03125
//endglobals from RiseAndFall
//globals from TimedHandles:
constant boolean LIBRARY_TimedHandles=true
        // If you don't want a timer to be ran each instance
        // set this to true.
constant boolean TimedHandles__SINGLE_TIMER= true
        // If you chose a single timer then this will be the speed
        // at which the timer will update
constant real TimedHandles__UPDATE_PERIOD= 0.05
//endglobals from TimedHandles
//globals from VesselUpgrade:
constant boolean LIBRARY_VesselUpgrade=true
//endglobals from VesselUpgrade
//globals from chatTest:
constant boolean LIBRARY_chatTest=true

    // do not edit -->
hashtable chatTest__Hashtable= InitHashtable()

framehandle chatTest__frameChatHistory

framehandle chatTest__frameMain
framehandle chatTest__frameMessagePanel
framehandle array chatTest__frameMessage
framehandle array chatTest__frameMessageType
framehandle array chatTest__frameMessageTimeStamp
framehandle array chatTest__frameMessageIcon
framehandle array chatTest__frameMessageText

framehandle array chatTest__frameMessageTimeStampContainer
framehandle array chatTest__frameMessageIconContainer
framehandle array chatTest__frameMessageTextContainer

integer chatTest__Iterator= 1
integer chatTest_gameTime= 0

timer array chatTest__timerMessage

integer chatTest__messageIterator= 0
integer array chatTest__syncValue
integer array chatTest__messageReceivers
integer array chatTest__messageType
integer array chatTest__messageTime
integer array chatTest__messageSender
string array chatTest__messageContent

real array chatTest__startY
real array chatTest__currentY
real array chatTest__targetY
boolean array chatTest__asyncVisibility
integer array chatTest__timeSinceStart
boolean array chatTest__frameInUse
integer array chatTest__frameAlpha
integer array chatTest__previousFrame
integer chatTest__tempPrev= 0

constant integer chatTest__DURATION_HASH= StringHash("Duration")
constant integer chatTest__FRAME_HASH= StringHash("Frame")
constant string chatTest__CHAT_SYSTEM_VERSION= "0.1"
    // <-- do not edit

    

constant string chatTest__COMMAND_SYNTAX= "-"
constant string chatTest_SYSTEM_MESSAGE_TYPE= "[|cffe6a200System|r]"
constant string chatTest__ALL_PLAYERS_MESSAGE_TYPE= "[|cff00e6e2Global|r]"
constant string chatTest__ALLIED_PLAYERS_MESSAGE_TYPE= "[|cff003ae6Allies|r]"
constant integer chatTest__MESSAGE_LENGTH_LIMIT= 164
constant string chatTest__MESSAGE_SIZE_OVERFLOW= "MESSAGE SIZE OVERFLOW [LIMIT: " + I2S(chatTest__MESSAGE_LENGTH_LIMIT) + "]"
constant integer chatTest__MAX_MESSAGES= 1000

    // Frame position (scales with resolution)
constant framepointtype chatTest__CHAT_REFPOINT= FRAMEPOINT_BOTTOMLEFT
constant real chatTest__CHAT_X= 0.0000
constant real chatTest__CHAT_Y= 0.2075

    // Text alignment
    //constant textaligntype VERTICAL_ALIGNMENT = TEXT_JUSTIFY_MIDDLE // not recommended to be changed, since each message has its own line anyway!
    //constant textaligntype HORIZONTAL_ALIGNMENT = TEXT_JUSTIFY_LEFT

constant string chatTest__CHAT_FONT= "Fonts\\BLQ55Web.ttf"
constant real chatTest__FONT_SIZE= 0.010

constant integer chatTest__MESSAGE_DURATION= 500

    

    // u can NOT leave any of these undeclared for some player, either make it "" or null
string chatTest_systemIcon= null
string array chatTest_playerColor
string array chatTest_playerIcon

//endglobals from chatTest
//globals from AttachObject:
constant boolean LIBRARY_AttachObject=true
   
    // interval between Guest updates. Do not change this or things will look choppy.
constant real AttachObject__TIMEOUT= .03125
   
    // order attack for turret mode
constant integer AttachObject__ORDER_ATTACK= 851983
   
    // If true then Guests will reset to their default fly height when they are dettached.
constant boolean AttachObject__RESET_HEIGHT= true
   
    // the speed at which they rise/fall if RESET_HEIGHT is true.
constant real AttachObject__FALL_SPEED= 300.
   
unit FilterGuest= null
trigger AttachObject__FilterTrig= CreateTrigger()

hashtable AttachObject__TurretStorage= InitHashtable()
hashtable AttachObject__HostIdStorage= InitHashtable()
hashtable AttachObject__GuestIdStorage= InitHashtable()
timer AttachObject__Clock= CreateTimer()
       
group AttachObject__GuestGroup= CreateGroup()
//endglobals from AttachObject
//globals from DeterministicEnervation:
constant boolean LIBRARY_DeterministicEnervation=true
//endglobals from DeterministicEnervation
//globals from DetonateSilvs:
constant boolean LIBRARY_DetonateSilvs=true
//endglobals from DetonateSilvs
//globals from FlashGrenade:
constant boolean LIBRARY_FlashGrenade=true
//endglobals from FlashGrenade
//globals from ForceVortex:
constant boolean LIBRARY_ForceVortex=true
//endglobals from ForceVortex
//globals from Generator:
constant boolean LIBRARY_Generator=true
//endglobals from Generator
//globals from GroupChats:
constant boolean LIBRARY_GroupChats=true
//endglobals from GroupChats
//globals from MagneticAttacks:
constant boolean LIBRARY_MagneticAttacks=true
integer SilvGroup
//endglobals from MagneticAttacks
//globals from Planet:
constant boolean LIBRARY_Planet=true
    
integer PlanetData
    
//endglobals from Planet
//globals from SharedReactions:
constant boolean LIBRARY_SharedReactions=true
integer Elements
unit sor2
unit tar2
real EDamage
//endglobals from SharedReactions
//globals from Status:
constant boolean LIBRARY_Status=true
//endglobals from Status
//globals from SwitchAbility:
constant boolean LIBRARY_SwitchAbility=true
//endglobals from SwitchAbility
//globals from WRSTaskEnd:
constant boolean LIBRARY_WRSTaskEnd=true
//endglobals from WRSTaskEnd
//globals from Acid:
constant boolean LIBRARY_Acid=true
//endglobals from Acid
//globals from ChatSystem:
constant boolean LIBRARY_ChatSystem=true
    
constant string ALIEN_MESSAGE_TYPE= "[|cff800080Aliens|r]"
constant string MUTANT_MESSAGE_TYPE= "[|cff800080Mutant|r]"
constant string DEAD_MESSAGE_TYPE= "[|cffffcc00Death|r]"
constant string ROGUE_MESSAGE_TYPE= "[|cff800080Cyborg|r]"
constant string STATUS_MESSAGE_TYPE= "|cff00FF40"
integer GroupChat
//endglobals from ChatSystem
//globals from Electro:
constant boolean LIBRARY_Electro=true
//endglobals from Electro
//globals from Fire:
constant boolean LIBRARY_Fire=true
//endglobals from Fire
//globals from Ice:
constant boolean LIBRARY_Ice=true
//endglobals from Ice
//globals from Launch:
constant boolean LIBRARY_Launch=true
group TempEnumGroup= CreateGroup()
force EForce
//endglobals from Launch
//globals from WRSTasks:
constant boolean LIBRARY_WRSTasks=true
//endglobals from WRSTasks
//globals from Water:
constant boolean LIBRARY_Water=true
//endglobals from Water
//globals from AutoArtillary:
constant boolean LIBRARY_AutoArtillary=true
//endglobals from AutoArtillary
//globals from CannonProjectile:
constant boolean LIBRARY_CannonProjectile=true
//endglobals from CannonProjectile
//globals from MagneticSaw:
constant boolean LIBRARY_MagneticSaw=true
//endglobals from MagneticSaw
//globals from PhaseBurn:
constant boolean LIBRARY_PhaseBurn=true
//endglobals from PhaseBurn
//globals from WRSMissiles:
constant boolean LIBRARY_WRSMissiles=true
//endglobals from WRSMissiles
//globals from SwitchInit:
constant boolean LIBRARY_SwitchInit=true
integer Keys
integer Os
//endglobals from SwitchInit
//globals from WRSSuits:
constant boolean LIBRARY_WRSSuits=true
//endglobals from WRSSuits
//globals from PsychoInt:
constant boolean LIBRARY_PsychoInt=true
integer PsychoUser= - 1
integer PsyP
integer PsyN
integer PsyT
integer PsyI
code suitON
code suitOFF
code suitMISS
//endglobals from PsychoInt
//globals from PsychoTimer:
constant boolean LIBRARY_PsychoTimer=true
//endglobals from PsychoTimer
    // User-defined
unit array udg_Playerhero
unit array udg_SS_Landed
unit array udg_SS_Space
location udg_TempPoint= null
integer array udg_SS_DockGroundedAt
unit array udg_SS_Harbor
location udg_HoldZone= null
location udg_TempPoint2= null
boolean udg_TempBool= false
boolean array udg_SS_LaunchCountdown
boolean array udg_All_Dock_Filled
destructable udg_TempDestruct= null
destructable array udg_All_Dock
integer udg_TempInt= 0
unit array udg_UnitAssignation
integer udg_Array_On= 0
timer udg_ST1_ResetAlarm= null
force udg_ST1_PGroup= null
boolean udg_ST1_TakingDamage= false
integer udg_TempInt2= 0
boolean udg_ST2_TakingDamage= false
timer udg_ST2_ResetAlarm= null
force udg_ST2_PGroup= null
integer udg_handlevars= 0
rect udg_TempRect= null
boolean udg_ST3_TakingDamage= false
timer udg_ST3_ResetAlarm= null
force udg_ST3_PGroup= null
boolean udg_ST4_TakingDamage= false
force udg_ST4_PGroup= null
timer udg_ST4_ResetAlarm= null
integer udg_TempUnitType= 0
unit udg_TempUnit= null
player udg_TempPlayer= null
force udg_ChooseGroup= null
boolean udg_Allow_Parasite= false
boolean udg_Allow_Mutant= false
boolean udg_Allow_Android= false
player udg_Parasite= null
player udg_Mutant= null
player udg_HiddenAndroid= null
trigger array udg_PlayerRoleTrigger
integer array udg_PlayerRole
boolean array udg_ChooseRoles_IsTaken
group udg_ChooseRoles_DummyGroup= null
integer udg_NumberofRoles= 0
location array udg_InitialSpawnPoint
integer array udg_RoleAbility
boolean array udg_MutantUpgrades
integer udg_MutantUpgradeLevel= 0
dialog udg_MutantChooseDialog= null
button array udg_MutantChooseDialogButtons
integer array udg_MutantChooseDialogButtonUnits
integer udg_MutantUpgradingTo= 0
boolean udg_MutantIsUpgrading= false
boolean array udg_Player_IsParasiteSpawn
boolean array udg_Player_IsMutantSpawn
boolean udg_ST5_TakingDamage= false
timer udg_ST5_ResetAlarm= null
force udg_ST5_PGroup= null
trigger udg_TempTrigger= null
boolean udg_TempDoorHack= false
force udg_AllPlayers= null
group udg_ChooseRoles_SpawnGroup= null
string array udg_NamePrepension
integer udg_GIT_TesterOn= 0
item udg_TempItem= null
force array udg_GIT_TesterGroup
string udg_TempString
unit udg_CountupBarTemp= null
location udg_HiddenAndroidTempPoint= null
location udg_PlanetRotatePoint= null
real udg_PlanetAngle= 0
location udg_PlanetTempPoint= null
integer udg_MutantChildInfectee= 0
boolean udg_SpawnTemp= false
real udg_TempReal= 0
timer udg_RandomEvent= null
boolean array udg_RandomEvent_On
trigger array udg_RandomEvent_Trigger
string array udg_Player_OriginalName
timer udg_LostStation_Disappear= null
timerdialog udg_LostStation_TimerWindow= null
timer udg_PirateShip_DestructionTimer= null
timerdialog udg_PirateShip_CountdownWindow= null
string array udg_NewsString
boolean array udg_Player_Spectating
trigger array udg_Spaceship_ExitTrig
rect array udg_Spaceship_EnterExit
trigger array udg_Spaceship_EnterTrig
unit array udg_Spaceship_Console
rect array udg_Spaceship_ControlRect
unit udg_TempUnit2= null
trigger array udg_Spaceship_ControlTrig
rect array udg_Spaceship_Rect
trigger array udg_Spaceship_ControlLossTrig
trigger array udg_Spaceship_Death
unit udg_TempUnit3= null
rect udg_TempRect2= null
rect udg_TempRect3= null
dialog udg_PersonnelUpgradeDialog= null
boolean array udg_Personnel_HasUpgrade
button array udg_PersonnelUpgradeDialog_Button
integer array udg_PersonnelUpgrade_Research
integer udg_TempInt3= 0
force udg_DeadGroup= null
integer array udg_Researcher_PhD
unit array udg_SS_BoardingTarget
boolean array udg_SS_IsBoarded
string array udg_OriginalName
trigger udg_ChatGroupStore= null
force udg_TempPlayerGroup= null
string array udg_arguments
string array udg_Player_DefaultChatGroup
integer udg_ParasiteChildInfectee= 0
integer udg_AlienCurrentForm= 0
unit udg_AlienForm_Alien= null
boolean udg_CountupBar_HideTempBool= false
integer array udg_DeadPlayer_Cash
unit array udg_EscapePodVendor_Harbor
player array udg_EscapePod_Owner
integer array udg_TempIntArray
boolean array udg_ParasiteUpgrades
boolean udg_ParasiteIsUpgrading= false
integer udg_ParasiteUpgradeLevel= 0
dialog udg_ParasiteChooseDialog= null
button array udg_ParasiteChooseDialogButtons
integer array udg_ParasiteChooseDialogUnit
integer udg_ParasiteUpgradingTo= 0
dialog udg_BackFromHellDialog= null
button array udg_BackFromHellDialogButtons
player array udg_BackFromHellDialog_Player
string array udg_Player_NameBeforeDead
real array udg_CTL_PosXArray
integer udg_CTL_On= 0
real array udg_CTL_PosYArray
integer array udg_CTL_UnitType
integer array udg_CTL_InventorySlot1
integer array udg_CTL_InventorySlot2
integer array udg_CTL_InventorySlot3
integer array udg_CTL_InventorySlot4
integer array udg_CTL_InventorySlot5
integer array udg_CTL_InventorySlot6
real array udg_CTL_UnitHealth
real array udg_CTL_UnitMana
real array udg_CTL_Facing
player array udg_CTL_Owner
integer array udg_Dr_RoleAbility
location array udg_CosmicShuffle
unit udg_Alien_ShopWorkaround= null
string udg_CountUpBarColor
location udg_TempPoint3= null
boolean array udg_Player_IsMasquerading
real udg_TempReal2= 0
playercolor array udg_Player_MasqueradeColor
player array udg_Player_MasqueradeTarget
rect array udg_SectorId
item array udg_TempItemArray
integer udg_DeadSnoeglays= 0
real udg_UpgradePointsMutant= 0
real udg_UpgradePointsAlien= 0
boolean array udg_Player_Blinded
boolean array udg_Player_Poison_Swaying
unit array udg_Player_PetrifiedHero
item array udg_Player_Suit
trigger udg_DamageTrig= null
integer udg_TempItemType= 0
dialog udg_DeathVoteDialog= null
button array udg_DeathVoteDialog_Buttons
integer udg_DeathType= 0
integer udg_InstantBootMode_Votes= 0
integer array udg_Player_DeadKickVotes
timer udg_SwaggerLaunchTimer= null
timerdialog udg_SwaggerLaunchTimerWindow= null
real udg_MinerthaDamageCounter= 0
force array udg_Player_VotedKickGroup
string array udg_ColorCode
boolean array udg_Player_Left
texttag udg_TempTexttag= null
dialog udg_Liquidate_AreYouSureMutant= null
button array udg_Liquidate_AreYouSureButtonMut
integer udg_Liquidate_ToLiquidateMutant= 0
dialog udg_Liquidate_AreYouSureAlien= null
button array udg_Liquidate_AreYouSureButtonAl
integer udg_Liquidate_ToLiquidateAlien= 0
real udg_MutantUpgrade_Health= 0
real array udg_EscapePod_LifeReset
boolean udg_Blackout= false
timer udg_BlackoutTimer= null
timerdialog udg_BlackoutTimerWindow= null
fogmodifier array udg_SpaceVisibility
boolean udg_GameEnd= false
real udg_MoonAngle= 0
location udg_MoonTempPoint= null
boolean array udg_Unit_IsInfected
integer array udg_Unit_InfectionType
boolean udg_Swagger_Grounded= false
unit udg_GravitationalControl_Target= null
boolean udg_Moon_TakingDamage= false
timer udg_Moon_ResetAlarm= null
force udg_Moon_PGroup= null
timer udg_MoonDamageTimer= null
effect array udg_Unit_MachinegunEffect
real array udg_Player_Masquerade_Life
unit udg_TheNullUnit= null
unit array udg_Station_Pathing
group udg_StationPathGroup= null
string udg_GameWinner
real array udg_Player_DamageTaken
timer udg_GameTimer= null
integer udg_PlanetBombardmentPool_End= 0
real udg_MinerthaDPS= 0
trigger array udg_Unit_CarrierTrigger
group udg_Parasite_EggGroup= null
boolean udg_Mutant_IsPerfection= false
boolean array udg_Player_Slugglied
unit udg_Mutant_EvolvingMass= null
unit array udg_Sector_Space
group udg_SpaceObject_CollideGroup= null
real array udg_SpaceObject_CollideRadius
rect array udg_SpaceObject_Rect
real udg_SunDamage= 0
real array udg_ForceSuit_LastAttackTime
trigger array udg_Apocalypse_Trigger
real udg_UpgradePointsAndroid= 0
boolean array udg_AndroidUpgrades
real array udg_Player_TotalTKPoints
real array udg_SpaceObject_SlugglyAssassinX
real array udg_SpaceObject_SlugglyAssassinY
real udg_Android_TKScore= 0
real udg_HiddenAndroid_TKDamageDone= 0
dialog udg_AndroidUpgradeDialog= null
button array udg_AndroidUpgradeDialogButtons
integer array udg_Android_UpgradingTo
boolean udg_Android_DialogOn= false
boolean udg_Android_Deactivated= false
integer array udg_Player_TetrabinLevel
string array udg_GIT_TesterString
integer array udg_GIT_TesterStatus
integer udg_Secret_ControlCode= 0
real array udg_Player_LastPodTime
real array udg_Unit_LastGrenadeTime
integer udg_Power_Bonus= 0
real array udg_Unit_DeathTime
integer udg_Android_Preference= 0
boolean udg_WC_Disable= false
boolean udg_Kyo_ATM_Armed= false
timerdialog udg_Kyo_ATM_CountdownWindow= null
timer udg_Kyo_ATM_WarningTimer= null
string udg_VERSION
integer udg_AndroidRemoteID= 0
boolean udg_ST8_TakingDamage= false
timer udg_ST8_ResetAlarm= null
force udg_ST8_PGroup= null
item udg_Android_MemoryCard= null
fogmodifier udg_AndroidCardVisibility= null
real array udg_Mutant_DamageToPlayer
integer array udg_ColorCodesRed
integer array udg_ColorCodesGreen
integer array udg_ColorCodesBlue
boolean udg_EngineerUsed= false
unit udg_Parasite_EvoSelector= null
unit udg_Mutant_EvoSelector= null
unit udg_Android_MemoryCardOwner= null
unit udg_TempUnit4= null
location udg_TempPoint4= null
boolean udg_ST9_TakingDamage= false
timer udg_ST9_ResetAlarm= null
force udg_ST9_PGroup= null
boolean udg_ST10_TakingDamage= false
timer udg_ST10_ResetAlarm= null
force udg_ST10_PGroup= null
integer udg_ExtraStation= 0
unit array udg_SpaceshipID_Space
boolean udg_AllowAlienTK= false
boolean udg_AllowMutantTK= false
string array udg_PacificationBotLines
boolean udg_TESTING= false
trigger udg_VendorTrigger= null
group udg_SelectorGroup= null
boolean udg_Mutant_IsRapidGestation= false
real array udg_ShieldHP
integer udg_MutantOverlordMoney= 0
timer udg_OverlordDeath_DestructionTimer= null
timerdialog udg_OverlordDeath_TimerWindow= null
boolean array udg_Unit_VendorDisabling
real array udg_Unit_VendorDisablingTime
integer udg_b= 0
string array udg_NamesTemp
boolean array udg_ColorArray
timer udg_Kyo_ATM_LightningRing= null
integer udg_MapCenterErrors= 0
real array udg_Unit_ShipEnterCooldown
integer array udg_ForcePolarity
group udg_TempUnitGroup= null
group udg_TempUnitGroup2= null
boolean udg_TempBool2= false
integer udg_DoorMalfunctionStatus= 0
integer udg_Crave_mana= 0
integer udg_SPELL_Index_Size= 0
integer array udg_SPELL_Index
integer udg_SPELL_Index_maxSize= 0
integer udg_TempIndex= 0
location udg_TempLoc= null
location udg_TempLoc2= null
unit array udg_SPELL_CASTER
unit array udg_SPELL_MISSILE
real array udg_SPELL_ANGLE
real array udg_SPELL_SFXTimer
real array udg_SPELL_SFXTimerMax
real array udg_SPELL_SPEED
real array udg_SPELL_DUR
real array udg_SPELL_Damage
integer udg_SPELL_LOOP= 0
real array udg_SPELL_DamageCaused
location udg_TempLoc3= null
location udg_Overlord_Spaceshipcomparison= null
location udg_Spaceship_Overlordcomparison= null
group udg_DMgroup= null
real udg_Manadrained= 0
real udg_Manacurrent1= 0
real udg_Manacurrent2= 0
integer udg_TP_Fail= 0
boolean udg_Extradimensional_spawn= false
unit udg_Alodimensional_Being= null
unit udg_Water_Shield_Caster= null
real udg_Water_Shield_Number= 0
timer udg_WarpTimer= null
timerdialog udg_Warp_Timer_Window= null
location udg_Warp_Effect= null
integer udg_Warp7= 0
timer udg_Mirror_Timer= null
group udg_Mirror_Arenagroup= null
group udg_Mirror_Hostilegroup= null
group udg_AI_group= null
boolean udg_Masq_evolved= false
boolean udg_Warp_enabled= false
boolean udg_Mirror_Enabled= false
boolean udg_Defunct_Dead= false
boolean udg_ace_Existence= false
real array udg_HP_Comparison
integer udg_HP_Index= 0
integer udg_TPareafail= 0
integer udg_masqint= 0
timer udg_Temptimer= null
unit udg_Extraterrestial_unit= null
force udg_Warp_PG= null
timer udg_MasqTimer= null
integer udg_Masqtimesint= 0
group udg_mutalien_bugfix= null
timer array udg_GuardInvigorationExpiration
unit array udg_GuardInvigorationSelf
unit array udg_GuardInvigorationAlly
group array udg_ExplosiveBarrelGroup
location udg_TeleportBombMirrorExitPoint= null
boolean udg_EldritchBeastExists= false
group udg_AnomalyUnitGroup= null
boolean udg_AnomalyWarpalHasSpawned= false
boolean udg_IsNiffyLockdownActive= false
unit array udg_MasqueradedShop
integer udg_CameraDistanceTemp= 0
integer array udg_CameraDistanceAuto
boolean udg_IllusionSuitBoolean= false
timer udg_IllusionSuitTimer= null
group udg_AshenMarineGroup= null
timer udg_AshenMarineFadeTimer= null
integer array udg_SnoeglayBonus
effect udg_Mirror_EntranceVisual= null
group udg_Mirror_KillExitGroup= null
location udg_StalkerAttackLocation= null
timer udg_StalkerAttackTimer= null
location udg_StalkerUnitLocation= null
unit udg_StalkerUnit= null
unit array udg_SpaceshipGround
unit array udg_SpaceshipSpace
rect array udg_SpaceshipRect
boolean array udg_PlayerDebugMultiplayerToggled
dialog udg_RepickAlienDialog= null
dialog udg_RepickMutantDialog= null
button array udg_RepickAlienDialogButton
button array udg_RepickMutantDialogButton
group udg_SpaceAI_FocusTargets= null
group udg_SpaceAI_USIFleet= null
timer udg_SpaceAI_Timer= null
boolean udg_SpaceAI_PirateCaptainAlive= false
player udg_DeadPhoenixPlayer= null
timer udg_DoorMalfunctionTimer= null
boolean udg_RepickAlienDialogClicked= false
boolean udg_RepickMutantDialogClicked= false
boolean udg_GargoyleSekritFlag= false
player udg_GargoyleSekritPlayer= null
timer udg_GargoyleSekritTimer= null
boolean udg_RepickDialogToggled= false
force udg_AshenMarinePlayerGroup= null
timer udg_AshenMarineAllianceTimer= null
player udg_RogueAndroid= null
unit array udg_RogueAndroidChippedCorpses
unit array udg_RogueAndroidChips
timer udg_RogueAndroidPlantChipTimer= null
boolean udg_RogueAndroidChipConsumption= false
unit udg_RogueAndroidEvolvingCorpse= null
effect udg_RogueAndroidEvolveVisualEffect= null
timer udg_RogueAndroidEvolveTimer= null
integer udg_RogueAndroidEvolveTick= 0
integer array udg_SuitSkillsQ
integer array udg_SuitSkillsW
boolean udg_Allow_RogueAndroid= false
boolean udg_RepickRogueDialogClicked= false
dialog udg_RepickRogueDialog= null
button array udg_RepickRogueDialogButton
integer array udg_SuitSkillsE
integer array udg_SuitSkillsR
boolean array udg_Player_IsRogueAndroidSpawn
boolean udg_RogueAndroidStoleTimeLoop= false
boolean udg_RogueAndroidStoleBackFromHell= false
boolean udg_RogueAndroidIsUpgrading= false
boolean udg_AllowRogueAndroidTK= false
dialog udg_Liquidate_AreYouSureRogue= null
button array udg_Liquidate_AreYouSureButtonRog
integer udg_Liquidate_ToLiquidateRogue= 0
integer array udg_RogueAndroidAbsorbedSkills
timer udg_SilentVoidAll_Timer= null
string array udg_SilentVoid_String
timer udg_SilentVoidEnd_Timer= null
integer udg_RogueAndroidSpeedLevel= 0
force udg_TempRoleGroup= null
real udg_PreDamageEvent= 0
real udg_ArmorDamageEvent= 0
real udg_ZeroDamageEvent= 0
real udg_LethalDamageEvent= 0
real udg_OnDamageEvent= 0
real udg_AfterDamageEvent= 0
real udg_SourceDamageEvent= 0
real udg_AOEDamageEvent= 0
real udg_DamageModifierEvent= 0
real udg_DamageEvent= 0
boolean udg_RemoveDamageEvent= false
boolean udg_DamageEventOverride= false
unit udg_DamageEventSource= null
unit udg_DamageEventTarget= null
real udg_DamageEventPrevAmt= 0
unit udg_AOEDamageSource= null
unit udg_EnhancedDamageTarget= null
integer udg_DamageEventLevel= 0
integer udg_DamageEventAOE= 0
group udg_DamageEventAOEGroup= null
real udg_DamageScalingWC3= 0
real udg_DamageScalingUser= 0
boolean udg_IsDamageAttack= false
boolean udg_IsDamageMelee= false
boolean udg_IsDamageRanged= false
boolean udg_IsDamageSpell= false
boolean udg_IsDamageCode= false
real udg_DamageEventAmount= 0
real udg_DamageEventArmorPierced= 0
real udg_LethalDamageHP= 0
integer udg_DamageEventAttackT= 0
integer udg_DamageEventDamageT= 0
integer udg_DamageEventArmorT= 0
integer udg_DamageEventDefenseT= 0
integer udg_DamageEventWeaponT= 0
integer udg_DamageEventType= 0
boolean udg_NextDamageIsAttack= false
boolean udg_NextDamageIsRanged= false
boolean udg_NextDamageIsMelee= false
integer udg_NextDamageType= 0
integer udg_NextDamageWeaponT= 0
unit udg_DamageFilterSource= null
unit udg_DamageFilterTarget= null
integer udg_DamageFilterAttackT= 0
integer udg_DamageFilterDamageT= 0
integer udg_DamageFilterSourceT= 0
integer udg_DamageFilterTargetT= 0
integer udg_DamageFilterSourceB= 0
integer udg_DamageFilterTargetB= 0
integer udg_DamageFilterType= 0
real udg_DamageFilterMinAmount= 0
real udg_DamageFilterRunChance= 0
real udg_DamageFilterFailChance= 0
integer udg_DamageFilterSourceA= 0
integer udg_DamageFilterTargetA= 0
integer udg_DamageFilterTargetI= 0
integer udg_DamageFilterSourceI= 0
integer udg_DamageFilterSourceC= 0
integer udg_DamageFilterTargetC= 0
integer udg_UNIT_CLASS_MAGIC_IMMUNE= 0
integer udg_UNIT_CLASS_ETHEREAL= 0
integer udg_UNIT_CLASS_RESISTANT= 0
integer udg_UNIT_CLASS_SLEEPING= 0
integer udg_UNIT_CLASS_POLYMORPHED= 0
integer udg_UNIT_CLASS_POISONED= 0
integer udg_UNIT_CLASS_TAUREN= 0
integer udg_UNIT_CLASS_ANCIENT= 0
integer udg_UNIT_CLASS_TOWNHALL= 0
integer udg_UNIT_CLASS_SAPPER= 0
integer udg_UNIT_CLASS_PEON= 0
integer udg_UNIT_CLASS_MECHANICAL= 0
integer udg_UNIT_CLASS_UNDEAD= 0
integer udg_UNIT_CLASS_SNARED= 0
integer udg_UNIT_CLASS_PLAGUED= 0
integer udg_UNIT_CLASS_STUNNED= 0
integer udg_UNIT_CLASS_SUMMONED= 0
integer udg_UNIT_CLASS_GIANT= 0
integer udg_UNIT_CLASS_RANGED= 0
integer udg_UNIT_CLASS_MELEE= 0
integer udg_UNIT_CLASS_ATTACKS_GROUND= 0
integer udg_UNIT_CLASS_ATTACKS_FLYING= 0
integer udg_UNIT_CLASS_GROUND= 0
integer udg_UNIT_CLASS_FLYING= 0
integer udg_UNIT_CLASS_STRUCTURE= 0
integer udg_UNIT_CLASS_DEAD= 0
integer udg_UNIT_CLASS_HERO= 0
integer udg_ARMOR_TYPE_NONE= 0
integer udg_ARMOR_TYPE_FLESH= 0
integer udg_ARMOR_TYPE_METAL= 0
integer udg_ARMOR_TYPE_WOOD= 0
integer udg_ARMOR_TYPE_ETHEREAL= 0
integer udg_ARMOR_TYPE_STONE= 0
string array udg_ArmorTypeDebugStr
attacktype array udg_CONVERTED_ATTACK_TYPE
integer udg_ATTACK_TYPE_SPELLS= 0
integer udg_ATTACK_TYPE_NORMAL= 0
integer udg_ATTACK_TYPE_PIERCE= 0
integer udg_ATTACK_TYPE_SIEGE= 0
integer udg_ATTACK_TYPE_MAGIC= 0
integer udg_ATTACK_TYPE_CHAOS= 0
integer udg_ATTACK_TYPE_HERO= 0
string array udg_AttackTypeDebugStr
integer udg_DamageTypeBlocked= 0
integer udg_DamageTypeCriticalStrike= 0
integer udg_DamageTypeCode= 0
integer udg_DamageTypeExplosive= 0
integer udg_DamageTypeHeal= 0
integer udg_DamageTypePure= 0
integer udg_DamageTypePureExplosive= 0
integer udg_DamageTypeReduced= 0
damagetype array udg_CONVERTED_DAMAGE_TYPE
integer udg_DAMAGE_TYPE_UNKNOWN= 0
integer udg_DAMAGE_TYPE_NORMAL= 0
integer udg_DAMAGE_TYPE_ENHANCED= 0
integer udg_DAMAGE_TYPE_FIRE= 0
integer udg_DAMAGE_TYPE_COLD= 0
integer udg_DAMAGE_TYPE_LIGHTNING= 0
integer udg_DAMAGE_TYPE_POISON= 0
integer udg_DAMAGE_TYPE_DISEASE= 0
integer udg_DAMAGE_TYPE_DIVINE= 0
integer udg_DAMAGE_TYPE_MAGIC= 0
integer udg_DAMAGE_TYPE_SONIC= 0
integer udg_DAMAGE_TYPE_ACID= 0
integer udg_DAMAGE_TYPE_FORCE= 0
integer udg_DAMAGE_TYPE_DEATH= 0
integer udg_DAMAGE_TYPE_MIND= 0
integer udg_DAMAGE_TYPE_PLANT= 0
integer udg_DAMAGE_TYPE_DEFENSIVE= 0
integer udg_DAMAGE_TYPE_DEMOLITION= 0
integer udg_DAMAGE_TYPE_SLOW_POISON= 0
integer udg_DAMAGE_TYPE_SPIRIT_LINK= 0
integer udg_DAMAGE_TYPE_SHADOW_STRIKE= 0
integer udg_DAMAGE_TYPE_UNIVERSAL= 0
string array udg_DamageTypeDebugStr
integer udg_DEFENSE_TYPE_LIGHT= 0
integer udg_DEFENSE_TYPE_MEDIUM= 0
integer udg_DEFENSE_TYPE_HEAVY= 0
integer udg_DEFENSE_TYPE_FORTIFIED= 0
integer udg_DEFENSE_TYPE_NORMAL= 0
integer udg_DEFENSE_TYPE_HERO= 0
integer udg_DEFENSE_TYPE_DIVINE= 0
integer udg_DEFENSE_TYPE_UNARMORED= 0
string array udg_DefenseTypeDebugStr
string array udg_WeaponTypeDebugStr
integer udg_WEAPON_TYPE_NONE= 0
integer udg_WEAPON_TYPE_ML_CHOP= 0
integer udg_WEAPON_TYPE_MM_CHOP= 0
integer udg_WEAPON_TYPE_MH_CHOP= 0
integer udg_WEAPON_TYPE_ML_SLICE= 0
integer udg_WEAPON_TYPE_MM_SLICE= 0
integer udg_WEAPON_TYPE_MH_SLICE= 0
integer udg_WEAPON_TYPE_MM_BASH= 0
integer udg_WEAPON_TYPE_MH_BASH= 0
integer udg_WEAPON_TYPE_MM_STAB= 0
integer udg_WEAPON_TYPE_MH_STAB= 0
integer udg_WEAPON_TYPE_WL_SLICE= 0
integer udg_WEAPON_TYPE_WM_SLICE= 0
integer udg_WEAPON_TYPE_WH_SLICE= 0
integer udg_WEAPON_TYPE_WL_BASH= 0
integer udg_WEAPON_TYPE_WM_BASH= 0
integer udg_WEAPON_TYPE_WH_BASH= 0
integer udg_WEAPON_TYPE_WL_STAB= 0
integer udg_WEAPON_TYPE_WM_STAB= 0
integer udg_WEAPON_TYPE_CL_SLICE= 0
integer udg_WEAPON_TYPE_CM_SLICE= 0
integer udg_WEAPON_TYPE_CH_SLICE= 0
integer udg_WEAPON_TYPE_AM_CHOP= 0
integer udg_WEAPON_TYPE_RH_BASH= 0
integer udg_DetectRemoveAbility= 0
integer udg_DetectTransformAbility= 0
real udg_WorldMaxX= 0
real udg_WorldMaxY= 0
unit array udg_CargoTransportUnit
group array udg_CargoTransportGroup
integer udg_UDexMax= 0
integer array udg_CheckDeathList
integer udg_UDexLastRecycled= 0
integer array udg_UDexPrev
integer array udg_UDexNext
integer udg_UDex= 0
unit array udg_UDexUnits
unit array udg_SummonerOfUnit
timer udg_CheckDeathTimer= null
real udg_UnitIndexEvent= 0
real udg_CargoEvent= 0
real udg_DeathEvent= 0
real udg_UnitTypeEvent= 0
boolean array udg_IsUnitAlive
boolean array udg_IsUnitBeingUnloaded
boolean array udg_IsUnitNew
boolean array udg_IsUnitReincarnating
boolean array udg_IsUnitRemoved
boolean udg_UnitIndexerEnabled= false
unit array udg_KillerOfUnit
integer array udg_UnitTypeOf
boolean array udg_CheckDeathInList
boolean array udg_IsUnitPreplaced
boolean array udg_IsUnitTransforming
boolean array udg_UnitInAction
real udg_UnitInActionEvent= 0
real array udg_UnitSpeedX
real udg_K2DTimeout= 0
integer udg_Knockback2DRobustPathing= 0
real udg_Knockback2DDefaultFriction= 0
real udg_Knockback2DFriction= 0
boolean udg_Knockback2DDefaultBounce= false
boolean udg_Knockback2DBounces= false
boolean udg_Knockback2DDefaultPause= false
boolean udg_Knockback2DPause= false
boolean udg_Knockback2DDefaultKillTrees= false
boolean udg_Knockback2DKillTrees= false
real udg_Knockback2DDefaultDestRadius= 0
real udg_Knockback2DDestRadius= 0
string udg_Knockback2DTreeOrDebris
real udg_Knockback2DDefaultGravity= 0
real udg_Knockback2DGravity= 0
string udg_Knockback2DDefaultFX
string udg_Knockback2DLoopFX
real udg_Knockback2DDefaultFXRate= 0
real udg_Knockback2DFXRate= 0
location udg_CenterPoint= null
real udg_K2DX= 0
real udg_K2DY= 0
item udg_K2DItem= null
unit udg_K2DDebrisKiller= null
real udg_Radians_Turn= 0
real udg_Radians_QuarterTurn= 0
real udg_Radians_QuarterPi= 0
rect udg_K2DRegion= null
real udg_K2DMaxX= 0
real udg_K2DMaxY= 0
real udg_K2DMinX= 0
real udg_K2DMinY= 0
real udg_K2DMaxDestRadius= 0
boolean udg_K2DItemsFound= false
boolean udg_K2DItemOffset= false
boolean array udg_IsUnitBeingKnockedBack
integer array udg_K2DPrev
integer array udg_K2DNext
timer udg_K2DTimer= null
unit udg_Knockback2DUnit= null
real array udg_K2DHeight
boolean array udg_K2DFreeze
trigger array udg_K2DImpact
boolean array udg_K2DOverride
unit array udg_K2DSource
real array udg_K2DAngle
real udg_Knockback2DAngle= 0
real udg_Knockback2DDistance= 0
real array udg_K2DDistanceLeft
real udg_Knockback2DTime= 0
real array udg_K2DTimeLeft
boolean udg_Knockback2DOverride= false
real udg_Knockback2DHeight= 0
real array udg_K2DHeightThreshold
real array udg_K2DLastX
real array udg_K2DLastY
real array udg_K2DCos
real array udg_K2DSin
boolean array udg_K2DFlying
integer array udg_K2DRadius
real array udg_K2DCosH
real array udg_K2DSinH
real array udg_K2DCosD1
real array udg_K2DSinD1
real array udg_K2DCosD2
real array udg_K2DSinD2
real array udg_K2DFriction
real array udg_K2DVelocity
boolean array udg_K2DKillTrees
real array udg_K2DDestRadius
boolean array udg_K2DAmphibious
boolean udg_Knockback2DAmphibious= false
boolean array udg_K2DBounce
real array udg_K2DCollision
real udg_Knockback2DCollision= 0
string array udg_K2DFXModel
real array udg_K2DFXRate
real array udg_K2DFXTimeLeft
trigger udg_Knockback2DOnImpact= null
boolean array udg_K2DPause
boolean array udg_K2DSimple
boolean udg_Knockback2DSimple= false
unit udg_Knockback2DSource= null
boolean array udg_K2DUnbiasedCollision
boolean udg_Knockback2DUnbiasedCollision= false
boolean array udg_Tauren_WarStomp
boolean array udg_Tauren_Shockwave
integer udg_LoopInt= 0
integer udg_Spell__DummyType= 0
player udg_Spell__DummyOwner= null
real udg_Spell__Interval= 0
boolean udg_Spell__Filter_AllowEnemy= false
boolean udg_Spell__Filter_AllowLiving= false
boolean udg_Spell__Filter_AllowHero= false
boolean udg_Spell__Filter_AllowNonHero= false
boolean udg_Spell__Filter_AllowAlly= false
boolean udg_Spell__Filter_AllowDead= false
boolean udg_Spell__Filter_AllowFlying= false
boolean udg_Spell__Filter_AllowMechanical= false
boolean udg_Spell__Filter_AllowStructure= false
boolean udg_Spell__Filter_AllowMagicImmune= false
boolean udg_Spell__WakeTargets= false
real udg_Spell__LevelMultiplier= 0
integer array udg_Spell_i_Level
integer udg_Spell__Level= 0
player udg_Spell__CasterOwner= null
real udg_Spell__Time= 0
real array udg_Spell_i_Time
real array udg_Spell_i_TargetY
real array udg_Spell_i_TargetX
location udg_Spell__CastPoint= null
location udg_Spell__TargetPoint= null
unit udg_Spell__Caster= null
unit udg_Spell__Target= null
unit array udg_Spell_i_Target
unit array udg_Spell_i_Caster
group array udg_Spell_i_TargetGroup
group udg_Spell__TargetGroup= null
boolean udg_Spell__Running= false
boolean udg_Spell__UseTargetGroup= false
boolean udg_Spell__Completed= false
timer udg_Spell_i_Timer= null
boolean array udg_Spell_i_UseTG
boolean array udg_Spell_i_Completed
integer array udg_Spell_i_EventType
boolean array udg_Spell_i_Linked
trigger udg_Spell__Trigger_OnLoop= null
hashtable udg_Spell__Hash= null
trigger array udg_Spell_i_OnLoopStack
trigger udg_Spell__Trigger_OnFinish= null
integer udg_Spell__Index= 0
trigger array udg_Spell_i_OnFinishStack
trigger udg_Spell__Trigger_OnEffect= null
trigger array udg_Spell_i_OnEffectStack
trigger udg_Spell__Trigger_OnChannel= null
trigger array udg_Spell_i_OnChannelStack
trigger udg_Spell__Trigger_OnCast= null
integer udg_Spell_i_Recycle= 0
trigger array udg_Spell_i_OnCastStack
integer udg_Spell_i_Instances= 0
integer udg_Spell_i_StackN= 0
integer array udg_Spell_i_StackRef
integer array udg_Spell_i_Stack
integer array udg_Spell_i_RecycleList
integer array udg_Spell_i_Head
unit udg_Spell_i_PreloadDummy= null
integer udg_Spell__Ability= 0
integer array udg_Spell_i_Abil
group udg_Spell__InRangeGroup= null
real udg_Spell__InRange= 0
location udg_Spell__InRangePoint= null
boolean array udg_Spell_i_AllowAlly
boolean array udg_Spell_i_AllowDead
boolean array udg_Spell_i_AllowEnemy
boolean array udg_Spell_i_AllowFlying
boolean array udg_Spell_i_AllowHero
boolean array udg_Spell_i_AllowMagicImmune
boolean array udg_Spell_i_AllowMechanical
boolean array udg_Spell_i_AllowNonHero
boolean array udg_Spell_i_AllowStructure
boolean array udg_Spell_i_AllowLiving
boolean udg_Spell__Channeling= false
boolean array udg_Spell_i_Channeling
integer udg_Spell_i_GroupN= 0
group array udg_Spell_i_GroupStack
integer udg_Spell__InRangeCount= 0
unit array udg_Spell__InRangeUnits
real udg_Spell__Duration= 0
real udg_Spell__DurationPerLevel= 0
real array udg_Spell_i_Duration
real array udg_Spell_i_LastTime
boolean udg_Spell__Expired= false
boolean udg_Spell__StartDuration= false
integer udg_Spell__InRangeMax= 0
unit udg_Spell__InRangeUnit= null
trigger udg_Spell__Trigger_InRangeFilter= null
trigger array udg_Spell_i_InRangeFilter
boolean udg_Spell__AutoAddTargets= false
boolean array udg_Spell_i_AutoAddTargets
integer udg_Spell__BuffOrder= 0
integer array udg_Spell_i_BuffOrder
integer udg_Spell__BuffAbility= 0
integer array udg_Spell_i_BuffAbil
integer array udg_Dipper_Phases

    // Generated
rect gg_rct_ST1= null
rect gg_rct_ST1Control= null
rect gg_rct_STV1= null
rect gg_rct_STV2= null
rect gg_rct_STV3= null
rect gg_rct_STV4= null
rect gg_rct_STV5= null
rect gg_rct_STV6= null
rect gg_rct_STV7= null
rect gg_rct_SS1Control= null
rect gg_rct_SS1= null
rect gg_rct_Space= null
rect gg_rct_SS1EE= null
rect gg_rct_Timeout= null
rect gg_rct_SS2= null
rect gg_rct_SS2EE= null
rect gg_rct_SS2Control= null
rect gg_rct_ST2V1= null
rect gg_rct_ST2V2= null
rect gg_rct_ST2= null
rect gg_rct_ST3Control= null
rect gg_rct_ST3V1= null
rect gg_rct_ST3V2= null
rect gg_rct_ST3V4= null
rect gg_rct_ST3V5= null
rect gg_rct_ST3V3= null
rect gg_rct_ST3= null
rect gg_rct_ST4V1= null
rect gg_rct_ST4V2= null
rect gg_rct_ST4V3= null
rect gg_rct_ST4V4= null
rect gg_rct_ST4V7= null
rect gg_rct_ST4V8= null
rect gg_rct_ST4V10= null
rect gg_rct_ST4V11= null
rect gg_rct_ST4V15= null
rect gg_rct_ST4V18= null
rect gg_rct_ST4V24= null
rect gg_rct_ST4V25= null
rect gg_rct_ST4V30= null
rect gg_rct_ST4S2= null
rect gg_rct_ST4Control= null
rect gg_rct_DD1= null
rect gg_rct_DD2= null
rect gg_rct_ST4V32= null
rect gg_rct_SS3= null
rect gg_rct_SS3Control= null
rect gg_rct_SS3EE= null
rect gg_rct_SS4= null
rect gg_rct_SS4EE= null
rect gg_rct_SS4Control= null
rect gg_rct_ST5V1= null
rect gg_rct_ST5V2= null
rect gg_rct_ST5V3= null
rect gg_rct_ST5V4= null
rect gg_rct_ST5V5= null
rect gg_rct_ST5V6= null
rect gg_rct_ST5V7= null
rect gg_rct_ST5V8= null
rect gg_rct_ST5V9= null
rect gg_rct_ST5V10= null
rect gg_rct_ST5V11= null
rect gg_rct_ST5V12= null
rect gg_rct_ST5V13= null
rect gg_rct_ST5= null
rect gg_rct_ST5Control= null
rect gg_rct_BombTeleport= null
rect gg_rct_SpaceSound= null
rect gg_rct_Planet= null
rect gg_rct_LostStation= null
rect gg_rct_LostStationAppear= null
rect gg_rct_PirateShip= null
rect gg_rct_D35= null
rect gg_rct_SS5= null
rect gg_rct_SS5EE= null
rect gg_rct_SS5Control= null
rect gg_rct_SS6= null
rect gg_rct_SS6EE= null
rect gg_rct_SS6Control= null
rect gg_rct_SS7= null
rect gg_rct_SS8= null
rect gg_rct_SS7EE= null
rect gg_rct_SS7Control= null
rect gg_rct_SS8EE= null
rect gg_rct_SS8Control= null
rect gg_rct_PersonnelUpgrade= null
rect gg_rct_SS9= null
rect gg_rct_SS9EE= null
rect gg_rct_SS9Control= null
rect gg_rct_SS10EE= null
rect gg_rct_SS10= null
rect gg_rct_SS10Control= null
rect gg_rct_SS11= null
rect gg_rct_SS11Control= null
rect gg_rct_SS11EE= null
rect gg_rct_ST4EscapePod= null
rect gg_rct_PlanetEscapePod= null
rect gg_rct_ST5EscapePod= null
rect gg_rct_ST3EscapePod= null
rect gg_rct_ST1EscapePod= null
rect gg_rct_SS12P1= null
rect gg_rct_SS12P2= null
rect gg_rct_SS12EE= null
rect gg_rct_SS12Control= null
rect gg_rct_SS12= null
rect gg_rct_PirateABEnter= null
rect gg_rct_ST4V5= null
rect gg_rct_ST4V31= null
rect gg_rct_ST4V33= null
rect gg_rct_UnvisionNiffy= null
rect gg_rct_NoOutpostRect= null
rect gg_rct_SS13= null
rect gg_rct_SS13EE= null
rect gg_rct_SS13Control= null
rect gg_rct_SwaggerLandEnter= null
rect gg_rct_SwaggerLandPos= null
rect gg_rct_SwaggerLandExit= null
rect gg_rct_MoonRect= null
rect gg_rct_MoonEscapePod= null
rect gg_rct_ST3V6= null
rect gg_rct_ST1V8= null
rect gg_rct_ST1V9= null
rect gg_rct_AndroidUpgrade= null
rect gg_rct_Fabricate= null
rect gg_rct_ST6Console= null
rect gg_rct_NiffyPowerControl= null
rect gg_rct_AssemblyControl= null
rect gg_rct_AssemblyDropoff= null
rect gg_rct_GiantAsteroidSpawn= null
rect gg_rct_ST8= null
rect gg_rct_ST8Control= null
rect gg_rct_ST8EscapePod= null
rect gg_rct_ST8EE= null
rect gg_rct_ST9= null
rect gg_rct_ST9Control= null
rect gg_rct_ST9EscapePod= null
rect gg_rct_Cage1= null
rect gg_rct_Cage2= null
rect gg_rct_Cage3= null
rect gg_rct_Cage4= null
rect gg_rct_Cage5= null
rect gg_rct_Cage6= null
rect gg_rct_ST9V1= null
rect gg_rct_ST9V2= null
rect gg_rct_ST9V3= null
rect gg_rct_ST9V4= null
rect gg_rct_ST9V5= null
rect gg_rct_ST9V6= null
rect gg_rct_ST9V7= null
rect gg_rct_ST9V8= null
rect gg_rct_FreeAnomalyRect= null
rect gg_rct_Cage_Transport= null
rect gg_rct_ST9Control2= null
rect gg_rct_ST10= null
rect gg_rct_ST10Control= null
rect gg_rct_ST10EE= null
rect gg_rct_TransportationPlatform= null
rect gg_rct_ST10V1= null
rect gg_rct_ST10EscapePod= null
rect gg_rct_MapCenter= null
rect gg_rct_OverlordRect= null
rect gg_rct_OverlordPod= null
rect gg_rct_ST11V1= null
rect gg_rct_ST11V2= null
rect gg_rct_ST11V3= null
rect gg_rct_ST11V4= null
rect gg_rct_ST11V5= null
rect gg_rct_ST11V6= null
rect gg_rct_ST11V7= null
rect gg_rct_ST11V8= null
rect gg_rct_ST11V9= null
rect gg_rct_ST11V10= null
rect gg_rct_ST11V11= null
rect gg_rct_ST11V12= null
rect gg_rct_ST11V13= null
rect gg_rct_ST11V14= null
rect gg_rct_ST11V15= null
rect gg_rct_ST11V16= null
rect gg_rct_ST11V17= null
rect gg_rct_ST11V18= null
rect gg_rct_ST11V19= null
rect gg_rct_ST11V20= null
rect gg_rct_ST11V21= null
rect gg_rct_ST11V22= null
rect gg_rct_ST11V23= null
rect gg_rct_ST11V24= null
rect gg_rct_Warp= null
rect gg_rct_Defunct_TP= null
rect gg_rct_Mirror_Arena= null
rect gg_rct_BarrelsExplodingNiffy= null
rect gg_rct_SS13RightDebug= null
rect gg_rct_SS11BottomDebug= null
rect gg_rct_SS10BottomDebug= null
rect gg_rct_SS9BottomDebug= null
rect gg_rct_SS8RightDebug= null
rect gg_rct_SS7RightDebug= null
rect gg_rct_SS5RightDebug= null
rect gg_rct_SS6RightDebug= null
rect gg_rct_SS4RightDebug= null
rect gg_rct_SS3RightDebug= null
rect gg_rct_SS2RightDebug= null
rect gg_rct_SS1RightDebug= null
rect gg_rct_SS12BottomDebug= null
rect gg_rct_Niffy_Lockdown_Start= null
rect gg_rct_MinotaurChargeDebug= null
rect gg_rct_SS1TopDebug= null
rect gg_rct_SS1LeftDebug= null
rect gg_rct_SS2BottomDebug= null
rect gg_rct_SS2LeftDebug= null
rect gg_rct_SS3TopDebug= null
rect gg_rct_SS3LeftDebug= null
rect gg_rct_SS4BottomDebug= null
rect gg_rct_SS4LeftDebug= null
rect gg_rct_SS5TopDebug= null
rect gg_rct_SS5LeftDebug= null
rect gg_rct_SS6BottomDebug= null
rect gg_rct_SS6LeftDebug= null
rect gg_rct_SS7TopDebug= null
rect gg_rct_SS7LeftDebug= null
rect gg_rct_SS8BottomDebug= null
rect gg_rct_SS8LeftDebug= null
rect gg_rct_SS9RightDebug= null
rect gg_rct_SS9TopDebug= null
rect gg_rct_SS9LeftDebug= null
rect gg_rct_SS10RightDebug= null
rect gg_rct_SS10TopDebug= null
rect gg_rct_SS10LeftDebug= null
rect gg_rct_SS11RightDebug= null
rect gg_rct_SS11TopDebug= null
rect gg_rct_SS11LeftDebug= null
rect gg_rct_SS13BottomDebug= null
rect gg_rct_SS13TopDebug= null
rect gg_rct_SS13LeftDebug= null
rect gg_rct_SS12RightDebug= null
rect gg_rct_SS12LeftDebug= null
rect gg_rct_SS12TopDebug= null
rect gg_rct_PirateShipControl= null
sound gg_snd_NightElfGlueScreenLoop1= null
sound gg_snd_UndeadGlueScreenLoop1= null
sound gg_snd_War3XMainGlueScreen= null
sound gg_snd_CreepAggroWhat1= null
sound gg_snd_NecropolisUpgrade1= null
sound gg_snd_WWII_submarine_dive_klaxon= null
sound gg_snd_RunesGlow= null
sound gg_snd_HumanDissipate1= null
sound gg_snd_MarkOfChaos= null
sound gg_snd_ThunderClapCaster= null
sound gg_snd_PeasantDeath= null
sound gg_snd_WarlockDeath1= null
sound gg_snd_AbominationDeath1= null
sound gg_snd_AbominationAlternateDeath1= null
sound gg_snd_RockGolemDeath1= null
sound gg_snd_FreakyForest4= null
sound gg_snd_PitFiendDeath1= null
sound gg_snd_BansheeDeath= null
sound gg_snd_SargerasRoar= null
sound gg_snd_FrostmourneChant1= null
sound gg_snd_AshenvaleObeliskLoop1= null
sound gg_snd_BuildingDeathLargeHuman= null
sound gg_snd_NightElfBuildingDeathSmall1= null
sound gg_snd_Poweringup= null
sound gg_snd_DarkVictory= null
sound gg_snd_SadMystery= null
sound gg_snd_DarkVictory01= null
sound gg_snd_HeroicVictory= null
sound gg_snd_EggSackDeath1= null
sound gg_snd_HumanVictory= null
sound gg_snd_PursuitTheme= null
sound gg_snd_DragonYesAttack3= null
sound gg_snd_Warning= null
sound gg_snd_MonsoonLightningHit= null
sound gg_snd_TempleOfTheDamnedWhat= null
sound gg_snd_Warning01= null
sound gg_snd_CharmTarget1= null
sound gg_snd_ScourgeGlueScreen= null
sound gg_snd_BlueFireBurstLoop= null
sound gg_snd_MarkOfChaos01= null
sound gg_snd_Devour= null
sound gg_snd_EggSackDeath101= null
sound gg_snd_GameError= null
sound gg_snd_NecropolisUpgrade101= null
sound gg_snd_Warning02= null
sound gg_snd_WayPointBling= null
sound gg_snd_BlueFireBurst= null
sound gg_snd_LightningShieldTarget= null
sound gg_snd_Lever= null
sound gg_snd_FlashBack1Second= null
sound gg_snd_BlueFireBurst01= null
sound gg_snd_ArrangedTeamInvitation= null
sound gg_snd_CityBuildingDeath1= null
sound gg_snd_MagicLariatLoop1= null
sound gg_snd_AxeMissileLaunch1= null
sound gg_snd_MeatwagonMissileHit1= null
sound gg_snd_TranquilityHealLoop1= null
sound gg_snd_SpiritLink1= null
sound gg_snd_PhoenixAttack= null
sound gg_snd_InnerFireBirth= null
sound gg_snd_EnchantedCellLoop= null
sound gg_snd_InnerFireBirth01= null
sound gg_snd_StoneBridgeRise= null
sound gg_snd_ObsidianStatueWhat2= null
sound gg_snd_ArtilleryCorpseExplodeDeath1= null
sound gg_snd_SargerasRoar02= null
sound gg_snd_RainAmbience= null
sound gg_snd_Step1= null
sound gg_snd_MetalHeavyBashMetal1= null
sound gg_snd_Hint= null
sound gg_snd_FlakCannon= null
sound gg_snd_ThunderBoltMissileDeath= null
sound gg_snd_MarkOfChaos02= null
sound gg_snd_PlaceAncestralGuardian= null
sound gg_snd_StarfallCaster1= null
sound gg_snd_ObsidianAvengerDeath1= null
sound gg_snd_TragicConfrontation= null
sound gg_snd_UndeadDissipate2= null
sound gg_snd_EntDeath1= null
trigger gg_trg_Untitled_Trigger_001= null
trigger gg_trg_Explorer_infection_Bugfix= null
trigger gg_trg_Minotaur_Charge_Bugfix= null
trigger gg_trg_Rapid_Infection_Bugfix= null
trigger gg_trg_Tetrabin_Bugfix= null
trigger gg_trg_Mutalien_bugfix_Copy= null
trigger gg_trg_AlienDeathShipControl= null
trigger gg_trg_HarbringerDeathShipControl= null
trigger gg_trg_Stalker_Range_Restriction_Attack= null
trigger gg_trg_Stalker_Range_Restriction_GroundAttack= null
trigger gg_trg_Stalker_Range_Restriction_Activation= null
trigger gg_trg_PhoenixHeight= null
trigger gg_trg_IllusionPodstart= null
trigger gg_trg_IllusionStop= null
trigger gg_trg_IllusionTimer= null
trigger gg_trg_Color_Library_and_PathingFuncs_and_Antisave= null
trigger gg_trg_W3MMD_Library= null
trigger gg_trg_UnitCustomData= null
trigger gg_trg_ArrayDat= null
trigger gg_trg_InitGUI= null
trigger gg_trg_Sound= null
trigger gg_trg_ReadTheChangelog= null
trigger gg_trg_FixVis= null
trigger gg_trg_WinOn= null
trigger gg_trg_Quests= null
trigger gg_trg_ConstPing= null
trigger gg_trg_DeathSysTwo= null
trigger gg_trg_DeathSysClick= null
trigger gg_trg_Votekick= null
trigger gg_trg_GetSectorInit= null
trigger gg_trg_MapCenterError= null
trigger gg_trg_Barrel_Coloring= null
trigger gg_trg_Init_Cinematic_Unstuck= null
trigger gg_trg_DoorSys= null
trigger gg_trg_DoorInit2= null
trigger gg_trg_Selection= null
trigger gg_trg_SelectorUpdate= null
trigger gg_trg_GenStation= null
trigger gg_trg_SelectSpace= null
trigger gg_trg_ST1mInit= null
trigger gg_trg_ST1Abilities= null
trigger gg_trg_ST1Death= null
trigger gg_trg_ST1Attack= null
trigger gg_trg_ST1AttackEnd= null
trigger gg_trg_RadarSweepSector= null
trigger gg_trg_Explorer_Locator= null
trigger gg_trg_ScanAcquireASAD= null
trigger gg_trg_ST2mInit= null
trigger gg_trg_ST2Death= null
trigger gg_trg_ST2Attack= null
trigger gg_trg_ST2AttackEnd= null
trigger gg_trg_ST3Abilities= null
trigger gg_trg_ST3mInit= null
trigger gg_trg_ST3Death= null
trigger gg_trg_ST3Attack= null
trigger gg_trg_ST3AttackEnd= null
trigger gg_trg_ST3CannonProjectile= null
trigger gg_trg_ST3Cannon= null
trigger gg_trg_AMTFire= null
trigger gg_trg_ATMAcquire= null
trigger gg_trg_ST4Abilities= null
trigger gg_trg_ST4mInit= null
trigger gg_trg_ST4Death= null
trigger gg_trg_ST4Attack= null
trigger gg_trg_ST4AttackEnd= null
trigger gg_trg_ST4DefenseDrone1= null
trigger gg_trg_ST4DefenseDrone1Loss= null
trigger gg_trg_ST4DefenseDrone2= null
trigger gg_trg_ST4DefenseDrone2Loss= null
trigger gg_trg_RepositioningDrive= null
trigger gg_trg_RepositioningDriveGo= null
trigger gg_trg_ARDAcquire= null
trigger gg_trg_ResetPowerBonus= null
trigger gg_trg_AmbientPower= null
trigger gg_trg_ExplorerPower= null
trigger gg_trg_StationPower= null
trigger gg_trg_LaboratoryPower= null
trigger gg_trg_LaboratorySpawnExperiments= null
trigger gg_trg_GITDeath= null
trigger gg_trg_Niffy_Lockdown= null
trigger gg_trg_ST5mInit= null
trigger gg_trg_ST5Death= null
trigger gg_trg_ST5Attack= null
trigger gg_trg_ST5AttackEnd= null
trigger gg_trg_ST5Abilities= null
trigger gg_trg_SwaggerTeleportToPlanet= null
trigger gg_trg_SwaggerTeleportToSwagger= null
trigger gg_trg_Autopilot= null
trigger gg_trg_ST6Init= null
trigger gg_trg_ST6Console= null
trigger gg_trg_ST6DeathNotification= null
trigger gg_trg_ST6Death= null
trigger gg_trg_ST7Init= null
trigger gg_trg_ST7Death= null
trigger gg_trg_DestroyST7= null
trigger gg_trg_ST7Control= null
trigger gg_trg_ST7ControlLoss= null
trigger gg_trg_PirateCaptainDeath= null
trigger gg_trg_ST8mInit= null
trigger gg_trg_ST8Attack= null
trigger gg_trg_ST8AttackEnd= null
trigger gg_trg_ST8Death= null
trigger gg_trg_CalipoaAttack= null
trigger gg_trg_NeurotoxinStart= null
trigger gg_trg_NeurotoxinEnd= null
trigger gg_trg_ST9Init= null
trigger gg_trg_ST9UnInit= null
trigger gg_trg_ST9Attack= null
trigger gg_trg_ST9AttackEnd= null
trigger gg_trg_ST9Death= null
trigger gg_trg_SyllusCageOpen= null
trigger gg_trg_SyllusCageCell= null
trigger gg_trg_SyllusCageCreate= null
trigger gg_trg_SyllusCageDeath= null
trigger gg_trg_ST9Cell2AnomalyFix= null
trigger gg_trg_GravitationalPull= null
trigger gg_trg_GravitationalPush= null
trigger gg_trg_ST10Init= null
trigger gg_trg_ST10UnInit= null
trigger gg_trg_ST10Attack= null
trigger gg_trg_ST10AttackEnd= null
trigger gg_trg_ST10Death= null
trigger gg_trg_ST10Abilities= null
trigger gg_trg_ST10ExplorerAid= null
trigger gg_trg_ST10ViewLast= null
trigger gg_trg_ST11Init= null
trigger gg_trg_ST11BloodEffect= null
trigger gg_trg_ST11HivesDie= null
trigger gg_trg_ST11DieNatural= null
trigger gg_trg_ST11DoomTimerExpired= null
trigger gg_trg_Overlord_Pods= null
trigger gg_trg_ViewIntestines= null
trigger gg_trg_Overlorddockbug= null
trigger gg_trg_HoldZoneMask= null
trigger gg_trg_RadarSweepPlanet= null
trigger gg_trg_PlanetmInit= null
trigger gg_trg_PlanetMovement= null
trigger gg_trg_Snoeglay_Death= null
trigger gg_trg_PlanetDeath= null
trigger gg_trg_PlanetDamage= null
trigger gg_trg_PlanetDamagePerSecond= null
trigger gg_trg_MoonmInit= null
trigger gg_trg_MoonMovement= null
trigger gg_trg_MoonDeath= null
trigger gg_trg_GravitationalControl= null
trigger gg_trg_GravitationalControlTarget= null
trigger gg_trg_GravitationalControlAngle= null
trigger gg_trg_MoonAttack= null
trigger gg_trg_MoonAttackEnd= null
trigger gg_trg_MoonShieldFailure= null
trigger gg_trg_MoonDamage= null
trigger gg_trg_AssemblyPlant= null
trigger gg_trg_CancelProductionGo= null
trigger gg_trg_ASAD= null
trigger gg_trg_ATM= null
trigger gg_trg_RUM= null
trigger gg_trg_ARD= null
trigger gg_trg_Ore= null
trigger gg_trg_Neurotoxin= null
trigger gg_trg_RUMAcquire= null
trigger gg_trg_OreAcquire= null
trigger gg_trg_NeurotoxinAcquire= null
trigger gg_trg_SunUnitInRange= null
trigger gg_trg_Sunpod_apocalypse= null
trigger gg_trg_SpaceshipFuncs= null
trigger gg_trg_SSInit= null
trigger gg_trg_SSThorlarInit= null
trigger gg_trg_SSThorlarFunctions= null
trigger gg_trg_SSInitJASS= null
trigger gg_trg_SS_Test= null
trigger gg_trg_SSGenEnter= null
trigger gg_trg_SSGenExit= null
trigger gg_trg_SSGenControl= null
trigger gg_trg_SSGenControlLoss= null
trigger gg_trg_SSGenDock= null
trigger gg_trg_SSGenDeath= null
trigger gg_trg_SSGenBoard= null
trigger gg_trg_Raptor0= null
trigger gg_trg_Raptor1= null
trigger gg_trg_Raptor2= null
trigger gg_trg_Raptor3= null
trigger gg_trg_Raptor4= null
trigger gg_trg_Raptor5= null
trigger gg_trg_Raptor6= null
trigger gg_trg_Raptor7= null
trigger gg_trg_Raptor8= null
trigger gg_trg_Hunter9= null
trigger gg_trg_Obda10= null
trigger gg_trg_Obda11= null
trigger gg_trg_Albadar12= null
trigger gg_trg_Raptor13= null
trigger gg_trg_Barrels_Explosion= null
trigger gg_trg_Gargoyle_Easter_Egg= null
trigger gg_trg_SCD_Shut_Down= null
trigger gg_trg_Alodimensional1= null
trigger gg_trg_Alodimensional_A_I= null
trigger gg_trg_Water_shield_Effect= null
trigger gg_trg_Item_drop= null
trigger gg_trg_Mirror_A_I= null
trigger gg_trg_Warp_Artificial_Intelligence= null
trigger gg_trg_The_Warp_Start= null
trigger gg_trg_The_Warp_ongoing= null
trigger gg_trg_The_Warp_ongoing_spawn= null
trigger gg_trg_The_Warp_relocation= null
trigger gg_trg_Mirror_start= null
trigger gg_trg_Mirror_relocation= null
trigger gg_trg_Mirror_un_abuse= null
trigger gg_trg_SpaceAILogicTick= null
trigger gg_trg_LifeformScan= null
trigger gg_trg_Force_Dock= null
trigger gg_trg_FocusedWave= null
trigger gg_trg_CordoningBeacon= null
trigger gg_trg_PrismRocketsAlbadar= null
trigger gg_trg_PrismRocketsEndAlbadar= null
trigger gg_trg_RotaryDodge= null
trigger gg_trg_PulseWave= null
trigger gg_trg_PrismRockets= null
trigger gg_trg_PrismRocketsEnd= null
trigger gg_trg_TacticalNuclearWarhead= null
trigger gg_trg_TacticalNuclearExplosion= null
trigger gg_trg_AshenDeath= null
trigger gg_trg_AshenDeathTimerAlliances= null
trigger gg_trg_AshenFade= null
trigger gg_trg_DuplicateMedPack= null
trigger gg_trg_DuplicateAntibodies= null
trigger gg_trg_DuplicateMedicalRegenerator= null
trigger gg_trg_Global_Infection= null
trigger gg_trg_Smash= null
trigger gg_trg_Sludge= null
trigger gg_trg_Carrier= null
trigger gg_trg_Vector= null
trigger gg_trg_RaininRocks= null
trigger gg_trg_SwarmTraining= null
trigger gg_trg_TaintedVendor= null
trigger gg_trg_TaintedVendorBuy= null
trigger gg_trg_TaintedVendorBuyCyborg= null
trigger gg_trg_RocksFallEveryoneDies= null
trigger gg_trg_Roar= null
trigger gg_trg_SpatialBurst= null
trigger gg_trg_CarrierExplode= null
trigger gg_trg_CarrierSackExplode= null
trigger gg_trg_SlyTentacles= null
trigger gg_trg_TotalInfection= null
trigger gg_trg_PanicOld= null
trigger gg_trg_Panic= null
trigger gg_trg_Fleshies= null
trigger gg_trg_Shockwave= null
trigger gg_trg_RollingThunder= null
trigger gg_trg_Charge= null
trigger gg_trg_CrabMutant= null
trigger gg_trg_GroundOverlordDoubleTraining= null
trigger gg_trg_Tripwire= null
trigger gg_trg_Blackness= null
trigger gg_trg_ProjectedExplosion= null
trigger gg_trg_ProjectedExplosionExplode= null
trigger gg_trg_Lightning_Strike= null
trigger gg_trg_ElectromagneticDisruption= null
trigger gg_trg_SpatialRelocation= null
trigger gg_trg_SpatialSwap= null
trigger gg_trg_AlienBoard= null
trigger gg_trg_Entropy= null
trigger gg_trg_Entropytimer= null
trigger gg_trg_ClosedTimeLikeLoopSavePos= null
trigger gg_trg_ClosedTimeLikeLoop= null
trigger gg_trg_Muteilate= null
trigger gg_trg_NightOfTheMasks= null
trigger gg_trg_NightOfTheMasksESC= null
trigger gg_trg_BackFromHell= null
trigger gg_trg_BackFromHellDialog= null
trigger gg_trg_BackFromHellEldritchDeath= null
trigger gg_trg_Petrify= null
trigger gg_trg_NeurotoxicPoison= null
trigger gg_trg_Manifold= null
trigger gg_trg_TemporalFlux= null
trigger gg_trg_GargoyleSekritInit= null
trigger gg_trg_GargoyleSekritTransform= null
trigger gg_trg_GargoyleSekritBombs= null
trigger gg_trg_Warpal= null
trigger gg_trg_Grenade= null
trigger gg_trg_BurstGrenade= null
trigger gg_trg_ThingyCannon= null
trigger gg_trg_VoidCannon= null
trigger gg_trg_SantaHat= null
trigger gg_trg_ConsoleRepair= null
trigger gg_trg_ElectromagneticGrenade= null
trigger gg_trg_EMGrenadeForceKill= null
trigger gg_trg_Tetrabin= null
trigger gg_trg_Snoeglay_Life_Gain= null
trigger gg_trg_Phase_Cloak= null
trigger gg_trg_WormFood= null
trigger gg_trg_Solace_Shield= null
trigger gg_trg_TrackingDevice= null
trigger gg_trg_InventoryScanner= null
trigger gg_trg_MotionSensor= null
trigger gg_trg_Wrench= null
trigger gg_trg_Rubble_Clearing_Device= null
trigger gg_trg_CaptainsKeycard= null
trigger gg_trg_JanitorsKeycard= null
trigger gg_trg_BlackHoleDevice= null
trigger gg_trg_BlackHoleExplode= null
trigger gg_trg_BlackHoleDeathExit= null
trigger gg_trg_AntiBodyPack= null
trigger gg_trg_TeleportBomb= null
trigger gg_trg_TeleportBombExplode= null
trigger gg_trg_Fusion_Bomb= null
trigger gg_trg_FusionBombExplode= null
trigger gg_trg_GIT= null
trigger gg_trg_GITResolver= null
trigger gg_trg_GITAcquire= null
trigger gg_trg_GITResults= null
trigger gg_trg_GITAddTestsToMedshops= null
trigger gg_trg_Nanovirus= null
trigger gg_trg_EnergyTransmission= null
trigger gg_trg_Deterministic_Invigoration= null
trigger gg_trg_Deterministic_Invigoration_Convert= null
trigger gg_trg_Deterministic_Invigoration_Expiration= null
trigger gg_trg_EnergyLeechCheckBegin= null
trigger gg_trg_EnergyLeechCheckEnd= null
trigger gg_trg_EnergyOfferingCheckBegin= null
trigger gg_trg_EnergyOfferingCheckEnd= null
trigger gg_trg_EnergyShift= null
trigger gg_trg_SummonMetal= null
trigger gg_trg_MagneticThrust= null
trigger gg_trg_CoreoverloadBegin= null
trigger gg_trg_Coreoverload= null
trigger gg_trg_CoreoverloadStop= null
trigger gg_trg_ChargeupBegin= null
trigger gg_trg_ChargeupFinish= null
trigger gg_trg_ChargeupStop= null
trigger gg_trg_LightningStorm= null
trigger gg_trg_ElectricDischarge= null
trigger gg_trg_HandMissile= null
trigger gg_trg_HalberdRocket= null
trigger gg_trg_KineticRush= null
trigger gg_trg_ForceSuitAttackGround= null
trigger gg_trg_RDGLimit= null
trigger gg_trg_RDGLimitHard= null
trigger gg_trg_RDGDetonate= null
trigger gg_trg_GooSpray= null
trigger gg_trg_Setup= null
trigger gg_trg_BlindingCloud= null
trigger gg_trg_KidotProjection= null
trigger gg_trg_Overheat= null
trigger gg_trg_CryoShock= null
trigger gg_trg_Cryogenesis= null
trigger gg_trg_PhaseShift= null
trigger gg_trg_Phase_Vortex= null
trigger gg_trg_MatterDrainingDevice= null
trigger gg_trg_Physics= null
trigger gg_trg_Swap= null
trigger gg_trg_DoorHack= null
trigger gg_trg_Rummage= null
trigger gg_trg_Suits= null
trigger gg_trg_SuitsDrop= null
trigger gg_trg_ForceSuitAttack= null
trigger gg_trg_PulseSuitAttack= null
trigger gg_trg_AnyDeath= null
trigger gg_trg_PlayerMurder= null
trigger gg_trg_PlayerMurderPart2= null
trigger gg_trg_WinCheck= null
trigger gg_trg_WinDelay= null
trigger gg_trg_PlayerLeaves= null
trigger gg_trg_PlayerDeathText= null
trigger gg_trg_ChatConverter= null
trigger gg_trg_EscapePodOld= null
trigger gg_trg_EscapePodDies= null
trigger gg_trg_SetTrajectory= null
trigger gg_trg_DamageSys= null
trigger gg_trg_UpgradeStatus= null
trigger gg_trg_AntiTKSys= null
trigger gg_trg_SpaceCollision= null
trigger gg_trg_SpawnVoidCannon= null
trigger gg_trg_RemindTKBad= null
trigger gg_trg_Albadar_Anti_Abuse= null
trigger gg_trg_Defunct_dead_confirm= null
trigger gg_trg_Defunct_Anti_Teleportation= null
trigger gg_trg_AntiShareControl= null
trigger gg_trg_AllSectorsTargetCheck= null
trigger gg_trg_PreventOutOfSectorAttackGround= null
trigger gg_trg_PreventOutOfSectorAttack= null
trigger gg_trg_BnetNames= null
trigger gg_trg_Rename= null
trigger gg_trg_RenameEnd= null
trigger gg_trg_Slugglyship= null
trigger gg_trg_SlugglyControl= null
trigger gg_trg_SlugglyDeath= null
trigger gg_trg_FusionBombsInit= null
trigger gg_trg_FusionBombPurchase= null
trigger gg_trg_TimeIndicator= null
trigger gg_trg_RandomEventsInit= null
trigger gg_trg_RandomEventsTimer= null
trigger gg_trg_CommissarPromotion= null
trigger gg_trg_LostStation= null
trigger gg_trg_LostStationDisappear= null
trigger gg_trg_SilentVoidInit= null
trigger gg_trg_SilentVoidAll= null
trigger gg_trg_SilentVoidEnd= null
trigger gg_trg_PirateShip= null
trigger gg_trg_Snoeglays= null
trigger gg_trg_Anomaly= null
trigger gg_trg_AnomalyDeath= null
trigger gg_trg_News= null
trigger gg_trg_PersonnelUpgrade= null
trigger gg_trg_PersonnelUpgradeEnter= null
trigger gg_trg_PersonnelUpgradeDialog= null
trigger gg_trg_DroneSwarm= null
trigger gg_trg_SolarIntensity= null
trigger gg_trg_LocalBlackout= null
trigger gg_trg_GiantAsteroid= null
trigger gg_trg_MultiEvent= null
trigger gg_trg_FakeGameEnd= null
trigger gg_trg_FakeEvent= null
trigger gg_trg_CommunicationError= null
trigger gg_trg_DoorMalfunction= null
trigger gg_trg_DoorMalfunctionEnd= null
trigger gg_trg_BlackoutEnd= null
trigger gg_trg_ApocalypseSpawn= null
trigger gg_trg_USIBattleFleet= null
trigger gg_trg_BlackHole= null
trigger gg_trg_DragIntoSun= null
trigger gg_trg_ChatSysCreate= null
trigger gg_trg_ChatGroupAdd= null
trigger gg_trg_ChatGroupRemove= null
trigger gg_trg_ChatGroupList= null
trigger gg_trg_ChatGroupBroadcast= null
trigger gg_trg_ChatGroupAlienBroadcast= null
trigger gg_trg_ChatGroupMutantBroadcast= null
trigger gg_trg_ChatGroupRogueAndroidBroadcast= null
trigger gg_trg_ChatGroupSetQuickBroadcast= null
trigger gg_trg_Status2= null
trigger gg_trg_CamCommand= null
trigger gg_trg_CamAuto= null
trigger gg_trg_RolesInit= null
trigger gg_trg_ChooseRoles= null
trigger gg_trg_Chooser= null
trigger gg_trg_Researcher= null
trigger gg_trg_CEO= null
trigger gg_trg_Commissar= null
trigger gg_trg_Engineer= null
trigger gg_trg_Pilot= null
trigger gg_trg_WarVeteran= null
trigger gg_trg_Captain= null
trigger gg_trg_Janitor= null
trigger gg_trg_Medic= null
trigger gg_trg_SecurityGuard= null
trigger gg_trg_RepickAlien= null
trigger gg_trg_RepickAlienClick0= null
trigger gg_trg_RepickAlienClick1= null
trigger gg_trg_RepickAlienChoice= null
trigger gg_trg_RepickMutant= null
trigger gg_trg_RepickMutantClick0= null
trigger gg_trg_RepickMutantClick1= null
trigger gg_trg_RepickMutantChoice= null
trigger gg_trg_RepickRogue= null
trigger gg_trg_RepickRogueClick0= null
trigger gg_trg_RepickRogueClick1= null
trigger gg_trg_RepickRogueChoice= null
trigger gg_trg_RepickDialogTimeout= null
trigger gg_trg_BadSpawns= null
trigger gg_trg_Allow= null
trigger gg_trg_Disallow= null
trigger gg_trg_NoMutantTK= null
trigger gg_trg_ListMutants= null
trigger gg_trg_LiquidateDialogAlien= null
trigger gg_trg_NoAlienTK= null
trigger gg_trg_ListAliens= null
trigger gg_trg_LiquidateDialogMutant= null
trigger gg_trg_NoCyborgTK= null
trigger gg_trg_ListCyborgs= null
trigger gg_trg_LiquidateDialogCyborg= null
trigger gg_trg_MutantUpgrade= null
trigger gg_trg_MutantDialog= null
trigger gg_trg_MutantUpgradeFinish= null
trigger gg_trg_MutantDevour= null
trigger gg_trg_MutantCannibalize= null
trigger gg_trg_PrionRemoveParasite= null
trigger gg_trg_AlienEgg= null
trigger gg_trg_AlienEggDeath= null
trigger gg_trg_AlienAdjustShop= null
trigger gg_trg_AlienForm= null
trigger gg_trg_AlienFormTransfer= null
trigger gg_trg_AlienFormSpawn= null
trigger gg_trg_HumanForm= null
trigger gg_trg_HumanFormSpawn= null
trigger gg_trg_AlienFormDies= null
trigger gg_trg_ParasiteUpgrade= null
trigger gg_trg_ParasiteDialog= null
trigger gg_trg_ParasiteUpgradeFinish= null
trigger gg_trg_ParasiteSpawnCreateSpell= null
trigger gg_trg_ParasiteRemovePrion= null
trigger gg_trg_Shutdown= null
trigger gg_trg_AndroidChat= null
trigger gg_trg_AndroidCardVision= null
trigger gg_trg_AntiacquireRemote= null
trigger gg_trg_AndroidRemote= null
trigger gg_trg_AndroidUpgrade= null
trigger gg_trg_AndroidUpgradeDialogClick= null
trigger gg_trg_AndroidRevive= null
trigger gg_trg_AndroidPacificationRevive= null
trigger gg_trg_PlantChip= null
trigger gg_trg_UnpauseRogueAndroidChip= null
trigger gg_trg_ChipRevival= null
trigger gg_trg_ChipDestruction= null
trigger gg_trg_PingChips= null
trigger gg_trg_PingNextChip= null
trigger gg_trg_SwapChips= null
trigger gg_trg_ResetAbility= null
trigger gg_trg_ShutdownRogue= null
trigger gg_trg_VesselUpgrade= null
trigger gg_trg_VesselUpgradeFinish= null
trigger gg_trg_SuitSkillDatabase= null
trigger gg_trg_LoadCapabilities= null
trigger gg_trg_InstallBiomass= null
trigger gg_trg_CompressBiomass= null
trigger gg_trg_MissileBarrage= null
trigger gg_trg_CyborgInfectionRemoveInfections= null
trigger gg_trg_Help= null
trigger gg_trg_SpawnHelp= null
trigger gg_trg_SpawnCodeGet= null
trigger gg_trg_SpawnUnit= null
trigger gg_trg_AlienEvoPoints= null
trigger gg_trg_NoWin= null
trigger gg_trg_Mine= null
trigger gg_trg_Hostile= null
trigger gg_trg_ForceRandom= null
trigger gg_trg_TestAbilities= null
trigger gg_trg_SetPlayerhero= null
trigger gg_trg_SpawnApocalypse= null
trigger gg_trg_UseItemSlot= null
trigger gg_trg_GlobalVision= null
trigger gg_trg_DebugMultiplayer= null
trigger gg_trg_Kill= null
trigger gg_trg_BecomeAlien= null
trigger gg_trg_BecomeMutant= null
trigger gg_trg_BecomeAndroid= null
trigger gg_trg_BecomeRogueAndroid= null
trigger gg_trg_BecomeHuman= null
trigger gg_trg_DEBUGQ= null
trigger gg_trg_DEBUGW= null
trigger gg_trg_AttachObject= null
trigger gg_trg_ListT= null
trigger gg_trg_RiseAndFall= null
trigger gg_trg_HowToIterateThroughLists= null
trigger gg_trg_StartAttach= null
trigger gg_trg_Spell_System_Config= null
trigger gg_trg_Spell_System= null
trigger gg_trg_Spell_System_Sample_Config= null
trigger gg_trg_Spell_System_Sample_Trigger= null
trigger gg_trg_Spell_System_Sample_Filter= null
trigger gg_trg_Spell_System_All_In_One_Template= null
trigger gg_trg_Table= null
trigger gg_trg_Unit_Event_Config= null
trigger gg_trg_Unit_Event= null
trigger gg_trg_Unit_In_Action= null
trigger gg_trg_Unit_Inaction= null
trigger gg_trg_Knockback_2D_Config= null
trigger gg_trg_Knockback_2D_Destroy= null
trigger gg_trg_Knockback_2D= null
trigger gg_trg_On_Damage= null
trigger gg_trg_Knockback_2D_System= null
trigger gg_trg_K2D_OnLoop_Template= null
trigger gg_trg_MoveSpeedXGUI= null
trigger gg_trg_MoveSpeedXGlobals= null
trigger gg_trg_TimedAbility= null
trigger gg_trg_TimedHandles= null
trigger gg_trg_TimerUtils= null
trigger gg_trg_RegisterNativeEvent= null
trigger gg_trg_RegisterPlayerUnitEvent= null
trigger gg_trg_RegisterPlayerEvent= null
trigger gg_trg_RegisterUnitEvent= null
trigger gg_trg_EventIds= null
trigger gg_trg_Damage_Engine_Config= null
trigger gg_trg_Damage_Engine= null
trigger gg_trg_MissileEffect= null
trigger gg_trg_MissileUtils= null
trigger gg_trg_DummyRecycler= null
trigger gg_trg_Missiles= null
trigger gg_trg_WorldBounds= null
trigger gg_trg_Alloc= null
trigger gg_trg_GenericReaction= null
trigger gg_trg_ForceReactions= null
trigger gg_trg_FireReactions= null
trigger gg_trg_IceReactions= null
trigger gg_trg_WaterReactions= null
trigger gg_trg_ElectroReactions= null
trigger gg_trg_Stun= null
trigger gg_trg_Chat_System_Script= null
trigger gg_trg_AutoArtillary= null
trigger gg_trg_Untitled_Trigger_002= null
unit gg_unit_h000_0013= null
unit gg_unit_h003_0018= null
unit gg_unit_h001_0016= null
unit gg_unit_h004_0023= null
unit gg_unit_h002_0020= null
unit gg_unit_h001_0002= null
unit gg_unit_h002_0021= null
unit gg_unit_h004_0019= null
unit gg_unit_h005_0281= null
unit gg_unit_h006_0026= null
unit gg_unit_h007_0027= null
unit gg_unit_h009_0029= null
unit gg_unit_h00A_0030= null
unit gg_unit_h00B_0031= null
unit gg_unit_h00B_0032= null
unit gg_unit_h02L_0205= null
unit gg_unit_h004_0213= null
unit gg_unit_h02Q_0212= null
unit gg_unit_h02S_0215= null
unit gg_unit_h02O_0207= null
unit gg_unit_h02O_0184= null
unit gg_unit_h004_0206= null
unit gg_unit_h001_0041= null
unit gg_unit_h001_0042= null
unit gg_unit_h001_0043= null
unit gg_unit_h001_0044= null
unit gg_unit_h002_0045= null
unit gg_unit_h002_0046= null
unit gg_unit_h004_0047= null
unit gg_unit_h004_0048= null
unit gg_unit_h00X_0049= null
unit gg_unit_h00Y_0050= null
unit gg_unit_h02H_0198= null
unit gg_unit_h02I_0183= null
unit gg_unit_h03T_0209= null
unit gg_unit_e012_0092= null
unit gg_unit_h002_0159= null
unit gg_unit_h002_0158= null
unit gg_unit_h02L_0202= null
unit gg_unit_h02K_0203= null
unit gg_unit_h02K_0204= null
unit gg_unit_n006_0218= null
unit gg_unit_h012_0217= null
unit gg_unit_h011_0100= null
unit gg_unit_h008_0196= null
unit gg_unit_h01A_0197= null
unit gg_unit_h019_0155= null
unit gg_unit_h019_0154= null
unit gg_unit_h02O_0151= null
unit gg_unit_h004_0221= null
unit gg_unit_h004_0199= null
unit gg_unit_h03O_0208= null
unit gg_unit_h004_0157= null
unit gg_unit_h029_0114= null
unit gg_unit_h02A_0115= null
unit gg_unit_h02B_0116= null
unit gg_unit_h02C_0124= null
unit gg_unit_h03Z_0188= null
unit gg_unit_h001_0163= null
unit gg_unit_h001_0162= null
unit gg_unit_h004_0161= null
unit gg_unit_h004_0160= null
unit gg_unit_h002_0138= null
unit gg_unit_h002_0153= null
unit gg_unit_h004_0156= null
unit gg_unit_h049_0139= null
unit gg_unit_h02O_0017= null
unit gg_unit_h02O_0257= null
unit gg_unit_h04U_0252= null
unit gg_unit_h04T_0265= null
unit gg_unit_h04R_0258= null
unit gg_unit_h004_0179= null
unit gg_unit_h03J_0180= null
unit gg_unit_e012_0074= null
unit gg_unit_h048_0143= null
unit gg_unit_h04A_0144= null
unit gg_unit_h04B_0165= null
unit gg_unit_h04E_0259= null
unit gg_unit_h02O_0262= null
unit gg_unit_h04F_0260= null
unit gg_unit_h04V_0253= null
unit gg_unit_h04I_0012= null
unit gg_unit_h04P_0266= null
unit gg_unit_h03K_0181= null
unit gg_unit_h04X_0148= null
unit gg_unit_h04X_0172= null
unit gg_unit_h04X_0173= null
unit gg_unit_u000_0150= null
destructable gg_dest_DTrx_0232= null
destructable gg_dest_DTrx_0243= null
destructable gg_dest_DTrx_0235= null
destructable gg_dest_DTrx_0257= null
destructable gg_dest_DTrx_0450= null
destructable gg_dest_DTrx_0461= null
destructable gg_dest_B000_0656= null
destructable gg_dest_DTrx_0657= null
destructable gg_dest_DTrx_0668= null
destructable gg_dest_XTmp_1429= null
destructable gg_dest_XTmp_1430= null
destructable gg_dest_B000_1445= null
destructable gg_dest_DTrx_1464= null
destructable gg_dest_DTrx_1474= null
destructable gg_dest_DTrx_1484= null
destructable gg_dest_DTrx_1494= null
destructable gg_dest_DTrx_1504= null
destructable gg_dest_DTrx_1514= null
destructable gg_dest_DTrx_1524= null
destructable gg_dest_DTrx_1534= null
destructable gg_dest_B000_1811= null
destructable gg_dest_DTrx_2156= null
destructable gg_dest_DTrx_9316= null
destructable gg_dest_DTrx_9311= null
destructable gg_dest_DTrx_9425= null
destructable gg_dest_DTrx_9308= null
destructable gg_dest_DTrx_2066= null
destructable gg_dest_DTrx_1998= null
destructable gg_dest_DTrx_1997= null
destructable gg_dest_DTrx_1996= null
destructable gg_dest_DTrx_1995= null
destructable gg_dest_DTrx_1994= null
destructable gg_dest_DTrx_1993= null
destructable gg_dest_DTrx_1992= null
destructable gg_dest_DTrx_1991= null
destructable gg_dest_DTrx_0230= null
destructable gg_dest_DTrx_7025= null
destructable gg_dest_DTrx_7024= null
destructable gg_dest_DTrx_7023= null
destructable gg_dest_DTrx_7022= null
destructable gg_dest_DTrx_7021= null
destructable gg_dest_DTrx_7020= null
destructable gg_dest_DTrx_2442= null
destructable gg_dest_DTrx_2432= null
destructable gg_dest_DTrx_2422= null
destructable gg_dest_DTrx_2412= null
destructable gg_dest_DTrx_2402= null
destructable gg_dest_DTrx_2061= null
destructable gg_dest_DTrx_6090= null
destructable gg_dest_DTrx_6101= null
destructable gg_dest_DTrx_6104= null
destructable gg_dest_DTrx_6115= null
destructable gg_dest_DTrx_3126= null
destructable gg_dest_DTrx_3131= null
destructable gg_dest_DTrx_3136= null
destructable gg_dest_DTrx_3141= null
destructable gg_dest_DTrx_0642= null
destructable gg_dest_DTrx_2150= null
destructable gg_dest_YTab_4369= null
destructable gg_dest_YTab_4370= null
destructable gg_dest_YTab_4371= null
destructable gg_dest_YTab_4372= null
destructable gg_dest_YTab_4373= null
destructable gg_dest_B009_5542= null
destructable gg_dest_B009_5540= null
destructable gg_dest_B009_5543= null
destructable gg_dest_B009_5547= null
destructable gg_dest_B009_5548= null
hashtable udg_hash= InitHashtable()
group local_GetUnitsInRectAndShips_Group
boolean SHU_Bool
integer AssemblyPlant_ProductionNumber=0
trigger AP_HashStore=CreateTrigger()
texttag AP_InfoTag=null
hashtable AP_Hash=InitHashtable()
integer SpaceshipID=0
real blackholeDebugX= 0
real blackholeDebugY= 0
    
integer debugSpamCap= 0
integer ForceUnit
integer EffectGroupCount= 0
multiboard ChatBoard
string array ChatLog
integer RowOn=1
boolean hasRevivedAsPacificationBot= false
integer playersToggled= 0
integer playersActive= 0

trigger l__library_init

//JASSHelper struct globals:
constant integer si__Ascii__Inits=1
constant integer si__TimerGroup32=2
constant integer si__DamageTrigger=3
integer s__DamageTrigger_MOD= 1
integer s__DamageTrigger_SHIELD= 4
integer s__DamageTrigger_DAMAGE= 5
integer s__DamageTrigger_ZERO= 6
integer s__DamageTrigger_AFTER= 7
integer s__DamageTrigger_LETHAL= 8
integer s__DamageTrigger_AOE= 9
integer s__DamageTrigger_count= 9
integer s__DamageTrigger_lastRegistered= 0
integer array s__DamageTrigger_trigIndexStack
integer s__DamageTrigger_eventIndex= 0
boolean array s__DamageTrigger_filters
string array s__DamageTrigger_eventStr
real array s__DamageTrigger_weight
boolean array s__DamageTrigger_usingGUI
integer array s__DamageTrigger_next
trigger array s__DamageTrigger_rootTrig
boolean array s__DamageTrigger_DamageEngine__trigFrozen
integer array s__DamageTrigger_DamageEngine__levelsDeep
boolean array s__DamageTrigger_DamageEngine__inceptionTrig
boolean array s__DamageTrigger_configured
unit array s__DamageTrigger_source
unit array s__DamageTrigger_target
integer array s__DamageTrigger_sourceType
integer array s__DamageTrigger_targetType
integer array s__DamageTrigger_sourceBuff
integer array s__DamageTrigger_targetBuff
integer array s__DamageTrigger_sourceItem
integer array s__DamageTrigger_targetItem
integer array s__DamageTrigger_sourceClass
integer array s__DamageTrigger_targetClass
real array s__DamageTrigger_damageMin
real array s__DamageTrigger_failChance
integer array s__DamageTrigger_attackType
integer array s__DamageTrigger_damageType
integer array s__DamageTrigger_userType
integer s__DamageTrigger_prev= 0
trigger array s__DamageTrigger_autoTriggers
boolexpr array s__DamageTrigger_autoFuncs
integer s__DamageTrigger_autoN= 0
constant integer si__Damage=4
unit array s__Damage_sourceUnit
unit array s__Damage_targetUnit
real array s__Damage_damage
real array s__Damage_prevAmt
attacktype array s__Damage_attackType
damagetype array s__Damage_damageType
weapontype array s__Damage_weaponType
integer array s__Damage_userType
boolean array s__Damage_isAttack
boolean array s__Damage_isCode
boolean array s__Damage_isSpell
boolean array s__Damage_isMelee
boolean array s__Damage_isRanged
integer array s__Damage_eFilter
real array s__Damage_armorPierced
integer array s__Damage_armorType
integer array s__Damage_defenseType
integer s__Damage_index= 0
integer s__Damage_damageStack= 0
integer s__Damage_prepped= 0
integer s__Damage_count= 0
integer array s__Damage_stackRef
integer array s__Damage_recursiveTrig
integer array s__Damage_prevArmorT
integer array s__Damage_prevDefenseT
boolean s__Damage_arisen= false
constant integer si__EventReg=5
integer array s__EventReg_data
constant integer si__Event__EventStack=6
integer s__Event__EventStack_top=0
integer array s__Event__EventStack_current
constant integer si__Event=7
integer si__Event_F=0
integer si__Event_I=0
integer array si__Event_V
trigger array s__Event_trig
integer array s__Event_next
integer array s__Event_prev
trigger s__Event_currentTrigger
constant integer si__GetClosestWidget__ClosestWidget=8
unit s__GetClosestWidget__ClosestWidget_unit
group s__GetClosestWidget__ClosestWidget_group= CreateGroup()
integer s__GetClosestWidget__ClosestWidget_count= 0
unit array s__GetClosestWidget__ClosestWidget_sorted
real array s__GetClosestWidget__ClosestWidget_vector
item s__GetClosestWidget__ClosestWidget_item
rect s__GetClosestWidget__ClosestWidget_area= Rect(0, 0, 0, 0)
constant integer si__MoveSpeedXGUI__MoveSpeedStruct=9
trigger s__MoveSpeedXGUI__MoveSpeedStruct_MoveSpeedXGUI__M___issued= CreateTrigger()
integer array s__MoveSpeedXGUI__MoveSpeedStruct_next
integer array s__MoveSpeedXGUI__MoveSpeedStruct_prev
boolean array s__MoveSpeedXGUI__MoveSpeedStruct_enabled
unit array s__MoveSpeedXGUI__MoveSpeedStruct_curr
real array s__MoveSpeedXGUI__MoveSpeedStruct_speed
real array s__MoveSpeedXGUI__MoveSpeedStruct_x
real array s__MoveSpeedXGUI__MoveSpeedStruct_y
real array s__MoveSpeedXGUI__MoveSpeedStruct_ox
real array s__MoveSpeedXGUI__MoveSpeedStruct_oy
constant integer si__User=10
constant integer s__User_NULL= 15
player array s__User_handle
integer array s__User_id
integer array s__User_next
integer array s__User_prev
string array s__User_originalName
boolean array s__User_isPlaying
integer s__User_first
integer s__User_last
player s__User_Local
integer s__User_LocalId
integer s__User_AmountPlaying= 0
playercolor array s__User_Color
group s__User_ENUM_GROUP= CreateGroup()
integer array s__User_PlayingPlayer
integer array s__User_PlayingPlayerIndex
constant integer si__String=11
constant integer s__String_npos= - 1
integer s__String_count= 0
integer array s__String_recycle
string array s__String_value
integer array s__String_length
constant integer si__Table__dex=12
constant integer si__Table__handles=13
constant integer si__Table__agents=14
constant integer si__Table__reals=15
constant integer si__Table__booleans=16
constant integer si__Table__strings=17
constant integer si__Table__integers=18
constant integer si__Table__players=19
constant integer si__Table__widgets=20
constant integer si__Table__destructables=21
constant integer si__Table__items=22
constant integer si__Table__units=23
constant integer si__Table__abilitys=24
constant integer si__Table__triggers=25
constant integer si__Table__forces=26
constant integer si__Table__rects=27
constant integer si__Table__boolexprs=28
constant integer si__Table__sounds=29
constant integer si__Table__effects=30
constant integer si__Table__texttags=31
constant integer si__Table__lightnings=32
constant integer si__Table__images=33
constant integer si__Table__regions=34
constant integer si__Table__fogstates=35
constant integer si__Table__fogmodifiers=36
constant integer si__Table__hashtables=37
constant integer si__Table=38
constant integer si__TableArray=39
integer s__TableArray_tempTable
integer s__TableArray_tempEnd
constant integer si__HashTable=40
constant integer si__WorldBounds=41
integer s__WorldBounds_maxX
integer s__WorldBounds_maxY
integer s__WorldBounds_minX
integer s__WorldBounds_minY
integer s__WorldBounds_centerX
integer s__WorldBounds_centerY
rect s__WorldBounds_world
region s__WorldBounds_worldRegion
real s__WorldBounds_playMaxX
real s__WorldBounds_playMaxY
real s__WorldBounds_playMinX
real s__WorldBounds_playMinY
constant integer si__AutoFly__Inits=42
constant integer si__DummyRecycler__S=43
integer s__DummyRecycler__S_tb
constant integer si__UnitMoving=44
integer s__UnitMoving_MOVE= 0
integer s__UnitMoving_STOP= 0
real array s__UnitMoving_x
real array s__UnitMoving_y
boolean array s__UnitMoving_moving
boolean array s__UnitMoving_allocated
integer array s__UnitMoving_next
integer array s__UnitMoving_prev
constant integer si__RegisterNativeEvent__NativeEvent=45
integer s__RegisterNativeEvent__NativeEvent_table
constant integer si__ResourcePreloader__S=46
integer s__ResourcePreloader__S_tb
unit s__ResourcePreloader__S_dummy
constant integer si__StringIndexer__D=47
integer s__StringIndexer__D_data
constant integer si__TimerUtilsEx__Data=48
integer array s__TimerUtilsEx__Data_data
integer s__TimerUtilsEx__Data_tb= 0
constant integer si__IPool__data=49
integer s__IPool__data_tar
integer array s__IPool__data_int
integer array s__IPool__data_locks
integer array s__IPool__data_weight
constant integer si__IPool=50
constant integer si__SubPool=51
integer array s__SubPool_iPool
integer array s__SubPool_nest
integer array s__SubPool_next
integer array s__SubPool_prev
constant integer si__IntegerListItem=52
constant integer si__IntegerList=53
integer array s__IntegerList_first
integer array s__IntegerList_last
integer array s__IntegerList_count
constant integer si__MissileEffect__Effect=54
integer array s__MissileEffect__Effect_next
integer array s__MissileEffect__Effect_prev
real array s__MissileEffect__Effect_x
real array s__MissileEffect__Effect_y
real array s__MissileEffect__Effect_z
real array s__MissileEffect__Effect_size
real array s__MissileEffect__Effect_yaw
real array s__MissileEffect__Effect_pitch
real array s__MissileEffect__Effect_roll
string array s__MissileEffect__Effect_path
effect array s__MissileEffect__Effect_effect
constant integer si__MissileEffect=55
integer si__MissileEffect_F=0
integer si__MissileEffect_I=0
integer array si__MissileEffect_V
real array s__MissileEffect_size
real array s__MissileEffect_yaw
real array s__MissileEffect_pitch
real array s__MissileEffect_roll
real array s__MissileEffect_time
integer array s__MissileEffect_transparency
integer array s__MissileEffect_animtype
integer array s__MissileEffect_playercolor
string array s__MissileEffect_path
effect array s__MissileEffect_effect
integer array s__MissileEffect_attachments
constant integer si__Missiles__MissileEvents=56
integer si__Missiles__MissileEvents_F=0
integer si__Missiles__MissileEvents_I=0
integer array si__Missiles__MissileEvents_V
integer array si__Missiles__MissileEvents_type
trigger array st__Missiles__MissileEvents_onDestroy
trigger array st__Missiles__MissileEvents_onHit
trigger array st__Missiles__MissileEvents_onMissile
trigger array st__Missiles__MissileEvents_onDestructable
trigger array st__Missiles__MissileEvents_onItem
trigger array st__Missiles__MissileEvents_onCliff
trigger array st__Missiles__MissileEvents_onTerrain
trigger array st__Missiles__MissileEvents_onTileset
trigger array st__Missiles__MissileEvents_onPeriod
trigger array st__Missiles__MissileEvents_onFinish
trigger array st__Missiles__MissileEvents_onBoundaries
trigger array st__Missiles__MissileEvents_onPause
trigger array st__Missiles__MissileEvents_onResume
trigger array st__Missiles__MissileEvents_onRemove
constant integer si__Missiles__Pool=57
integer si__Missiles__Pool_F=0
integer si__Missiles__Pool_I=0
integer array si__Missiles__Pool_V
player s__Missiles__Pool_player= Player(PLAYER_NEUTRAL_PASSIVE)
group s__Missiles__Pool_group= CreateGroup()
timer array s__Missiles__Pool_timer
unit array s__Missiles__Pool_unit
constant integer si__Missiles__Coordinates=58
integer si__Missiles__Coordinates_F=0
integer si__Missiles__Coordinates_I=0
integer array si__Missiles__Coordinates_V
real array s__Missiles__Coordinates_x
real array s__Missiles__Coordinates_y
real array s__Missiles__Coordinates_z
real array s__Missiles__Coordinates_angle
real array s__Missiles__Coordinates_distance
real array s__Missiles__Coordinates_square
real array s__Missiles__Coordinates_slope
real array s__Missiles__Coordinates_alpha
integer array s__Missiles__Coordinates_ref
constant integer si__Missiles=59
timer s__Missiles_timer= CreateTimer()
group s__Missiles_group= CreateGroup()
rect s__Missiles_rect= Rect(0., 0., 0., 0.)
hashtable s__Missiles_table= InitHashtable()
integer s__Missiles_last= 0
integer s__Missiles_temp= 0
integer s__Missiles_id= - 1
integer s__Missiles_pid= - 1
integer array s__Missiles_missiles
integer array s__Missiles_frozen
real s__Missiles_dilation= 1
integer array s__Missiles_collection
integer s__Missiles_count= - 1
real array s__Missiles_cA
real array s__Missiles_height
real array s__Missiles_open
real array s__Missiles_toZ
real array s__Missiles_time
real array s__Missiles_sight
unit array s__Missiles_dummy
integer array s__Missiles_pkey
integer array s__Missiles_index
integer array s__Missiles_impact
integer array s__Missiles_origin
integer array s__Missiles_effect
real array s__Missiles_x
real array s__Missiles_y
real array s__Missiles_z
real array s__Missiles_prevX
real array s__Missiles_prevY
real array s__Missiles_prevZ
real array s__Missiles_nextX
real array s__Missiles_nextY
real array s__Missiles_nextZ
real array s__Missiles_turn
real array s__Missiles_veloc
real array s__Missiles_travel
boolean array s__Missiles_launched
boolean array s__Missiles_allocated
boolean array s__Missiles_finished
boolean array s__Missiles_paused
integer array s__Missiles_tileset
unit array s__Missiles_source
unit array s__Missiles_target
player array s__Missiles_owner
boolean array s__Missiles_collideZ
real array s__Missiles_collision
real array s__Missiles_damage
real array s__Missiles_acceleration
integer array s__Missiles_data
integer array s__Missiles_type
boolean array s__Missiles_roll
constant integer si__MissData=60
real array s__MissData_Aoe
conditionfunc array s__MissData_func
real array s__MissData_size
real array s__MissData_dur
integer array s__MissData_abil
string array s__MissData_model
integer array s__MissData_abil2
integer array s__MissData_vis
constant integer si__Movespeed=61
integer si__Movespeed_F=0
integer si__Movespeed_I=0
integer array si__Movespeed_V
real array s__Movespeed_pb
real array s__Movespeed_fb
unit array s__Movespeed_u
real array s__Movespeed_default
timer array s__Movespeed_t
integer array s__Movespeed_head
integer array s__Movespeed_count
integer s__Movespeed_tb
constant integer si__RiseAndFall=62
integer si__RiseAndFall_F=0
integer si__RiseAndFall_I=0
integer array si__RiseAndFall_V
unit array s__RiseAndFall_u
real array s__RiseAndFall_heightStart
real array s__RiseAndFall_heightEnd
real array s__RiseAndFall_speed
real array s__RiseAndFall_progress
boolean array s__RiseAndFall_useSmoothstep
boolean array s__RiseAndFall_isAirborne
integer s__RiseAndFall_list
timer s__RiseAndFall_clock= CreateTimer()
hashtable s__RiseAndFall_instance_storage
constant integer si__effectTimed=63
integer si__effectTimed_F=0
integer si__effectTimed_I=0
integer array si__effectTimed_V
effect array s__effectTimed_effect_var
integer s__effectTimed_index= - 1
integer array s__effectTimed_instance
real s__effectTimed_REAL=TimedHandles__UPDATE_PERIOD
timer s__effectTimed_timer= CreateTimer()
real array s__effectTimed_duration
real array s__effectTimed_elapsed
constant integer si__lightningTimed=64
integer si__lightningTimed_F=0
integer si__lightningTimed_I=0
integer array si__lightningTimed_V
lightning array s__lightningTimed_lightning_var
integer s__lightningTimed_index= - 1
integer array s__lightningTimed_instance
real s__lightningTimed_REAL=TimedHandles__UPDATE_PERIOD
timer s__lightningTimed_timer= CreateTimer()
real array s__lightningTimed_duration
real array s__lightningTimed_elapsed
constant integer si__weathereffectTimed=65
integer si__weathereffectTimed_F=0
integer si__weathereffectTimed_I=0
integer array si__weathereffectTimed_V
weathereffect array s__weathereffectTimed_weathereffect_var
integer s__weathereffectTimed_index= - 1
integer array s__weathereffectTimed_instance
real s__weathereffectTimed_REAL=TimedHandles__UPDATE_PERIOD
timer s__weathereffectTimed_timer= CreateTimer()
real array s__weathereffectTimed_duration
real array s__weathereffectTimed_elapsed
constant integer si__itemTimed=66
integer si__itemTimed_F=0
integer si__itemTimed_I=0
integer array si__itemTimed_V
item array s__itemTimed_item_var
integer s__itemTimed_index= - 1
integer array s__itemTimed_instance
real s__itemTimed_REAL=TimedHandles__UPDATE_PERIOD
timer s__itemTimed_timer= CreateTimer()
real array s__itemTimed_duration
real array s__itemTimed_elapsed
constant integer si__unitTimed=67
integer si__unitTimed_F=0
integer si__unitTimed_I=0
integer array si__unitTimed_V
unit array s__unitTimed_unit_var
integer s__unitTimed_index= - 1
integer array s__unitTimed_instance
real s__unitTimed_REAL=TimedHandles__UPDATE_PERIOD
timer s__unitTimed_timer= CreateTimer()
real array s__unitTimed_duration
real array s__unitTimed_elapsed
constant integer si__ubersplatTimed=68
integer si__ubersplatTimed_F=0
integer si__ubersplatTimed_I=0
integer array si__ubersplatTimed_V
ubersplat array s__ubersplatTimed_ubersplat_var
integer s__ubersplatTimed_index= - 1
integer array s__ubersplatTimed_instance
real s__ubersplatTimed_REAL=TimedHandles__UPDATE_PERIOD
timer s__ubersplatTimed_timer= CreateTimer()
real array s__ubersplatTimed_duration
real array s__ubersplatTimed_elapsed
constant integer si__chatTest__TimedMessData=69
integer array s__chatTest__TimedMessData_pid
integer array s__chatTest__TimedMessData_messid
constant integer si__AOListItem=70
constant integer si__AOList=71
integer array s__AOList_first
integer array s__AOList_last
integer array s__AOList_count
constant integer si__AttachObject__GlobalListT=72
integer si__AttachObject__GlobalListT_F=0
integer si__AttachObject__GlobalListT_I=0
integer array si__AttachObject__GlobalListT_V
integer s__AttachObject__GlobalListT_Guests= 0
integer s__AttachObject__GlobalListT_Hosts= 0
constant integer si__GuestEx=73
integer si__GuestEx_F=0
integer si__GuestEx_I=0
integer array si__GuestEx_V
unit array s__GuestEx_host
unit array s__GuestEx_guest
effect array s__GuestEx_fx
constant integer si__AttachObject__Guest=74
integer si__AttachObject__Guest_F=0
integer si__AttachObject__Guest_I=0
integer array si__AttachObject__Guest_V
real array s__AttachObject__Guest_cooldown
real array s__AttachObject__Guest_cooldownReset
trigger array s__AttachObject__Guest_turretTrigger
boolean array s__AttachObject__Guest_dynamicFacing
boolean array s__AttachObject__Guest_updateFacing
boolean array s__AttachObject__Guest_isHidden
real array s__AttachObject__Guest_distance
real array s__AttachObject__Guest_angle
real array s__AttachObject__Guest_zOffset
real array s__AttachObject__Guest_offsetFix
real array s__AttachObject__Guest_angleRate
real array s__AttachObject__Guest_facing
real array s__AttachObject__Guest_idleAngle
boolean array s__AttachObject__Guest_staticAngle
unit array s__AttachObject__Guest_parent
unit array s__AttachObject__Guest_u
effect array s__AttachObject__Guest_fx
integer array s__AttachObject__Guest_ex
constant integer si__AttachObject__Host=75
integer si__AttachObject__Host_F=0
integer si__AttachObject__Host_I=0
integer array si__AttachObject__Host_V
real array s__AttachObject__Host_x
real array s__AttachObject__Host_y
real array s__AttachObject__Host_z
real array s__AttachObject__Host_t
real array s__AttachObject__Host_f
unit array s__AttachObject__Host_u
boolean array s__AttachObject__Host_hiddenState
integer array s__AttachObject__Host_guestList
constant integer si__EffectTimed=76
integer si__EffectTimed_F=0
integer si__EffectTimed_I=0
integer array si__EffectTimed_V
effect array s__EffectTimed_fx
real array s__EffectTimed_dur
timer s__EffectTimed_clock= CreateTimer()
integer s__EffectTimed_fxList
constant integer si__AttachObject__Init=77
integer si__AttachObject__Init_F=0
integer si__AttachObject__Init_I=0
integer array si__AttachObject__Init_V
constant integer si__FlashGrenade__Flash=78
real array s__FlashGrenade__Flash_ang
constant integer si__GenTimer=79
integer array s__GenTimer_c
unit array s__GenTimer_u
integer array s__GenTimer_s
integer array s__GenTimer_e
integer s__GenTimer_rctl32
constant integer si__Finish=80
unit array s__Finish_u
integer array s__Finish_c
real array s__Finish_x
real array s__Finish_y
integer s__Finish_rctl32
constant integer si__MinerthaTimer=81
integer array s__MinerthaTimer_c
unit array s__MinerthaTimer_u
integer array s__MinerthaTimer_bol
integer s__MinerthaTimer_rctl32
constant integer si__Generics=82
constant integer si__ShareFunc=83
integer array s__ShareFunc_c
unit array s__ShareFunc_tar
unit array s__ShareFunc_sor
integer array s__ShareFunc_e
integer array s__ShareFunc_per
integer array s__ShareFunc_b
real array s__ShareFunc_dam
real array s__ShareFunc_arm
real array s__ShareFunc_x
real array s__ShareFunc_y
integer s__ShareFunc_rctl32
constant integer si__Status__Recall=84
integer array s__Status__Recall_c
integer array s__Status__Recall_p
integer s__Status__Recall_rctl32
constant integer si__SwitchAbility__ChanKey=85
integer array s__SwitchAbility__ChanKey_c
integer array s__SwitchAbility__ChanKey_k
integer array s__SwitchAbility__ChanKey_k2
integer array s__SwitchAbility__ChanKey_p
integer s__SwitchAbility__ChanKey_rctl32
constant integer si__AcidEffect=86
constant integer si__ChatSys=87
constant integer si__ElectroEffect=88
constant integer si__FireEffect=89
constant integer si__IceEffect=90
constant integer si__Launch__Launch=91
constant integer si__WaterEffect=92
constant integer si__AutoArtillary__ArtMissile=93
constant integer si__ArtLaunch=94
unit array s__ArtLaunch_tar
unit array s__ArtLaunch_u
real array s__ArtLaunch_d
real array s__ArtLaunch_x
real array s__ArtLaunch_y
real array s__ArtLaunch_z
integer array s__ArtLaunch_c
integer s__ArtLaunch_rctl32
constant integer si__CannonProjectile__DPSTimer=95
integer array s__CannonProjectile__DPSTimer_c
unit array s__CannonProjectile__DPSTimer_tar
unit array s__CannonProjectile__DPSTimer_sor
real array s__CannonProjectile__DPSTimer_damage
effect array s__CannonProjectile__DPSTimer_e
real array s__CannonProjectile__DPSTimer_sizeE
integer s__CannonProjectile__DPSTimer_rctl32
constant integer si__CannonProjectile__Launch=96
unit array s__CannonProjectile__Launch_tar
constant integer si__MagneticSaw__Saw=97
real array s__MagneticSaw__Saw_ang
constant integer si__PhaseBurn__Phase=98
unit array s__PhaseBurn__Phase_tar
constant integer si__WRSMissData=99
integer array s__WRSMissData_c
integer array s__WRSMissData_t
constant integer si__WRSMissile=100
unit array s__WRSMissile_tar
unit array s__WRSMissile_hit
integer array s__WRSMissile_func
constant integer si__Count=101
integer array s__Count_c
constant integer si__PsychoOnInit=102
constant integer si__PsychoTime=103
integer array s__PsychoTime_c
integer array s__PsychoTime_pi
integer array s__PsychoTime_epi
integer array s__PsychoTime_r
integer array s__PsychoTime_t
conditionfunc array s__PsychoTime_m
integer array s__PsychoTime_pIndex
integer s__PsychoTime_rctl32
constant integer si__MuteTimer=104
integer array s__MuteTimer_c
integer array s__MuteTimer_pid
integer s__MuteTimer_rctl32
constant integer si__EscapePod=105
constant integer si__VesselUpgradeFinish=106
trigger st__Event_Event__destroyNode
trigger st__Table_create
trigger st__Missiles_terminate
trigger st__Missiles_reset
trigger st__Missiles_move
trigger st__Missiles_create
trigger st__GenTimer_StatMess
trigger st__Finish_EnumDestructablesInCircle
trigger st__AcidEffect_cast
trigger st__ChatSys_ChatInt
trigger st__ElectroEffect_cast
trigger st__FireEffect_cast
trigger st__IceEffect_cast
trigger st__WaterEffect_cast
trigger st__ArtLaunch_onDamage
trigger st__WRSMissData_create
trigger st__WRSMissData_destroy
trigger st__WRSMissile_GetMissileFunctionEx
trigger st__WRSMissile_ReAddAbility
trigger st__Count_create
trigger st__Count_destroy
trigger st__PsychoOnInit_InitSet
trigger st__PsychoOnInit_Init
trigger st__PsychoTime__set_index
trigger st__PsychoTime__get_pid
trigger st__PsychoTime__get_ep
trigger st__PsychoTime__set_ep
trigger st__PsychoTime__get_task
trigger st__PsychoTime__set_task
trigger st__PsychoTime__get_bool
trigger st__PsychoTime_start
trigger st__EscapePod_IntEscapePod
trigger st__VesselUpgradeFinish_Done
trigger array st___prototype9
trigger array st___prototype31
unit f__arg_unit1
unit f__arg_unit2
integer f__arg_integer1
destructable f__arg_destructable1
item f__arg_item1
real f__arg_real1
real f__arg_real2
real f__arg_real3
real f__arg_real4
real f__arg_real5
real f__arg_real6
code f__arg_code1
conditionfunc f__arg_conditionfunc1
trigger f__arg_trigger1
string f__arg_string1
limitop f__arg_limitop1
integer f__arg_this
integer f__result_integer
boolean f__result_boolean
boolexpr f__result_boolexpr

endglobals
native UnitAlive takes unit u returns boolean
    native BlzGetUnitMovementType takes unit whichUnit returns integer


//Generated method caller for VesselUpgradeFinish.Done
function sc__VesselUpgradeFinish_Done takes nothing returns nothing
    call TriggerEvaluate(st__VesselUpgradeFinish_Done)
endfunction

//Generated method caller for EscapePod.IntEscapePod
function sc__EscapePod_IntEscapePod takes nothing returns nothing
    call TriggerEvaluate(st__EscapePod_IntEscapePod)
endfunction

//Generated method caller for PsychoTime._set_index
function sc__PsychoTime__set_index takes integer this,integer i returns nothing
                  set s__PsychoTime_pIndex[this]=i
endfunction

//Generated method caller for PsychoTime._get_pid
function sc__PsychoTime__get_pid takes integer this returns integer
                  return s__PsychoTime_pi[this]
endfunction

//Generated method caller for PsychoTime._get_ep
function sc__PsychoTime__get_ep takes integer this returns integer
                 return s__PsychoTime_epi[this]
endfunction

//Generated method caller for PsychoTime._set_ep
function sc__PsychoTime__set_ep takes integer this,integer epid returns nothing
                 set s__PsychoTime_epi[this]=epid
endfunction

//Generated method caller for PsychoTime._get_task
function sc__PsychoTime__get_task takes integer this returns integer
                 return s__PsychoTime_t[this]
endfunction

//Generated method caller for PsychoTime._set_task
function sc__PsychoTime__set_task takes integer this,integer tid returns nothing
                set s__PsychoTime_t[this]=tid
endfunction

//Generated method caller for PsychoTime._get_bool
function sc__PsychoTime__get_bool takes integer this returns boolexpr
                return s__PsychoTime_m[this]
endfunction

//Generated method caller for PsychoTime.start
function sc__PsychoTime_start takes integer pid,conditionfunc mi returns integer
    set f__arg_integer1=pid
    set f__arg_conditionfunc1=mi
    call TriggerEvaluate(st__PsychoTime_start)
 return f__result_integer
endfunction

//Generated method caller for PsychoOnInit.InitSet
function sc__PsychoOnInit_InitSet takes integer pi returns nothing
    set f__arg_integer1=pi
    call TriggerEvaluate(st__PsychoOnInit_InitSet)
endfunction

//Generated method caller for PsychoOnInit.Init
function sc__PsychoOnInit_Init takes nothing returns nothing
    call TriggerEvaluate(st__PsychoOnInit_Init)
endfunction

//Generated method caller for Count.create
function sc__Count_create takes nothing returns integer
    call TriggerEvaluate(st__Count_create)
 return f__result_integer
endfunction

//Generated method caller for Count.destroy
function sc__Count_destroy takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Count_destroy)
endfunction

//Generated method caller for WRSMissData.create
function sc__WRSMissData_create takes integer tipe returns integer
    set f__arg_integer1=tipe
    call TriggerEvaluate(st__WRSMissData_create)
 return f__result_integer
endfunction

//Generated method caller for WRSMissData.destroy
function sc__WRSMissData_destroy takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__WRSMissData_destroy)
endfunction

//Generated method caller for ArtLaunch.onDamage
function sc__ArtLaunch_onDamage takes nothing returns nothing
    call TriggerEvaluate(st__ArtLaunch_onDamage)
endfunction

//Generated method caller for WaterEffect.cast
function sc__WaterEffect_cast takes nothing returns boolean
    call TriggerEvaluate(st__WaterEffect_cast)
 return f__result_boolean
endfunction

//Generated method caller for Event.Event__destroyNode
function sc__Event_Event__destroyNode takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Event_Event__destroyNode)
endfunction

//Generated allocator of Event
function s__Event__allocate takes nothing returns integer
 local integer this=si__Event_F
    if (this!=0) then
        set si__Event_F=si__Event_V[this]
    else
        set si__Event_I=si__Event_I+1
        set this=si__Event_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Event_V[this]=-1
 return this
endfunction

//Generated destructor of Event
function s__Event_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Event_V[this]!=-1) then
        return
    endif
    set si__Event_V[this]=si__Event_F
    set si__Event_F=this
endfunction

//Generated method caller for IceEffect.cast
function sc__IceEffect_cast takes nothing returns boolean
    call TriggerEvaluate(st__IceEffect_cast)
 return f__result_boolean
endfunction

//Generated method caller for FireEffect.cast
function sc__FireEffect_cast takes nothing returns boolean
    call TriggerEvaluate(st__FireEffect_cast)
 return f__result_boolean
endfunction

//Generated method caller for ElectroEffect.cast
function sc__ElectroEffect_cast takes nothing returns boolean
    call TriggerEvaluate(st__ElectroEffect_cast)
 return f__result_boolean
endfunction

//Generated method caller for ChatSys.ChatInt
function sc__ChatSys_ChatInt takes nothing returns nothing
    call TriggerEvaluate(st__ChatSys_ChatInt)
endfunction

//Generated method caller for AcidEffect.cast
function sc__AcidEffect_cast takes nothing returns boolean
    call TriggerEvaluate(st__AcidEffect_cast)
 return f__result_boolean
endfunction

//Generated method caller for Finish.EnumDestructablesInCircle
function sc__Finish_EnumDestructablesInCircle takes integer this,real radius,code actionFunc returns nothing
            local rect r
            if radius >= 0 then
                set r=Rect(s__Finish_x[this] - radius, s__Finish_y[this] - radius, s__Finish_x[this] + radius, s__Finish_y[this] + radius)
                call EnumDestructablesInRect(r, null, actionFunc)
            endif
            call RemoveRect(r)
endfunction

//Generated method caller for GenTimer.StatMess
function sc__GenTimer_StatMess takes integer sector returns integer
    set f__arg_integer1=sector
    call TriggerEvaluate(st__GenTimer_StatMess)
 return f__result_integer
endfunction

//Generated allocator of AttachObject__Init
function s__AttachObject__Init__allocate takes nothing returns integer
 local integer this=si__AttachObject__Init_F
    if (this!=0) then
        set si__AttachObject__Init_F=si__AttachObject__Init_V[this]
    else
        set si__AttachObject__Init_I=si__AttachObject__Init_I+1
        set this=si__AttachObject__Init_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__AttachObject__Init_V[this]=-1
 return this
endfunction

//Generated destructor of AttachObject__Init
function s__AttachObject__Init_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__AttachObject__Init_V[this]!=-1) then
        return
    endif
    set si__AttachObject__Init_V[this]=si__AttachObject__Init_F
    set si__AttachObject__Init_F=this
endfunction

//Generated allocator of EffectTimed
function s__EffectTimed__allocate takes nothing returns integer
 local integer this=si__EffectTimed_F
    if (this!=0) then
        set si__EffectTimed_F=si__EffectTimed_V[this]
    else
        set si__EffectTimed_I=si__EffectTimed_I+1
        set this=si__EffectTimed_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__EffectTimed_V[this]=-1
 return this
endfunction

//Generated destructor of EffectTimed
function s__EffectTimed_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__EffectTimed_V[this]!=-1) then
        return
    endif
    set si__EffectTimed_V[this]=si__EffectTimed_F
    set si__EffectTimed_F=this
endfunction

//Generated allocator of AttachObject__Host
function s__AttachObject__Host__allocate takes nothing returns integer
 local integer this=si__AttachObject__Host_F
    if (this!=0) then
        set si__AttachObject__Host_F=si__AttachObject__Host_V[this]
    else
        set si__AttachObject__Host_I=si__AttachObject__Host_I+1
        set this=si__AttachObject__Host_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__AttachObject__Host_V[this]=-1
 return this
endfunction

//Generated destructor of AttachObject__Host
function s__AttachObject__Host_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__AttachObject__Host_V[this]!=-1) then
        return
    endif
    set si__AttachObject__Host_V[this]=si__AttachObject__Host_F
    set si__AttachObject__Host_F=this
endfunction

//Generated allocator of AttachObject__Guest
function s__AttachObject__Guest__allocate takes nothing returns integer
 local integer this=si__AttachObject__Guest_F
    if (this!=0) then
        set si__AttachObject__Guest_F=si__AttachObject__Guest_V[this]
    else
        set si__AttachObject__Guest_I=si__AttachObject__Guest_I+1
        set this=si__AttachObject__Guest_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__AttachObject__Guest_V[this]=-1
 return this
endfunction

//Generated destructor of AttachObject__Guest
function s__AttachObject__Guest_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__AttachObject__Guest_V[this]!=-1) then
        return
    endif
    set si__AttachObject__Guest_V[this]=si__AttachObject__Guest_F
    set si__AttachObject__Guest_F=this
endfunction

//Generated allocator of GuestEx
function s__GuestEx__allocate takes nothing returns integer
 local integer this=si__GuestEx_F
    if (this!=0) then
        set si__GuestEx_F=si__GuestEx_V[this]
    else
        set si__GuestEx_I=si__GuestEx_I+1
        set this=si__GuestEx_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__GuestEx_V[this]=-1
 return this
endfunction

//Generated destructor of GuestEx
function s__GuestEx_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__GuestEx_V[this]!=-1) then
        return
    endif
    set si__GuestEx_V[this]=si__GuestEx_F
    set si__GuestEx_F=this
endfunction

//Generated allocator of AttachObject__GlobalListT
function s__AttachObject__GlobalListT__allocate takes nothing returns integer
 local integer this=si__AttachObject__GlobalListT_F
    if (this!=0) then
        set si__AttachObject__GlobalListT_F=si__AttachObject__GlobalListT_V[this]
    else
        set si__AttachObject__GlobalListT_I=si__AttachObject__GlobalListT_I+1
        set this=si__AttachObject__GlobalListT_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__AttachObject__GlobalListT_V[this]=-1
 return this
endfunction

//Generated destructor of AttachObject__GlobalListT
function s__AttachObject__GlobalListT_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__AttachObject__GlobalListT_V[this]!=-1) then
        return
    endif
    set si__AttachObject__GlobalListT_V[this]=si__AttachObject__GlobalListT_F
    set si__AttachObject__GlobalListT_F=this
endfunction

//Generated allocator of ubersplatTimed
function s__ubersplatTimed__allocate takes nothing returns integer
 local integer this=si__ubersplatTimed_F
    if (this!=0) then
        set si__ubersplatTimed_F=si__ubersplatTimed_V[this]
    else
        set si__ubersplatTimed_I=si__ubersplatTimed_I+1
        set this=si__ubersplatTimed_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__ubersplatTimed_elapsed[this]= 0
    set si__ubersplatTimed_V[this]=-1
 return this
endfunction

//Generated destructor of ubersplatTimed
function s__ubersplatTimed_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__ubersplatTimed_V[this]!=-1) then
        return
    endif
    set si__ubersplatTimed_V[this]=si__ubersplatTimed_F
    set si__ubersplatTimed_F=this
endfunction

//Generated allocator of unitTimed
function s__unitTimed__allocate takes nothing returns integer
 local integer this=si__unitTimed_F
    if (this!=0) then
        set si__unitTimed_F=si__unitTimed_V[this]
    else
        set si__unitTimed_I=si__unitTimed_I+1
        set this=si__unitTimed_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__unitTimed_elapsed[this]= 0
    set si__unitTimed_V[this]=-1
 return this
endfunction

//Generated destructor of unitTimed
function s__unitTimed_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__unitTimed_V[this]!=-1) then
        return
    endif
    set si__unitTimed_V[this]=si__unitTimed_F
    set si__unitTimed_F=this
endfunction

//Generated allocator of itemTimed
function s__itemTimed__allocate takes nothing returns integer
 local integer this=si__itemTimed_F
    if (this!=0) then
        set si__itemTimed_F=si__itemTimed_V[this]
    else
        set si__itemTimed_I=si__itemTimed_I+1
        set this=si__itemTimed_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__itemTimed_elapsed[this]= 0
    set si__itemTimed_V[this]=-1
 return this
endfunction

//Generated destructor of itemTimed
function s__itemTimed_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__itemTimed_V[this]!=-1) then
        return
    endif
    set si__itemTimed_V[this]=si__itemTimed_F
    set si__itemTimed_F=this
endfunction

//Generated allocator of weathereffectTimed
function s__weathereffectTimed__allocate takes nothing returns integer
 local integer this=si__weathereffectTimed_F
    if (this!=0) then
        set si__weathereffectTimed_F=si__weathereffectTimed_V[this]
    else
        set si__weathereffectTimed_I=si__weathereffectTimed_I+1
        set this=si__weathereffectTimed_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__weathereffectTimed_elapsed[this]= 0
    set si__weathereffectTimed_V[this]=-1
 return this
endfunction

//Generated destructor of weathereffectTimed
function s__weathereffectTimed_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__weathereffectTimed_V[this]!=-1) then
        return
    endif
    set si__weathereffectTimed_V[this]=si__weathereffectTimed_F
    set si__weathereffectTimed_F=this
endfunction

//Generated allocator of lightningTimed
function s__lightningTimed__allocate takes nothing returns integer
 local integer this=si__lightningTimed_F
    if (this!=0) then
        set si__lightningTimed_F=si__lightningTimed_V[this]
    else
        set si__lightningTimed_I=si__lightningTimed_I+1
        set this=si__lightningTimed_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__lightningTimed_elapsed[this]= 0
    set si__lightningTimed_V[this]=-1
 return this
endfunction

//Generated destructor of lightningTimed
function s__lightningTimed_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__lightningTimed_V[this]!=-1) then
        return
    endif
    set si__lightningTimed_V[this]=si__lightningTimed_F
    set si__lightningTimed_F=this
endfunction

//Generated allocator of effectTimed
function s__effectTimed__allocate takes nothing returns integer
 local integer this=si__effectTimed_F
    if (this!=0) then
        set si__effectTimed_F=si__effectTimed_V[this]
    else
        set si__effectTimed_I=si__effectTimed_I+1
        set this=si__effectTimed_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__effectTimed_elapsed[this]= 0
    set si__effectTimed_V[this]=-1
 return this
endfunction

//Generated destructor of effectTimed
function s__effectTimed_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__effectTimed_V[this]!=-1) then
        return
    endif
    set si__effectTimed_V[this]=si__effectTimed_F
    set si__effectTimed_F=this
endfunction

//Generated allocator of RiseAndFall
function s__RiseAndFall__allocate takes nothing returns integer
 local integer this=si__RiseAndFall_F
    if (this!=0) then
        set si__RiseAndFall_F=si__RiseAndFall_V[this]
    else
        set si__RiseAndFall_I=si__RiseAndFall_I+1
        set this=si__RiseAndFall_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__RiseAndFall_V[this]=-1
 return this
endfunction

//Generated destructor of RiseAndFall
function s__RiseAndFall_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__RiseAndFall_V[this]!=-1) then
        return
    endif
    set si__RiseAndFall_V[this]=si__RiseAndFall_F
    set si__RiseAndFall_F=this
endfunction

//Generated allocator of Movespeed
function s__Movespeed__allocate takes nothing returns integer
 local integer this=si__Movespeed_F
    if (this!=0) then
        set si__Movespeed_F=si__Movespeed_V[this]
    else
        set si__Movespeed_I=si__Movespeed_I+1
        set this=si__Movespeed_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Movespeed_V[this]=-1
 return this
endfunction

//Generated destructor of Movespeed
function s__Movespeed_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Movespeed_V[this]!=-1) then
        return
    endif
    set si__Movespeed_V[this]=si__Movespeed_F
    set si__Movespeed_F=this
endfunction

//Generated allocator of Missiles__Coordinates
function s__Missiles__Coordinates__allocate takes nothing returns integer
 local integer this=si__Missiles__Coordinates_F
    if (this!=0) then
        set si__Missiles__Coordinates_F=si__Missiles__Coordinates_V[this]
    else
        set si__Missiles__Coordinates_I=si__Missiles__Coordinates_I+1
        set this=si__Missiles__Coordinates_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Missiles__Coordinates_V[this]=-1
 return this
endfunction

//Generated destructor of Missiles__Coordinates
function s__Missiles__Coordinates_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Missiles__Coordinates_V[this]!=-1) then
        return
    endif
    set si__Missiles__Coordinates_V[this]=si__Missiles__Coordinates_F
    set si__Missiles__Coordinates_F=this
endfunction

//Generated allocator of Missiles__Pool
function s__Missiles__Pool__allocate takes nothing returns integer
 local integer this=si__Missiles__Pool_F
    if (this!=0) then
        set si__Missiles__Pool_F=si__Missiles__Pool_V[this]
    else
        set si__Missiles__Pool_I=si__Missiles__Pool_I+1
        set this=si__Missiles__Pool_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Missiles__Pool_V[this]=-1
 return this
endfunction

//Generated destructor of Missiles__Pool
function s__Missiles__Pool_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Missiles__Pool_V[this]!=-1) then
        return
    endif
    set si__Missiles__Pool_V[this]=si__Missiles__Pool_F
    set si__Missiles__Pool_F=this
endfunction

//Generated method caller for Missiles__MissileEvents.onHit
function sc__Missiles__MissileEvents_onHit takes integer this,unit hit returns boolean
    set f__arg_this=this
    set f__arg_unit1=hit
    //An error in the next line would mean declaration for Missiles__MissileEvents.onHit had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles__MissileEvents_onHit[si__Missiles__MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles__MissileEvents.onHit
function sx__Missiles__MissileEvents_onHit takes integer this,unit hit returns nothing
    set f__arg_this=this
    set f__arg_unit1=hit
    call TriggerExecute(st__Missiles__MissileEvents_onHit[si__Missiles__MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles__MissileEvents.onMissile
function sc__Missiles__MissileEvents_onMissile takes integer this,integer missile returns boolean
    set f__arg_this=this
    set f__arg_integer1=missile
    //An error in the next line would mean declaration for Missiles__MissileEvents.onMissile had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles__MissileEvents_onMissile[si__Missiles__MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles__MissileEvents.onMissile
function sx__Missiles__MissileEvents_onMissile takes integer this,integer missile returns nothing
    set f__arg_this=this
    set f__arg_integer1=missile
    call TriggerExecute(st__Missiles__MissileEvents_onMissile[si__Missiles__MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles__MissileEvents.onDestructable
function sc__Missiles__MissileEvents_onDestructable takes integer this,destructable dest returns boolean
    set f__arg_this=this
    set f__arg_destructable1=dest
    //An error in the next line would mean declaration for Missiles__MissileEvents.onDestructable had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles__MissileEvents_onDestructable[si__Missiles__MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles__MissileEvents.onDestructable
function sx__Missiles__MissileEvents_onDestructable takes integer this,destructable dest returns nothing
    set f__arg_this=this
    set f__arg_destructable1=dest
    call TriggerExecute(st__Missiles__MissileEvents_onDestructable[si__Missiles__MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles__MissileEvents.onItem
function sc__Missiles__MissileEvents_onItem takes integer this,item i returns boolean
    set f__arg_this=this
    set f__arg_item1=i
    //An error in the next line would mean declaration for Missiles__MissileEvents.onItem had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles__MissileEvents_onItem[si__Missiles__MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles__MissileEvents.onItem
function sx__Missiles__MissileEvents_onItem takes integer this,item i returns nothing
    set f__arg_this=this
    set f__arg_item1=i
    call TriggerExecute(st__Missiles__MissileEvents_onItem[si__Missiles__MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles__MissileEvents.onCliff
function sc__Missiles__MissileEvents_onCliff takes integer this returns boolean
    set f__arg_this=this
    //An error in the next line would mean declaration for Missiles__MissileEvents.onCliff had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles__MissileEvents_onCliff[si__Missiles__MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles__MissileEvents.onCliff
function sx__Missiles__MissileEvents_onCliff takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles__MissileEvents_onCliff[si__Missiles__MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles__MissileEvents.onTerrain
function sc__Missiles__MissileEvents_onTerrain takes integer this returns boolean
    set f__arg_this=this
    //An error in the next line would mean declaration for Missiles__MissileEvents.onTerrain had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles__MissileEvents_onTerrain[si__Missiles__MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles__MissileEvents.onTerrain
function sx__Missiles__MissileEvents_onTerrain takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles__MissileEvents_onTerrain[si__Missiles__MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles__MissileEvents.onTileset
function sc__Missiles__MissileEvents_onTileset takes integer this,integer tileset returns boolean
    set f__arg_this=this
    set f__arg_integer1=tileset
    //An error in the next line would mean declaration for Missiles__MissileEvents.onTileset had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles__MissileEvents_onTileset[si__Missiles__MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles__MissileEvents.onTileset
function sx__Missiles__MissileEvents_onTileset takes integer this,integer tileset returns nothing
    set f__arg_this=this
    set f__arg_integer1=tileset
    call TriggerExecute(st__Missiles__MissileEvents_onTileset[si__Missiles__MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles__MissileEvents.onPeriod
function sc__Missiles__MissileEvents_onPeriod takes integer this returns boolean
    set f__arg_this=this
    //An error in the next line would mean declaration for Missiles__MissileEvents.onPeriod had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles__MissileEvents_onPeriod[si__Missiles__MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles__MissileEvents.onPeriod
function sx__Missiles__MissileEvents_onPeriod takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles__MissileEvents_onPeriod[si__Missiles__MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles__MissileEvents.onFinish
function sc__Missiles__MissileEvents_onFinish takes integer this returns boolean
    set f__arg_this=this
    //An error in the next line would mean declaration for Missiles__MissileEvents.onFinish had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles__MissileEvents_onFinish[si__Missiles__MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles__MissileEvents.onFinish
function sx__Missiles__MissileEvents_onFinish takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles__MissileEvents_onFinish[si__Missiles__MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles__MissileEvents.onBoundaries
function sc__Missiles__MissileEvents_onBoundaries takes integer this returns boolean
    set f__arg_this=this
    //An error in the next line would mean declaration for Missiles__MissileEvents.onBoundaries had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles__MissileEvents_onBoundaries[si__Missiles__MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles__MissileEvents.onBoundaries
function sx__Missiles__MissileEvents_onBoundaries takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles__MissileEvents_onBoundaries[si__Missiles__MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles__MissileEvents.onPause
function sc__Missiles__MissileEvents_onPause takes integer this returns boolean
    set f__arg_this=this
    //An error in the next line would mean declaration for Missiles__MissileEvents.onPause had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles__MissileEvents_onPause[si__Missiles__MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles__MissileEvents.onPause
function sx__Missiles__MissileEvents_onPause takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles__MissileEvents_onPause[si__Missiles__MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles__MissileEvents.onResume
function sc__Missiles__MissileEvents_onResume takes integer this returns boolean
    set f__arg_this=this
    //An error in the next line would mean declaration for Missiles__MissileEvents.onResume had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles__MissileEvents_onResume[si__Missiles__MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles__MissileEvents.onResume
function sx__Missiles__MissileEvents_onResume takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles__MissileEvents_onResume[si__Missiles__MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles__MissileEvents.onRemove
function sc__Missiles__MissileEvents_onRemove takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onRemove[si__Missiles__MissileEvents_type[this]])
endfunction

//Generated method executor for Missiles__MissileEvents.onRemove
function sx__Missiles__MissileEvents_onRemove takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles__MissileEvents_onRemove[si__Missiles__MissileEvents_type[this]])
endfunction
//Generated destructor of Missiles__MissileEvents
function sc__Missiles__MissileEvents_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Missiles__MissileEvents_V[this]!=-1) then
        return
    endif
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onDestroy[si__Missiles__MissileEvents_type[this]])
    set si__Missiles__MissileEvents_V[this]=si__Missiles__MissileEvents_F
    set si__Missiles__MissileEvents_F=this
endfunction

//Generated allocator of MissileEffect
function s__MissileEffect__allocate takes nothing returns integer
 local integer this=si__MissileEffect_F
    if (this!=0) then
        set si__MissileEffect_F=si__MissileEffect_V[this]
    else
        set si__MissileEffect_I=si__MissileEffect_I+1
        set this=si__MissileEffect_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__MissileEffect_V[this]=-1
 return this
endfunction

//Generated destructor of MissileEffect
function s__MissileEffect_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__MissileEffect_V[this]!=-1) then
        return
    endif
    set si__MissileEffect_V[this]=si__MissileEffect_F
    set si__MissileEffect_F=this
endfunction

//Generated method caller for Table.create
function sc__Table_create takes nothing returns integer
    call TriggerEvaluate(st__Table_create)
 return f__result_integer
endfunction

//Generated method caller for Missiles.terminate
function sc__Missiles_terminate takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles_terminate)
endfunction

//Generated method caller for Missiles.reset
function sc__Missiles_reset takes integer this returns nothing
            set s__Missiles_launched[this]=false
            set s__Missiles_finished[this]=false
            set s__Missiles_collideZ[this]=false
            set s__Missiles_paused[this]=false
            set s__Missiles_roll[this]=false
            set s__Missiles_source[this]=null
            set s__Missiles_target[this]=null
            set s__Missiles_owner[this]=null
            set s__Missiles_dummy[this]=null
            set s__Missiles_open[this]=0.
            set s__Missiles_height[this]=0.
            set s__Missiles_veloc[this]=0.
            set s__Missiles_acceleration[this]=0.
            set s__Missiles_collision[this]=0.
            set s__Missiles_damage[this]=0.
            set s__Missiles_travel[this]=0.
            set s__Missiles_turn[this]=0.
            set s__Missiles_time[this]=0.
            set s__Missiles_sight[this]=0.
            set s__Missiles_data[this]=0
            set s__Missiles_type[this]=0
            set s__Missiles_tileset[this]=0
            set s__Missiles_pkey[this]=- 1
            set s__Missiles_index[this]=- 1
endfunction

//Generated method caller for Missiles.move
function sc__Missiles_move takes nothing returns nothing
    call TriggerEvaluate(st__Missiles_move)
endfunction

//Generated method caller for Missiles.create
function sc__Missiles_create takes real x,real y,real z,real toX,real toY,real toZ returns integer
    set f__arg_real1=x
    set f__arg_real2=y
    set f__arg_real3=z
    set f__arg_real4=toX
    set f__arg_real5=toY
    set f__arg_real6=toZ
    call TriggerEvaluate(st__Missiles_create)
 return f__result_integer
endfunction

//Generated allocator of Missiles
function s__Missiles__allocate takes nothing returns integer
 local integer kthis
 local integer this=si__Missiles__MissileEvents_F
    if (this!=0) then
        set si__Missiles__MissileEvents_F=si__Missiles__MissileEvents_V[this]
    else
        set si__Missiles__MissileEvents_I=si__Missiles__MissileEvents_I+1
        set this=si__Missiles__MissileEvents_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Missiles__MissileEvents_type[this]=59
    set kthis=this

    set si__Missiles__MissileEvents_V[this]=-1
 return this
endfunction


//Generated method caller for WRSMissile.GetMissileFunctionEx
function sc__WRSMissile_GetMissileFunctionEx takes unit hit,real damage,unit sor,integer data returns nothing
    set f__arg_unit1=hit
    set f__arg_real1=damage
    set f__arg_unit2=sor
    set f__arg_integer1=data
    call TriggerEvaluate(st__WRSMissile_GetMissileFunctionEx)
endfunction

//Generated method caller for WRSMissile.onRemove
function sc__WRSMissile_onRemove takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onRemove[100])
endfunction

//Generated method caller for WRSMissile.onPeriod
function sc__WRSMissile_onPeriod takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onPeriod[100])
 return f__result_boolean
endfunction

//Generated method caller for WRSMissile.onHit
function sc__WRSMissile_onHit takes integer this,unit hit returns boolean
    set f__arg_this=this
    set f__arg_unit1=hit
    call TriggerEvaluate(st__Missiles__MissileEvents_onHit[100])
 return f__result_boolean
endfunction

//Generated method caller for WRSMissile.ReAddAbility
function sc__WRSMissile_ReAddAbility takes nothing returns nothing
    call TriggerEvaluate(st__WRSMissile_ReAddAbility)
endfunction

//Generated allocator of WRSMissile
function s__WRSMissile__allocate takes real x ,real y ,real z ,real toX ,real toY ,real toZ returns integer
 local integer this=sc__Missiles_create(x,y,z,toX,toY,toZ)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Missiles__MissileEvents_type[this]=100
    set kthis=this

 return this
endfunction


//Generated method caller for FlashGrenade__Flash.onPeriod
function sc__FlashGrenade__Flash_onPeriod takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onPeriod[78])
 return f__result_boolean
endfunction

//Generated method caller for FlashGrenade__Flash.onDestructable
function sc__FlashGrenade__Flash_onDestructable takes integer this,destructable dest returns boolean
    set f__arg_this=this
    set f__arg_destructable1=dest
    call TriggerEvaluate(st__Missiles__MissileEvents_onDestructable[78])
 return f__result_boolean
endfunction

//Generated method caller for FlashGrenade__Flash.onCliff
function sc__FlashGrenade__Flash_onCliff takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onCliff[78])
 return f__result_boolean
endfunction

//Generated method caller for FlashGrenade__Flash.onFinish
function sc__FlashGrenade__Flash_onFinish takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onFinish[78])
 return f__result_boolean
endfunction

//Generated allocator of FlashGrenade__Flash
function s__FlashGrenade__Flash__allocate takes real x ,real y ,real z ,real toX ,real toY ,real toZ returns integer
 local integer this=sc__Missiles_create(x,y,z,toX,toY,toZ)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Missiles__MissileEvents_type[this]=78
    set kthis=this

 return this
endfunction


//Generated method caller for Launch__Launch.onPeriod
function sc__Launch__Launch_onPeriod takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onPeriod[91])
 return f__result_boolean
endfunction

//Generated method caller for Launch__Launch.onHit
function sc__Launch__Launch_onHit takes integer this,unit hit returns boolean
    set f__arg_this=this
    set f__arg_unit1=hit
    call TriggerEvaluate(st__Missiles__MissileEvents_onHit[91])
 return f__result_boolean
endfunction

//Generated method caller for Launch__Launch.onMissile
function sc__Launch__Launch_onMissile takes integer this,integer missile returns boolean
                return false
endfunction

//Generated allocator of Launch__Launch
function s__Launch__Launch__allocate takes real x ,real y ,real z ,real toX ,real toY ,real toZ returns integer
 local integer this=sc__Missiles_create(x,y,z,toX,toY,toZ)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Missiles__MissileEvents_type[this]=91
    set kthis=this

 return this
endfunction


//Generated method caller for AutoArtillary__ArtMissile.onHit
function sc__AutoArtillary__ArtMissile_onHit takes integer this,unit hit returns boolean
    set f__arg_this=this
    set f__arg_unit1=hit
    call TriggerEvaluate(st__Missiles__MissileEvents_onHit[93])
 return f__result_boolean
endfunction

//Generated method caller for AutoArtillary__ArtMissile.onDestructable
function sc__AutoArtillary__ArtMissile_onDestructable takes integer this,destructable dest returns boolean
            local integer b= GetDestructableTypeId(dest)
            local real h
            
            if b == 'B003' then
                
                call KillDestructable(dest)
            
            else
                set h=GetDestructableLife(dest)
                
                call SetDestructableLife(dest, h - s__Missiles_damage[this] * 10)
                
            endif
        
            return true
            
endfunction

//Generated method caller for AutoArtillary__ArtMissile.onPeriod
function sc__AutoArtillary__ArtMissile_onPeriod takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onPeriod[93])
 return f__result_boolean
endfunction

//Generated method caller for AutoArtillary__ArtMissile.onRemove
function sc__AutoArtillary__ArtMissile_onRemove takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onRemove[93])
endfunction

//Generated method caller for AutoArtillary__ArtMissile.onFinish
function sc__AutoArtillary__ArtMissile_onFinish takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onFinish[93])
 return f__result_boolean
endfunction

//Generated allocator of AutoArtillary__ArtMissile
function s__AutoArtillary__ArtMissile__allocate takes real x ,real y ,real z ,real toX ,real toY ,real toZ returns integer
 local integer this=sc__Missiles_create(x,y,z,toX,toY,toZ)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Missiles__MissileEvents_type[this]=93
    set kthis=this

 return this
endfunction


//Generated method caller for CannonProjectile__Launch.onPeriod
function sc__CannonProjectile__Launch_onPeriod takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onPeriod[96])
 return f__result_boolean
endfunction

//Generated method caller for CannonProjectile__Launch.onHit
function sc__CannonProjectile__Launch_onHit takes integer this,unit hit returns boolean
    set f__arg_this=this
    set f__arg_unit1=hit
    call TriggerEvaluate(st__Missiles__MissileEvents_onHit[96])
 return f__result_boolean
endfunction

//Generated allocator of CannonProjectile__Launch
function s__CannonProjectile__Launch__allocate takes real x ,real y ,real z ,real toX ,real toY ,real toZ returns integer
 local integer this=sc__Missiles_create(x,y,z,toX,toY,toZ)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Missiles__MissileEvents_type[this]=96
    set kthis=this

 return this
endfunction


//Generated method caller for MagneticSaw__Saw.onPeriod
function sc__MagneticSaw__Saw_onPeriod takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onPeriod[97])
 return f__result_boolean
endfunction

//Generated method caller for MagneticSaw__Saw.onHit
function sc__MagneticSaw__Saw_onHit takes integer this,unit hit returns boolean
    set f__arg_this=this
    set f__arg_unit1=hit
    call TriggerEvaluate(st__Missiles__MissileEvents_onHit[97])
 return f__result_boolean
endfunction

//Generated method caller for MagneticSaw__Saw.onDestructable
function sc__MagneticSaw__Saw_onDestructable takes integer this,destructable dest returns boolean
    set f__arg_this=this
    set f__arg_destructable1=dest
    call TriggerEvaluate(st__Missiles__MissileEvents_onDestructable[97])
 return f__result_boolean
endfunction

//Generated method caller for MagneticSaw__Saw.onCliff
function sc__MagneticSaw__Saw_onCliff takes integer this returns boolean
                    return true
endfunction

//Generated allocator of MagneticSaw__Saw
function s__MagneticSaw__Saw__allocate takes real x ,real y ,real z ,real toX ,real toY ,real toZ returns integer
 local integer this=sc__Missiles_create(x,y,z,toX,toY,toZ)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Missiles__MissileEvents_type[this]=97
    set kthis=this

 return this
endfunction


//Generated method caller for PhaseBurn__Phase.onPeriod
function sc__PhaseBurn__Phase_onPeriod takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onPeriod[98])
 return f__result_boolean
endfunction

//Generated method caller for PhaseBurn__Phase.onRemove
function sc__PhaseBurn__Phase_onRemove takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles__MissileEvents_onRemove[98])
endfunction

//Generated allocator of PhaseBurn__Phase
function s__PhaseBurn__Phase__allocate takes real x ,real y ,real z ,real toX ,real toY ,real toZ returns integer
 local integer this=sc__Missiles_create(x,y,z,toX,toY,toZ)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Missiles__MissileEvents_type[this]=98
    set kthis=this

 return this
endfunction

function sc___prototype9_execute takes integer i,trigger a1,string a2,limitop a3,real a4 returns nothing
    set f__arg_trigger1=a1
    set f__arg_string1=a2
    set f__arg_limitop1=a3
    set f__arg_real1=a4

    call TriggerExecute(st___prototype9[i])
endfunction
function sc___prototype9_evaluate takes integer i,trigger a1,string a2,limitop a3,real a4 returns nothing
    set f__arg_trigger1=a1
    set f__arg_string1=a2
    set f__arg_limitop1=a3
    set f__arg_real1=a4

    call TriggerEvaluate(st___prototype9[i])

endfunction
function sc___prototype31_execute takes integer i,unit a1,real a2 returns nothing
    set f__arg_unit1=a1
    set f__arg_real1=a2

    call TriggerExecute(st___prototype31[i])
endfunction
function sc___prototype31_evaluate takes integer i,unit a1,real a2 returns nothing
    set f__arg_unit1=a1
    set f__arg_real1=a2

    call TriggerEvaluate(st___prototype31[i])

endfunction
function h__TriggerRegisterVariableEvent takes trigger a0, string a1, limitop a2, real a3 returns event
    //hook: DamageEngine_RegisterFromHook
    call sc___prototype9_evaluate(1,a0,a1,a2,a3)
return TriggerRegisterVariableEvent(a0,a1,a2,a3)
endfunction
function h__SetUnitMoveSpeed takes unit a0, real a1 returns nothing
    //hook: SetUnitMoveSpeedX
    call sc___prototype31_evaluate(1,a0,a1)
call SetUnitMoveSpeed(a0,a1)
endfunction

//library Ascii:
    function Char2Ascii takes string p returns integer
        local integer z= Ascii__i[StringHash(p) / 0x1F0748 + 0x40D]
        if ( Ascii__c[z] != p ) then
            if ( Ascii__c[z - 32] != p ) then
                if ( Ascii__c[Ascii__h[z]] != p ) then
                    if ( Ascii__c[Ascii__y[z]] != p ) then
                        if ( Ascii__c[83] != p ) then
                            return 0
                        endif
                        return 83
                    endif
                    return Ascii__y[z]
                endif
                return Ascii__h[z]
            endif
            return z - 32
        endif
        return z
    endfunction
    function Ascii2Char takes integer a returns string
        return Ascii__c[a]
    endfunction
    function A2S takes integer a returns string
        local string s=""
        loop
            set s=Ascii__c[a - a / 256 * 256] + s
            set a=a / 256
            exitwhen 0 == a
        endloop
        return s
    endfunction
    function S2A takes string s returns integer
        local integer a=0
        local integer l=StringLength(s)
        local integer j=0
        local string m
        local integer l__Ascii__h
        loop
            exitwhen j == l
            set a=a * 256 + Char2Ascii(SubString(s, j, j + 1))
            set j=j + 1
        endloop
        return a
    endfunction
//Implemented from module Ascii__Init:
        function s__Ascii__Inits_Ascii__Init___onInit takes nothing returns nothing
            set Ascii__i[966]=8
            set Ascii__i[1110]=9
            set Ascii__i[1621]=10
            set Ascii__i[1375]=12
            set Ascii__i[447]=13
            set Ascii__i[233]=32
            set Ascii__i[2014]=33
            set Ascii__i[1348]=34
            set Ascii__i[1038]=35
            set Ascii__i[1299]=36
            set Ascii__i[1018]=37
            set Ascii__i[1312]=38
            set Ascii__i[341]=39
            set Ascii__i[939]=40
            set Ascii__i[969]=41
            set Ascii__i[952]=42
            set Ascii__i[2007]=43
            set Ascii__i[1415]=44
            set Ascii__i[2020]=45
            set Ascii__i[904]=46
            set Ascii__i[1941]=47
            set Ascii__i[918]=48
            set Ascii__i[1593]=49
            set Ascii__i[719]=50
            set Ascii__i[617]=51
            set Ascii__i[703]=52
            set Ascii__i[573]=53
            set Ascii__i[707]=54
            set Ascii__i[1208]=55
            set Ascii__i[106]=56
            set Ascii__i[312]=57
            set Ascii__i[124]=58
            set Ascii__i[1176]=59
            set Ascii__i[74]=60
            set Ascii__i[1206]=61
            set Ascii__i[86]=62
            set Ascii__i[340]=63
            set Ascii__i[35]=64
            set Ascii__i[257]=65
            set Ascii__i[213]=66
            set Ascii__i[271]=67
            set Ascii__i[219]=68
            set Ascii__i[1330]=69
            set Ascii__i[1425]=70
            set Ascii__i[1311]=71
            set Ascii__i[238]=72
            set Ascii__i[1349]=73
            set Ascii__i[244]=74
            set Ascii__i[1350]=75
            set Ascii__i[205]=76
            set Ascii__i[1392]=77
            set Ascii__i[1378]=78
            set Ascii__i[1432]=79
            set Ascii__i[1455]=80
            set Ascii__i[1454]=81
            set Ascii__i[1431]=82
            set Ascii__i[1409]=83
            set Ascii__i[1442]=84
            set Ascii__i[534]=85
            set Ascii__i[1500]=86
            set Ascii__i[771]=87
            set Ascii__i[324]=88
            set Ascii__i[1021]=89
            set Ascii__i[73]=90
            set Ascii__i[1265]=91
            set Ascii__i[1941]=92
            set Ascii__i[1671]=93
            set Ascii__i[1451]=94
            set Ascii__i[1952]=95
            set Ascii__i[252]=96
            set Ascii__i[257]=97
            set Ascii__i[213]=98
            set Ascii__i[271]=99
            set Ascii__i[219]=100
            set Ascii__i[1330]=101
            set Ascii__i[1425]=102
            set Ascii__i[1311]=103
            set Ascii__i[238]=104
            set Ascii__i[1349]=105
            set Ascii__i[244]=106
            set Ascii__i[1350]=107
            set Ascii__i[205]=108
            set Ascii__i[1392]=109
            set Ascii__i[1378]=110
            set Ascii__i[1432]=111
            set Ascii__i[1455]=112
            set Ascii__i[1454]=113
            set Ascii__i[1431]=114
            set Ascii__i[1409]=115
            set Ascii__i[1442]=116
            set Ascii__i[534]=117
            set Ascii__i[1500]=118
            set Ascii__i[771]=119
            set Ascii__i[324]=120
            set Ascii__i[1021]=121
            set Ascii__i[73]=122
            set Ascii__i[868]=123
            set Ascii__i[1254]=124
            set Ascii__i[588]=125
            set Ascii__i[93]=126
            set Ascii__i[316]=161
            set Ascii__i[779]=162
            set Ascii__i[725]=163
            set Ascii__i[287]=164
            set Ascii__i[212]=165
            set Ascii__i[7]=166
            set Ascii__i[29]=167
            set Ascii__i[1958]=168
            set Ascii__i[1009]=169
            set Ascii__i[1580]=170
            set Ascii__i[1778]=171
            set Ascii__i[103]=172
            set Ascii__i[400]=174
            set Ascii__i[1904]=175
            set Ascii__i[135]=176
            set Ascii__i[1283]=177
            set Ascii__i[469]=178
            set Ascii__i[363]=179
            set Ascii__i[550]=180
            set Ascii__i[1831]=181
            set Ascii__i[1308]=182
            set Ascii__i[1234]=183
            set Ascii__i[1017]=184
            set Ascii__i[1093]=185
            set Ascii__i[1577]=186
            set Ascii__i[606]=187
            set Ascii__i[1585]=188
            set Ascii__i[1318]=189
            set Ascii__i[980]=190
            set Ascii__i[1699]=191
            set Ascii__i[1292]=192
            set Ascii__i[477]=193
            set Ascii__i[709]=194
            set Ascii__i[1600]=195
            set Ascii__i[2092]=196
            set Ascii__i[50]=197
            set Ascii__i[546]=198
            set Ascii__i[408]=199
            set Ascii__i[853]=200
            set Ascii__i[205]=201
            set Ascii__i[411]=202
            set Ascii__i[1311]=203
            set Ascii__i[1422]=204
            set Ascii__i[1808]=205
            set Ascii__i[457]=206
            set Ascii__i[1280]=207
            set Ascii__i[614]=208
            set Ascii__i[1037]=209
            set Ascii__i[237]=210
            set Ascii__i[1409]=211
            set Ascii__i[1023]=212
            set Ascii__i[1361]=213
            set Ascii__i[695]=214
            set Ascii__i[161]=215
            set Ascii__i[1645]=216
            set Ascii__i[1822]=217
            set Ascii__i[644]=218
            set Ascii__i[1395]=219
            set Ascii__i[677]=220
            set Ascii__i[1677]=221
            set Ascii__i[881]=222
            set Ascii__i[861]=223
            set Ascii__i[1408]=224
            set Ascii__i[1864]=225
            set Ascii__i[1467]=226
            set Ascii__i[1819]=227
            set Ascii__i[1971]=228
            set Ascii__i[949]=229
            set Ascii__i[774]=230
            set Ascii__i[1828]=231
            set Ascii__i[865]=232
            set Ascii__i[699]=233
            set Ascii__i[786]=234
            set Ascii__i[1806]=235
            set Ascii__i[1286]=236
            set Ascii__i[1128]=237
            set Ascii__i[1490]=238
            set Ascii__i[1720]=239
            set Ascii__i[1817]=240
            set Ascii__i[729]=241
            set Ascii__i[1191]=242
            set Ascii__i[1164]=243
            set Ascii__i[413]=244
            set Ascii__i[349]=245
            set Ascii__i[1409]=246
            set Ascii__i[660]=247
            set Ascii__i[2016]=248
            set Ascii__i[1087]=249
            set Ascii__i[1497]=250
            set Ascii__i[753]=251
            set Ascii__i[1579]=252
            set Ascii__i[1456]=253
            set Ascii__i[606]=254
            set Ascii__i[1625]=255
            set Ascii__h[92]=47
            set Ascii__h[201]=108
            set Ascii__h[201]=76
            set Ascii__h[203]=103
            set Ascii__h[203]=71
            set Ascii__h[246]=115
            set Ascii__h[246]=83
            set Ascii__h[246]=211
            set Ascii__h[254]=187
            set Ascii__y[201]=108
            set Ascii__y[203]=103
            set Ascii__y[246]=115

            set Ascii__c[8]="\b"
            set Ascii__c[9]="\t"
            set Ascii__c[10]="\n"
            set Ascii__c[12]="\f"
            set Ascii__c[13]="\r"
            set Ascii__c[32]=" "
            set Ascii__c[33]="!"
            set Ascii__c[34]="\""
            set Ascii__c[35]="#"
            set Ascii__c[36]="$"
            set Ascii__c[37]=""
            set Ascii__c[38]="&"
            set Ascii__c[39]="'"
            set Ascii__c[40]="("
            set Ascii__c[41]=")"
            set Ascii__c[42]="*"
            set Ascii__c[43]="+"
            set Ascii__c[44]=","
            set Ascii__c[45]="-"
            set Ascii__c[46]="."
            set Ascii__c[47]="/"
            set Ascii__c[48]="0"
            set Ascii__c[49]="1"
            set Ascii__c[50]="2"
            set Ascii__c[51]="3"
            set Ascii__c[52]="4"
            set Ascii__c[53]="5"
            set Ascii__c[54]="6"
            set Ascii__c[55]="7"
            set Ascii__c[56]="8"
            set Ascii__c[57]="9"
            set Ascii__c[58]=":"
            set Ascii__c[59]=";"
            set Ascii__c[60]="<"
            set Ascii__c[61]="="
            set Ascii__c[62]=">"
            set Ascii__c[63]="?"
            set Ascii__c[64]="@"
            set Ascii__c[65]="A"
            set Ascii__c[66]="B"
            set Ascii__c[67]="C"
            set Ascii__c[68]="D"
            set Ascii__c[69]="E"
            set Ascii__c[70]="F"
            set Ascii__c[71]="G"
            set Ascii__c[72]="H"
            set Ascii__c[73]="I"
            set Ascii__c[74]="J"
            set Ascii__c[75]="K"
            set Ascii__c[76]="L"
            set Ascii__c[77]="M"
            set Ascii__c[78]="N"
            set Ascii__c[79]="O"
            set Ascii__c[80]="P"
            set Ascii__c[81]="Q"
            set Ascii__c[82]="R"
            set Ascii__c[83]="S"
            set Ascii__c[84]="T"
            set Ascii__c[85]="U"
            set Ascii__c[86]="V"
            set Ascii__c[87]="W"
            set Ascii__c[88]="X"
            set Ascii__c[89]="Y"
            set Ascii__c[90]="Z"
            set Ascii__c[91]="["
            set Ascii__c[92]="\\"
            set Ascii__c[93]="]"
            set Ascii__c[94]="^"
            set Ascii__c[95]="_"
            set Ascii__c[96]="`"
            set Ascii__c[97]="a"
            set Ascii__c[98]="b"
            set Ascii__c[99]="c"
            set Ascii__c[100]="d"
            set Ascii__c[101]="e"
            set Ascii__c[102]="f"
            set Ascii__c[103]="g"
            set Ascii__c[104]="h"
            set Ascii__c[105]="i"
            set Ascii__c[106]="j"
            set Ascii__c[107]="k"
            set Ascii__c[108]="l"
            set Ascii__c[109]="m"
            set Ascii__c[110]="n"
            set Ascii__c[111]="o"
            set Ascii__c[112]="p"
            set Ascii__c[113]="q"
            set Ascii__c[114]="r"
            set Ascii__c[115]="s"
            set Ascii__c[116]="t"
            set Ascii__c[117]="u"
            set Ascii__c[118]="v"
            set Ascii__c[119]="w"
            set Ascii__c[120]="x"
            set Ascii__c[121]="y"
            set Ascii__c[122]="z"
            set Ascii__c[123]="{"
            set Ascii__c[124]="|"
            set Ascii__c[125]="}"
            set Ascii__c[126]="~"
            set Ascii__c[128]="€"
            set Ascii__c[130]="‚"
            set Ascii__c[131]="ƒ"
            set Ascii__c[132]="„"
            set Ascii__c[133]="…"
            set Ascii__c[134]="†"
            set Ascii__c[135]="‡"
            set Ascii__c[136]="ˆ"
            set Ascii__c[137]="‰"
            set Ascii__c[138]="Š"
            set Ascii__c[139]="‹"
            set Ascii__c[140]="Œ"
            set Ascii__c[142]="Ž"
            set Ascii__c[145]="‘"
            set Ascii__c[146]="’"
            set Ascii__c[147]="“"
            set Ascii__c[148]="”"
            set Ascii__c[149]="•"
            set Ascii__c[150]="–"
            set Ascii__c[151]="—"
            set Ascii__c[152]="˜"
            set Ascii__c[153]="™"
            set Ascii__c[154]="š"
            set Ascii__c[155]="›"
            set Ascii__c[156]="œ"
            set Ascii__c[158]="ž"
            set Ascii__c[159]="Ÿ"
            set Ascii__c[160]=" "
            set Ascii__c[161]="¡"
            set Ascii__c[162]="¢"
            set Ascii__c[163]="£"
            set Ascii__c[164]="¤"
            set Ascii__c[165]="¥"
            set Ascii__c[166]="¦"
            set Ascii__c[167]="§"
            set Ascii__c[168]="¨"
            set Ascii__c[169]="©"
            set Ascii__c[170]="ª"
            set Ascii__c[171]="«"
            set Ascii__c[172]="¬"
            set Ascii__c[174]="®"
            set Ascii__c[175]="¯"
            set Ascii__c[176]="°"
            set Ascii__c[177]="±"
            set Ascii__c[178]="²"
            set Ascii__c[179]="³"
            set Ascii__c[180]="´"
            set Ascii__c[181]="µ"
            set Ascii__c[182]="¶"
            set Ascii__c[183]="·"
            set Ascii__c[184]="¸"
            set Ascii__c[185]="¹"
            set Ascii__c[186]="º"
            set Ascii__c[187]="»"
            set Ascii__c[188]="¼"
            set Ascii__c[189]="½"
            set Ascii__c[190]="¾"
            set Ascii__c[191]="¿"
            set Ascii__c[192]="À"
            set Ascii__c[193]="Á"
            set Ascii__c[194]="Â"
            set Ascii__c[195]="Ã"
            set Ascii__c[196]="Ä"
            set Ascii__c[197]="Å"
            set Ascii__c[198]="Æ"
            set Ascii__c[199]="Ç"
            set Ascii__c[200]="È"
            set Ascii__c[201]="É"
            set Ascii__c[202]="Ê"
            set Ascii__c[203]="Ë"
            set Ascii__c[204]="Ì"
            set Ascii__c[205]="Í"
            set Ascii__c[206]="Î"
            set Ascii__c[207]="Ï"
            set Ascii__c[208]="Ð"
            set Ascii__c[209]="Ñ"
            set Ascii__c[210]="Ò"
            set Ascii__c[211]="Ó"
            set Ascii__c[212]="Ô"
            set Ascii__c[213]="Õ"
            set Ascii__c[214]="Ö"
            set Ascii__c[215]="×"
            set Ascii__c[216]="Ø"
            set Ascii__c[217]="Ù"
            set Ascii__c[218]="Ú"
            set Ascii__c[219]="Û"
            set Ascii__c[220]="Ü"
            set Ascii__c[221]="Ý"
            set Ascii__c[222]="Þ"
            set Ascii__c[223]="ß"
            set Ascii__c[224]="à"
            set Ascii__c[225]="á"
            set Ascii__c[226]="â"
            set Ascii__c[227]="ã"
            set Ascii__c[228]="ä"
            set Ascii__c[229]="å"
            set Ascii__c[230]="æ"
            set Ascii__c[231]="ç"
            set Ascii__c[232]="è"
            set Ascii__c[233]="é"
            set Ascii__c[234]="ê"
            set Ascii__c[235]="ë"
            set Ascii__c[236]="ì"
            set Ascii__c[237]="í"
            set Ascii__c[238]="î"
            set Ascii__c[239]="ï"
            set Ascii__c[240]="ð"
            set Ascii__c[241]="ñ"
            set Ascii__c[242]="ò"
            set Ascii__c[243]="ó"
            set Ascii__c[244]="ô"
            set Ascii__c[245]="õ"
            set Ascii__c[246]="ö"
            set Ascii__c[247]="÷"
            set Ascii__c[248]="ø"
            set Ascii__c[249]="ù"
            set Ascii__c[250]="ú"
            set Ascii__c[251]="û"
            set Ascii__c[252]="ü"
            set Ascii__c[253]="ý"
            set Ascii__c[254]="þ"
            set Ascii__c[255]="ÿ"
        endfunction

//library Ascii ends
//library CTL:
    function CTL__E takes nothing returns nothing
        local integer i=CTL__ns[0]
        set CTL__ns[0]=0
        loop
            exitwhen 0 == i
            if ( 0 == CTL__p[i] ) then
                if ( 0 == CTL__n[i] ) then
                    call TriggerRemoveCondition(CTL__t, CTL__ct[CTL__th[i]])
                    set CTL__ct[CTL__th[i]]=null
                    set CTL__tc=CTL__tc - 1
                    set CTL__rf[CTL__th[i]]=0
                else
                    set CTL__rf[CTL__th[i]]=CTL__n[i]
                    set CTL__p[CTL__n[i]]=0
                endif
            else
                set CTL__p[CTL__n[i]]=CTL__p[i]
                set CTL__n[CTL__p[i]]=CTL__n[i]
            endif
            set CTL__n[i]=CTL__n[0]
            set CTL__n[0]=i
            set i=CTL__ns[i]
        endloop
        loop
            exitwhen 0 == CTL__i32cr
            set CTL__i32cr=CTL__i32cr - 1
            set i=CTL__i32r[CTL__i32cr]
            if ( not CTL__e32[i] ) then
                call TriggerRemoveCondition(CTL__t, CTL__ct[i])
                set CTL__ct[i]=null
                
                if ( CTL__id32[i] ) then
                    set CTL__tgr[i]=CTL__tgr[0]
                    set CTL__tgr[0]=i
                    set CTL__id32[i]=false
                endif
                
                set CTL__ir32[i]=false
            endif
        endloop
        if ( 0 == CTL__tc ) then
            call PauseTimer(CTL__m)
        else
            call TriggerEvaluate(CTL__t)
        endif
    endfunction
    function CTL__CT takes integer r returns integer
        local integer i
        local integer f
        if ( 0 == CTL__n[0] ) then
            set i=CTL__ic + 1
            set CTL__ic=i
        else
            set i=CTL__n[0]
            set CTL__n[0]=CTL__n[i]
        endif
        set CTL__th[i]=r
        set CTL__ns[i]=- 1
        set f=CTL__rf[r]
        if ( 0 == f ) then
            set CTL__n[i]=0
            set CTL__p[i]=0
            set CTL__rf[r]=i
            set CTL__ct[r]=TriggerAddCondition(CTL__t, CTL__rc[r])
            //set ct[r] = null
            if ( 0 == CTL__tc ) then
                call TimerStart(CTL__m, .031250000, true, function CTL__E)
            endif
            set CTL__tc=CTL__tc + 1
        else
            set CTL__n[i]=f
            set CTL__p[i]=0
            set CTL__p[f]=i
            set CTL__rf[r]=i
        endif
        return i
    endfunction
function CTL__DT takes integer l__CTL__t returns nothing
            set CTL__ns[l__CTL__t]=CTL__ns[0]
            set CTL__ns[0]=l__CTL__t
    endfunction
    function CTL__A takes code c returns integer
        local integer i= CTL__tgr[0]
        if ( 0 == i ) then
            set i=CTL__tgc + 1
            set CTL__tgc=i
        else
            set CTL__tgr[0]=CTL__tgr[i]
        endif
        set CTL__rc[i]=Condition(c)
        return i
    endfunction
    function CTL__A32 takes integer i returns nothing
        if ( not ( CTL__e32[i] or CTL__id32[i] ) ) then
            if ( CTL__ir32[i] ) then
                set CTL__ir32[i]=false
            else
                set CTL__ct[i]=TriggerAddCondition(CTL__t, CTL__rc[i])
            endif
        
            if ( 0 == CTL__tc ) then
                call TimerStart(CTL__m, .031250000, true, function CTL__E)
            endif
            set CTL__tc=CTL__tc + 1
            set CTL__e32[i]=true
        endif
    endfunction
    function CTL__SR32 takes integer i returns nothing
        if ( CTL__e32[i] ) then
            if ( not ( CTL__ir32[i] or CTL__id32[i] ) ) then
                set CTL__i32r[CTL__i32cr]=i
                set CTL__i32cr=CTL__i32cr + 1
                set CTL__ir32[i]=true
            endif
            set CTL__e32[i]=false
            set CTL__tc=CTL__tc - 1
        endif
    endfunction
    function CTL__DT32 takes integer i returns nothing
        if ( not CTL__id32[i] ) then
            if ( not CTL__ir32[i] ) then
                set CTL__ir32[i]=true
                set CTL__tc=CTL__tc - 1
                set CTL__i32r[CTL__i32cr]=i
                set CTL__i32cr=CTL__i32cr + 1
                set CTL__e32[i]=false
            endif
            set CTL__id32[i]=true
        endif
    endfunction
    
        function s__TimerGroup32_create takes code c returns integer
            return CTL__A(c)
        endfunction
        function s__TimerGroup32_destroy takes integer this returns nothing
            call CTL__DT32(this)
        endfunction
        function s__TimerGroup32_start takes integer this returns nothing
            call CTL__A32(this)
        endfunction
        function s__TimerGroup32_stop takes integer this returns nothing
            call CTL__SR32(this)
        endfunction

//library CTL ends
//library CamCommand:

function CamChange takes player p,string chat,integer length returns nothing
    local integer i= 0

    //What is the default wc3 camera distance?
    set udg_CameraDistanceTemp=1650
    
    //-cam X (e.g. -cam 4)
    if length >= 6 then
        set udg_CameraDistanceTemp=S2I(SubString(chat, 5, length))
        if udg_CameraDistanceTemp <= 4 and udg_CameraDistanceTemp >= 1 then
            set udg_CameraDistanceTemp=( 1650 + ( ( udg_CameraDistanceTemp - 1 ) * 200 ) )
        else
            set udg_CameraDistanceTemp=1650
        endif
    endif
    
    //-cam YYYY (e.g. -cam 1821)
    if length >= 8 then
        set udg_CameraDistanceTemp=S2I(SubString(chat, 5, length))
    endif
    
    if ( GetLocalPlayer() == p ) then
        call SetCameraField(CAMERA_FIELD_TARGET_DISTANCE, I2R(udg_CameraDistanceTemp), 0.20)
    endif
    
    loop
        exitwhen i > 11
        if p == Player(i) then
            set udg_CameraDistanceAuto[i]=udg_CameraDistanceTemp
        endif
        
        set i=i + 1
    endloop
    
endfunction


//library CamCommand ends
//library CreateScaledEffect:

function CreateScaledEffect takes string effectPath,real scale,real duration,real x,real y returns unit
//That effect is a UNIT!
set udg_TempUnit4=CreateUnit(Player(14), 'e01Q', x, y, GetRandomDirectionDeg())
call SetUnitScale(udg_TempUnit4, scale, scale, scale)
call AddSpecialEffectTarget(effectPath, udg_TempUnit4, "origin")
call UnitApplyTimedLife(udg_TempUnit4, 'B000', duration)
return udg_TempUnit4
endfunction

function CreateScaledEffect2 takes string effectPath,real scale,real duration,real x,real y returns unit
//That effect is a UNIT! sans flying
set udg_TempUnit4=CreateUnit(Player(14), 'e03A', x, y, GetRandomDirectionDeg())
call SetUnitScale(udg_TempUnit4, scale, scale, scale)
call AddSpecialEffectTarget(effectPath, udg_TempUnit4, "origin")
call UnitApplyTimedLife(udg_TempUnit4, 'B000', duration)
return udg_TempUnit4
endfunction


//library CreateScaledEffect ends
//library DamageEngine:



//GUI Vars:

   
    function s__DamageTrigger_checkItem takes unit u,integer id returns boolean
        local integer i
        if IsUnitType(u, UNIT_TYPE_HERO) then
            set i=UnitInventorySize(u)
            loop
                exitwhen i <= 0
                set i=i - 1
                if GetItemTypeId(UnitItemInSlot(u, i)) == id then
                    return true
                endif
            endloop
        endif
        return false
    endfunction
    
    //Map-makers should comment-out any lines they will never need to check for and move to the top any lines
    //that are checked more frequently in their map.
    function s__DamageTrigger_checkConfig takes integer this returns boolean
        //call BJDebugMsg("Checking configuration")
        if s__DamageTrigger_sourceType[this] != 0 and GetUnitTypeId(udg_DamageEventSource) != s__DamageTrigger_sourceType[this] then
        elseif s__DamageTrigger_targetType[this] != 0 and GetUnitTypeId(udg_DamageEventTarget) != s__DamageTrigger_targetType[this] then
        elseif s__DamageTrigger_sourceBuff[this] != 0 and GetUnitAbilityLevel(udg_DamageEventSource, s__DamageTrigger_sourceBuff[this]) == 0 then
        elseif s__DamageTrigger_targetBuff[this] != 0 and GetUnitAbilityLevel(udg_DamageEventTarget, s__DamageTrigger_targetBuff[this]) == 0 then
        elseif s__DamageTrigger_failChance[this] > 0.00 and GetRandomReal(0.00, 1.00) <= s__DamageTrigger_failChance[this] then
        elseif s__DamageTrigger_userType[this] != 0 and udg_DamageEventType != s__DamageTrigger_userType[this] then
        elseif s__DamageTrigger_source[this] != null and s__DamageTrigger_source[this] != udg_DamageEventSource then
        elseif s__DamageTrigger_target[this] != null and s__DamageTrigger_target[this] != udg_DamageEventTarget then
        elseif s__DamageTrigger_attackType[this] >= 0 and s__DamageTrigger_attackType[this] != udg_DamageEventAttackT then
        elseif s__DamageTrigger_damageType[this] >= 0 and s__DamageTrigger_damageType[this] != udg_DamageEventDamageT then
        elseif s__DamageTrigger_sourceItem[this] != 0 and not s__DamageTrigger_checkItem(udg_DamageEventSource , s__DamageTrigger_sourceItem[this]) then
        elseif s__DamageTrigger_targetItem[this] != 0 and not s__DamageTrigger_checkItem(udg_DamageEventTarget , s__DamageTrigger_targetItem[this]) then
        elseif s__DamageTrigger_sourceClass[this] >= 0 and not IsUnitType(udg_DamageEventSource, ConvertUnitType(s__DamageTrigger_sourceClass[this])) then
        elseif s__DamageTrigger_targetClass[this] >= 0 and not IsUnitType(udg_DamageEventTarget, ConvertUnitType(s__DamageTrigger_targetClass[this])) then
        elseif udg_DamageEventAmount >= s__DamageTrigger_damageMin[this] then
            //call BJDebugMsg("Configuration passed")
            return true
        endif
        //call BJDebugMsg("Checking failed")
        return false
    endfunction
   
    //The below variables are to be treated as constant
    
    //The below variables are to be treated as private
    
    //configuration variables:
    function s__DamageTrigger__get_runChance takes integer this returns real
        return 1.00 - s__DamageTrigger_failChance[this]
    endfunction
    function s__DamageTrigger__set_runChance takes integer this,real r returns nothing
        set s__DamageTrigger_failChance[this]=1.00 - r
    endfunction
    
    function s__DamageTrigger_configure takes integer this returns nothing
        set s__DamageTrigger_attackType[this]=udg_DamageFilterAttackT
        set s__DamageTrigger_damageType[this]=udg_DamageFilterDamageT
        set s__DamageTrigger_source[this]=udg_DamageFilterSource
        set s__DamageTrigger_target[this]=udg_DamageFilterTarget
        set s__DamageTrigger_sourceType[this]=udg_DamageFilterSourceT
        set s__DamageTrigger_targetType[this]=udg_DamageFilterTargetT
        set s__DamageTrigger_sourceItem[this]=udg_DamageFilterSourceI
        set s__DamageTrigger_targetItem[this]=udg_DamageFilterTargetI
        set s__DamageTrigger_sourceClass[this]=udg_DamageFilterSourceC
        set s__DamageTrigger_targetClass[this]=udg_DamageFilterTargetC
        set s__DamageTrigger_userType[this]=udg_DamageFilterType
        set s__DamageTrigger_damageMin[this]=udg_DamageFilterMinAmount
        set s__DamageTrigger_failChance[this]=1.00 - ( udg_DamageFilterRunChance - udg_DamageFilterFailChance )
        
        if udg_DamageFilterSourceA > 0 then
            set s__DamageTrigger_sourceBuff[this]=udg_DamageFilterSourceA
            set udg_DamageFilterSourceA=0
        else
            set s__DamageTrigger_sourceBuff[this]=udg_DamageFilterSourceB
        endif
        if udg_DamageFilterTargetA > 0 then
            set s__DamageTrigger_targetBuff[this]=udg_DamageFilterTargetA
            set udg_DamageFilterTargetA=0
        else
            set s__DamageTrigger_targetBuff[this]=udg_DamageFilterTargetB
        endif
        
        set udg_DamageFilterAttackT=- 1
        set udg_DamageFilterDamageT=- 1
        set udg_DamageFilterSource=null
        set udg_DamageFilterTarget=null
        set udg_DamageFilterSourceT=0
        set udg_DamageFilterTargetT=0
        set udg_DamageFilterType=0
        set udg_DamageFilterSourceB=0
        set udg_DamageFilterTargetB=0
        set udg_DamageFilterSourceC=- 1
        set udg_DamageFilterTargetC=- 1
        set udg_DamageFilterSourceI=0
        set udg_DamageFilterTargetI=0
        set udg_DamageFilterMinAmount=0.00
        set udg_DamageFilterFailChance=0.00
        set udg_DamageFilterRunChance=1.00
 
        set s__DamageTrigger_configured[this]=true
    endfunction
    function s__DamageTrigger_setGUIFromStruct takes boolean full returns nothing
        set udg_DamageEventAmount=s__Damage_damage[s__Damage_index]
        set udg_DamageEventAttackT=GetHandleId(s__Damage_attackType[s__Damage_index])
        set udg_DamageEventDamageT=GetHandleId(s__Damage_damageType[s__Damage_index])
        set udg_DamageEventWeaponT=GetHandleId(s__Damage_weaponType[s__Damage_index])
        set udg_DamageEventType=s__Damage_userType[s__Damage_index]

        set udg_DamageEventArmorPierced=s__Damage_armorPierced[s__Damage_index]
        set udg_DamageEventArmorT=s__Damage_armorType[s__Damage_index]
        set udg_DamageEventDefenseT=s__Damage_defenseType[s__Damage_index]

        if full then
            set udg_DamageEventSource=s__Damage_sourceUnit[s__Damage_index]
            set udg_DamageEventTarget=s__Damage_targetUnit[s__Damage_index]
            set udg_DamageEventPrevAmt=s__Damage_prevAmt[s__Damage_index]
            set udg_IsDamageAttack=s__Damage_isAttack[s__Damage_index]
            set udg_IsDamageCode=s__Damage_isCode[s__Damage_index]
            set udg_IsDamageSpell=s__Damage_isSpell[s__Damage_index]

            set udg_IsDamageMelee=s__Damage_isMelee[s__Damage_index]
            set udg_IsDamageRanged=s__Damage_isRanged[s__Damage_index]

        endif
    endfunction
    function s__DamageTrigger_setStructFromGUI takes nothing returns nothing
        set s__Damage_damage[s__Damage_index]=udg_DamageEventAmount
        set s__Damage_attackType[s__Damage_index]=ConvertAttackType(udg_DamageEventAttackT)
        set s__Damage_damageType[s__Damage_index]=ConvertDamageType(udg_DamageEventDamageT)
        set s__Damage_weaponType[s__Damage_index]=ConvertWeaponType(udg_DamageEventWeaponT)
        set s__Damage_userType[s__Damage_index]=udg_DamageEventType

        set s__Damage_armorPierced[s__Damage_index]=udg_DamageEventArmorPierced
        set s__Damage_armorType[s__Damage_index]=udg_DamageEventArmorT
        set s__Damage_defenseType[s__Damage_index]=udg_DamageEventDefenseT

    endfunction
    function s__DamageTrigger_getVerboseStr takes string eventName returns string
        if eventName == "Modifier" or eventName == "Mod" then
            return "udg_DamageModifierEvent"
        endif
        return "udg_" + eventName + "DamageEvent"
    endfunction
    function s__DamageTrigger_getStrIndex takes string var,real lbs returns integer
        local integer root= R2I(lbs)
        if ( var == "udg_DamageModifierEvent" and root < 4 ) or var == "udg_PreDamageEvent" then
            set root=s__DamageTrigger_MOD
        elseif var == "udg_DamageModifierEvent" or var == "udg_ArmorDamageEvent" then
            set root=s__DamageTrigger_SHIELD
        elseif ( var == "udg_DamageEvent" and root == 2 or root == 0 ) or var == "udg_ZeroDamageEvent" then
            set root=s__DamageTrigger_ZERO
        elseif var == "udg_DamageEvent" or var == "udg_OnDamageEvent" then
            set root=s__DamageTrigger_DAMAGE
        elseif var == "udg_AfterDamageEvent" then
            set root=s__DamageTrigger_AFTER
        elseif var == "udg_LethalDamageEvent" then
            set root=s__DamageTrigger_LETHAL
        elseif var == "udg_AOEDamageEvent" or var == "udg_SourceDamageEvent" then
            set root=s__DamageTrigger_AOE
        else
            set root=0
//ignored textmacro command: DAMAGE_EVENT_REG_PLUGIN_GDD()
//ignored textmacro command: DAMAGE_EVENT_REG_PLUGIN_PDD()
//ignored textmacro command: DAMAGE_EVENT_REG_PLUGIN_01()
//ignored textmacro command: DAMAGE_EVENT_REG_PLUGIN_02()
//ignored textmacro command: DAMAGE_EVENT_REG_PLUGIN_03()
//ignored textmacro command: DAMAGE_EVENT_REG_PLUGIN_04()
//ignored textmacro command: DAMAGE_EVENT_REG_PLUGIN_05()
        endif
        return root
    endfunction
    function s__DamageTrigger_toggleAllFilters takes integer this,boolean flag returns nothing
        set s__DamageTrigger_filters[this + DamageEngine_FILTER_ATTACK]=flag
        set s__DamageTrigger_filters[this + DamageEngine_FILTER_MELEE]=flag
        set s__DamageTrigger_filters[this + DamageEngine_FILTER_OTHER]=flag
        set s__DamageTrigger_filters[this + DamageEngine_FILTER_RANGED]=flag
        set s__DamageTrigger_filters[this + DamageEngine_FILTER_SPELL]=flag
        set s__DamageTrigger_filters[this + DamageEngine_FILTER_CODE]=flag
    endfunction
    function s__DamageTrigger__set_filter takes integer this,integer f returns nothing
        set this=this * DamageEngine_FILTER_MAX
        if f == DamageEngine_FILTER_OTHER then
            call s__DamageTrigger_toggleAllFilters(this,true)
        else
            if f == DamageEngine_FILTER_ATTACK then
                set s__DamageTrigger_filters[this + DamageEngine_FILTER_ATTACK]=true
                set s__DamageTrigger_filters[this + DamageEngine_FILTER_MELEE]=true
                set s__DamageTrigger_filters[this + DamageEngine_FILTER_RANGED]=true
            else
                set s__DamageTrigger_filters[this + f]=true
            endif
        endif
    endfunction
    function s__DamageTrigger_registerVerbose takes trigger whichTrig,string var,real lbs,boolean GUI,integer filt returns integer
        local integer index= s__DamageTrigger_getStrIndex(var , lbs)
        local integer i= 0
        local integer id= 0
 
        if index == 0 then
            return 0
        elseif s__DamageTrigger_rootTrig[s__DamageTrigger_lastRegistered] == whichTrig and s__DamageTrigger_usingGUI[s__DamageTrigger_lastRegistered] then
            set s__DamageTrigger_filters[s__DamageTrigger_lastRegistered * DamageEngine_FILTER_MAX + filt]=true //allows GUI to register multiple different types of Damage filters to the same trigger
            return 0
        endif
 
        if not DamageEngine__hasLethal and index == s__DamageTrigger_LETHAL then
            set DamageEngine__hasLethal=true
        endif
        if s__DamageTrigger_trigIndexStack[0] == 0 then
            set s__DamageTrigger_count=s__DamageTrigger_count + 1 //List runs from index 10 and up
            set id=s__DamageTrigger_count
        else
            set id=s__DamageTrigger_trigIndexStack[0]
            set s__DamageTrigger_trigIndexStack[0]=s__DamageTrigger_trigIndexStack[id]
        endif
        set s__DamageTrigger_lastRegistered=id
        call s__DamageTrigger__set_filter(id,filt)
        set s__DamageTrigger_rootTrig[id]=whichTrig
        set s__DamageTrigger_usingGUI[id]=GUI
        set s__DamageTrigger_weight[id]=lbs
        set s__DamageTrigger_eventStr[id]=var
        
        //Next 2 lines added to fix a bug when using manual vJass configuration,
        //discovered and solved by lolreported
        set s__DamageTrigger_attackType[id]=- 1
        set s__DamageTrigger_damageType[id]=- 1
		//they will probably bug out with class types as well, so I should add them, just in case:
		set s__DamageTrigger_sourceClass[id]=- 1
		set s__DamageTrigger_targetClass[id]=- 1

        loop
            set i=s__DamageTrigger_next[index]
            exitwhen i == 0 or lbs < s__DamageTrigger_weight[i]
            set index=i
        endloop
        set s__DamageTrigger_next[index]=id
        set s__DamageTrigger_next[id]=i
 
        //call BJDebugMsg("Registered " + I2S(id) + " to " + I2S(index) + " and before " + I2S(i))
        return s__DamageTrigger_lastRegistered
    endfunction
    function s__DamageTrigger_registerTrigger takes trigger t,string var,real lbs returns integer
        return s__DamageTrigger_registerVerbose(t , s__DamageTrigger_getVerboseStr(var) , lbs , false , DamageEngine_FILTER_OTHER)
    endfunction
    function s__DamageTrigger_getIndex takes trigger t,string eventName,real lbs returns integer
        local integer index= s__DamageTrigger_getStrIndex(s__DamageTrigger_getVerboseStr(eventName) , lbs)
        loop
            set s__DamageTrigger_prev=index
            set index=s__DamageTrigger_next[index]
            exitwhen index == 0 or s__DamageTrigger_rootTrig[index] == t
        endloop
        return index
    endfunction
    function s__DamageTrigger_unregisterByIndex takes integer this,boolean reset returns boolean
        if this == 0 then
            return false
        endif
        set s__DamageTrigger_next[s__DamageTrigger_prev]=s__DamageTrigger_next[this]
     
        set s__DamageTrigger_trigIndexStack[this]=s__DamageTrigger_trigIndexStack[0]
        set s__DamageTrigger_trigIndexStack[0]=this
 
        if reset then
            call s__DamageTrigger_configure(this)
            set s__DamageTrigger_configured[this]=false
            call s__DamageTrigger_toggleAllFilters((this * DamageEngine_FILTER_MAX),false)
        endif
        return true
    endfunction
    function s__DamageTrigger_unregister takes trigger t,string eventName,real lbs,boolean reset returns boolean
        return s__DamageTrigger_unregisterByIndex(s__DamageTrigger_getIndex(t , eventName , lbs),reset)
    endfunction
    function s__DamageTrigger_DamageEngine__run takes integer this returns nothing
        local integer cat= this
        local integer d= s__Damage_index

        local boolean structUnset= false
        local boolean guiUnset= false
        local boolean mod= cat <= s__DamageTrigger_DAMAGE

        if DamageEngine__dreaming then
            return
        endif
        set DamageEngine__dreaming=true
        call DisableTrigger(DamageEngine__t1)
        call DisableTrigger(DamageEngine__t2)
        call EnableTrigger(DamageEngine__t3)
        //call BJDebugMsg("Start of event running")
        loop
            set this=s__DamageTrigger_next[this]
            exitwhen this == 0
            exitwhen cat == s__DamageTrigger_MOD and ( udg_DamageEventOverride or udg_DamageEventType == DamageEngine_TYPE_PURE )
            exitwhen cat == s__DamageTrigger_SHIELD and udg_DamageEventAmount <= 0.00

            exitwhen cat == s__DamageTrigger_LETHAL and udg_LethalDamageHP > DamageEngine__DEATH_VAL

            
            set s__DamageTrigger_eventIndex=this
            if ( not s__DamageTrigger_DamageEngine__trigFrozen[this] ) and s__DamageTrigger_filters[this * DamageEngine_FILTER_MAX + s__Damage_eFilter[d]] and IsTriggerEnabled(s__DamageTrigger_rootTrig[this]) and ( ( not s__DamageTrigger_configured[this] ) or ( s__DamageTrigger_checkConfig(this) ) ) and ( cat != s__DamageTrigger_AOE or udg_DamageEventAOE > 1 or s__DamageTrigger_eventStr[this] == "udg_SourceDamageEvent" ) then

                if mod then
                    if s__DamageTrigger_usingGUI[this] then
                        if guiUnset then
                            set guiUnset=false
                            call s__DamageTrigger_setGUIFromStruct(false)
                        endif
//ignored textmacro command: DAMAGE_EVENT_FILTER_PLUGIN_PDD()
                    elseif structUnset then
                        set structUnset=false
                        call s__DamageTrigger_setStructFromGUI()
                    endif
                endif

//ignored textmacro command: DAMAGE_EVENT_FILTER_PLUGIN_01()
//ignored textmacro command: DAMAGE_EVENT_FILTER_PLUGIN_02()
//ignored textmacro command: DAMAGE_EVENT_FILTER_PLUGIN_03()
//ignored textmacro command: DAMAGE_EVENT_FILTER_PLUGIN_04()
//ignored textmacro command: DAMAGE_EVENT_FILTER_PLUGIN_05()
               
                //JASS users who do not use actions can modify the below block to just evaluate.
                //It should not make any perceptable difference in terms of performance.
                if TriggerEvaluate(s__DamageTrigger_rootTrig[this]) then
                    call TriggerExecute(s__DamageTrigger_rootTrig[this])
                endif
//ignored textmacro command: DAMAGE_EVENT_MOD_PLUGIN_01()
//ignored textmacro command: DAMAGE_EVENT_MOD_PLUGIN_02()
//ignored textmacro command: DAMAGE_EVENT_MOD_PLUGIN_03()
//ignored textmacro command: DAMAGE_EVENT_MOD_PLUGIN_04()
//ignored textmacro command: DAMAGE_EVENT_MOD_PLUGIN_05()

                if mod then
                    if s__DamageTrigger_usingGUI[this] then
//ignored textmacro command: DAMAGE_EVENT_MOD_PLUGIN_PDD()
                        if cat != s__DamageTrigger_MOD then
                            set s__Damage_damage[d]=udg_DamageEventAmount
                        else
                            set structUnset=true
                        endif
                    elseif cat != s__DamageTrigger_MOD then
                        set udg_DamageEventAmount=s__Damage_damage[d]
                    else
                        set guiUnset=true
                    endif
                endif
                if udg_RemoveDamageEvent then
                    set udg_RemoveDamageEvent=false
                    call s__DamageTrigger_unregisterByIndex(this,true)
                endif

            endif
        endloop

        if structUnset then
            call s__DamageTrigger_setStructFromGUI()
        endif
        if guiUnset then
            call s__DamageTrigger_setGUIFromStruct(false)
        endif



        //call BJDebugMsg("End of event running")
        call DisableTrigger(DamageEngine__t3)
        call EnableTrigger(DamageEngine__t1)
        call EnableTrigger(DamageEngine__t2)
        set DamageEngine__dreaming=false
    endfunction
    function s__DamageTrigger__staticgetindex takes code c returns trigger
        local integer i= 0
        local boolexpr b= Filter(c)
        loop
            if i == s__DamageTrigger_autoN then
                set s__DamageTrigger_autoTriggers[i]=CreateTrigger()
                set s__DamageTrigger_autoFuncs[i]=b
                call TriggerAddCondition(s__DamageTrigger_autoTriggers[i], b)
                exitwhen true
            endif
            set i=i + 1
            exitwhen b == s__DamageTrigger_autoFuncs[i]
        endloop
        return s__DamageTrigger_autoTriggers[i]
    endfunction
//ignored textmacro command: DAMAGE_EVENT_USER_STRUCT_PLUGIN_01()
//ignored textmacro command: DAMAGE_EVENT_USER_STRUCT_PLUGIN_02()
//ignored textmacro command: DAMAGE_EVENT_USER_STRUCT_PLUGIN_03()
//ignored textmacro command: DAMAGE_EVENT_USER_STRUCT_PLUGIN_04()
//ignored textmacro command: DAMAGE_EVENT_USER_STRUCT_PLUGIN_05()



   


    function s__Damage__get_source takes nothing returns unit
        return udg_DamageEventSource
    endfunction
    function s__Damage__get_target takes nothing returns unit
        return udg_DamageEventTarget
    endfunction
    function s__Damage__get_amount takes nothing returns real
        return s__Damage_damage[s__Damage_index]
    endfunction
    function s__Damage__set_amount takes real r returns nothing
        set s__Damage_damage[s__Damage_index]=r
    endfunction
   

    function s__Damage_setArmor takes integer this,boolean reset returns nothing
        local real pierce
        local integer at
        local integer dt
        if reset then
            set pierce=udg_DamageEventArmorPierced
            set at=s__Damage_prevArmorT[s__Damage_index]
            set dt=s__Damage_prevDefenseT[s__Damage_index]
            set udg_DamageEventArmorPierced=0.00
            set s__Damage_armorPierced[this]=0.00
        else
            set pierce=- udg_DamageEventArmorPierced
            set at=udg_DamageEventArmorT
            set dt=udg_DamageEventDefenseT
        endif
        if not ( pierce == 0.00 ) then //Changed condition thanks to bug reported by BLOKKADE
            call BlzSetUnitArmor(udg_DamageEventTarget, BlzGetUnitArmor(udg_DamageEventTarget) + pierce)
        endif
        if s__Damage_prevArmorT[s__Damage_index] != udg_DamageEventArmorT then
            call BlzSetUnitIntegerField(udg_DamageEventTarget, UNIT_IF_ARMOR_TYPE, at)
        endif
        if s__Damage_prevDefenseT[s__Damage_index] != udg_DamageEventDefenseT then
            call BlzSetUnitIntegerField(udg_DamageEventTarget, UNIT_IF_DEFENSE_TYPE, dt)
        endif
    endfunction


    function s__Damage_onAOEEnd takes nothing returns nothing
        call s__DamageTrigger_DamageEngine__run(s__DamageTrigger_AOE)
        set udg_DamageEventAOE=1
        set udg_DamageEventLevel=1
        set udg_EnhancedDamageTarget=null
        set udg_AOEDamageSource=null
        call GroupClear(udg_DamageEventAOEGroup)
    endfunction

    
    function s__Damage_afterDamage takes nothing returns nothing
        if udg_DamageEventDamageT != 0 and not ( udg_DamageEventPrevAmt == 0.00 ) then
            call s__DamageTrigger_DamageEngine__run(s__DamageTrigger_AFTER)
            set udg_DamageEventDamageT=0
            set udg_DamageEventPrevAmt=0.00
        endif
    endfunction
    function s__Damage_doPreEvents takes integer this,boolean natural returns boolean

        set s__Damage_armorType[this]=BlzGetUnitIntegerField(s__Damage_targetUnit[this], UNIT_IF_ARMOR_TYPE)
        set s__Damage_defenseType[this]=BlzGetUnitIntegerField(s__Damage_targetUnit[this], UNIT_IF_DEFENSE_TYPE)
        set s__Damage_prevArmorT[this]=s__Damage_armorType[this]
        set s__Damage_prevDefenseT[this]=s__Damage_defenseType[this]
        set s__Damage_armorPierced[this]=0.00

        set s__Damage_index=this
        call s__DamageTrigger_setGUIFromStruct(true)
       
        call GroupAddUnit(DamageEngine__proclusGlobal, udg_DamageEventSource)
        call GroupAddUnit(DamageEngine__fischerMorrow, udg_DamageEventTarget)
//ignored textmacro command: DAMAGE_EVENT_PRE_VARS_PLUGIN_01()
//ignored textmacro command: DAMAGE_EVENT_PRE_VARS_PLUGIN_02()
//ignored textmacro command: DAMAGE_EVENT_PRE_VARS_PLUGIN_03()
//ignored textmacro command: DAMAGE_EVENT_PRE_VARS_PLUGIN_04()
//ignored textmacro command: DAMAGE_EVENT_PRE_VARS_PLUGIN_05()
        if not ( udg_DamageEventAmount == 0.00 ) then
            set udg_DamageEventOverride=udg_DamageEventDamageT == 0
            call s__DamageTrigger_DamageEngine__run(s__DamageTrigger_MOD)



            if natural then
                call BlzSetEventAttackType(s__Damage_attackType[this])
                call BlzSetEventDamageType(s__Damage_damageType[this])
                call BlzSetEventWeaponType(s__Damage_weaponType[this])
                call BlzSetEventDamage(udg_DamageEventAmount)
            endif

            call s__Damage_setArmor(this,false)

            return false
        endif
        return true
    endfunction
    function s__Damage_unfreeze takes nothing returns nothing
        local integer i= s__Damage_damageStack
        loop
            exitwhen i == 0
            set i=i - 1
            set s__DamageTrigger_DamageEngine__trigFrozen[s__Damage_recursiveTrig[s__Damage_stackRef[i]]]=false
            set s__DamageTrigger_DamageEngine__levelsDeep[s__Damage_recursiveTrig[s__Damage_stackRef[i]]]=0
        endloop
        call EnableTrigger(DamageEngine__t1)
        call EnableTrigger(DamageEngine__t2)
        set DamageEngine__kicking=false
        set s__Damage_damageStack=0
        set s__Damage_prepped=0
        set DamageEngine__dreaming=false
        set DamageEngine__sleepLevel=0
        call GroupClear(DamageEngine__proclusGlobal)
        call GroupClear(DamageEngine__fischerMorrow)
        //call BJDebugMsg("Cleared up the groups")
    endfunction
    function s__Damage_finish takes nothing returns nothing
        local integer i= 0
        local integer exit
        if DamageEngine__eventsRun then
            set DamageEngine__eventsRun=false
            call s__Damage_afterDamage()
        endif
        if DamageEngine__canKick and not DamageEngine__kicking then
            if s__Damage_damageStack != 0 then
                set DamageEngine__kicking=true
                loop
                    set DamageEngine__sleepLevel=DamageEngine__sleepLevel + 1
                    set exit=s__Damage_damageStack
                    loop
                        set s__Damage_prepped=s__Damage_stackRef[i]
                        if UnitAlive(s__Damage_targetUnit[s__Damage_prepped]) then //Added just in case dead units had issues.
                            call s__Damage_doPreEvents(s__Damage_prepped,false) //don't evaluate the pre-event
                            if s__Damage_damage[s__Damage_prepped] > 0.00 then
                                call DisableTrigger(DamageEngine__t1) //Force only the after armor event to run.
                                call EnableTrigger(DamageEngine__t2) //in case the user forgot to re-enable this
                                set DamageEngine__totem=true
                                call UnitDamageTarget(s__Damage_sourceUnit[s__Damage_prepped], s__Damage_targetUnit[s__Damage_prepped], s__Damage_damage[s__Damage_prepped], s__Damage_isAttack[s__Damage_prepped], s__Damage_isRanged[s__Damage_prepped], s__Damage_attackType[s__Damage_prepped], s__Damage_damageType[s__Damage_prepped], s__Damage_weaponType[s__Damage_prepped])
                            else
                                //No new events run at all in this case
                                if udg_DamageEventDamageT != 0 then
                                    call s__DamageTrigger_DamageEngine__run(s__DamageTrigger_DAMAGE)
                                endif
                                if s__Damage_damage[s__Damage_prepped] < 0.00 then
                                    //No need for BlzSetEventDamage here
                                    call SetWidgetLife(s__Damage_targetUnit[s__Damage_prepped], GetWidgetLife(s__Damage_targetUnit[s__Damage_prepped]) - s__Damage_damage[s__Damage_prepped])
                                endif

                                call s__Damage_setArmor(s__Damage_prepped,true)

                            endif
                            call s__Damage_afterDamage()
                        endif
                        set i=i + 1
                        exitwhen i == exit
                    endloop
                    exitwhen i == s__Damage_damageStack
                endloop
            endif
            call s__Damage_unfreeze()
        endif
    endfunction
    function s__Damage_failsafeClear takes nothing returns nothing

        call s__Damage_setArmor(s__Damage_index,true)

        set DamageEngine__canKick=true
        set DamageEngine__kicking=false
        set DamageEngine__totem=false
        if udg_DamageEventDamageT != 0 then
            call s__DamageTrigger_DamageEngine__run(s__DamageTrigger_DAMAGE)
            set DamageEngine__eventsRun=true
        endif
        call s__Damage_finish()
    endfunction
    function s__Damage__set_enabled takes boolean b returns nothing
        if b then
            if DamageEngine__dreaming then
                call EnableTrigger(DamageEngine__t3)
            else
                call EnableTrigger(DamageEngine__t1)
                call EnableTrigger(DamageEngine__t2)
            endif
        else
            if DamageEngine__dreaming then
                call DisableTrigger(DamageEngine__t3)
            else
                call DisableTrigger(DamageEngine__t1)
                call DisableTrigger(DamageEngine__t2)
            endif
        endif
    endfunction
    function s__Damage__get_enabled takes nothing returns boolean
        return IsTriggerEnabled(DamageEngine__t1)
    endfunction
   
   
    function s__Damage_getOutOfBed takes nothing returns nothing
        if DamageEngine__totem then
            call s__Damage_failsafeClear() //WarCraft 3 didn't run the DAMAGED event despite running the DAMAGING event.
        else
            set DamageEngine__canKick=true
            set DamageEngine__kicking=false
            call s__Damage_finish()
        endif

        call s__Damage_onAOEEnd()

        set s__Damage_arisen=true
    endfunction
   
    function s__Damage_wakeUp takes nothing returns nothing
        set DamageEngine__dreaming=false
        call s__Damage__set_enabled(true)
        call ForForce(bj_FORCE_PLAYER[0], function s__Damage_getOutOfBed) //Moved to a new thread in case of a thread crash
        if not s__Damage_arisen then
            //call BJDebugMsg("DamageEngine issue: thread crashed!")
            call s__Damage_unfreeze()
        else
            set s__Damage_arisen=false
        endif
        set s__Damage_count=0
        set s__Damage_index=0
        set DamageEngine__alarmSet=false
        //call BJDebugMsg("Timer wrapped up")
    endfunction
    function s__Damage_addRecursive takes integer this returns nothing
        if not ( s__Damage_damage[this] == 0.00 ) then
            set s__Damage_recursiveTrig[this]=s__DamageTrigger_eventIndex
            if not s__Damage_isCode[this] then
                set s__Damage_isCode[this]=true
                set s__Damage_userType[this]=DamageEngine_TYPE_CODE
            endif
            set DamageEngine_inception=DamageEngine_inception or s__DamageTrigger_DamageEngine__inceptionTrig[s__DamageTrigger_eventIndex]
            if DamageEngine__kicking and IsUnitInGroup(s__Damage_sourceUnit[this], DamageEngine__proclusGlobal) and IsUnitInGroup(s__Damage_targetUnit[this], DamageEngine__fischerMorrow) then
                if not DamageEngine_inception then
                    set s__DamageTrigger_DamageEngine__trigFrozen[s__DamageTrigger_eventIndex]=true
                elseif not s__DamageTrigger_DamageEngine__trigFrozen[s__DamageTrigger_eventIndex] then
                    set s__DamageTrigger_DamageEngine__inceptionTrig[s__DamageTrigger_eventIndex]=true
                    if s__DamageTrigger_DamageEngine__levelsDeep[s__DamageTrigger_eventIndex] < DamageEngine__sleepLevel then
                        set s__DamageTrigger_DamageEngine__levelsDeep[s__DamageTrigger_eventIndex]=s__DamageTrigger_DamageEngine__levelsDeep[s__DamageTrigger_eventIndex] + 1
                        if s__DamageTrigger_DamageEngine__levelsDeep[s__DamageTrigger_eventIndex] >= DamageEngine__LIMBO then
                            set s__DamageTrigger_DamageEngine__trigFrozen[s__DamageTrigger_eventIndex]=true
                        endif
                    endif
                endif
            endif
            set s__Damage_stackRef[s__Damage_damageStack]=this
            set s__Damage_damageStack=s__Damage_damageStack + 1
            //call BJDebugMsg("damageStack: " + I2S(damageStack) + " levelsDeep: " + I2S(DamageTrigger.eventIndex.levelsDeep) + " sleepLevel: " + I2S(sleepLevel))
        endif
        set DamageEngine_inception=false
    endfunction
    function s__Damage_clearNexts takes nothing returns nothing
        set udg_NextDamageIsAttack=false
        set udg_NextDamageType=0
        set udg_NextDamageWeaponT=0

        set udg_NextDamageIsMelee=false
        set udg_NextDamageIsRanged=false

    endfunction
    function s__Damage_create takes unit src,unit tgt,real amt,boolean a,attacktype at,damagetype dt,weapontype wt returns integer
        local integer d= s__Damage_count + 1
        set s__Damage_count=d
        set s__Damage_sourceUnit[d]=src
        set s__Damage_targetUnit[d]=tgt
        set s__Damage_damage[d]=amt
        set s__Damage_prevAmt[d]=amt
                     
        set s__Damage_attackType[d]=at
        set s__Damage_damageType[d]=dt
        set s__Damage_weaponType[d]=wt
                     
        set s__Damage_isAttack[d]=udg_NextDamageIsAttack or a
        set s__Damage_isSpell[d]=s__Damage_attackType[d] == null and not s__Damage_isAttack[d]
        return d
    endfunction
    function s__Damage_createFromEvent takes nothing returns integer
        local integer d= s__Damage_create(GetEventDamageSource() , GetTriggerUnit() , GetEventDamage() , BlzGetEventIsAttack() , BlzGetEventAttackType() , BlzGetEventDamageType() , BlzGetEventWeaponType())
        set s__Damage_isCode[d]=udg_NextDamageType != 0 or udg_NextDamageIsAttack or udg_NextDamageIsRanged or udg_NextDamageIsMelee or s__Damage_damageType[d] == DAMAGE_TYPE_MIND or udg_NextDamageWeaponT != 0 or ( s__Damage_damageType[d] == DAMAGE_TYPE_UNKNOWN and not ( s__Damage_damage[d] == 0.00 ) )
 
        if s__Damage_isCode[d] then
            if udg_NextDamageType != 0 then
                set s__Damage_userType[d]=udg_NextDamageType
            else
                set s__Damage_userType[d]=DamageEngine_TYPE_CODE
            endif

            set s__Damage_isMelee[d]=udg_NextDamageIsMelee
            set s__Damage_isRanged[d]=udg_NextDamageIsRanged

            set s__Damage_eFilter[d]=DamageEngine_FILTER_CODE
            if udg_NextDamageWeaponT != 0 then
                set s__Damage_weaponType[d]=ConvertWeaponType(udg_NextDamageWeaponT)
                set udg_NextDamageWeaponT=0
            endif
        else
            set s__Damage_userType[d]=0
            if s__Damage_damageType[d] == DAMAGE_TYPE_NORMAL and s__Damage_isAttack[d] then

                set s__Damage_isMelee[d]=IsUnitType(s__Damage_sourceUnit[d], UNIT_TYPE_MELEE_ATTACKER)
                set s__Damage_isRanged[d]=IsUnitType(s__Damage_sourceUnit[d], UNIT_TYPE_RANGED_ATTACKER)
                if s__Damage_isMelee[d] and s__Damage_isRanged[d] then
                    set s__Damage_isMelee[d]=s__Damage_weaponType[d] != null // Melee units play a sound when damaging
                    set s__Damage_isRanged[d]=not s__Damage_isMelee[d] // In the case where a unit is both ranged and melee, the ranged attack plays no sound.
                endif
                if s__Damage_isMelee[d] then
                    set s__Damage_eFilter[d]=DamageEngine_FILTER_MELEE
                elseif s__Damage_isRanged[d] then
                    set s__Damage_eFilter[d]=DamageEngine_FILTER_RANGED
                else
                    set s__Damage_eFilter[d]=DamageEngine_FILTER_ATTACK
                endif



            else
                if s__Damage_isSpell[d] then
                    set s__Damage_eFilter[d]=DamageEngine_FILTER_SPELL
                else
                    set s__Damage_eFilter[d]=DamageEngine_FILTER_OTHER
                endif

                set s__Damage_isMelee[d]=false
                set s__Damage_isRanged[d]=false

            endif
        endif
        call s__Damage_clearNexts()
        return d
    endfunction
    function s__Damage_onRecursion takes nothing returns boolean
        local integer d= s__Damage_createFromEvent()
        call s__Damage_addRecursive(d)
        call BlzSetEventDamage(0.00)
        return false
    endfunction
    function s__Damage_onDamaging takes nothing returns boolean
        local integer d= s__Damage_createFromEvent()
        //call BJDebugMsg("Pre-damage event running for " + GetUnitName(GetTriggerUnit()))
        if DamageEngine__alarmSet then
            if DamageEngine__totem then //WarCraft 3 didn't run the DAMAGED event despite running the DAMAGING event.
                if s__Damage_damageType[d] == DAMAGE_TYPE_SPIRIT_LINK or s__Damage_damageType[d] == DAMAGE_TYPE_DEFENSIVE or s__Damage_damageType[d] == DAMAGE_TYPE_PLANT then
                    set DamageEngine__totem=false
                    set DamageEngine__lastInstance=s__Damage_index
                    set DamageEngine__canKick=false
                else
                    call s__Damage_failsafeClear() //Not an overlapping event - just wrap it up
                endif
            else
                call s__Damage_finish() //wrap up any previous damage index
            endif
           

            if s__Damage_sourceUnit[d] != udg_AOEDamageSource then
                call s__Damage_onAOEEnd()
                set udg_AOEDamageSource=s__Damage_sourceUnit[d]
            elseif s__Damage_targetUnit[d] == udg_EnhancedDamageTarget then
                set udg_DamageEventLevel=udg_DamageEventLevel + 1
            elseif not IsUnitInGroup(s__Damage_targetUnit[d], udg_DamageEventAOEGroup) then
                set udg_DamageEventAOE=udg_DamageEventAOE + 1
            endif

        else
            call TimerStart(DamageEngine__alarm, 0.00, false, function s__Damage_wakeUp)
            set DamageEngine__alarmSet=true

            set udg_AOEDamageSource=s__Damage_sourceUnit[d]
            set udg_EnhancedDamageTarget=s__Damage_targetUnit[d]

        endif

        call GroupAddUnit(udg_DamageEventAOEGroup, s__Damage_targetUnit[d])

        if s__Damage_doPreEvents(d,true) then
            call s__DamageTrigger_DamageEngine__run(s__DamageTrigger_ZERO)
            set DamageEngine__canKick=true
            call s__Damage_finish()
        endif
        set DamageEngine__totem=DamageEngine__lastInstance == 0 or DamageEngine__attacksImmune[udg_DamageEventAttackT] or DamageEngine__damagesImmune[udg_DamageEventDamageT] or not IsUnitType(udg_DamageEventTarget, UNIT_TYPE_MAGIC_IMMUNE)
        return false
    endfunction
    function s__Damage_onDamaged takes nothing returns boolean
        local real r= GetEventDamage()
        local integer d= s__Damage_index
        //call BJDebugMsg("Second damage event running for " + GetUnitName(GetTriggerUnit()))
        if s__Damage_prepped > 0 then
            set s__Damage_prepped=0
        elseif DamageEngine__dreaming or s__Damage_prevAmt[d] == 0.00 then
            return false
        elseif DamageEngine__totem then
            set DamageEngine__totem=false
        else
            //This should only happen for stuff like Spirit Link or Thorns Aura/Carapace
            call s__Damage_afterDamage()
            set s__Damage_index=DamageEngine__lastInstance
            set DamageEngine__lastInstance=0
            set d=s__Damage_index
            set DamageEngine__canKick=true
            call s__DamageTrigger_setGUIFromStruct(true)
        endif

        call s__Damage_setArmor(d,true)

       

        if not ( udg_DamageEventAmount == 0.00 ) and not ( r == 0.00 ) then
            set udg_DamageScalingWC3=r / udg_DamageEventAmount
        elseif udg_DamageEventAmount > 0.00 then
            set udg_DamageScalingWC3=0.00
        else
            set udg_DamageScalingWC3=1.00
            if udg_DamageEventPrevAmt == 0.00 then
                set udg_DamageScalingUser=0.00
            else
                set udg_DamageScalingUser=udg_DamageEventAmount / udg_DamageEventPrevAmt
            endif
        endif

        set udg_DamageEventAmount=r
        set s__Damage_damage[d]=r
 
//ignored textmacro command: DAMAGE_EVENT_VARS_PLUGIN_GDD()
//ignored textmacro command: DAMAGE_EVENT_VARS_PLUGIN_PDD()
//ignored textmacro command: DAMAGE_EVENT_VARS_PLUGIN_01()
//ignored textmacro command: DAMAGE_EVENT_VARS_PLUGIN_02()
//ignored textmacro command: DAMAGE_EVENT_VARS_PLUGIN_03()
//ignored textmacro command: DAMAGE_EVENT_VARS_PLUGIN_04()
//ignored textmacro command: DAMAGE_EVENT_VARS_PLUGIN_05()
 
        if udg_DamageEventAmount > 0.00 then
            call s__DamageTrigger_DamageEngine__run(s__DamageTrigger_SHIELD)




            if DamageEngine__hasLethal or udg_DamageEventType < 0 then
                set udg_LethalDamageHP=GetWidgetLife(udg_DamageEventTarget) - udg_DamageEventAmount
                if udg_LethalDamageHP <= DamageEngine__DEATH_VAL then
                    if DamageEngine__hasLethal then
                        call s__DamageTrigger_DamageEngine__run(s__DamageTrigger_LETHAL)
           
                        set udg_DamageEventAmount=GetWidgetLife(udg_DamageEventTarget) - udg_LethalDamageHP
                        set s__Damage_damage[d]=udg_DamageEventAmount
                    endif
                    if udg_DamageEventType < 0 and udg_LethalDamageHP <= DamageEngine__DEATH_VAL then
                        call SetUnitExploded(udg_DamageEventTarget, true)
                    endif
                endif
            endif


            if udg_DamageEventPrevAmt == 0.00 or udg_DamageScalingWC3 == 0.00 then
                set udg_DamageScalingUser=0.00
            else
                set udg_DamageScalingUser=udg_DamageEventAmount / udg_DamageEventPrevAmt / udg_DamageScalingWC3
            endif

        endif
        if udg_DamageEventDamageT != 0 then
            call s__DamageTrigger_DamageEngine__run(s__DamageTrigger_DAMAGE)
        endif
        call BlzSetEventDamage(udg_DamageEventAmount)
        set DamageEngine__eventsRun=true
        if udg_DamageEventAmount == 0.00 then
            call s__Damage_finish()
        endif
        return false
    endfunction
    function s__Damage_apply takes unit src,unit tgt,real amt,boolean a,boolean r,attacktype at,damagetype dt,weapontype wt returns integer
        local integer d
        if udg_NextDamageType == 0 then
           set udg_NextDamageType=DamageEngine_TYPE_CODE
        endif
        if DamageEngine__dreaming then
            set d=s__Damage_create(src , tgt , amt , a , at , dt , wt)
            set s__Damage_isCode[d]=true
            set s__Damage_eFilter[d]=DamageEngine_FILTER_CODE
                         
            set s__Damage_userType[d]=udg_NextDamageType

            if not s__Damage_isSpell[d] then
                set s__Damage_isRanged[d]=udg_NextDamageIsRanged or r
                set s__Damage_isMelee[d]=not s__Damage_isRanged[d]
            endif

            call s__Damage_addRecursive(d)
        else
            call UnitDamageTarget(src, tgt, amt, a, r, at, dt, wt)
            set d=s__Damage_index
            call s__Damage_finish()
        endif
        call s__Damage_clearNexts()
        return d
    endfunction
    function s__Damage_applySpell takes unit src,unit tgt,real amt,damagetype dt returns integer
        return s__Damage_apply(src , tgt , amt , false , false , null , dt , null)
    endfunction
    function s__Damage_applyAttack takes unit src,unit tgt,real amt,boolean ranged,attacktype at,weapontype wt returns integer
        return s__Damage_apply(src , tgt , amt , true , ranged , at , DAMAGE_TYPE_NORMAL , wt)
    endfunction
    //===========================================================================
    function s__Damage_onInit takes nothing returns nothing
        set DamageEngine__alarm=CreateTimer()
        set DamageEngine__proclusGlobal=CreateGroup()
        set DamageEngine__fischerMorrow=CreateGroup()
        set DamageEngine__t1=CreateTrigger()
        set DamageEngine__t2=CreateTrigger()
        set DamageEngine__t3=CreateTrigger() //Moved from globals block as per request of user Ricola3D
        
        call TriggerRegisterAnyUnitEventBJ(DamageEngine__t1, EVENT_PLAYER_UNIT_DAMAGING)
        call TriggerAddCondition(DamageEngine__t1, Filter(function s__Damage_onDamaging))
 
        call TriggerRegisterAnyUnitEventBJ(DamageEngine__t2, EVENT_PLAYER_UNIT_DAMAGED)
        call TriggerAddCondition(DamageEngine__t2, Filter(function s__Damage_onDamaged))
 
        //For recursion
        call TriggerRegisterAnyUnitEventBJ(DamageEngine__t3, EVENT_PLAYER_UNIT_DAMAGING)
        call TriggerAddCondition(DamageEngine__t3, Filter(function s__Damage_onRecursion))
        call DisableTrigger(DamageEngine__t3)
 
        //For preventing Thorns/Defensive glitch.
        //Data gathered from https://www.hiveworkshop.com/threads/repo-in-progress-mapping-damage-types-to-their-abilities.316271/
        set DamageEngine__attacksImmune[0]=false //ATTACK_TYPE_NORMAL
        set DamageEngine__attacksImmune[1]=true //ATTACK_TYPE_MELEE  
        set DamageEngine__attacksImmune[2]=true //ATTACK_TYPE_PIERCE  
        set DamageEngine__attacksImmune[3]=true //ATTACK_TYPE_SIEGE  
        set DamageEngine__attacksImmune[4]=false //ATTACK_TYPE_MAGIC  
        set DamageEngine__attacksImmune[5]=true //ATTACK_TYPE_CHAOS  
        set DamageEngine__attacksImmune[6]=true //ATTACK_TYPE_HERO    
 
        set DamageEngine__damagesImmune[0]=true //DAMAGE_TYPE_UNKNOWN      
        set DamageEngine__damagesImmune[4]=true //DAMAGE_TYPE_NORMAL          
        set DamageEngine__damagesImmune[5]=true //DAMAGE_TYPE_ENHANCED        
        set DamageEngine__damagesImmune[8]=false //DAMAGE_TYPE_FIRE            
        set DamageEngine__damagesImmune[9]=false //DAMAGE_TYPE_COLD              
        set DamageEngine__damagesImmune[10]=false //DAMAGE_TYPE_LIGHTNING        
        set DamageEngine__damagesImmune[11]=true //DAMAGE_TYPE_POISON          
        set DamageEngine__damagesImmune[12]=true //DAMAGE_TYPE_DISEASE          
        set DamageEngine__damagesImmune[13]=false //DAMAGE_TYPE_DIVINE            
        set DamageEngine__damagesImmune[14]=false //DAMAGE_TYPE_MAGIC            
        set DamageEngine__damagesImmune[15]=false //DAMAGE_TYPE_SONIC            
        set DamageEngine__damagesImmune[16]=true //DAMAGE_TYPE_ACID            
        set DamageEngine__damagesImmune[17]=false //DAMAGE_TYPE_FORCE            
        set DamageEngine__damagesImmune[18]=false //DAMAGE_TYPE_DEATH            
        set DamageEngine__damagesImmune[19]=false //DAMAGE_TYPE_MIND              
        set DamageEngine__damagesImmune[20]=false //DAMAGE_TYPE_PLANT            
        set DamageEngine__damagesImmune[21]=false //DAMAGE_TYPE_DEFENSIVE        
        set DamageEngine__damagesImmune[22]=true //DAMAGE_TYPE_DEMOLITION      
        set DamageEngine__damagesImmune[23]=true //DAMAGE_TYPE_SLOW_POISON      
        set DamageEngine__damagesImmune[24]=false //DAMAGE_TYPE_SPIRIT_LINK      
        set DamageEngine__damagesImmune[25]=false //DAMAGE_TYPE_SHADOW_STRIKE    
        set DamageEngine__damagesImmune[26]=true //DAMAGE_TYPE_UNIVERSAL
    endfunction
//ignored textmacro command: DAMAGE_EVENT_STRUCT_PLUGIN_DMGPKG()
//ignored textmacro command: DAMAGE_EVENT_STRUCT_PLUGIN_01()
//ignored textmacro command: DAMAGE_EVENT_STRUCT_PLUGIN_02()
//ignored textmacro command: DAMAGE_EVENT_STRUCT_PLUGIN_03()
//ignored textmacro command: DAMAGE_EVENT_STRUCT_PLUGIN_04()
//ignored textmacro command: DAMAGE_EVENT_STRUCT_PLUGIN_05()
    function DamageEngine_DebugStr takes nothing returns nothing
        local integer i= 0
        loop
            set udg_CONVERTED_ATTACK_TYPE[i]=ConvertAttackType(i)
            exitwhen i == 6
            set i=i + 1
        endloop
        set i=0
        loop
            set udg_CONVERTED_DAMAGE_TYPE[i]=ConvertDamageType(i)
            exitwhen i == 26
            set i=i + 1
        endloop
        set udg_AttackTypeDebugStr[0]="SPELLS" //ATTACK_TYPE_NORMAL in JASS
        set udg_AttackTypeDebugStr[1]="NORMAL" //ATTACK_TYPE_MELEE in JASS
        set udg_AttackTypeDebugStr[2]="PIERCE"
        set udg_AttackTypeDebugStr[3]="SIEGE"
        set udg_AttackTypeDebugStr[4]="MAGIC"
        set udg_AttackTypeDebugStr[5]="CHAOS"
        set udg_AttackTypeDebugStr[6]="HERO"
        set udg_DamageTypeDebugStr[0]="UNKNOWN"
        set udg_DamageTypeDebugStr[4]="NORMAL"
        set udg_DamageTypeDebugStr[5]="ENHANCED"
        set udg_DamageTypeDebugStr[8]="FIRE"
        set udg_DamageTypeDebugStr[9]="COLD"
        set udg_DamageTypeDebugStr[10]="LIGHTNING"
        set udg_DamageTypeDebugStr[11]="POISON"
        set udg_DamageTypeDebugStr[12]="DISEASE"
        set udg_DamageTypeDebugStr[13]="DIVINE"
        set udg_DamageTypeDebugStr[14]="MAGIC"
        set udg_DamageTypeDebugStr[15]="SONIC"
        set udg_DamageTypeDebugStr[16]="ACID"
        set udg_DamageTypeDebugStr[17]="FORCE"
        set udg_DamageTypeDebugStr[18]="DEATH"
        set udg_DamageTypeDebugStr[19]="MIND"
        set udg_DamageTypeDebugStr[20]="PLANT"
        set udg_DamageTypeDebugStr[21]="DEFENSIVE"
        set udg_DamageTypeDebugStr[22]="DEMOLITION"
        set udg_DamageTypeDebugStr[23]="SLOW_POISON"
        set udg_DamageTypeDebugStr[24]="SPIRIT_LINK"
        set udg_DamageTypeDebugStr[25]="SHADOW_STRIKE"
        set udg_DamageTypeDebugStr[26]="UNIVERSAL"
        set udg_WeaponTypeDebugStr[0]="NONE" //WEAPON_TYPE_WHOKNOWS in JASS
        set udg_WeaponTypeDebugStr[1]="METAL_LIGHT_CHOP"
        set udg_WeaponTypeDebugStr[2]="METAL_MEDIUM_CHOP"
        set udg_WeaponTypeDebugStr[3]="METAL_HEAVY_CHOP"
        set udg_WeaponTypeDebugStr[4]="METAL_LIGHT_SLICE"
        set udg_WeaponTypeDebugStr[5]="METAL_MEDIUM_SLICE"
        set udg_WeaponTypeDebugStr[6]="METAL_HEAVY_SLICE"
        set udg_WeaponTypeDebugStr[7]="METAL_MEDIUM_BASH"
        set udg_WeaponTypeDebugStr[8]="METAL_HEAVY_BASH"
        set udg_WeaponTypeDebugStr[9]="METAL_MEDIUM_STAB"
        set udg_WeaponTypeDebugStr[10]="METAL_HEAVY_STAB"
        set udg_WeaponTypeDebugStr[11]="WOOD_LIGHT_SLICE"
        set udg_WeaponTypeDebugStr[12]="WOOD_MEDIUM_SLICE"
        set udg_WeaponTypeDebugStr[13]="WOOD_HEAVY_SLICE"
        set udg_WeaponTypeDebugStr[14]="WOOD_LIGHT_BASH"
        set udg_WeaponTypeDebugStr[15]="WOOD_MEDIUM_BASH"
        set udg_WeaponTypeDebugStr[16]="WOOD_HEAVY_BASH"
        set udg_WeaponTypeDebugStr[17]="WOOD_LIGHT_STAB"
        set udg_WeaponTypeDebugStr[18]="WOOD_MEDIUM_STAB"
        set udg_WeaponTypeDebugStr[19]="CLAW_LIGHT_SLICE"
        set udg_WeaponTypeDebugStr[20]="CLAW_MEDIUM_SLICE"
        set udg_WeaponTypeDebugStr[21]="CLAW_HEAVY_SLICE"
        set udg_WeaponTypeDebugStr[22]="AXE_MEDIUM_CHOP"
        set udg_WeaponTypeDebugStr[23]="ROCK_HEAVY_BASH"
        set udg_DefenseTypeDebugStr[0]="LIGHT"
        set udg_DefenseTypeDebugStr[1]="MEDIUM"
        set udg_DefenseTypeDebugStr[2]="HEAVY"
        set udg_DefenseTypeDebugStr[3]="FORTIFIED"
        set udg_DefenseTypeDebugStr[4]="NORMAL" //Typically deals flat damage to all armor types
        set udg_DefenseTypeDebugStr[5]="HERO"
        set udg_DefenseTypeDebugStr[6]="DIVINE"
        set udg_DefenseTypeDebugStr[7]="UNARMORED"
        set udg_ArmorTypeDebugStr[0]="NONE" //ARMOR_TYPE_WHOKNOWS in JASS, added in 1.31
        set udg_ArmorTypeDebugStr[1]="FLESH"
        set udg_ArmorTypeDebugStr[2]="METAL"
        set udg_ArmorTypeDebugStr[3]="WOOD"
        set udg_ArmorTypeDebugStr[4]="ETHEREAL"
        set udg_ArmorTypeDebugStr[5]="STONE"
        // -
        // Added 25 July 2017 to allow detection of things like Bash or Pulverize or AOE spread
        // -
        set udg_DamageEventAOE=1
        set udg_DamageEventLevel=1
        // -
        // In-game World Editor doesn't allow Attack Type and Damage Type comparisons. Therefore I need to code them as integers into GUI
        // -
        set udg_ATTACK_TYPE_SPELLS=0
        set udg_ATTACK_TYPE_NORMAL=1
        set udg_ATTACK_TYPE_PIERCE=2
        set udg_ATTACK_TYPE_SIEGE=3
        set udg_ATTACK_TYPE_MAGIC=4
        set udg_ATTACK_TYPE_CHAOS=5
        set udg_ATTACK_TYPE_HERO=6
        // -
        set udg_DAMAGE_TYPE_UNKNOWN=0
        set udg_DAMAGE_TYPE_NORMAL=4
        set udg_DAMAGE_TYPE_ENHANCED=5
        set udg_DAMAGE_TYPE_FIRE=8
        set udg_DAMAGE_TYPE_COLD=9
        set udg_DAMAGE_TYPE_LIGHTNING=10
        set udg_DAMAGE_TYPE_POISON=11
        set udg_DAMAGE_TYPE_DISEASE=12
        set udg_DAMAGE_TYPE_DIVINE=13
        set udg_DAMAGE_TYPE_MAGIC=14
        set udg_DAMAGE_TYPE_SONIC=15
        set udg_DAMAGE_TYPE_ACID=16
        set udg_DAMAGE_TYPE_FORCE=17
        set udg_DAMAGE_TYPE_DEATH=18
        set udg_DAMAGE_TYPE_MIND=19
        set udg_DAMAGE_TYPE_PLANT=20
        set udg_DAMAGE_TYPE_DEFENSIVE=21
        set udg_DAMAGE_TYPE_DEMOLITION=22
        set udg_DAMAGE_TYPE_SLOW_POISON=23
        set udg_DAMAGE_TYPE_SPIRIT_LINK=24
        set udg_DAMAGE_TYPE_SHADOW_STRIKE=25
        set udg_DAMAGE_TYPE_UNIVERSAL=26
        // -
        // The below variables don't affect damage amount, but do affect the sound played
        // They also give important information about the type of attack used.
        // They can differentiate between ranged and melee for units who are both
        // -
        set udg_WEAPON_TYPE_NONE=0
        // Metal Light/Medium/Heavy
        set udg_WEAPON_TYPE_ML_CHOP=1
        set udg_WEAPON_TYPE_MM_CHOP=2
        set udg_WEAPON_TYPE_MH_CHOP=3
        set udg_WEAPON_TYPE_ML_SLICE=4
        set udg_WEAPON_TYPE_MM_SLICE=5
        set udg_WEAPON_TYPE_MH_SLICE=6
        set udg_WEAPON_TYPE_MM_BASH=7
        set udg_WEAPON_TYPE_MH_BASH=8
        set udg_WEAPON_TYPE_MM_STAB=9
        set udg_WEAPON_TYPE_MH_STAB=10
        // Wood Light/Medium/Heavy
        set udg_WEAPON_TYPE_WL_SLICE=11
        set udg_WEAPON_TYPE_WM_SLICE=12
        set udg_WEAPON_TYPE_WH_SLICE=13
        set udg_WEAPON_TYPE_WL_BASH=14
        set udg_WEAPON_TYPE_WM_BASH=15
        set udg_WEAPON_TYPE_WH_BASH=16
        set udg_WEAPON_TYPE_WL_STAB=17
        set udg_WEAPON_TYPE_WM_STAB=18
        // Claw Light/Medium/Heavy
        set udg_WEAPON_TYPE_CL_SLICE=19
        set udg_WEAPON_TYPE_CM_SLICE=20
        set udg_WEAPON_TYPE_CH_SLICE=21
        // Axe Medium
        set udg_WEAPON_TYPE_AM_CHOP=22
        // Rock Heavy
        set udg_WEAPON_TYPE_RH_BASH=23
        // -
        // Since GUI still doesn't provide Defense Type and Armor Types, I needed to include the below
        // -
        set udg_ARMOR_TYPE_NONE=0
        set udg_ARMOR_TYPE_FLESH=1
        set udg_ARMOR_TYPE_METAL=2
        set udg_ARMOR_TYPE_WOOD=3
        set udg_ARMOR_TYPE_ETHEREAL=4
        set udg_ARMOR_TYPE_STONE=5
        // -
        set udg_DEFENSE_TYPE_LIGHT=0
        set udg_DEFENSE_TYPE_MEDIUM=1
        set udg_DEFENSE_TYPE_HEAVY=2
        set udg_DEFENSE_TYPE_FORTIFIED=3
        set udg_DEFENSE_TYPE_NORMAL=4
        set udg_DEFENSE_TYPE_HERO=5
        set udg_DEFENSE_TYPE_DIVINE=6
        set udg_DEFENSE_TYPE_UNARMORED=7
        // -
        set udg_UNIT_CLASS_HERO=0
        set udg_UNIT_CLASS_DEAD=1
        set udg_UNIT_CLASS_STRUCTURE=2
        // -
        set udg_UNIT_CLASS_FLYING=3
        set udg_UNIT_CLASS_GROUND=4
        // -
        set udg_UNIT_CLASS_ATTACKS_FLYING=5
        set udg_UNIT_CLASS_ATTACKS_GROUND=6
        // -
        set udg_UNIT_CLASS_MELEE=7
        set udg_UNIT_CLASS_RANGED=8
        // -
        set udg_UNIT_CLASS_GIANT=9
        set udg_UNIT_CLASS_SUMMONED=10
        set udg_UNIT_CLASS_STUNNED=11
        set udg_UNIT_CLASS_PLAGUED=12
        set udg_UNIT_CLASS_SNARED=13
        // -
        set udg_UNIT_CLASS_UNDEAD=14
        set udg_UNIT_CLASS_MECHANICAL=15
        set udg_UNIT_CLASS_PEON=16
        set udg_UNIT_CLASS_SAPPER=17
        set udg_UNIT_CLASS_TOWNHALL=18
        set udg_UNIT_CLASS_ANCIENT=19
        // -
        set udg_UNIT_CLASS_TAUREN=20
        set udg_UNIT_CLASS_POISONED=21
        set udg_UNIT_CLASS_POLYMORPHED=22
        set udg_UNIT_CLASS_SLEEPING=23
        set udg_UNIT_CLASS_RESISTANT=24
        set udg_UNIT_CLASS_ETHEREAL=25
        set udg_UNIT_CLASS_MAGIC_IMMUNE=26
        // -
        set udg_DamageFilterAttackT=- 1
        set udg_DamageFilterDamageT=- 1
        set udg_DamageFilterSourceC=- 1
        set udg_DamageFilterTargetC=- 1
        set udg_DamageFilterRunChance=1.00
    endfunction
    //===========================================================================
    //
    // Setup of automatic events from GUI and custom ones from JASS alike
    //
    //===========================================================================
    function DamageEngine_RegisterFromHook takes trigger whichTrig,string var,limitop op,real value returns nothing
        call s__DamageTrigger_registerVerbose(whichTrig , var , value , true , GetHandleId(op))
    endfunction
//processed hook:     hook TriggerRegisterVariableEvent DamageEngine_RegisterFromHook
    function TriggerRegisterDamageEngineEx takes trigger whichTrig,string eventName,real value,integer f returns integer
        return s__DamageTrigger_registerVerbose(whichTrig , s__DamageTrigger_getVerboseStr(eventName) , value , false , f)
    endfunction
    function TriggerRegisterDamageEngine takes trigger whichTrig,string eventName,real value returns integer
        return s__DamageTrigger_registerTrigger(whichTrig , eventName , value)
    endfunction
    function RegisterDamageEngineEx takes code c,string eventName,real value,integer f returns integer
        return TriggerRegisterDamageEngineEx(s__DamageTrigger__staticgetindex(c) , eventName , value , f)
    endfunction
    //Similar to TriggerRegisterDamageEvent, although takes code instead of trigger as the first argument.
    function RegisterDamageEngine takes code c,string eventName,real value returns integer
        return RegisterDamageEngineEx(c , eventName , value , DamageEngine_FILTER_OTHER)
    endfunction
    //For GUI to tap into more powerful vJass event filtering:

//library DamageEngine ends
//library Event:
    ///////////////
    // EventRegs //
    ////////////////////////////////////////////////////////////////////////////
    // For reading this far, you can learn one thing more.
    // Unlike normal Warcraft III events, you can attach to Event registries.
    // 
    // Event Registries are registrations of one trigger on one event.
    // These cannot be created or destroyed, just attached to.
    //
    // It is VERY efficient for loading and saving data.
    // 
    //  Functions:
    //         - set eventReg.data = someStruct --&gt; Store data.
    //         - eventReg.data                  --&gt; Retreive data.
    //         - Event.getTriggeringEventReg()  --&gt; Get the triggering EventReg.
    //         - eventReg.destroy()             --&gt; Undo this registration.
    // 
        function s__EventReg_clear takes integer this returns nothing
            set s__EventReg_data[this]=0
        endfunction
        function s__EventReg_destroy takes integer this returns nothing
            call sc__Event_Event__destroyNode((this))
        endfunction
    
    
//Implemented from module Event__Stack:
        function s__Event__EventStack_increment takes nothing returns nothing
            set s__Event__EventStack_top=(s__Event__EventStack_top + 1)
        endfunction
        function s__Event__EventStack_decrement takes nothing returns nothing
            set s__Event__EventStack_top=(s__Event__EventStack_top - 1)
        endfunction
    
        
        function s__Event_getTriggeringEventReg takes nothing returns integer
            return s__Event__EventStack_current[s__Event__EventStack_top]
        endfunction
        
        function s__Event_create takes nothing returns integer
            local integer this=s__Event__allocate()
            set s__Event_next[this]=this
            set s__Event_prev[this]=this
            return this
        endfunction
        
        function s__Event_fire takes integer this returns nothing
            local integer curr=s__Event_next[this]
            set s__Event__EventStack_top=(s__Event__EventStack_top + 1) // INLINED!!
            loop
                exitwhen curr == this
                set s__Event_currentTrigger=s__Event_trig[curr]
                if IsTriggerEnabled(s__Event_currentTrigger) then
                    set s__Event__EventStack_current[s__Event__EventStack_top]=curr
                    if TriggerEvaluate(s__Event_currentTrigger) then
                        call TriggerExecute(s__Event_currentTrigger)
                    endif
                else
                    call EnableTrigger(s__Event_currentTrigger) // Was trigger destroyed?
                    if IsTriggerEnabled(s__Event_currentTrigger) then
                        call DisableTrigger(s__Event_currentTrigger)
                    else // If trigger destroyed...
                        set s__Event_prev[s__Event_next[curr]]=s__Event_prev[curr]
                        set s__Event_next[s__Event_prev[curr]]=s__Event_next[curr]
                        call s__Event_deallocate(curr)
                    endif
                endif
                set curr=s__Event_next[curr]
            endloop
            set s__Event__EventStack_top=(s__Event__EventStack_top - 1) // INLINED!!
        endfunction
        function s__Event_register takes integer this,trigger t returns integer
            local integer new=s__Event__allocate()
            set s__Event_prev[new]=s__Event_prev[this]
            set s__Event_next[s__Event_prev[this]]=new
            set s__Event_prev[this]=new
            set s__Event_next[new]=this
            
            set s__Event_trig[new]=t
            
            set s__EventReg_data[((new))]=0 // INLINED!!
            return new
        endfunction
        function s__Event_Event__destroyNode takes integer this returns nothing
            set s__Event_next[s__Event_prev[this]]=s__Event_next[this]
            set s__Event_prev[s__Event_next[this]]=s__Event_prev[this]
            call s__Event_deallocate(this)
        endfunction
        function s__Event_unregister takes integer this,trigger t returns nothing
            local integer curr=s__Event_next[this]
            loop
                exitwhen curr == this
                if s__Event_trig[curr] == t then
                    set s__Event_prev[s__Event_next[curr]]=s__Event_prev[curr]
                    set s__Event_next[s__Event_prev[curr]]=s__Event_next[curr]
                    call s__Event_deallocate(curr)
                    return
                endif
                set curr=s__Event_next[curr]
            endloop
        endfunction
        
        function s__Event_destroy takes integer this returns nothing
            local integer curr=s__Event_next[this]
            loop
                call s__Event_deallocate(curr)
                exitwhen curr == this
                set curr=s__Event_next[curr]
            endloop
        endfunction
        function s__Event_chainDestroy takes integer this returns nothing
            call s__Event_destroy(this) // backwards compatability.
        endfunction
    
    /////////////////////////////////////////////////////
    // Demonstration Functions &amp; Alternative Interface //
    ////////////////////////////////////////////////////////////////////////////
    // What this would look like in normal WC3 style JASS (should all inline).
    // 
    function CreateEvent takes nothing returns integer
        return s__Event_create()
    endfunction
    function DestroyEvent takes integer whichEvent returns nothing
        call s__Event_destroy((whichEvent)) // INLINED!!
    endfunction
    function FireEvent takes integer whichEvent returns nothing
        call s__Event_fire(whichEvent)
    endfunction
    function TriggerRegisterEvent takes trigger whichTrigger,integer whichEvent returns integer
        return s__Event_register(whichEvent,whichTrigger)
    endfunction
    
    // And for EventRegs...
    function SetEventRegData takes integer whichEventReg,integer data returns nothing
        set s__EventReg_data[whichEventReg]=data
    endfunction
    function GetEventRegData takes integer whichEventReg returns integer
        return s__EventReg_data[whichEventReg]
    endfunction
    function GetTriggeringEventReg takes nothing returns integer
        return (s__Event__EventStack_current[s__Event__EventStack_top]) // INLINED!!
    endfunction

//library Event ends
//library GetClosestWidget:




    function GetClosestWidget__calcDistance takes real x,real y returns real
        local real dx= x - GetClosestWidget__coordX
        local real dy= y - GetClosestWidget__coordY
        return ( ( dx * dx + dy * dy ) / 10000 )
    endfunction









//Implemented from module GetClosestWidget__GroupModule:

  function s__GetClosestWidget__ClosestWidget_doSaveUnits takes unit u returns nothing
			set s__GetClosestWidget__ClosestWidget_count=s__GetClosestWidget__ClosestWidget_count + 1
			set s__GetClosestWidget__ClosestWidget_sorted[s__GetClosestWidget__ClosestWidget_count]=u
			set s__GetClosestWidget__ClosestWidget_vector[s__GetClosestWidget__ClosestWidget_count]=GetClosestWidget__calcDistance(GetUnitX(u) , GetUnitY(u))
  endfunction

  function s__GetClosestWidget__ClosestWidget_saveUnits takes nothing returns nothing
			call s__GetClosestWidget__ClosestWidget_doSaveUnits(GetEnumUnit())
  endfunction

  function s__GetClosestWidget__ClosestWidget_sortUnits takes integer lo,integer hi returns nothing
   local integer i= lo
   local integer j= hi
   local real pivot= s__GetClosestWidget__ClosestWidget_vector[( lo + hi ) / 2]

			loop
				loop
					exitwhen s__GetClosestWidget__ClosestWidget_vector[i] >= pivot
					set i=i + 1
				endloop
				loop
					exitwhen s__GetClosestWidget__ClosestWidget_vector[j] <= pivot
					set j=j - 1
				endloop

				exitwhen i > j

				set s__GetClosestWidget__ClosestWidget_vector[0]=s__GetClosestWidget__ClosestWidget_vector[i]
				set s__GetClosestWidget__ClosestWidget_vector[i]=s__GetClosestWidget__ClosestWidget_vector[j]
				set s__GetClosestWidget__ClosestWidget_vector[j]=s__GetClosestWidget__ClosestWidget_vector[0]

				set s__GetClosestWidget__ClosestWidget_sorted[0]=s__GetClosestWidget__ClosestWidget_sorted[i]
				set s__GetClosestWidget__ClosestWidget_sorted[i]=s__GetClosestWidget__ClosestWidget_sorted[j]
				set s__GetClosestWidget__ClosestWidget_sorted[j]=s__GetClosestWidget__ClosestWidget_sorted[0]

				set i=i + 1
				set j=j - 1
			endloop

			if ( lo < j ) then
				call s__GetClosestWidget__ClosestWidget_sortUnits(lo , j)
			endif
			if ( hi > i ) then
				call s__GetClosestWidget__ClosestWidget_sortUnits(i , hi)
			endif
  endfunction

  function s__GetClosestWidget__ClosestWidget_fillGroup takes integer n,group dest returns nothing
			loop
				exitwhen s__GetClosestWidget__ClosestWidget_count <= 0 or s__GetClosestWidget__ClosestWidget_sorted[s__GetClosestWidget__ClosestWidget_count] == null
				if ( s__GetClosestWidget__ClosestWidget_count <= n ) then
					call GroupAddUnit(dest, s__GetClosestWidget__ClosestWidget_sorted[s__GetClosestWidget__ClosestWidget_count])
				endif
				set s__GetClosestWidget__ClosestWidget_sorted[s__GetClosestWidget__ClosestWidget_count]=null
				set s__GetClosestWidget__ClosestWidget_count=s__GetClosestWidget__ClosestWidget_count - 1
			endloop
  endfunction













    function GetClosestWidget__Defaults takes real x,real y returns nothing

            set s__GetClosestWidget__ClosestWidget_unit=null


            set s__GetClosestWidget__ClosestWidget_item=null





        set GetClosestWidget__distance=100000
        set GetClosestWidget__coordX=x
        set GetClosestWidget__coordY=y
    endfunction


//textmacro instance: DEFINE_GCW_UNIT_MODULE()

    function GetClosestWidget__doEnumUnits takes unit u returns nothing
        local real dist= GetClosestWidget__calcDistance(GetUnitX(u) , GetUnitY(u))

        if ( dist < GetClosestWidget__distance ) then
            set s__GetClosestWidget__ClosestWidget_unit=u
            set GetClosestWidget__distance=dist
        endif
    endfunction

    function GetClosestWidget__enumUnits takes nothing returns nothing
        call GetClosestWidget__doEnumUnits(GetEnumUnit())
    endfunction

    function GetClosestUnit takes real x,real y,boolexpr filter returns unit
        local real r= GetClosestWidget__START_DISTANCE
        local unit u
        call GetClosestWidget__Defaults(x , y)

        loop
            if ( r > GetClosestWidget__FINAL_DISTANCE ) then
                call GroupEnumUnitsInRect(s__GetClosestWidget__ClosestWidget_group, GetWorldBounds(), filter)
                exitwhen true
            else
                call GroupEnumUnitsInRange(s__GetClosestWidget__ClosestWidget_group, x, y, r, filter)
                exitwhen FirstOfGroup(s__GetClosestWidget__ClosestWidget_group) != null
            endif
            set r=2 * r
        endloop

        loop
            set u=FirstOfGroup(s__GetClosestWidget__ClosestWidget_group)
            exitwhen u == null
            call GetClosestWidget__doEnumUnits(u)
            call GroupRemoveUnit(s__GetClosestWidget__ClosestWidget_group, u)
        endloop

        return s__GetClosestWidget__ClosestWidget_unit
    endfunction

    function GetClosestUnitInRange takes real x,real y,real radius,boolexpr filter returns unit
        local unit u
        call GetClosestWidget__Defaults(x , y)

        if ( radius >= 0 ) then
            call GroupEnumUnitsInRange(s__GetClosestWidget__ClosestWidget_group, x, y, radius, filter)
            loop
                set u=FirstOfGroup(s__GetClosestWidget__ClosestWidget_group)
                exitwhen u == null
                call GetClosestWidget__doEnumUnits(u)
                call GroupRemoveUnit(s__GetClosestWidget__ClosestWidget_group, u)
            endloop
        endif

        return s__GetClosestWidget__ClosestWidget_unit
    endfunction

    function GetClosestUnitInGroup takes real x,real y,group g returns unit
        call GetClosestWidget__Defaults(x , y)
        call ForGroup(g, function GetClosestWidget__enumUnits)
        return s__GetClosestWidget__ClosestWidget_unit
    endfunction

//end of: DEFINE_GCW_UNIT_MODULE()


//textmacro instance: DEFINE_GCW_GROUP_MODULE()


    function GetClosestNUnitsInRange takes real x,real y,real radius,integer n,group dest,boolexpr filter returns nothing
        local unit u
        call GetClosestWidget__Defaults(x , y)

        if ( radius >= 0 ) then
            call GroupEnumUnitsInRange(s__GetClosestWidget__ClosestWidget_group, x, y, radius, filter)
            loop
                set u=FirstOfGroup(s__GetClosestWidget__ClosestWidget_group)
                exitwhen u == null
                call s__GetClosestWidget__ClosestWidget_doSaveUnits(u)
                call GroupRemoveUnit(s__GetClosestWidget__ClosestWidget_group, u)
            endloop

            call s__GetClosestWidget__ClosestWidget_sortUnits(1 , s__GetClosestWidget__ClosestWidget_count)
            call s__GetClosestWidget__ClosestWidget_fillGroup(n , dest)
        endif
    endfunction

    function GetClosestNUnitsInGroup takes real x,real y,integer n,group source,group dest returns nothing
        local integer i= 0
        call GetClosestWidget__Defaults(x , y)

        call ForGroup(source, function s__GetClosestWidget__ClosestWidget_saveUnits)
        call s__GetClosestWidget__ClosestWidget_sortUnits(1 , s__GetClosestWidget__ClosestWidget_count)
        call s__GetClosestWidget__ClosestWidget_fillGroup(n , dest)
    endfunction

//end of: DEFINE_GCW_GROUP_MODULE()


//textmacro instance: DEFINE_GCW_MODULE("Item", "item")

    function GetClosestWidget__enumItems takes nothing returns nothing
        local item temp= GetEnumItem()
        local real dist= GetClosestWidget__calcDistance(GetItemX(temp) , GetItemY(temp))

        if ( dist < GetClosestWidget__distance ) then
            set s__GetClosestWidget__ClosestWidget_item=temp
            set GetClosestWidget__distance=dist
        endif

        set temp=null
    endfunction

    function GetClosestItem takes real x,real y,boolexpr filter returns item
        local real r= GetClosestWidget__START_DISTANCE
        call GetClosestWidget__Defaults(x , y)

        loop
            if ( r > GetClosestWidget__FINAL_DISTANCE ) then
                call EnumItemsInRect(GetWorldBounds(), filter, function GetClosestWidget__enumItems)
                exitwhen true
            else
                call SetRect(s__GetClosestWidget__ClosestWidget_area, x - r, y - r, x + r, y + r)
                call EnumItemsInRect(s__GetClosestWidget__ClosestWidget_area, filter, function GetClosestWidget__enumItems)
                exitwhen s__GetClosestWidget__ClosestWidget_item != null
            endif
            set r=2 * r
        endloop

        return s__GetClosestWidget__ClosestWidget_item
    endfunction

    function GetClosestItemInRange takes real x,real y,real radius,boolexpr filter returns item
        call GetClosestWidget__Defaults(x , y)

        if ( radius > 0 ) then
            call SetRect(s__GetClosestWidget__ClosestWidget_area, x - radius, y - radius, x + radius, y + radius)
            call EnumItemsInRect(s__GetClosestWidget__ClosestWidget_area, filter, function GetClosestWidget__enumItems)
        endif

        return s__GetClosestWidget__ClosestWidget_item
    endfunction

//end of: DEFINE_GCW_MODULE("Item", "item")





















































//library GetClosestWidget ends
//library GetPlayer:

    function GetPlayerhero takes player a returns unit
        return udg_Playerhero[GetConvertedPlayerId(a)]
    endfunction
    
    function GetPlayerheroU takes unit o returns unit
        return udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(o))]
    endfunction
    
    function IsUnitPlayerhero takes unit o returns boolean
        return (udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer((o)))]) == o // INLINED!!
    endfunction


//library GetPlayer ends
//library GetTerrainZ:


    function GetTerrainZ takes real x,real y returns real
        call MoveLocation(GetTerrainZ__L, x, y)
        return GetLocationZ(GetTerrainZ__L)
    endfunction
    
    function GetUnitZEx takes unit u returns real
        return GetTerrainZ(GetUnitX(u) , GetUnitY(u)) + GetUnitFlyHeight(u)
    endfunction
       
    function SetUnitZ takes unit u,real z returns nothing
        call SetUnitFlyHeight(u, z - GetTerrainZ(GetUnitX(u) , GetUnitY(u)), 0)
    endfunction
    

//library GetTerrainZ ends
//library InitTasks:


    function InitTasks_onInit takes nothing returns nothing
            set Tasks=sc__Table_create()
    endfunction 


//library InitTasks ends
//library IsPlayer:

function IsPlayerAlien takes player a returns boolean
    //If players is main alien or spawn returns true.
    return udg_Parasite == a or udg_Player_IsParasiteSpawn[GetConvertedPlayerId(a)] or a == Player(bj_PLAYER_NEUTRAL_EXTRA)
endfunction

function IsPlayerMutant takes player a returns boolean
    //If players is main mutant or spawn returns true.
    return udg_Mutant == a or udg_Player_IsMutantSpawn[GetConvertedPlayerId(a)]
endfunction

function IsPlayerRogueAndroid takes player a returns boolean
    //If players is main rogueandroid or spawn returns true.
    return udg_RogueAndroid == a or udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(a)]
endfunction

function IsPlayerAnyInfected takes player a returns boolean
    if IsPlayerAlien(a) or IsPlayerMutant(a) or IsPlayerRogueAndroid(a) then
        return true
    else
        return false
    endif
endfunction

function IsPlayerMainInfected takes player a returns boolean
    return udg_Mutant == a or udg_RogueAndroid == a or udg_Parasite == a or a == Player(bj_PLAYER_NEUTRAL_EXTRA)
endfunction

function IsPlayerSpawnInfected takes player a returns boolean
    return udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(a)] or udg_Player_IsMutantSpawn[GetConvertedPlayerId(a)] or udg_Player_IsParasiteSpawn[GetConvertedPlayerId(a)]
endfunction

function IsPlayerNonhuman takes player a returns boolean
    if IsPlayerAlien(a) or IsPlayerMutant(a) or IsPlayerRogueAndroid(a) or udg_HiddenAndroid == a then
        return true
    else
        return false
    endif
endfunction

function IsPlayerHuman takes player a returns boolean
    return not ( IsPlayerNonhuman(a) )
endfunction

function IsPlayerheroEvil takes unit possibleEvilUnit returns boolean
    local player ownerPlayer
    
    set ownerPlayer=GetOwningPlayer(possibleEvilUnit)

    if IsPlayerAnyInfected(ownerPlayer) and possibleEvilUnit == udg_Playerhero[GetConvertedPlayerId(ownerPlayer)] then
        return true
    endif
    
    return false
endfunction


//library IsPlayer ends
//library IsTerrainWalkable:

    function IsTerrainWalkable__init takes nothing returns nothing
        set IsTerrainWalkable__check=CreateItem('ciri', 0., 0.)
        call SetItemVisible(IsTerrainWalkable__check, false)
        set IsTerrainWalkable__r=Rect(0.0, 0.0, 128.0, 128.0)
    endfunction

    function IsTerrainWalkable__hideBothersomeItem takes nothing returns nothing
        if IsItemVisible(GetEnumItem()) then
            set IsTerrainWalkable__hidden[IsTerrainWalkable__hiddenMax]=GetEnumItem()
            call SetItemVisible(IsTerrainWalkable__hidden[IsTerrainWalkable__hiddenMax], false)
            set IsTerrainWalkable__hiddenMax=IsTerrainWalkable__hiddenMax + 1
        endif
    endfunction

    function IsTerrainWalkable takes real x,real y returns boolean
	
        // first, hide any items in the area so they don't get in the way of our item
        call MoveRectTo(IsTerrainWalkable__r, x, y)
        call EnumItemsInRect(IsTerrainWalkable__r, null, function IsTerrainWalkable__hideBothersomeItem)
		
        // try to move the check item and get its coordinates
		// this unhides the item...
        call SetItemPosition(IsTerrainWalkable__check, x, y)
        set IsTerrainWalkable_X=GetItemX(IsTerrainWalkable__check)
        set IsTerrainWalkable_Y=GetItemY(IsTerrainWalkable__check)
		
		//...so we must hide it again
        call SetItemVisible(IsTerrainWalkable__check, false)
		
        // before returning, unhide any items that got hidden at the start
        loop
            exitwhen IsTerrainWalkable__hiddenMax == 0
            set IsTerrainWalkable__hiddenMax=IsTerrainWalkable__hiddenMax - 1
            call SetItemVisible(IsTerrainWalkable__hidden[IsTerrainWalkable__hiddenMax], true)
        endloop
		
        // return pathability status
        return ( x - IsTerrainWalkable_X ) * ( x - IsTerrainWalkable_X ) + ( y - IsTerrainWalkable_Y ) * ( y - IsTerrainWalkable_Y ) < IsTerrainWalkable__MAX_RANGE * IsTerrainWalkable__MAX_RANGE
    endfunction

//library IsTerrainWalkable ends
//library IsUnitTypeEx:

function IsUnitExplorer takes unit a returns boolean
//local integer k=GetUnitTypeId(a)
//Returns true if the unit is an explorer class ship.
//if k=='h03K' or k=='h001' or k=='h02k' or k=='h02I' or k=='h012' or k=='h02S' or k=='h03J' or k=='h002' or k=='h02L' or k=='h02H' or k=='h02Q' then
//return true
//else
//return false
//endif
return GetUnitAbilityLevel(a, 'A071') == 1
endfunction
function IsUnitSuit takes unit a returns boolean
//local integer k=GetUnitTypeId(a)
//if k=='h02R' or k=='h00K' or k=='h00J' or k=='h00L' or k=='h00E' or k=='h03L' or k=='h02G' or k=='h00M' or k=='h03U' or k=='h024' or k=='h00F' or k=='h00D' or k=='h00N' or k=='h00C' or k=='h027' or k=='h00I' then
//return true
//else
//return false
//endif
return GetUnitAbilityLevel(a, 'A070') == 1
endfunction 

function IsUnitStation takes unit a returns boolean
//local integer i=GetUnitTypeId(q)
//if i=='h009' or i=='h003' or i=='h008' or i=='h007' or i=='h03T' or i=='h005' or i=='h00X' or i=='h02B' or i=='h040' or i=='h041' or i=='h042'  then
//return true
//else
//return false
//endif]
return GetUnitAbilityLevel(a, 'A072') == 1
endfunction


//library IsUnitTypeEx ends
//library Knockback:

function GenericKBLite takes real time,real x,real y,unit u,unit source returns nothing
            local real x2= GetUnitX(u)
            local real y2= GetUnitY(u)
            local real x3= x2 - x
            local real y3= y2 - y
            local real d= 500
            local real a= bj_RADTODEG * Atan2(y2 - y, x2 - x)
            
            
            set udg_Knockback2DAngle=a
            set udg_Knockback2DTime=time
            set udg_Knockback2DDistance=d
            set udg_Knockback2DUnit=u
            set udg_Knockback2DSource=source
            call TriggerExecute(gg_trg_Knockback_2D)
 endfunction

 //same as above except you already know the angle and includes height   
 function GenericKBLiteAngle takes real time,real a,unit u,unit source,real d,real height,string model returns nothing
            set udg_Knockback2DAngle=a
            set udg_Knockback2DTime=time
            set udg_Knockback2DDistance=d
            set udg_Knockback2DUnit=u
            set udg_Knockback2DSource=source
            set udg_Knockback2DHeight=height
            if model != null then
                set udg_Knockback2DLoopFX=model
            endif
            call TriggerExecute(gg_trg_Knockback_2D)
 endfunction 
 
 
 
 

//library Knockback ends
//library LS:
function LS takes nothing returns hashtable
//Returns hashtable for use in saving data to handles
    return udg_hash
endfunction

//library LS ends
//library MoveSpeedXGUI:


    function MoveSpeedXGUI__ApproxEqual takes real A,real B returns boolean
        return ( A >= ( B - MoveSpeedXGUI__MARGIN ) ) and ( A <= ( B + MoveSpeedXGUI__MARGIN ) )
    endfunction
    
    
//Implemented from module MoveSpeedXGUI__M:
        
        
        
        function s__MoveSpeedXGUI__MoveSpeedStruct_destroy takes integer this returns nothing
            set s__MoveSpeedXGUI__MoveSpeedStruct_prev[s__MoveSpeedXGUI__MoveSpeedStruct_next[this]]=s__MoveSpeedXGUI__MoveSpeedStruct_prev[this]
            set s__MoveSpeedXGUI__MoveSpeedStruct_next[s__MoveSpeedXGUI__MoveSpeedStruct_prev[this]]=s__MoveSpeedXGUI__MoveSpeedStruct_next[this]
            set s__MoveSpeedXGUI__MoveSpeedStruct_enabled[this]=false
        endfunction
            
        function s__MoveSpeedXGUI__MoveSpeedStruct_MoveSpeedXGUI__M___periodic takes nothing returns nothing
            local integer this= s__MoveSpeedXGUI__MoveSpeedStruct_next[(0)]
            local real nx
            local real ny
            local real dx
            local real dy
            local real d
            local integer order
            local unit u
            loop
                exitwhen this == 0
                set u=s__MoveSpeedXGUI__MoveSpeedStruct_curr[this]
                set nx=GetUnitX(u)
                set ny=GetUnitY(u)
                if IsUnitType(u, UNIT_TYPE_DEAD) then
                    call s__MoveSpeedXGUI__MoveSpeedStruct_destroy(this)
                elseif not MoveSpeedXGUI__ApproxEqual(nx , s__MoveSpeedXGUI__MoveSpeedStruct_x[this]) or not MoveSpeedXGUI__ApproxEqual(ny , s__MoveSpeedXGUI__MoveSpeedStruct_y[this]) then
                    if ( not IsUnitPaused(u) ) and GetUnitAbilityLevel(u, 'BSTN') == 0 and GetUnitAbilityLevel(u, 'BPSE') == 0 then
                        set order=GetUnitCurrentOrder(u)
                        set dx=nx - s__MoveSpeedXGUI__MoveSpeedStruct_x[this]
                        set dy=ny - s__MoveSpeedXGUI__MoveSpeedStruct_y[this]
                        set d=SquareRoot(dx * dx + dy * dy)
                        set dx=dx / d * s__MoveSpeedXGUI__MoveSpeedStruct_speed[this] // move the unit offset-x by this
                        set dy=dy / d * s__MoveSpeedXGUI__MoveSpeedStruct_speed[this] // move the unit offset-y by this
                        
                        if ( order == 851986 or order == 851971 ) and ( s__MoveSpeedXGUI__MoveSpeedStruct_ox[this] - nx ) * ( s__MoveSpeedXGUI__MoveSpeedStruct_ox[this] - nx ) < ( dx * dx ) and ( s__MoveSpeedXGUI__MoveSpeedStruct_oy[this] - ny ) * ( s__MoveSpeedXGUI__MoveSpeedStruct_oy[this] - ny ) < ( dy * dy ) then
                            // if the unit is issued a move or smart order and they are near their destination
                            // then move them there instantly (removes a bit of glitchyness towards the end)
                            call SetUnitX(u, s__MoveSpeedXGUI__MoveSpeedStruct_ox[this])
                            call SetUnitY(u, s__MoveSpeedXGUI__MoveSpeedStruct_oy[this])
                            set s__MoveSpeedXGUI__MoveSpeedStruct_x[this]=s__MoveSpeedXGUI__MoveSpeedStruct_ox[this]
                            set s__MoveSpeedXGUI__MoveSpeedStruct_y[this]=s__MoveSpeedXGUI__MoveSpeedStruct_oy[this]
                            call IssueImmediateOrderById(u, 851972) // order them to stop
                        else
                            set s__MoveSpeedXGUI__MoveSpeedStruct_x[this]=nx + dx
                            set s__MoveSpeedXGUI__MoveSpeedStruct_y[this]=ny + dy
                            call SetUnitX(u, s__MoveSpeedXGUI__MoveSpeedStruct_x[this])
                            call SetUnitY(u, s__MoveSpeedXGUI__MoveSpeedStruct_y[this])
                        endif
                    endif
                endif
                set this=s__MoveSpeedXGUI__MoveSpeedStruct_next[this]
            endloop
            set u=null
        endfunction
        
        function s__MoveSpeedXGUI__MoveSpeedStruct_create takes unit whichUnit,real newSpeed returns integer
            local integer this= GetUnitUserData(whichUnit)
            set s__MoveSpeedXGUI__MoveSpeedStruct_next[this]=s__MoveSpeedXGUI__MoveSpeedStruct_next[(0)]
            set s__MoveSpeedXGUI__MoveSpeedStruct_prev[s__MoveSpeedXGUI__MoveSpeedStruct_next[(0)]]=this
            set s__MoveSpeedXGUI__MoveSpeedStruct_next[(0)]=this
            set s__MoveSpeedXGUI__MoveSpeedStruct_prev[this]=0
            set s__MoveSpeedXGUI__MoveSpeedStruct_curr[this]=whichUnit
            set s__MoveSpeedXGUI__MoveSpeedStruct_speed[this]=( newSpeed - 522 ) * MoveSpeedXGUI__PERIOD
            set s__MoveSpeedXGUI__MoveSpeedStruct_x[this]=GetUnitX(whichUnit)
            set s__MoveSpeedXGUI__MoveSpeedStruct_y[this]=GetUnitY(whichUnit)
            set s__MoveSpeedXGUI__MoveSpeedStruct_enabled[this]=true
            return this
        endfunction
        
        function s__MoveSpeedXGUI__MoveSpeedStruct_update takes unit whichUnit,real newSpeed returns nothing
            local integer this= GetUnitUserData(whichUnit)
            if s__MoveSpeedXGUI__MoveSpeedStruct_enabled[this] then
                if newSpeed > 522 then
                    set s__MoveSpeedXGUI__MoveSpeedStruct_speed[this]=( newSpeed - 522 ) * MoveSpeedXGUI__PERIOD
                else
                    call s__MoveSpeedXGUI__MoveSpeedStruct_destroy(this)
                endif
            elseif newSpeed > 522 then
                call s__MoveSpeedXGUI__MoveSpeedStruct_create(whichUnit , newSpeed)
            endif
        endfunction
        
        function s__MoveSpeedXGUI__MoveSpeedStruct_MoveSpeedXGUI__M___storeOrderPoint takes nothing returns boolean
            local integer this= GetUnitUserData(GetTriggerUnit())
            set s__MoveSpeedXGUI__MoveSpeedStruct_ox[this]=GetOrderPointX()
            set s__MoveSpeedXGUI__MoveSpeedStruct_oy[this]=GetOrderPointY()
            return false
        endfunction
    
        function s__MoveSpeedXGUI__MoveSpeedStruct_MoveSpeedXGUI__M___onInit takes nothing returns nothing
            call TimerStart(CreateTimer(), MoveSpeedXGUI__PERIOD, true, function s__MoveSpeedXGUI__MoveSpeedStruct_MoveSpeedXGUI__M___periodic)
            call TriggerRegisterAnyUnitEventBJ(s__MoveSpeedXGUI__MoveSpeedStruct_MoveSpeedXGUI__M___issued, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)
            call TriggerAddCondition(s__MoveSpeedXGUI__MoveSpeedStruct_MoveSpeedXGUI__M___issued, Condition(function s__MoveSpeedXGUI__MoveSpeedStruct_MoveSpeedXGUI__M___storeOrderPoint))
        endfunction
    
    function GetUnitMoveSpeedX takes unit whichUnit returns real
        if s__MoveSpeedXGUI__MoveSpeedStruct_enabled[(GetUnitUserData(whichUnit))] then
            return udg_UnitSpeedX[GetUnitUserData(whichUnit)]
        endif
        return GetUnitMoveSpeed(whichUnit)
    endfunction
    
    function SetUnitMoveSpeedX takes unit whichUnit,real newSpeed returns nothing
        call s__MoveSpeedXGUI__MoveSpeedStruct_update(whichUnit , newSpeed)
        set udg_UnitSpeedX[GetUnitUserData(whichUnit)]=newSpeed
    endfunction

//processed hook:     hook SetUnitMoveSpeed SetUnitMoveSpeedX

//library MoveSpeedXGUI ends
//library PathingFuncs:

    function IsPointPathable takes real x,real y,boolean evalunits returns boolean
        local boolean b
        if ( evalunits ) then
            call ShowUnit(PathingFuncs__U, true)
            call SetUnitPosition(PathingFuncs__U, x, y)
            set b=GetUnitX(PathingFuncs__U) == x and GetUnitY(PathingFuncs__U) == y
            call ShowUnit(PathingFuncs__U, false)
        else
            call SetItemVisible(PathingFuncs__I, true)
            call SetItemPosition(PathingFuncs__I, x, y)
            set b=SquareRoot(( GetItemX(PathingFuncs__I) - x ) * ( GetItemX(PathingFuncs__I) - x ) + ( GetItemY(PathingFuncs__I) - y ) * ( GetItemY(PathingFuncs__I) - y )) <= 20.0
            call SetItemPosition(PathingFuncs__I, PathingFuncs__ItemSafeX, PathingFuncs__ItemSafeY)
            call SetItemVisible(PathingFuncs__I, false)
        endif
        return b
    endfunction
    
    function PathingFuncs__init takes nothing returns nothing
        set PathingFuncs__I=CreateItem('ward', PathingFuncs__ItemSafeX, PathingFuncs__ItemSafeY)
        call SetItemInvulnerable(PathingFuncs__I, true)
        call SetItemVisible(PathingFuncs__I, false)
        set PathingFuncs__U=CreateUnit(Player(15), 'hfoo', PathingFuncs__ItemSafeX, PathingFuncs__ItemSafeY, 0.)
        call SetUnitInvulnerable(PathingFuncs__U, true)
        call ShowUnit(PathingFuncs__U, false)
    endfunction

//library PathingFuncs ends
//library PauseUnitTimer:

function PauseUnitForPeriod_Remove takes nothing returns nothing
local timer o=GetExpiredTimer()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(o), StringHash("unit")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(o)) // INLINED!!
call SaveTimerHandle((udg_hash), GetHandleId(a), StringHash("PauseTimed_Timer"), null) // INLINED!!
call DestroyTimer(o)
set o=null
call BlzPauseUnitEx(a, false)
endfunction
function PauseUnitForPeriod takes unit a,real duration returns nothing
//This ability is like UnitAddAbilityForPeriod, but instead of adding an ability it pauses the unit.
local timer o=null
set o=LoadTimerHandle((udg_hash), GetHandleId(a), StringHash("PauseTimed_Timer")) // INLINED!!
if o != null and HaveSavedHandle((udg_hash), GetHandleId(a), StringHash("PauseTimed_Timer")) then // INLINED!!
if TimerGetRemaining(o) < duration then
//If the ability is scheduled for removal at a later date than this addition will imply, we do nothing.
//If not then we proceed regularly.
call TimerStart(o, duration, false, function PauseUnitForPeriod_Remove)
endif
else
set o=CreateTimer()
call SaveUnitHandle((udg_hash), GetHandleId(o), StringHash("unit"), a) // INLINED!!
call SaveTimerHandle((udg_hash), GetHandleId(a), StringHash("PauseTimed_Timer"), o) // INLINED!!
call TimerStart(o, duration, false, function PauseUnitForPeriod_Remove)
call BlzPauseUnitEx(a, true)
endif
endfunction

function RemoveUnitPeriodPause takes unit a returns nothing
local timer o=null
set o=LoadTimerHandle((udg_hash), GetHandleId(a), StringHash("PauseTimed_Timer")) // INLINED!!
if o != null and HaveSavedHandle((udg_hash), GetHandleId(a), StringHash("PauseTimed_Timer")) then // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(o)) // INLINED!!
call DestroyTimer(o)
endif
endfunction


//library PauseUnitTimer ends
//library PlayerUtils:




     
       

   




   
        // similar to Player(#)
        function s__User_fromIndex takes integer i returns integer
            return (i)
        endfunction
   
        // similar to GetLocalPlayer
        function s__User_fromLocal takes nothing returns integer
            return (s__User_LocalId)
        endfunction
   
        // access active players array
        function s__User_fromPlaying takes integer index returns integer
            return s__User_PlayingPlayer[index]
        endfunction
   
        function s__User__staticgetindex takes player p returns integer
            return (GetPlayerId(p))
        endfunction
   
        function s__User_toPlayer takes integer this returns player
            return s__User_handle[this]
        endfunction
     
        function s__User__get_name takes integer this returns string



                return GetPlayerName(s__User_handle[this])

        endfunction
   
        function s__User__set_name takes integer this,string newName returns nothing
            call SetPlayerName(s__User_handle[this], newName)





        endfunction
   
        function s__User__get_color takes integer this returns playercolor



                return GetPlayerColor(s__User_handle[this])

        endfunction
   
        function s__User__get_hex takes integer this returns string
            return PlayerUtils__OriginalHex[GetHandleId((GetPlayerColor(s__User_handle[(this)])))] // INLINED!!
        endfunction
   
        function s__User__set_color takes integer this,playercolor c returns nothing
            call SetPlayerColor(s__User_handle[this], c)
       








        endfunction
   
        function s__User__get_defaultColor takes integer this returns playercolor
            return s__User_Color[this]
        endfunction
   
        function s__User__get_nameColored takes integer this returns string
            return (PlayerUtils__OriginalHex[GetHandleId((GetPlayerColor(s__User_handle[((this))])))]) + (GetPlayerName(s__User_handle[(this)])) + "|r" // INLINED!!
        endfunction
   
        function s__User_colorUnits takes integer this,playercolor c returns nothing
            local unit u
       
            call GroupEnumUnitsOfPlayer(s__User_ENUM_GROUP, s__User_handle[this], null)
       
            loop
                set u=FirstOfGroup(s__User_ENUM_GROUP)
                exitwhen u == null
                call SetUnitColor(u, c)
                call GroupRemoveUnit(s__User_ENUM_GROUP, u)
            endloop
        endfunction
   
        function s__User_onLeave takes nothing returns boolean
            local integer p= (GetPlayerId((GetTriggerPlayer()))) // INLINED!!
            local integer i= s__User_PlayingPlayerIndex[s__User_id[p]]
       
            // clean up
            call ForceRemovePlayer(FORCE_PLAYING, (s__User_handle[(p)])) // INLINED!!
       
            // recycle index
            set s__User_AmountPlaying=s__User_AmountPlaying - 1
            set s__User_PlayingPlayerIndex[i]=s__User_PlayingPlayerIndex[s__User_AmountPlaying]
            set s__User_PlayingPlayer[i]=s__User_PlayingPlayer[s__User_AmountPlaying]
           
            if ( s__User_AmountPlaying == 1 ) then
                set s__User_next[s__User_prev[p]]=s__User_NULL
                set s__User_prev[s__User_next[p]]=s__User_NULL
            else
                set s__User_next[s__User_prev[p]]=s__User_next[p]
                set s__User_prev[s__User_next[p]]=s__User_prev[p]
            endif

            set s__User_last=s__User_PlayingPlayer[s__User_AmountPlaying]
           
            set s__User_isPlaying[p]=false
       
            return false
        endfunction
   
//Implemented from module PlayerUtils__PlayerUtilsInit:
        function s__User_PlayerUtils__PlayerUtilsInit___onInit takes nothing returns nothing
            local trigger t= CreateTrigger()
            local integer i= 0
            local integer p
       
            set s__User_Local=GetLocalPlayer()
            set s__User_LocalId=GetPlayerId(s__User_Local)
       
            set PlayerUtils__OriginalHex[0]="|cffff0303"
            set PlayerUtils__OriginalHex[1]="|cff0042ff"
            set PlayerUtils__OriginalHex[2]="|cff1ce6b9"
            set PlayerUtils__OriginalHex[3]="|cff540081"
            set PlayerUtils__OriginalHex[4]="|cfffffc01"
            set PlayerUtils__OriginalHex[5]="|cfffe8a0e"
            set PlayerUtils__OriginalHex[6]="|cff20c000"
            set PlayerUtils__OriginalHex[7]="|cffe55bb0"
            set PlayerUtils__OriginalHex[8]="|cff959697"
            set PlayerUtils__OriginalHex[9]="|cff7ebff1"
            set PlayerUtils__OriginalHex[10]="|cff106246"
            set PlayerUtils__OriginalHex[11]="|cff4e2a04"
         
            set s__User_first=s__User_NULL

            loop
                exitwhen i == 12

                set p=(i)
                set s__User_handle[p]=Player(i)
                set s__User_id[p]=i
           
                set s__User_Color[i]=GetPlayerColor(s__User_handle[p])
                set PlayerUtils__CurrentColor[i]=s__User_Color[i]
             
                if ( GetPlayerController(s__User_handle[p]) == MAP_CONTROL_USER and GetPlayerSlotState(s__User_handle[p]) == PLAYER_SLOT_STATE_PLAYING ) then

                    set s__User_PlayingPlayer[s__User_AmountPlaying]=p
                    set s__User_PlayingPlayerIndex[i]=s__User_AmountPlaying
                   
                   set s__User_last=i
                   
                    if ( s__User_first == s__User_NULL ) then
                        set s__User_first=i
                        set s__User_next[(i)]=s__User_NULL
                        set s__User_prev[(i)]=s__User_NULL
                    else
                        set s__User_prev[(i)]=s__User_id[s__User_PlayingPlayer[s__User_AmountPlaying - 1]]
                        set s__User_next[s__User_PlayingPlayer[s__User_AmountPlaying - 1]]=(i)
                        set s__User_next[(i)]=s__User_NULL
                    endif

                    set s__User_isPlaying[p]=true
               
                    call TriggerRegisterPlayerEvent(t, s__User_handle[p], EVENT_PLAYER_LEAVE)
                    call ForceAddPlayer(FORCE_PLAYING, s__User_handle[p])
               
                    set PlayerUtils__Hex[p]=PlayerUtils__OriginalHex[GetHandleId(s__User_Color[i])]
               
                    set s__User_AmountPlaying=s__User_AmountPlaying + 1

                endif
           
                set PlayerUtils__Name[p]=GetPlayerName(s__User_handle[p])
                set s__User_originalName[p]=PlayerUtils__Name[p]
           
                set i=i + 1
            endloop
       
            call TriggerAddCondition(t, Filter(function s__User_onLeave))
        endfunction
   


    //===========================================================================

























//library PlayerUtils ends
//library PreventSave:
    
    
//====================================
// Do not edit below this line
//====================================
    
    
    function PreventSave__Exit takes nothing returns nothing
        call DialogDisplay(PreventSave__p, PreventSave__D, false)
    endfunction
    
    function PreventSave__StopSave takes nothing returns nothing
        if not GameAllowSave then
            call DialogDisplay(PreventSave__p, PreventSave__D, true)
            call TimerStart(PreventSave__T, 0.00, false, function PreventSave__Exit)
        endif
    endfunction
    
    function PreventSave__onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        call TriggerRegisterGameEvent(t, EVENT_GAME_SAVE)
        call TriggerAddAction(t, function PreventSave__StopSave)
        set PreventSave__p=GetLocalPlayer()
    endfunction


//library PreventSave ends
//library RegisterSpell:

function RegisterSpellSystem takes integer abilId,code onEffect,code onLoop,code onFinish,real time,real dur returns nothing
    set udg_Spell__Ability=abilId
    set udg_Spell__Time=time
    set udg_Spell__Duration=dur
    if onEffect != null then
        set udg_Spell__Trigger_OnEffect=CreateTrigger()
        call TriggerAddCondition(udg_Spell__Trigger_OnEffect, Filter(onEffect))
    endif
    if onLoop != null then
        set udg_Spell__Trigger_OnLoop=CreateTrigger()
        call TriggerAddCondition(udg_Spell__Trigger_OnLoop, Filter(onLoop))
    endif
    
    if onFinish != null then
        set udg_Spell__Trigger_OnFinish=CreateTrigger()
        call TriggerAddCondition(udg_Spell__Trigger_OnFinish, Condition(onFinish))
    endif
    
    if gg_trg_Spell_System == null then
        call ExecuteFunc("InitTrig_Spell_System")
    endif
    call TriggerExecute(gg_trg_Spell_System)
endfunction



//library RegisterSpell ends
//library Sector:
function GetSector takes location l returns integer
    local integer x=0

    if RectContainsLoc(gg_rct_ST1, l) == true then
        set x=1
    elseif RectContainsLoc(gg_rct_ST2, l) == true then
        set x=2
    elseif RectContainsLoc(gg_rct_ST3, l) == true then
        set x=3
    elseif RectContainsLoc(gg_rct_ST4S2, l) == true then
        set x=4
    elseif RectContainsLoc(gg_rct_ST5, l) == true then
        set x=5
    elseif RectContainsLoc(gg_rct_LostStation, l) == true then
        set x=6
    elseif RectContainsLoc(gg_rct_PirateShip, l) == true then
        set x=7
    elseif RectContainsLoc(gg_rct_Planet, l) == true then
        set x=8
    elseif RectContainsLoc(gg_rct_SS1, l) == true then
        set x=9
    elseif RectContainsLoc(gg_rct_SS2, l) == true then
        set x=10
    elseif RectContainsLoc(gg_rct_SS3, l) == true then
        set x=11
    elseif RectContainsLoc(gg_rct_SS4, l) == true then
        set x=12
    elseif RectContainsLoc(gg_rct_SS5, l) == true then
        set x=13
    elseif RectContainsLoc(gg_rct_SS6, l) == true then
        set x=14
    elseif RectContainsLoc(gg_rct_SS7, l) == true then
        set x=15
    elseif RectContainsLoc(gg_rct_SS8, l) == true then
        set x=16
    elseif RectContainsLoc(gg_rct_SS9, l) == true then
        set x=17
    elseif RectContainsLoc(gg_rct_SS10, l) == true then
        set x=18
    elseif RectContainsLoc(gg_rct_SS11, l) == true then
        set x=19
    elseif RectContainsLoc(gg_rct_SS12, l) == true then
        set x=20
    elseif RectContainsLoc(gg_rct_Space, l) == true then
        set x=21
    elseif RectContainsLoc(gg_rct_MoonRect, l) == true then
        set x=22
    elseif RectContainsLoc(gg_rct_ST8, l) == true then
        set x=23
    elseif RectContainsLoc(gg_rct_ST9, l) == true then
        set x=24
    elseif RectContainsLoc(gg_rct_ST10, l) == true then
        set x=25
    //Would be sheepyship
    //elseif RectContainsLoc(gg_rct_ST13,l)==true then
        //set x=26
    elseif RectContainsLoc(gg_rct_OverlordRect, l) then
        set x=27
    elseif RectContainsLoc(gg_rct_Mirror_Arena, l) then
        set x=28

    endif
    
    return x
endfunction

function GetUnitSector takes unit a returns integer
    local integer r
    local location b=GetUnitLoc(a)

    //Returns the sector of a unit
    set r=GetSector(b)
    call RemoveLocation(b)
    set b=null
    return r
    
endfunction

function LocInSector takes location a,integer i returns boolean
    //Checks if a loc is in a sector, given the sector's number.
    //Faster!
    if RectContainsLoc(udg_SectorId[i], a) then
        return true
    endif
        return false
endfunction

function UnitInSector takes unit a,integer i returns boolean
local location k=GetUnitLoc(a)

//Same thing as above but accepts a unit.
    if RectContainsLoc(udg_SectorId[i], k) then
        call RemoveLocation(k)
        set k=null
        return true
    endif
    
    call RemoveLocation(k)
    set k=null
    return false
endfunction

function UnitInSectorLax takes unit a,integer i returns boolean
    local location k=GetUnitLoc(a)
    
    //Same thing as above but returns true if the sector that the unit is in is contained within another sector. I.E. landed ships
    if RectContainsLoc(udg_SectorId[i], k) or ( GetUnitAbilityLevel(udg_SS_Landed[GetUnitUserData(udg_Sector_Space[GetUnitSector(a)])], 'A071') == 1 and UnitInSector(udg_SS_Landed[GetUnitUserData(udg_Sector_Space[GetUnitSector(a)])] , i) ) then
        call RemoveLocation(k)
        set k=null
        return true
    endif
        call RemoveLocation(k)
        set k=null
        return false
endfunction


function GetRectSector takes integer rec returns rect
            if rec == 1 then
                //niffy
                return gg_rct_ST4S2
            elseif rec == 2 then
                //kyo
                return gg_rct_ST3
            elseif rec == 3 then
                //Abitress
                return gg_rct_ST1
            elseif rec == 4 then
                //Swagger
                return gg_rct_ST5
            elseif rec == 5 then
                //Syluss
                return gg_rct_ST9
            elseif rec == 6 then
                //Pown
                return gg_rct_ST10
            endif
            
            return null
endfunction 

function GetSectorMain takes unit u,real x2,real y2 returns integer
            local real x= GetUnitX(u)
            local real y= GetUnitY(u)
            local integer b= 0
            
            if u == null then
            
                set x=x2
                set y=y2
            
            endif
            
            //Niffy
            if RectContainsCoords(gg_rct_ST4S2, x, y) then
                
                set b=1
            //Kyo    
            elseif RectContainsCoords(gg_rct_ST3, x, y) then
            
                set b=2
            //Abitress    
            elseif RectContainsCoords(gg_rct_ST1, x, y) then
            
                set b=3
            //Swagger
            elseif RectContainsCoords(gg_rct_ST5, x, y) then
            
                set b=4
            //Syluss
            elseif RectContainsCoords(gg_rct_ST9, x, y) then
            
                set b=5
            //Pown
            elseif RectContainsCoords(gg_rct_ST10, x, y) then
            
                set b=6
            endif
            
            return b
            
endfunction 


//library Sector ends
//library String:



        function s__String_create takes string s returns integer
            local integer this= s__String_recycle[(0)]

            if this == 0 then
                set s__String_count=s__String_count + 1
                set this=s__String_count
            else
                set s__String_recycle[(0)]=s__String_recycle[this]
            endif

            set s__String_value[this]=s
            set s__String_length[this]=StringLength(s)

            return this
        endfunction

        function s__String_clear takes integer this returns nothing
            set s__String_value[this]=null
            set s__String_length[this]=0
        endfunction

        function s__String_destroy takes integer this returns nothing
            call s__String_clear(this)

            set s__String_recycle[this]=s__String_recycle[(0)]
            set s__String_recycle[(0)]=this
        endfunction

        function s__String__staticgetindex takes integer js returns integer
            return s__String_create(s__String_value[js])
        endfunction

        function s__String_empty takes integer this returns boolean
            return s__String_length[this] == 0
        endfunction

        function s__String_size takes integer this returns integer
            return s__String_length[this]
        endfunction

        constant function s__String_maxSize takes nothing returns integer
            return 1023
        endfunction

        // private asserts for String objects
        function s__String_assert_pos takes integer this,integer pos,string f returns boolean
            return ( pos >= 0 and pos < s__String_length[this] )
        endfunction

        function s__String_assert_size takes integer this,integer count,string f returns boolean
            return ( count <= (1023) ) // INLINED!!
        endfunction

        function s__String_assert_range takes integer this,integer index,string f returns boolean
            return ( index >= 0 and index <= s__String_length[this] )
        endfunction

        function s__String_assert_resize takes integer this,integer count,string f returns boolean
            return s__String_assert_size(this,s__String_length[this] + count , f)
        endfunction

        function s__String__getindex takes integer this,integer pos returns string
            return SubString(s__String_value[this], pos, pos + 1)
        endfunction

        function s__String__setindex takes integer this,integer pos,string s returns nothing
            set s__String_value[this]=SubString(s__String_value[this], 0, pos) + SubString(s, 0, 1) + SubString(s__String_value[this], pos + 1, s__String_length[this])
        endfunction

        function s__String__get_front takes integer this returns string
            return SubString(s__String_value[this], 0, 1)
        endfunction

        function s__String__get_back takes integer this returns string
            return SubString(s__String_value[this], s__String_length[this] - 1, s__String_length[this])
        endfunction

        function s__String__get_str takes integer this returns string
            return s__String_value[this]
        endfunction

        function s__String_assign takes integer this,string str returns integer
            local integer len= StringLength(str)

            if ( s__String_assert_size(this,len , "assign") ) then
                set s__String_value[this]=str
                set s__String_length[this]=len
            endif

            return this
        endfunction

        function s__String_assignSubstring takes integer this,string str,integer pos,integer count returns integer
            if ( count == s__String_npos ) then
                set count=StringLength(str)
            endif

            return s__String_assign(this,SubString(str, pos, pos + count))
        endfunction

        function s__String_insert takes integer this,integer pos,string str returns integer
            local integer len

            if ( s__String_assert_range(this,pos , "insert") ) then
                set len=StringLength(str)

                if ( len > 0 and s__String_assert_resize(this,len , "insert") ) then
                    set s__String_value[this]=SubString(s__String_value[this], 0, pos) + str + SubString(s__String_value[this], pos, s__String_length[this])
                    set s__String_length[this]=s__String_length[this] + len
                endif
            endif

            return this
        endfunction

        function s__String_insertSubstring takes integer this,integer pos,string str,integer subpos,integer count returns integer
            if ( count == s__String_npos ) then
                set count=StringLength(str)
            endif

            return s__String_insert(this,pos , SubString(str, subpos, subpos + count))
        endfunction

        function s__String_erase takes integer this,integer pos,integer count returns integer
            if s__String_assert_pos(this,pos , "erase") then
                if ( count == s__String_npos ) or ( pos + count > s__String_length[this] ) then
                    set count=s__String_length[this] - pos
                endif

                if ( count > 0 ) then
                    set s__String_value[this]=SubString(s__String_value[this], 0, pos) + SubString(s__String_value[this], pos + count, s__String_length[this])
                    set s__String_length[this]=s__String_length[this] - count
                endif
            endif

            return this
        endfunction

        function s__String_pop takes integer this returns integer
            if ( s__String_length[this] > 0 ) then
                set s__String_value[this]=SubString(s__String_value[this], 0, s__String_length[this] - 1)
                set s__String_length[this]=s__String_length[this] - 1
            endif

            return this
        endfunction

        function s__String_shift takes integer this returns integer
            if ( s__String_length[this] > 0 ) then
                set s__String_value[this]=SubString(s__String_value[this], 1, s__String_length[this])
                set s__String_length[this]=s__String_length[this] - 1
            endif

            return this
        endfunction

        function s__String_append takes integer this,string str returns integer
            local integer len= StringLength(str)

            if ( len > 0 and s__String_assert_resize(this,len , "append") ) then
                set s__String_value[this]=s__String_value[this] + str
                set s__String_length[this]=s__String_length[this] + len
            endif

            return this
        endfunction

        function s__String_appendSubstring takes integer this,string str,integer pos,integer count returns integer
            if ( count == s__String_npos ) then
                set count=StringLength(str)
            endif

            return s__String_append(this,SubString(str, pos, pos + count))
        endfunction

        function s__String_compare takes integer this,string str returns integer
            if ( s__String_value[this] == str ) then
                return 0
            elseif s__String_length[this] > StringLength(str) then
                return 1
            endif

            return - 1
        endfunction

        function s__String_compareSubstrings takes integer this,integer pos,integer len,string str,integer subpos,integer sublen returns integer
            local integer result= - 1
            local string sub
            local string sub2

            if ( len == s__String_npos ) then
                set len=s__String_length[this]
            endif
            if ( sublen == s__String_npos ) then
                set sublen=StringLength(str)
            endif

            set sub=SubString(s__String_value[this], pos, pos + len)
            set sub2=SubString(str, subpos, subpos + sublen)

            if sub == sub2 then
                set result=0
            elseif StringLength(sub) > StringLength(sub2) then
                set result=1
            endif

            set sub=null
            set sub2=null
            return result
        endfunction

        function s__String_replace takes integer this,integer pos,integer count,string str returns integer
            local integer len

            if ( s__String_assert_pos(this,pos , "replace") ) then
                if ( count == s__String_npos ) or ( pos + count > s__String_length[this] ) then
                    set count=s__String_length[this] - pos
                endif

                set len=StringLength(str) - count
                if ( s__String_assert_resize(this,len , "replace") ) then
                    set s__String_value[this]=SubString(s__String_value[this], 0, pos) + str + SubString(s__String_value[this], pos + count, s__String_length[this])
                    set s__String_length[this]=s__String_length[this] + len
                endif
            endif

            return this
        endfunction

        function s__String_replaceSubstrings takes integer this,integer pos,integer len,string str,integer subpos,integer sublen returns integer
            if ( sublen == s__String_npos ) then
                set sublen=StringLength(str)
            endif

            return s__String_replace(this,pos , len , SubString(str, subpos, subpos + sublen))
        endfunction

        function s__String_substr takes integer this,integer pos,integer count returns string
            if ( s__String_assert_pos(this,pos , "substr") ) then
                if ( count == s__String_npos ) then
                    set count=s__String_length[this]
                endif

                return SubString(s__String_value[this], pos, pos + count)
            endif

            return null
        endfunction

        function s__String_resize takes integer this,integer count returns nothing
            if ( count > s__String_length[this] ) then
                if ( s__String_assert_size(this,count , "resize") ) then
                    loop
                        exitwhen s__String_length[this] >= count
                        set s__String_value[this]=s__String_value[this] + " "
                        set s__String_length[this]=s__String_length[this] + 1
                    endloop
                endif
            elseif ( count >= 0 and count < s__String_length[this] ) then
                set s__String_value[this]=SubString(s__String_value[this], 0, count)
                set s__String_length[this]=count
            endif
        endfunction

        function s__String_find takes integer this,string str,integer pos returns integer
            local integer count

            if ( s__String_assert_pos(this,pos , "find") ) then
                set count=StringLength(str)

                if ( count > 0 ) then
                    loop
                        exitwhen ( pos + count > s__String_length[this] )
                        if ( SubString(s__String_value[this], pos, pos + count) == str ) then
                            return pos
                        endif
                        set pos=pos + 1
                    endloop
                endif
            endif

            return s__String_npos
        endfunction

        function s__String_findBuffer takes integer this,string str,integer pos,integer count returns integer
            return s__String_find(this,SubString(str, 0, count) , pos)
        endfunction

        function s__String_rfind takes integer this,string str,integer pos returns integer
            local integer count

            if ( pos == s__String_npos or pos >= s__String_length[this] ) then
                set pos=s__String_length[this] - 1
            endif

            if ( s__String_assert_pos(this,pos , "rfind") ) then
                set count=StringLength(str)

                if ( count > 0 ) then
                    set pos=pos - count + 1

                    loop
                        exitwhen ( pos + 1 < count )
                        if ( SubString(s__String_value[this], pos, pos + count) == str ) then
                            return pos
                        endif
                        set pos=pos - 1
                    endloop
                endif
            endif

            return s__String_npos
        endfunction

        function s__String_rfindBuffer takes integer this,string str,integer pos,integer count returns integer
            return s__String_rfind(this,SubString(str, 0, count) , pos)
        endfunction

        function s__String_capital takes integer this returns string
            return StringCase(SubString(s__String_value[this], 0, 1), true) + SubString(s__String_value[this], 1, s__String_length[this])
        endfunction

        function s__String_upper takes integer this returns string
            return StringCase(s__String_value[this], true)
        endfunction

        function s__String_lower takes integer this returns string
            return StringCase(s__String_value[this], false)
        endfunction


//library String ends
//library Table:
   
   
    function s__Table__dex__get_size takes nothing returns integer
        return Table__sizeK
    endfunction
    function s__Table__dex__get_list takes nothing returns integer
        return Table__listK
    endfunction
   
    function s__Table__handles_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__handles_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
   
    function s__Table__agents__setindex takes integer this,integer key,agent value returns nothing
        call SaveAgentHandle(Table__ht, this, key, value)
    endfunction
   
   
   
//Run these textmacros to include the entire hashtable API as wrappers.
//Don't be intimidated by the number of macros - Vexorian's map optimizer is
//supposed to kill functions which inline (all of these functions inline).
//textmacro instance: NEW_ARRAY_BASIC("Real", "Real", "real")
    function s__Table__reals__getindex takes integer this,integer key returns real
        return LoadReal(Table__ht, this, key)
    endfunction
    function s__Table__reals__setindex takes integer this,integer key,real value returns nothing
        call SaveReal(Table__ht, this, key, value)
    endfunction
    function s__Table__reals_has takes integer this,integer key returns boolean
        return HaveSavedReal(Table__ht, this, key)
    endfunction
    function s__Table__reals_remove takes integer this,integer key returns nothing
        call RemoveSavedReal(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Real", "Real", "real")
//textmacro instance: NEW_ARRAY_BASIC("Boolean", "Boolean", "boolean")
    function s__Table__booleans__getindex takes integer this,integer key returns boolean
        return LoadBoolean(Table__ht, this, key)
    endfunction
    function s__Table__booleans__setindex takes integer this,integer key,boolean value returns nothing
        call SaveBoolean(Table__ht, this, key, value)
    endfunction
    function s__Table__booleans_has takes integer this,integer key returns boolean
        return HaveSavedBoolean(Table__ht, this, key)
    endfunction
    function s__Table__booleans_remove takes integer this,integer key returns nothing
        call RemoveSavedBoolean(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Boolean", "Boolean", "boolean")
//textmacro instance: NEW_ARRAY_BASIC("String", "Str", "string")
    function s__Table__strings__getindex takes integer this,integer key returns string
        return LoadStr(Table__ht, this, key)
    endfunction
    function s__Table__strings__setindex takes integer this,integer key,string value returns nothing
        call SaveStr(Table__ht, this, key, value)
    endfunction
    function s__Table__strings_has takes integer this,integer key returns boolean
        return HaveSavedString(Table__ht, this, key)
    endfunction
    function s__Table__strings_remove takes integer this,integer key returns nothing
        call RemoveSavedString(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("String", "Str", "string")
//New textmacro to allow table.integer[] syntax for compatibility with textmacros that might desire it.
//textmacro instance: NEW_ARRAY_BASIC("Integer", "Integer", "integer")
    function s__Table__integers__getindex takes integer this,integer key returns integer
        return LoadInteger(Table__ht, this, key)
    endfunction
    function s__Table__integers__setindex takes integer this,integer key,integer value returns nothing
        call SaveInteger(Table__ht, this, key, value)
    endfunction
    function s__Table__integers_has takes integer this,integer key returns boolean
        return HaveSavedInteger(Table__ht, this, key)
    endfunction
    function s__Table__integers_remove takes integer this,integer key returns nothing
        call RemoveSavedInteger(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Integer", "Integer", "integer")

//textmacro instance: NEW_ARRAY("Player", "player")
    function s__Table__players__getindex takes integer this,integer key returns player
        return LoadPlayerHandle(Table__ht, this, key)
    endfunction
    function s__Table__players__setindex takes integer this,integer key,player value returns nothing
        call SavePlayerHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__players_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__players_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Player", "player")
//textmacro instance: NEW_ARRAY("Widget", "widget")
    function s__Table__widgets__getindex takes integer this,integer key returns widget
        return LoadWidgetHandle(Table__ht, this, key)
    endfunction
    function s__Table__widgets__setindex takes integer this,integer key,widget value returns nothing
        call SaveWidgetHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__widgets_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__widgets_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Widget", "widget")
//textmacro instance: NEW_ARRAY("Destructable", "destructable")
    function s__Table__destructables__getindex takes integer this,integer key returns destructable
        return LoadDestructableHandle(Table__ht, this, key)
    endfunction
    function s__Table__destructables__setindex takes integer this,integer key,destructable value returns nothing
        call SaveDestructableHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__destructables_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__destructables_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Destructable", "destructable")
//textmacro instance: NEW_ARRAY("Item", "item")
    function s__Table__items__getindex takes integer this,integer key returns item
        return LoadItemHandle(Table__ht, this, key)
    endfunction
    function s__Table__items__setindex takes integer this,integer key,item value returns nothing
        call SaveItemHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__items_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__items_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Item", "item")
//textmacro instance: NEW_ARRAY("Unit", "unit")
    function s__Table__units__getindex takes integer this,integer key returns unit
        return LoadUnitHandle(Table__ht, this, key)
    endfunction
    function s__Table__units__setindex takes integer this,integer key,unit value returns nothing
        call SaveUnitHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__units_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__units_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Unit", "unit")
//textmacro instance: NEW_ARRAY("Ability", "ability")
    function s__Table__abilitys__getindex takes integer this,integer key returns ability
        return LoadAbilityHandle(Table__ht, this, key)
    endfunction
    function s__Table__abilitys__setindex takes integer this,integer key,ability value returns nothing
        call SaveAbilityHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__abilitys_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__abilitys_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Ability", "ability")
///! runtextmacro NEW_ARRAY("Timer", "timer")
//textmacro instance: NEW_ARRAY("Trigger", "trigger")
    function s__Table__triggers__getindex takes integer this,integer key returns trigger
        return LoadTriggerHandle(Table__ht, this, key)
    endfunction
    function s__Table__triggers__setindex takes integer this,integer key,trigger value returns nothing
        call SaveTriggerHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__triggers_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__triggers_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Trigger", "trigger")
///! runtextmacro NEW_ARRAY("TriggerCondition", "triggercondition")
///! runtextmacro NEW_ARRAY("TriggerAction", "triggeraction")
///! runtextmacro NEW_ARRAY("TriggerEvent", "event")
//textmacro instance: NEW_ARRAY("Force", "force")
    function s__Table__forces__getindex takes integer this,integer key returns force
        return LoadForceHandle(Table__ht, this, key)
    endfunction
    function s__Table__forces__setindex takes integer this,integer key,force value returns nothing
        call SaveForceHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__forces_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__forces_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Force", "force")
///! runtextmacro NEW_ARRAY("Group", "group")
///! runtextmacro NEW_ARRAY("Location", "location")
//textmacro instance: NEW_ARRAY("Rect", "rect")
    function s__Table__rects__getindex takes integer this,integer key returns rect
        return LoadRectHandle(Table__ht, this, key)
    endfunction
    function s__Table__rects__setindex takes integer this,integer key,rect value returns nothing
        call SaveRectHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__rects_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__rects_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Rect", "rect")
//textmacro instance: NEW_ARRAY("BooleanExpr", "boolexpr")
    function s__Table__boolexprs__getindex takes integer this,integer key returns boolexpr
        return LoadBooleanExprHandle(Table__ht, this, key)
    endfunction
    function s__Table__boolexprs__setindex takes integer this,integer key,boolexpr value returns nothing
        call SaveBooleanExprHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__boolexprs_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__boolexprs_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("BooleanExpr", "boolexpr")
//textmacro instance: NEW_ARRAY("Sound", "sound")
    function s__Table__sounds__getindex takes integer this,integer key returns sound
        return LoadSoundHandle(Table__ht, this, key)
    endfunction
    function s__Table__sounds__setindex takes integer this,integer key,sound value returns nothing
        call SaveSoundHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__sounds_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__sounds_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Sound", "sound")
//textmacro instance: NEW_ARRAY("Effect", "effect")
    function s__Table__effects__getindex takes integer this,integer key returns effect
        return LoadEffectHandle(Table__ht, this, key)
    endfunction
    function s__Table__effects__setindex takes integer this,integer key,effect value returns nothing
        call SaveEffectHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__effects_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__effects_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Effect", "effect")
///! runtextmacro NEW_ARRAY("UnitPool", "unitpool")
///! runtextmacro NEW_ARRAY("ItemPool", "itempool")
///! runtextmacro NEW_ARRAY("Quest", "quest")
///! runtextmacro NEW_ARRAY("QuestItem", "questitem")
///! runtextmacro NEW_ARRAY("DefeatCondition", "defeatcondition")
///! runtextmacro NEW_ARRAY("TimerDialog", "timerdialog")
///! runtextmacro NEW_ARRAY("Leaderboard", "leaderboard")
///! runtextmacro NEW_ARRAY("Multiboard", "multiboard")
///! runtextmacro NEW_ARRAY("MultiboardItem", "multiboarditem")
///! runtextmacro NEW_ARRAY("Trackable", "trackable")
///! runtextmacro NEW_ARRAY("Dialog", "dialog")
///! runtextmacro NEW_ARRAY("Button", "button")
//textmacro instance: NEW_ARRAY("TextTag", "texttag")
    function s__Table__texttags__getindex takes integer this,integer key returns texttag
        return LoadTextTagHandle(Table__ht, this, key)
    endfunction
    function s__Table__texttags__setindex takes integer this,integer key,texttag value returns nothing
        call SaveTextTagHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__texttags_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__texttags_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("TextTag", "texttag")
//textmacro instance: NEW_ARRAY("Lightning", "lightning")
    function s__Table__lightnings__getindex takes integer this,integer key returns lightning
        return LoadLightningHandle(Table__ht, this, key)
    endfunction
    function s__Table__lightnings__setindex takes integer this,integer key,lightning value returns nothing
        call SaveLightningHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__lightnings_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__lightnings_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Lightning", "lightning")
//textmacro instance: NEW_ARRAY("Image", "image")
    function s__Table__images__getindex takes integer this,integer key returns image
        return LoadImageHandle(Table__ht, this, key)
    endfunction
    function s__Table__images__setindex takes integer this,integer key,image value returns nothing
        call SaveImageHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__images_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__images_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Image", "image")
///! runtextmacro NEW_ARRAY("Ubersplat", "ubersplat")
//textmacro instance: NEW_ARRAY("Region", "region")
    function s__Table__regions__getindex takes integer this,integer key returns region
        return LoadRegionHandle(Table__ht, this, key)
    endfunction
    function s__Table__regions__setindex takes integer this,integer key,region value returns nothing
        call SaveRegionHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__regions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__regions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Region", "region")
//textmacro instance: NEW_ARRAY("FogState", "fogstate")
    function s__Table__fogstates__getindex takes integer this,integer key returns fogstate
        return LoadFogStateHandle(Table__ht, this, key)
    endfunction
    function s__Table__fogstates__setindex takes integer this,integer key,fogstate value returns nothing
        call SaveFogStateHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__fogstates_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__fogstates_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("FogState", "fogstate")
//textmacro instance: NEW_ARRAY("FogModifier", "fogmodifier")
    function s__Table__fogmodifiers__getindex takes integer this,integer key returns fogmodifier
        return LoadFogModifierHandle(Table__ht, this, key)
    endfunction
    function s__Table__fogmodifiers__setindex takes integer this,integer key,fogmodifier value returns nothing
        call SaveFogModifierHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__fogmodifiers_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__fogmodifiers_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("FogModifier", "fogmodifier")
//textmacro instance: NEW_ARRAY("Hashtable", "hashtable")
    function s__Table__hashtables__getindex takes integer this,integer key returns hashtable
        return LoadHashtableHandle(Table__ht, this, key)
    endfunction
    function s__Table__hashtables__setindex takes integer this,integer key,hashtable value returns nothing
        call SaveHashtableHandle(Table__ht, this, key, value)
    endfunction
    function s__Table__hashtables_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table__ht, this, key)
    endfunction
    function s__Table__hashtables_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table__ht, this, key)
    endfunction
//end of: NEW_ARRAY("Hashtable", "hashtable")
   
   
    // Implement modules for intuitive syntax (tb.handle; tb.unit; etc.)
//Implemented from module Table__realm:
    function s__Table__get_real takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__integerm:
    function s__Table__get_integer takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__booleanm:
    function s__Table__get_boolean takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__stringm:
    function s__Table__get_string takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__playerm:
    function s__Table__get_player takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__widgetm:
    function s__Table__get_widget takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__destructablem:
    function s__Table__get_destructable takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__itemm:
    function s__Table__get_item takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__unitm:
    function s__Table__get_unit takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__abilitym:
    function s__Table__get_ability takes integer this returns integer
        return this
    endfunction
//    implement timerm
//Implemented from module Table__triggerm:
    function s__Table__get_trigger takes integer this returns integer
        return this
    endfunction
//    implement triggerconditionm
//    implement triggeractionm
//    implement eventm
//Implemented from module Table__forcem:
    function s__Table__get_force takes integer this returns integer
        return this
    endfunction
//    implement groupm
//    implement locationm
//Implemented from module Table__rectm:
    function s__Table__get_rect takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__boolexprm:
    function s__Table__get_boolexpr takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__soundm:
    function s__Table__get_sound takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__effectm:
    function s__Table__get_effect takes integer this returns integer
        return this
    endfunction
//    implement unitpoolm
//    implement itempoolm
//    implement questm
//    implement questitemm
//    implement defeatconditionm
  //  implement timerdialogm
  //  implement leaderboardm
 //   implement multiboardm
  //  implement multiboarditemm
  //  implement trackablem
   // implement dialogm
   // implement buttonm
//Implemented from module Table__texttagm:
    function s__Table__get_texttag takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__lightningm:
    function s__Table__get_lightning takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__imagem:
    function s__Table__get_image takes integer this returns integer
        return this
    endfunction
//    implement ubersplatm
//Implemented from module Table__regionm:
    function s__Table__get_region takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__fogstatem:
    function s__Table__get_fogstate takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__fogmodifierm:
    function s__Table__get_fogmodifier takes integer this returns integer
        return this
    endfunction
//Implemented from module Table__hashtablem:
    function s__Table__get_hashtable takes integer this returns integer
        return this
    endfunction
   
    function s__Table__get_handle takes integer this returns integer
        return this
    endfunction
   
    function s__Table__get_agent takes integer this returns integer
        return this
    endfunction
   
    //set this = tb[GetSpellAbilityId()]
    function s__Table__getindex takes integer this,integer key returns integer
        return LoadInteger(Table__ht, this, key) //return this.integer[key]
    endfunction
   
    //set tb[389034] = 8192
    function s__Table__setindex takes integer this,integer key,integer tb returns nothing
        call SaveInteger(Table__ht, this, key, tb) //set this.integer[key] = tb
    endfunction
   
    //set b = tb.has(2493223)
    function s__Table_has takes integer this,integer key returns boolean
        return HaveSavedInteger(Table__ht, this, key) //return this.integer.has(key)
    endfunction
   
    //call tb.remove(294080)
    function s__Table_remove takes integer this,integer key returns nothing
        call RemoveSavedInteger(Table__ht, this, key) //call this.integer.remove(key)
    endfunction
   
    //Remove all data from a Table instance
    function s__Table_flush takes integer this returns nothing
        call FlushChildHashtable(Table__ht, this)
    endfunction
   
    //local Table tb = Table.create()
    function s__Table_create takes nothing returns integer
        local integer this= (LoadInteger(Table__ht, ((Table__listK)), (0))) // INLINED!!
       
        if this == 0 then
            set this=Table__more + 1
            set Table__more=this
        else
            call SaveInteger(Table__ht, ((Table__listK)), (0), ( (LoadInteger(Table__ht, ((Table__listK)), (this))))) // INLINED!!
            call RemoveSavedInteger(Table__ht, ((Table__listK)), (this)) //Clear hashed memory // INLINED!!
        endif
       
        return this
    endfunction
   
    // Removes all data from a Table instance and recycles its index.
    //
    //     call tb.destroy()
    //
    function s__Table_destroy takes integer this returns nothing
       
        call FlushChildHashtable(Table__ht, (this)) // INLINED!!
       
        call SaveInteger(Table__ht, ((Table__listK)), (this), ( (LoadInteger(Table__ht, ((Table__listK)), (0))))) // INLINED!!
        call SaveInteger(Table__ht, ((Table__listK)), (0), ( this)) // INLINED!!
    endfunction
   
//ignored textmacro command: TABLE_BC_METHODS()
   
//ignored textmacro command: TABLE_BC_STRUCTS()
   
   
    //Returns a new TableArray to do your bidding. Simply use:
    //
    //    local TableArray ta = TableArray[array_size]
    //
    function s__TableArray__staticgetindex takes integer array_size returns integer
        local integer tb= (LoadInteger(Table__ht, ((Table__sizeK)), (array_size))) // INLINED!!
        local integer this= (LoadInteger(Table__ht, (tb), (0))) // INLINED!!
       
       
        if this == 0 then
            set this=Table__less - array_size
            set Table__less=this
        else
            call SaveInteger(Table__ht, (tb), (0), ( (LoadInteger(Table__ht, (tb), (this))))) //Set the last destroyed to the last-last destroyed // INLINED!!
            call RemoveSavedInteger(Table__ht, (tb), (this)) //Clear hashed memory // INLINED!!
        endif
       
        call SaveInteger(Table__ht, ((Table__sizeK)), (this), ( array_size)) //This remembers the array size // INLINED!!
        return this
    endfunction
   
    //Returns the size of the TableArray
    function s__TableArray__get_size takes integer this returns integer
        return (LoadInteger(Table__ht, ((Table__sizeK)), (this))) // INLINED!!
    endfunction
   
    //This magic method enables two-dimensional[array][syntax] for Tables,
    //similar to the two-dimensional utility provided by hashtables them-
    //selves.
    //
    //ta[integer a].unit[integer b] = unit u
    //ta[integer a][integer c] = integer d
    //
    //Inline-friendly when not running in debug mode
    //
    function s__TableArray__getindex takes integer this,integer key returns integer










        return this + key
    endfunction
   
    //Destroys a TableArray without flushing it; I assume you call .flush()
    //if you want it flushed too. This is a public method so that you don't
    //have to loop through all TableArray indices to flush them if you don't
    //need to (ie. if you were flushing all child-keys as you used them).
    //
    function s__TableArray_destroy takes integer this returns nothing
        local integer tb= (LoadInteger(Table__ht, ((Table__sizeK)), ((LoadInteger(Table__ht, ((Table__sizeK)), ((this))))))) // INLINED!!
       
       
        if tb == 0 then
            //Create a Table to index recycled instances with their array size
            set tb=s__Table_create()
            call SaveInteger(Table__ht, ((Table__sizeK)), ((LoadInteger(Table__ht, ((Table__sizeK)), ((this))))), ( tb)) // INLINED!!
        endif
       
        call RemoveSavedInteger(Table__ht, ((Table__sizeK)), (this)) //Clear the array size from hash memory // INLINED!!
       
        call SaveInteger(Table__ht, (tb), (this), ( (LoadInteger(Table__ht, (tb), (0))))) // INLINED!!
        call SaveInteger(Table__ht, (tb), (0), ( this)) // INLINED!!
    endfunction
   
   
    //Avoids hitting the op limit
    function s__TableArray_clean takes nothing returns nothing
        local integer tb= s__TableArray_tempTable
        local integer end= tb + 0x1000
        if end < s__TableArray_tempEnd then
            set s__TableArray_tempTable=end
            call ForForce(bj_FORCE_PLAYER[0], function s__TableArray_clean)
        else
            set end=s__TableArray_tempEnd
        endif
        loop
            call FlushChildHashtable(Table__ht, (tb)) // INLINED!!
            set tb=tb + 1
            exitwhen tb == end
        endloop
    endfunction
   
    //Flushes the TableArray and also destroys it. Doesn't get any more
    //similar to the FlushParentHashtable native than this.
    //
    function s__TableArray_flush takes integer this returns nothing
        set s__TableArray_tempTable=this
        set s__TableArray_tempEnd=this + (LoadInteger(Table__ht, ((Table__sizeK)), ((this)))) // INLINED!!
        call ForForce(bj_FORCE_PLAYER[0], function s__TableArray_clean)
        call s__TableArray_destroy(this)
    endfunction
   
   
//NEW: Added in Table 4.0. A fairly simple struct but allows you to do more
//than that which was previously possible.

    //Enables myHash[parentKey][childKey] syntax.
    //Basically, it creates a Table in the place of the parent key if
    //it didn't already get created earlier.
    function s__HashTable__getindex takes integer this,integer index returns integer
        local integer t= (LoadInteger(Table__ht, ((this)), (index))) // INLINED!!
        if t == 0 then
            set t=s__Table_create()
            call SaveInteger(Table__ht, ((this)), (index), ( t)) //whoops! Forgot that line. I'm out of practice! // INLINED!!
        endif
        return t
    endfunction

    //You need to call this on each parent key that you used if you
    //intend to destroy the HashTable or simply no longer need that key.
    function s__HashTable_remove takes integer this,integer index returns nothing
        local integer t= (LoadInteger(Table__ht, ((this)), (index))) // INLINED!!
        if t != 0 then
            call s__Table_destroy(t)
            call RemoveSavedInteger(Table__ht, ((this)), (index)) // INLINED!!
        endif
    endfunction
   
    //Added in version 4.1
    function s__HashTable_has takes integer this,integer index returns boolean
        return (HaveSavedInteger(Table__ht, ((this)), (index))) // INLINED!!
    endfunction
   
    //HashTables are just fancy Table indices.
    function s__HashTable_destroy takes integer this returns nothing
        call s__Table_destroy((this))
    endfunction
   
    //Like I said above...
    function s__HashTable_create takes nothing returns integer
        return s__Table_create()
    endfunction



//library Table ends
//library ThorlarSpaceships:

function GetSpaceshipIndexFromRect takes rect spaceshipInteriorRect returns integer

    local integer i= 0
    
    loop
        exitwhen i > 12
            if ( spaceshipInteriorRect == udg_SpaceshipRect[i] ) then
                return i
            endif
        set i=i + 1
    endloop
    
    set i=- 1
    return i

endfunction

function GetSpaceshipIndexFromSpaceshipUnit takes unit spaceshipUnit returns integer

    local integer i= 0
    
    loop
        exitwhen i > 12
            if ( spaceshipUnit == udg_SpaceshipGround[i] or spaceshipUnit == udg_SpaceshipSpace[i] ) then
                return i
            endif
        set i=i + 1
    endloop
    
    set i=- 1
    return i

endfunction

function GetSpaceshipIndexFromCoords takes real spaceshipInteriorX,real spaceshipInteriorY returns integer

    local integer i= 1
    
    loop
        exitwhen i > 12
            if ( RectContainsCoords(udg_SpaceshipRect[i], spaceshipInteriorX, spaceshipInteriorY) ) then
                return i
            endif
        set i=i + 1
    endloop
    
    set i=- 1
    return i

endfunction

function GetSpaceshipIndexFromPosition takes location spaceshipInterior returns integer
    return GetSpaceshipIndexFromCoords(GetLocationX(spaceshipInterior) , GetLocationY(spaceshipInterior))
endfunction


//library ThorlarSpaceships ends
//library TimedAbility:
//--------------------------------------------------------------------------------------
// API
// nothing UnitAddTimedAbility(unit <u>, integer <abiId>, integer <abiLevel>, real <duration>, 
//      boolean <removeOnDeath>, integer <buffId>, real <delay>, string <eff>, string <attachmentPoint>)

// additional function (for one-level ability & without checking for buff & without effect):
// nothing UnitAddTimedAbility_Simple(unit <u>, integer <abiId>, real <duration>, boolean <removeOnDeath>)
//
// If unit already has ability <abiId> then this library will:
//      overwrite ability level / duration / effect - if previously added <abiId> comes from this library
//      overwrite ability level - if <abiId> do not comes from this library
//                                  it will set-back to old level (coming from non-library ability) after instance expires
// If <buffId> is specified and there's no buff on unit <u> - instance will be ended. 
//                                  Checking for buff begins after <delay> value (sec); <delay> should be >=0.00
// Use <buffId>==0 and <delay>==0.00 to not checking for a buff.
// Use <eff>==null and <attachmentPoint>==null to not play speccial effect on unit <u>
//
// Do not use with hero-ability if this ability is used as normal, level-able ability by any hero in your map.
//--------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------
//-----------------------------------------------------------
function TimedAbility__Loop takes nothing returns nothing
    local integer id=1
    loop
        exitwhen id > TimedAbility__maxId

        if TimedAbility__instBuffSet[id] then
            set TimedAbility__instCounter[id]=TimedAbility__instCounter[id] - 1
            if TimedAbility__instCounter[id] <= 0 and ( GetUnitAbilityLevel(TimedAbility__instTarget[id], TimedAbility__instBuffId[id]) == 0 ) then
                set TimedAbility__instDuration[id]=0.00
            endif
        endif
        set TimedAbility__instDuration[id]=TimedAbility__instDuration[id] - TimedAbility__INTERVAL
        if TimedAbility__instDuration[id] <= 0.00 or ( TimedAbility__instRemoveWhenUnitDies[id] and ( not UnitAlive(TimedAbility__instTarget[id]) ) ) then

               // call DisplayTextToPlayer(GetLocalPlayer(), 0, 0, "ABI instance ended " + GetObjectName(instAbilityId[id]) + " on unit " + GetUnitName(instTarget[id]))

            //---
            call DestroyEffect(TimedAbility__instEffect[id])
            if TimedAbility__externalAbiLevel[id] == 0 then //remove ability
                call UnitRemoveAbility(TimedAbility__instTarget[id], TimedAbility__instAbilityId[id])
            else // set back to old level
                call SetUnitAbilityLevel(TimedAbility__instTarget[id], TimedAbility__instAbilityId[id], TimedAbility__externalAbiLevel[id])
            endif
            //---
            //dealloc: /move data from max to current/
            set TimedAbility__instTarget[id]=TimedAbility__instTarget[TimedAbility__maxId]
            set TimedAbility__instAbilityId[id]=TimedAbility__instAbilityId[TimedAbility__maxId]
            set TimedAbility__instDuration[id]=TimedAbility__instDuration[TimedAbility__maxId]
            set TimedAbility__instRemoveWhenUnitDies[id]=TimedAbility__instRemoveWhenUnitDies[TimedAbility__maxId]
            set TimedAbility__instBuffId[id]=TimedAbility__instBuffId[TimedAbility__maxId]
            set TimedAbility__instBuffCheckDelay[id]=TimedAbility__instBuffCheckDelay[TimedAbility__maxId]
            set TimedAbility__instCounter[id]=TimedAbility__instCounter[TimedAbility__maxId]
            set TimedAbility__instBuffSet[id]=TimedAbility__instBuffSet[TimedAbility__maxId]
            set TimedAbility__instEffect[id]=TimedAbility__instEffect[TimedAbility__maxId]
            set TimedAbility__externalAbiLevel[id]=TimedAbility__externalAbiLevel[TimedAbility__maxId]
            //clean:
            set TimedAbility__instTarget[TimedAbility__maxId]=null
            set TimedAbility__instEffect[TimedAbility__maxId]=null
            //---
            set TimedAbility__maxId=TimedAbility__maxId - 1
            set id=id - 1
            if TimedAbility__maxId == 0 then
                call PauseTimer(TimedAbility__t)
            endif

        endif

        set id=id + 1
    endloop
endfunction
//----------------------------------------------------------------------------------------------
function TimedAbility__Update takes unit u,integer abiId,integer abiLevel,real duration,string eff,string attachmentPoint returns boolean
    local integer id=1
    loop
        exitwhen id > TimedAbility__maxId
        if u == TimedAbility__instTarget[id] and abiId == TimedAbility__instAbilityId[id] then
            set TimedAbility__instDuration[id]=duration //overwrite duration
            call SetUnitAbilityLevel(u, abiId, abiLevel) //overwrite ability level
            //overwrite effect:
            call DestroyEffect(TimedAbility__instEffect[id])
            if not ( eff == null or attachmentPoint == null or eff == "" or attachmentPoint == "" ) then
                set TimedAbility__instEffect[id]=AddSpecialEffectTarget(eff, u, attachmentPoint)
            endif
            //---

               // call DisplayTextToPlayer(GetLocalPlayer(), 0, 0, GetUnitName(u) +" updated duration/level/efect on ability "+ GetObjectName(abiId))

            return true
        endif
        set id=id + 1
    endloop
    return false
endfunction
//----------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------
function UnitAddTimedAbility takes unit u,integer abiId,integer abiLevel,real duration,boolean removeOnDeath,integer buffId,real delay,string eff,string attachmentPoint returns nothing
    local integer oldLevel= GetUnitAbilityLevel(u, abiId)
    if oldLevel > 0 and TimedAbility__Update(u , abiId , abiLevel , duration , eff , attachmentPoint) then
        return //has ability [from this library] and ability was updated succefully
    endif
    
    set TimedAbility__maxId=TimedAbility__maxId + 1
    set TimedAbility__instTarget[TimedAbility__maxId]=u
    set TimedAbility__instAbilityId[TimedAbility__maxId]=abiId
    set TimedAbility__instDuration[TimedAbility__maxId]=duration
    set TimedAbility__instRemoveWhenUnitDies[TimedAbility__maxId]=removeOnDeath
    set TimedAbility__instBuffId[TimedAbility__maxId]=buffId
    set TimedAbility__instBuffCheckDelay[TimedAbility__maxId]=delay
    set TimedAbility__instCounter[TimedAbility__maxId]=0
    if delay > 0.00 then
        set TimedAbility__instCounter[TimedAbility__maxId]=R2I(delay / TimedAbility__INTERVAL) + 1 //for delayed check buff
    endif
    set TimedAbility__instBuffSet[TimedAbility__maxId]=( buffId != 0 )
    set TimedAbility__instEffect[TimedAbility__maxId]=null
    if not ( eff == null or attachmentPoint == null or eff == "" or attachmentPoint == "" ) then
        set TimedAbility__instEffect[TimedAbility__maxId]=AddSpecialEffectTarget(eff, u, attachmentPoint)
    endif
    set TimedAbility__externalAbiLevel[TimedAbility__maxId]=oldLevel
    
    call UnitAddAbility(u, abiId)
    call SetUnitAbilityLevel(u, abiId, abiLevel)
    
    if TimedAbility__maxId == 1 then
        call TimerStart(TimedAbility__t, TimedAbility__INTERVAL, true, function TimedAbility__Loop)
    endif
endfunction
//---------------------------------------------------------------------------
function UnitAddTimedAbility_Simple takes unit u,integer abiId,real duration,boolean removeOnDeath returns nothing
    call UnitAddTimedAbility(u , abiId , 1 , duration , removeOnDeath , 0 , 0.00 , null , null)
endfunction

//library TimedAbility ends
//library UnitIndexerGUI:
    

    function UnitIndexerGUI__DoTheThings takes trigger t,code c,real r returns trigger
        if t == null then
            set t=CreateTrigger()
            call h__TriggerRegisterVariableEvent(t, "udg_UnitIndexEvent", EQUAL, r)
        endif
        call TriggerAddCondition(t, Filter(c))
        set UnitIndexerGUI__tempTrig=t
        set t=null
        return UnitIndexerGUI__tempTrig
    endfunction

    //call RegisterUnitIndexEvent(Filter(function Blah), EVENT_UNIT_INDEXED)
    //->
    //call OnUnitIndex(function Blah)
    function OnUnitIndex takes code c returns nothing
        set UnitIndexerGUI__index=UnitIndexerGUI__DoTheThings(UnitIndexerGUI__index , c , 1.)
    endfunction

    //call RegisterUnitIndexEvent(Filter(function Blah), EVENT_UNIT_DEINDEXED)
    //->
    //call OnUnitDeindex(function Blah)
    function OnUnitDeindex takes code c returns nothing
        set UnitIndexerGUI__deindex=UnitIndexerGUI__DoTheThings(UnitIndexerGUI__deindex , c , 2.)
    endfunction

    function UnitIndexerGUI__DestroyInit takes nothing returns boolean
        call DestroyTrigger(UnitIndexerGUI__init) //will still allow consecutive triggerconditions to run.
        set UnitIndexerGUI__init=null
        return false
    endfunction

    //GUI Unit Indexer will initialize after any vJass stuff, so you need to do your
    //unit-indexer-requiring stuff after this event instead of a module/struct/library
    //initializer.
    function OnUnitIndexerInitialized takes code c returns nothing
        if UnitIndexerGUI__init == null then
            set UnitIndexerGUI__init=CreateTrigger()
            call TriggerAddCondition(UnitIndexerGUI__init, Filter(function UnitIndexerGUI__DestroyInit))
            call h__TriggerRegisterVariableEvent(UnitIndexerGUI__init, "udg_UnitIndexEvent", EQUAL, 3.00)
        endif
        call TriggerAddCondition(UnitIndexerGUI__init, Filter(c))
    endfunction

    function GetUnitId takes unit u returns integer
        return GetUnitUserData(u)
    endfunction

    function GetUnitById takes integer id returns unit
        return udg_UDexUnits[id]
    endfunction

    function GetIndexedUnit takes nothing returns unit
        return udg_UDexUnits[udg_UDex]
    endfunction

    function GetIndexedUnitId takes nothing returns integer
        return udg_UDex
    endfunction

    function IsUnitIndexed takes unit u returns boolean
        return udg_UDexUnits[GetUnitUserData(u)] == u
    endfunction


//library UnitIndexerGUI ends
//library WithinDistance:
function WithinDistance takes real x,real y,real x2,real y2,real maxdist returns boolean
               local real x3= x2 - x
               local real y3= y2 - y
               if maxdist * maxdist >= x3 * x3 + y3 * y3 then
                    return true
                else
                    return false
               endif
endfunction

//library WithinDistance ends
//library WorldBounds:
    
//Implemented from module WorldBounds__WorldBoundInit:

    function s__WorldBounds_WorldBounds__WorldBoundInit___onInit takes nothing returns nothing
        set s__WorldBounds_world=GetWorldBounds()
        set s__WorldBounds_maxX=R2I(GetRectMaxX(s__WorldBounds_world))
        set s__WorldBounds_maxY=R2I(GetRectMaxY(s__WorldBounds_world))
        set s__WorldBounds_minX=R2I(GetRectMinX(s__WorldBounds_world))
        set s__WorldBounds_minY=R2I(GetRectMinY(s__WorldBounds_world))
        set s__WorldBounds_centerX=R2I(( s__WorldBounds_maxX + s__WorldBounds_minX ) / 2)
        set s__WorldBounds_centerY=R2I(( s__WorldBounds_minY + s__WorldBounds_maxY ) / 2)
        set s__WorldBounds_playMaxX=GetRectMaxX(bj_mapInitialPlayableArea)
        set s__WorldBounds_playMaxY=GetRectMaxY(bj_mapInitialPlayableArea)
        set s__WorldBounds_playMinX=GetRectMinX(bj_mapInitialPlayableArea)
        set s__WorldBounds_playMinY=GetRectMinY(bj_mapInitialPlayableArea)
        set s__WorldBounds_worldRegion=CreateRegion()
        call RegionAddRect(s__WorldBounds_worldRegion, s__WorldBounds_world)
        endfunction
    

//library WorldBounds ends
//library Alloc:
    


















    function Alloc_Allocate takes integer typeId returns integer
        local integer offset= typeId * JASS_MAX_ARRAY_SIZE
        local integer node= (LoadInteger(Table__ht, ((Alloc__stack)), (offset))) // INLINED!!
        local integer stackNext= (LoadInteger(Table__ht, ((Alloc__stack)), (offset + node))) // INLINED!!
        if stackNext == 0 then
            set node=node + 1
            call SaveInteger(Table__ht, ((Alloc__stack)), (offset), ( node)) // INLINED!!
        else
            call SaveInteger(Table__ht, ((Alloc__stack)), (offset), ( stackNext)) // INLINED!!
            call SaveInteger(Table__ht, ((Alloc__stack)), (offset + node), ( 0)) // INLINED!!
        endif
        return node
    endfunction
    function Alloc_Deallocate takes integer typeId,integer node returns nothing
        local integer offset= typeId * JASS_MAX_ARRAY_SIZE
        call SaveInteger(Table__ht, ((Alloc__stack)), (offset + node), ( (LoadInteger(Table__ht, ((Alloc__stack)), (offset))))) // INLINED!!
        call SaveInteger(Table__ht, ((Alloc__stack)), (offset), ( node)) // INLINED!!
    endfunction



//library Alloc ends
//library AntiTK:

function LoadReal2 takes hashtable hash,integer l1,integer l2 returns real
    if HaveSavedReal(hash, l1, l2) then
        return LoadReal(hash, l1, l2)
    else
        return 0.0
    endif
endfunction

function LogTKPoints takes player TKer,player TKee,real points returns nothing
    local integer s=StringHash("TKPointsOf_" + I2S(GetConvertedPlayerId(TKer)) + "_Towards_" + I2S(GetConvertedPlayerId(TKee)))
    local integer sd=StringHash("LastDamageTimeOf_" + I2S(GetConvertedPlayerId(TKer)) + "_Towards_" + I2S(GetConvertedPlayerId(TKee)))
    local real r
    
    if HaveSavedReal((udg_hash), 9449, s) then // INLINED!!
        set r=LoadReal2((udg_hash) , 9449 , s) // INLINED!!
    else
        set r=0
    endif
    
    call SaveReal((udg_hash), 9449, sd, TimerGetElapsed(udg_GameTimer)) // INLINED!!
    call SaveReal((udg_hash), 9449, s, r + points / GetUnitState(udg_Playerhero[GetConvertedPlayerId(TKee)], UNIT_STATE_MAX_LIFE)) // INLINED!!
endfunction

function GetPlayerLastDamageTime takes player TKer,player TKee returns real
    local integer s=StringHash("LastDamageTimeOf_" + I2S(GetConvertedPlayerId(TKer)) + "_Towards_" + I2S(GetConvertedPlayerId(TKee)))
    local real r=LoadReal2((udg_hash) , 9449 , s) // INLINED!!
    return r
endfunction

function GetPlayerWeightedTKToPlayer takes player TKer,player TKee returns real
    local integer s=StringHash("TKPointsOf_" + I2S(GetConvertedPlayerId(TKer)) + "_Towards_" + I2S(GetConvertedPlayerId(TKee)))
    local real r=LoadReal2((udg_hash) , 9449 , s) // INLINED!!
    local integer s2=StringHash("TKPointsOf_" + I2S(GetConvertedPlayerId(TKee)) + "_Towards_" + I2S(GetConvertedPlayerId(TKer)))
    local real r2=LoadReal2((udg_hash) , 9449 , s2) // INLINED!!
    
    //Disregard TK scores for players that are EVIL. A TK is between two humans, or an android hitting a human.
        //if IsPlayerInfected(TKer) or IsPlayerInfected(TKee) then //JASS HATES NAMESPACES AND SCOPES. WE ARE LOCKED IN LS, NOT GLOBAL AAAAAAA
            //return 0.0
        //endif
    
    //Disregard TK scores for players that are EVIL. A TK is between two humans, or an android hitting a human.
        if udg_Parasite == TKer or udg_Player_IsParasiteSpawn[GetConvertedPlayerId(TKer)] or TKer == Player(bj_PLAYER_NEUTRAL_EXTRA) or udg_Mutant == TKer or udg_Player_IsMutantSpawn[GetConvertedPlayerId(TKer)] or udg_RogueAndroid == TKer or udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(TKer)] then
            return 0.0
        endif
        
        if udg_Parasite == TKee or udg_Player_IsParasiteSpawn[GetConvertedPlayerId(TKee)] or TKee == Player(bj_PLAYER_NEUTRAL_EXTRA) or udg_Mutant == TKee or udg_Player_IsMutantSpawn[GetConvertedPlayerId(TKee)] or udg_RogueAndroid == TKee or udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(TKee)] then
            return 0.0
        endif
    
    if GetPlayerLastDamageTime(TKer , TKee) + 300.0 < TimerGetElapsed(udg_GameTimer) then
        return 0.0
    else
        return r - r2
    endif
endfunction


function AndroidKillCheck takes player killed returns nothing
    local real m
    
    if not ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(udg_HiddenAndroid)] and udg_Player_IsMutantSpawn[GetConvertedPlayerId(udg_HiddenAndroid)] and udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(udg_HiddenAndroid)] ) then
        set m=GetPlayerWeightedTKToPlayer(udg_HiddenAndroid , killed)
        set udg_HiddenAndroid_TKDamageDone=udg_HiddenAndroid_TKDamageDone + m
        if udg_HiddenAndroid_TKDamageDone > 2.7 then
            call KillUnit(udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)])
            set udg_HiddenAndroid_TKDamageDone=0
        endif
    endif
endfunction


//library AntiTK ends
//library AutoFly:
    function AutoFly__i takes nothing returns boolean
        return UnitAddAbility((udg_UDexUnits[udg_UDex]), 'Amrf') and UnitRemoveAbility((udg_UDexUnits[udg_UDex]), 'Amrf') // INLINED!!
    endfunction
//Implemented from module AutoFly__Init:
        function s__AutoFly__Inits_AutoFly__Init___onInit takes nothing returns nothing
            set UnitIndexerGUI__index=UnitIndexerGUI__DoTheThings(UnitIndexerGUI__index , (function AutoFly__i) , 1.) // INLINED!!
        endfunction

//library AutoFly ends
//library DamageAreaForPlayer:

function DamageAreaForPlayer takes player a,real radius,real damage,real x,real y returns nothing
//Damage will be of the standard universal Metastasis damage type.
    local unit q
    call GroupEnumUnitsInRange(TempEnumGroup, x, y, radius, null)
    loop
        set q=FirstOfGroup(TempEnumGroup)
        exitwhen q == null
        if a != GetOwningPlayer(q) then
            call UnitDamageTarget((udg_Playerhero[GetConvertedPlayerId((a))]), q, damage, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS) // INLINED!!
        endif
        call GroupRemoveUnit(TempEnumGroup, q)
    endloop
endfunction

function DamageAreaForPlayerTK takes player a,real radius,real damage,real x,real y returns nothing
//Damage will be of the standard universal Metastasis damage type. Same as above function but will damage the player it damages for.
    local unit q
    call GroupEnumUnitsInRange(TempEnumGroup, x, y, radius, null)
    loop
        set q=FirstOfGroup(TempEnumGroup)
        exitwhen q == null
        call UnitDamageTarget((udg_Playerhero[GetConvertedPlayerId((a))]), q, damage, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS) // INLINED!!
        call GroupRemoveUnit(TempEnumGroup, q)
    endloop
        
endfunction


//library DamageAreaForPlayer ends
//library DummyRecycler:

 
    //Every time a new dummy unit is retrieved, it will apply this resets
    //If it is redundant/you dont need it, remove it.
// =============================================================== //
// ==================== END CONFIGURATION ======================== //
// =============================================================== //
 
 
 



















 
 
//Implemented from module DummyRecycler__M:
     




     
        function s__DummyRecycler__S_DummyRecycler__M___onInit takes nothing returns nothing
            local real add= 360.0 / DummyRecycler__ANGLES_COUNT
            local real a= 0
            local integer this= DummyRecycler__ANGLES_COUNT
            local integer head= 0
            local integer cHead= JASS_MAX_ARRAY_SIZE - 1
            local integer i= R2I(DummyRecycler__MAX_DUMMY_COUNT / DummyRecycler__ANGLES_COUNT + 0.5)
            set DummyRecycler__upper=DummyRecycler__STORED_UNIT_COUNT
            set DummyRecycler__lower=DummyRecycler__STORED_UNIT_COUNT

                set s__DummyRecycler__S_tb=s__Table_create()

            //Initialize countHeads
            loop
                exitwhen i < 0
                set DummyRecycler__countNext[cHead]=cHead
                set DummyRecycler__countPrev[cHead]=cHead
                set DummyRecycler__countHead[i]=cHead
                set cHead=cHead - 1
                set i=i - 1
            endloop
            set cHead=DummyRecycler__countHead[DummyRecycler__STORED_UNIT_COUNT] //All heads will be inserted here initially
            //Create the Dummy units
            loop
                exitwhen a >= 360
                //Initialize head
                set DummyRecycler__next[head]=head
                set DummyRecycler__prev[head]=head
                set DummyRecycler__count[head]=DummyRecycler__STORED_UNIT_COUNT
                set DummyRecycler__angle[head]=a
                //Insert head in the Count List
                set DummyRecycler__countNext[head]=cHead
                set DummyRecycler__countPrev[head]=DummyRecycler__countPrev[cHead]
                set DummyRecycler__countNext[DummyRecycler__countPrev[head]]=head
                set DummyRecycler__countPrev[DummyRecycler__countNext[head]]=head
                set i=0
                loop
                    exitwhen i >= DummyRecycler__STORED_UNIT_COUNT
                    //Queued Linked List
                    set DummyRecycler__next[this]=head
                    set DummyRecycler__prev[this]=DummyRecycler__prev[head]
                    set DummyRecycler__next[DummyRecycler__prev[this]]=this
                    set DummyRecycler__prev[DummyRecycler__next[this]]=this


                            set DummyRecycler__dummy[this]=CreateUnit(DummyRecycler__OWNER, DummyRecycler__DUMMY_ID, s__WorldBounds_maxX, s__WorldBounds_maxY, a)






                    call PauseUnit(DummyRecycler__dummy[this], true)

                        call SaveInteger(Table__ht, (s__DummyRecycler__S_tb), (GetHandleId(DummyRecycler__dummy[this])), ( this)) // INLINED!!



                    set this=this + 1
                    set i=i + 1
                endloop
                set head=head + 1
                set a=a + add
            endloop
            set DummyRecycler__lastInstance=this
        endfunction
     
 
    function DummyRecycler__GetHead takes integer facing returns integer
        if facing < 0 or facing >= 360 then
            set facing=facing - ( facing / 360 ) * 360
            if facing < 0 then
                set facing=facing + 360
            endif
        endif
        return R2I(( facing * DummyRecycler__ANGLES_COUNT / 360.0 ))
    endfunction
 
    function ShowDummy takes unit u,boolean flag returns nothing
        if IsUnitHidden(u) == flag then
            call ShowUnit(u, flag)
            if flag and GetUnitTypeId(u) == DummyRecycler__DUMMY_ID then
                call UnitRemoveAbility(u, 'Aloc')
                call UnitAddAbility(u, 'Aloc')
            endif
        endif
    endfunction
 
    function GetRecycledDummy takes real x,real y,real z,real facing returns unit
        local integer head= DummyRecycler__GetHead(R2I(facing + DummyRecycler__FACING_OFFSET))
        local integer this= DummyRecycler__next[head]
        local integer cHead
     
        //If there are Dummy Units in the Queue List already facing close to the appropriate angle
        if this != head and RAbsBJ(GetUnitFacing(DummyRecycler__dummy[this]) - DummyRecycler__angle[head]) <= DummyRecycler__ANGLE_TOLERANCE then
            //Remove from the Queue List
            set DummyRecycler__next[DummyRecycler__prev[this]]=DummyRecycler__next[this]
            set DummyRecycler__prev[DummyRecycler__next[this]]=DummyRecycler__prev[this]
            //For double free protection
            set DummyRecycler__next[this]=- 1
            //Unit Properties
            set bj_lastCreatedUnit=DummyRecycler__dummy[this]
            call SetUnitX(bj_lastCreatedUnit, x)
            call SetUnitY(bj_lastCreatedUnit, y)
            call SetUnitFacing(bj_lastCreatedUnit, facing)
            call SetUnitFlyHeight(bj_lastCreatedUnit, z, 0)
//textmacro instance: DUMMY_UNIT_RESET()
        call SetUnitScale(bj_lastCreatedUnit, 1, 0, 0)
        call SetUnitVertexColor(bj_lastCreatedUnit, 255, 255, 255, 255)
        call SetUnitAnimationByIndex(bj_lastCreatedUnit, 90)
        call SetUnitOwner(bj_lastCreatedUnit, DummyRecycler__OWNER, false)
        call ShowDummy(bj_lastCreatedUnit , true)
//end of: DUMMY_UNIT_RESET()
            //Update Count and Bounds
            set DummyRecycler__count[head]=DummyRecycler__count[head] - 1
         
            //------------------------------------------------
            //                 Unit Sharing
            //------------------------------------------------
            if DummyRecycler__count[head] < DummyRecycler__BORROW_REQUEST and DummyRecycler__count[DummyRecycler__countNext[DummyRecycler__countHead[DummyRecycler__upper]]] > DummyRecycler__count[head] then
                set DummyRecycler__count[head]=DummyRecycler__count[head] + 1
                set this=DummyRecycler__next[DummyRecycler__countNext[DummyRecycler__countHead[DummyRecycler__upper]]]
                call SetUnitFacing(DummyRecycler__dummy[this], DummyRecycler__angle[head])
                //Remove
                set DummyRecycler__next[DummyRecycler__prev[this]]=DummyRecycler__next[this]
                set DummyRecycler__prev[DummyRecycler__next[this]]=DummyRecycler__prev[this]
                //Add to the Current List
                set DummyRecycler__next[this]=head
                set DummyRecycler__prev[this]=DummyRecycler__prev[head]
                set DummyRecycler__next[DummyRecycler__prev[this]]=this
                set DummyRecycler__prev[DummyRecycler__next[this]]=this
                set head=DummyRecycler__countNext[DummyRecycler__countHead[DummyRecycler__upper]]
                set DummyRecycler__count[head]=DummyRecycler__count[head] - 1
            endif
         
            //---------------------------
            //Update Count Lists
            //---------------------------
            //Remove from the current Count List
            set DummyRecycler__countNext[DummyRecycler__countPrev[head]]=DummyRecycler__countNext[head]
            set DummyRecycler__countPrev[DummyRecycler__countNext[head]]=DummyRecycler__countPrev[head]
            //Add to the new Count List
            set cHead=DummyRecycler__countHead[DummyRecycler__count[head]]
            set DummyRecycler__countNext[head]=cHead
            set DummyRecycler__countPrev[head]=DummyRecycler__countPrev[cHead]
            set DummyRecycler__countNext[DummyRecycler__countPrev[head]]=head
            set DummyRecycler__countPrev[DummyRecycler__countNext[head]]=head
         
            //---------------------------
            //  Update Bounds
            //---------------------------
            set cHead=DummyRecycler__countHead[DummyRecycler__upper]
            if DummyRecycler__countNext[cHead] == cHead then
                set DummyRecycler__upper=DummyRecycler__upper - 1
            endif
            if DummyRecycler__count[head] < DummyRecycler__lower then
                set DummyRecycler__lower=DummyRecycler__count[head]
            endif
        else
            set bj_lastCreatedUnit=CreateUnit(DummyRecycler__OWNER, DummyRecycler__DUMMY_ID, x, y, facing)
            call PauseUnit(bj_lastCreatedUnit, true)
            call SetUnitFlyHeight(bj_lastCreatedUnit, z, 0)
            if DummyRecycler__dummyCount < DummyRecycler__MAX_DUMMY_COUNT then
                set this=DummyRecycler__lastInstance
                //For double free protection
                set DummyRecycler__next[this]=- 1
                set DummyRecycler__dummy[this]=bj_lastCreatedUnit

                    call SaveInteger(Table__ht, (s__DummyRecycler__S_tb), (GetHandleId(bj_lastCreatedUnit)), ( this)) // INLINED!!



                set DummyRecycler__lastInstance=DummyRecycler__lastInstance + 1
            endif
            set DummyRecycler__dummyCount=DummyRecycler__dummyCount + 1
        endif

        return bj_lastCreatedUnit
    endfunction
 
    function RecycleDummy takes unit u returns nothing

            local integer this= (LoadInteger(Table__ht, (s__DummyRecycler__S_tb), (GetHandleId(u)))) // INLINED!!



        local integer head
        local integer cHead
     
        //If the unit is a legit Dummy Unit
        if this > 0 and DummyRecycler__next[this] == - 1 then
            //Find where to insert based on the list having the least number of units
            set head=DummyRecycler__countNext[DummyRecycler__countHead[DummyRecycler__lower]]
            set DummyRecycler__next[this]=head
            set DummyRecycler__prev[this]=DummyRecycler__prev[head]
            set DummyRecycler__next[DummyRecycler__prev[this]]=this
            set DummyRecycler__prev[DummyRecycler__next[this]]=this
            //Update Status
            call SetUnitFacing(u, DummyRecycler__angle[head])
            call PauseUnit(u, true)
            call SetUnitOwner(u, DummyRecycler__OWNER, false)


                    call SetUnitX(u, s__WorldBounds_maxX)
                    call SetUnitY(u, s__WorldBounds_maxY)








            set DummyRecycler__count[head]=DummyRecycler__count[head] + 1
         
            //---------------------------
            //    Update Count Lists
            //---------------------------
            //Remove
            set DummyRecycler__countNext[DummyRecycler__countPrev[head]]=DummyRecycler__countNext[head]
            set DummyRecycler__countPrev[DummyRecycler__countNext[head]]=DummyRecycler__countPrev[head]
            //Add to the new Count List
            set cHead=DummyRecycler__countHead[DummyRecycler__count[head]]
            set DummyRecycler__countNext[head]=cHead
            set DummyRecycler__countPrev[head]=DummyRecycler__countPrev[cHead]
            set DummyRecycler__countNext[DummyRecycler__countPrev[head]]=head
            set DummyRecycler__countPrev[DummyRecycler__countNext[head]]=head
         
            //---------------------------
            //  Update Bounds
            //---------------------------
            set cHead=DummyRecycler__countHead[DummyRecycler__lower]
            if DummyRecycler__countNext[cHead] == cHead then
                set DummyRecycler__lower=DummyRecycler__lower + 1
            endif
            if DummyRecycler__count[head] > DummyRecycler__upper then
                set DummyRecycler__upper=DummyRecycler__count[head]
            endif
        elseif this == 0 then
            call RemoveUnit(u)
        endif
     
    endfunction
 
    function DummyRecycler__Expires takes nothing returns nothing
        local timer t= GetExpiredTimer()
        local integer id= GetHandleId(t)

            call RecycleDummy((LoadUnitHandle(Table__ht, (((s__DummyRecycler__S_tb))), (id)))) // INLINED!!
            call RemoveSavedHandle(Table__ht, (((s__DummyRecycler__S_tb))), (id)) // INLINED!!




        call DestroyTimer(t)
        set t=null
    endfunction

    function DummyAddRecycleTimer takes unit u,real time returns nothing
        local timer t= CreateTimer()

            call SaveUnitHandle(Table__ht, (((s__DummyRecycler__S_tb))), (GetHandleId(t)), ( u)) // INLINED!!



        call TimerStart(t, time, false, function DummyRecycler__Expires)
        set t=null
    endfunction
 
    function GetRecycledDummyAnyAngle takes real x,real y,real z returns unit
        return GetRecycledDummy(x , y , z , DummyRecycler__angle[DummyRecycler__countNext[DummyRecycler__countHead[DummyRecycler__upper]]])
    endfunction
 
    // runtextmacro DUMMY_DEBUG_TOOLS()
 

//library DummyRecycler ends
//library IsUnitMoving:
//===========================================================================
// IsUnitMoving
// ============ Created by Xiliger with some script improvements by Bribe
//
//
// This library provides a helpful function that can be used to detect when
// a unit is moving.
//
// API:
//
//     function IsUnitMoving takes unit u returns boolean
//     function GetMovingUnit takes nothing returns unit
//     function GetMovingUnitId takes nothing returns integer
//
// Struct API:
//
//     static constant Event MOVE
//     > Fires when a unit starts moving.
//
//     static constant Event STOP
//     > Fires when a unit stops moving.
//
//     readonly boolean moving
//     > Quick-check if a unit is moving.
//
//     readonly boolean allocated
//     > Was the unit allocated in the first place?
//
//     readonly real x
//     > Unit's last-checked x
//
//     readonly real y
//     > Unit's last-checked y
//
// Requires either:
//     UnitIndexer: hiveworkshop.com/forums/showthread.php?t=172090
// or:
//     AIDS:  thehelper.net/forums/showthread.php?t=130752
//     Event: thehelper.net/forums/showthread.php?t=126846
//
// Thanks to Jesus4Lyf for the extremely efficient Timer32 linked-list model
// and to Nestharus for ideas that give IsUnitMoving more power.
//

function IsUnitMoving__GetUnit takes integer id returns unit

        return (udg_UDexUnits[(id)]) // INLINED!!



endfunction

function IsUnitMoving__GetNew takes nothing returns integer

        return (udg_UDex) // INLINED!!



endfunction

function IsUnitMoving__GetOld takes nothing returns integer

        return (udg_UDex) // INLINED!!



endfunction

//***************************************************************************
//*
//*  Users' API
//*
//***************************************************************************

//===========================================================================
// Returns true when a unit is moving via orders or triggered actions, false
// if the unit is not moving.
//
function IsUnitMoving takes unit u returns boolean
    return s__UnitMoving_moving[(GetUnitUserData(u))]
endfunction

// Use within a registered event-response to get the moving or stopping unit.
function GetMovingUnit takes nothing returns unit
    return (udg_UDexUnits[((IsUnitMoving__get))]) // INLINED!!
endfunction

function GetMovingUnitId takes nothing returns integer
    return IsUnitMoving__get
endfunction

//***************************************************************************
//*
//*  System Struct
//*
//***************************************************************************







    function s__UnitMoving_index takes nothing returns boolean
        local integer u= (udg_UDex) // INLINED!!
        if 0 != GetUnitAbilityLevel((udg_UDexUnits[((u))]), 'Amov') then // INLINED!!
            set s__UnitMoving_prev[s__UnitMoving_next[(0)]]=u
            set s__UnitMoving_next[u]=s__UnitMoving_next[(0)]
            set s__UnitMoving_next[(0)]=u
            set s__UnitMoving_x[u]=GetUnitX((udg_UDexUnits[((u))])) // INLINED!!
            set s__UnitMoving_y[u]=GetUnitY((udg_UDexUnits[((u))])) // INLINED!!
            set s__UnitMoving_allocated[u]=true
        endif
        return false
    endfunction

    function s__UnitMoving_deindex takes nothing returns boolean
        local integer u= (udg_UDex) // INLINED!!
        if s__UnitMoving_allocated[u] then
            set s__UnitMoving_moving[u]=false
            set s__UnitMoving_allocated[u]=false
            set s__UnitMoving_next[s__UnitMoving_prev[u]]=s__UnitMoving_next[u]
            set s__UnitMoving_prev[s__UnitMoving_next[u]]=s__UnitMoving_prev[u]
            set s__UnitMoving_prev[u]=0
        endif
        return false
    endfunction

    function s__UnitMoving_scan takes nothing returns nothing
        local integer u= s__UnitMoving_next[(0)]
        local real x
        local real y
        loop
            exitwhen 0 == u
            set x=GetUnitX((udg_UDexUnits[((u))])) // INLINED!!
            set y=GetUnitY((udg_UDexUnits[((u))])) // INLINED!!
            if x != s__UnitMoving_x[u] or y != s__UnitMoving_y[u] then
                set s__UnitMoving_x[u]=x
                set s__UnitMoving_y[u]=y
                if not s__UnitMoving_moving[u] then
                    // The unit was stopped but is now moving.
                    set s__UnitMoving_moving[u]=true
                    set IsUnitMoving__get=u
                    call s__Event_fire(s__UnitMoving_MOVE)
                endif
            elseif s__UnitMoving_moving[u] then
                // The unit was moving but is now stopped.
                set s__UnitMoving_moving[u]=false
                set IsUnitMoving__get=u
                call s__Event_fire(s__UnitMoving_STOP)
            endif
            set u=s__UnitMoving_next[u]
        endloop
    endfunction

//Implemented from module IsUnitMoving__Init:
    function s__UnitMoving_IsUnitMoving__Init___onInit takes nothing returns nothing
        set s__UnitMoving_MOVE=s__Event_create()
        set s__UnitMoving_STOP=s__Event_create()









        call TimerStart(CreateTimer(), IsUnitMoving__TIMEOUT, true, function s__UnitMoving_scan)
    endfunction


//library IsUnitMoving ends
//library PulsingEnergy:

    function PulsingEnergy__eff takes nothing returns nothing
                local real d= GetUnitState(udg_Spell__Caster, UNIT_STATE_MANA) / BlzGetUnitMaxMana(udg_Spell__Caster) * 180
                local integer i= 1
                
                set bj_lastCreatedEffect=AddSpecialEffectTarget("Psycho\\Effects\\Valiant Charge.mdx", udg_Spell__Caster, "origin")
              //  call BlzSetSpecialEffectScale(bj_lastCreatedEffect,3.0)
                call DestroyEffect(bj_lastCreatedEffect)
                
                set udg_Spell__InRangePoint=udg_Spell__CastPoint
                set udg_Spell__InRange=500.00
                loop
                    exitwhen i > udg_Spell__InRangeCount
                    if udg_Spell__InRangeUnits[i] != udg_Spell__Caster then
                        call UnitDamageTarget(udg_Spell__Caster, udg_Spell__InRangeUnits[i], d, false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNKNOWN, WEAPON_TYPE_WHOKNOWS)
                    endif
                    set i=i + 1
                endloop
                
                call SetUnitState(udg_Spell__Caster, UNIT_STATE_MANA, 0)
    endfunction 

    function PulsingEnergy_onInit takes nothing returns nothing
                call RegisterSpellSystem('A0B7' , function PulsingEnergy__eff , null , null , 1 , 1)
    endfunction 


//library PulsingEnergy ends
//library RegisterNativeEvent:







//Implemented from module RegisterNativeEvent__NativeEventInit:
    function s__RegisterNativeEvent__NativeEvent_RegisterNativeEvent__NativeEventInit___onInit takes nothing returns nothing

        set s__RegisterNativeEvent__NativeEvent_table=s__TableArray__staticgetindex(0x2000)

    endfunction

function IsNativeEventRegistered takes integer whichIndex,integer whichEvent returns boolean

    return (HaveSavedHandle(Table__ht, (((((s__RegisterNativeEvent__NativeEvent_table) + (whichEvent))))), (whichIndex))) // INLINED!!



endfunction

function RegisterNativeEventTrigger takes integer whichIndex,integer whichEvent returns boolean
    if not IsNativeEventRegistered(whichIndex , whichEvent) then

        call SaveTriggerHandle(Table__ht, (((((s__RegisterNativeEvent__NativeEvent_table) + (whichEvent))))), (whichIndex), ( CreateTrigger())) // INLINED!!



        return true
    endif
    return false
endfunction

function GetIndexNativeEventTrigger takes integer whichIndex,integer whichEvent returns trigger

    return (LoadTriggerHandle(Table__ht, (((((s__RegisterNativeEvent__NativeEvent_table) + (whichEvent))))), (whichIndex))) // INLINED!!



endfunction

function GetNativeEventTrigger takes integer whichEvent returns trigger
    return GetIndexNativeEventTrigger(bj_MAX_PLAYER_SLOTS , whichEvent)
endfunction

function CreateNativeEvent takes nothing returns integer
    local integer eventId= RegisterNativeEvent__eventIndex
    call RegisterNativeEventTrigger(bj_MAX_PLAYER_SLOTS , eventId)
    set RegisterNativeEvent__eventIndex=RegisterNativeEvent__eventIndex + 1
    return eventId
endfunction

function RegisterIndexNativeEvent takes integer whichIndex,integer whichEvent,code func returns nothing
    call RegisterNativeEventTrigger(whichIndex , whichEvent)
    call TriggerAddCondition(GetIndexNativeEventTrigger(whichIndex , whichEvent), Condition(func))
endfunction

function RegisterNativeEvent takes integer whichEvent,code func returns nothing
    call RegisterIndexNativeEvent(bj_MAX_PLAYER_SLOTS , whichEvent , func)
endfunction


//library RegisterNativeEvent ends
//library ResourcePreloader:
    

    
    
    


    



    

    function ResourcePreloader__DoUnitPreload takes integer id returns nothing



            call RemoveUnit(CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), id, 0, 0, 0))

    endfunction

    function ResourcePreloader__DoItemPreload takes integer id returns nothing
        call RemoveItem(UnitAddItemById(s__ResourcePreloader__S_dummy, id))
    endfunction

    function ResourcePreloader__DoAbilityPreload takes integer id returns boolean
        return UnitAddAbility(s__ResourcePreloader__S_dummy, id) and UnitRemoveAbility(s__ResourcePreloader__S_dummy, id)
    endfunction

    function ResourcePreloader__DoEffectPreload takes string path returns nothing
        call DestroyEffect(AddSpecialEffect(path, GetUnitX(s__ResourcePreloader__S_dummy), GetUnitY(s__ResourcePreloader__S_dummy)))
    endfunction

    function ResourcePreloader__DoSoundPreload takes string path returns nothing
        local sound s= CreateSound(path, false, false, false, 10, 10, "")
        call SetSoundVolume(s, 0)
        call StartSound(s)
        call KillSoundWhenDone(s)
        set s=null
    endfunction

//textmacro instance: PRELOAD_TYPE("Unit", "integer", "unit", "what", "0")
    function PreloadUnit takes integer what returns nothing

            if (LoadBoolean(Table__ht, (((((s__ResourcePreloader__S_tb) + (0))))), (what))) then // INLINED!!
                return
            endif
            call SaveBoolean(Table__ht, (((((s__ResourcePreloader__S_tb) + (0))))), (what), ( true)) // INLINED!!
            call RemoveUnit(CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), (what), 0, 0, 0)) // INLINED!!







    endfunction
//end of: PRELOAD_TYPE("Unit", "integer", "unit", "what", "0")
//textmacro instance: PRELOAD_TYPE("Item", "integer", "item", "what", "1")
    function PreloadItem takes integer what returns nothing

            if (LoadBoolean(Table__ht, (((((s__ResourcePreloader__S_tb) + (1))))), (what))) then // INLINED!!
                return
            endif
            call SaveBoolean(Table__ht, (((((s__ResourcePreloader__S_tb) + (1))))), (what), ( true)) // INLINED!!
            call RemoveItem(UnitAddItemById(s__ResourcePreloader__S_dummy, (what))) // INLINED!!







    endfunction
//end of: PRELOAD_TYPE("Item", "integer", "item", "what", "1")
//textmacro instance: PRELOAD_TYPE("Ability", "integer", "ability", "what", "2")
    function PreloadAbility takes integer what returns nothing

            if (LoadBoolean(Table__ht, (((((s__ResourcePreloader__S_tb) + (2))))), (what))) then // INLINED!!
                return
            endif
            call SaveBoolean(Table__ht, (((((s__ResourcePreloader__S_tb) + (2))))), (what), ( true)) // INLINED!!
            call ResourcePreloader__DoAbilityPreload(what)







    endfunction
//end of: PRELOAD_TYPE("Ability", "integer", "ability", "what", "2")
//textmacro instance: PRELOAD_TYPE("Effect", "string", "effect", "StringHash(what)", "3")
    function PreloadEffect takes string what returns nothing

            if (LoadBoolean(Table__ht, (((((s__ResourcePreloader__S_tb) + (3))))), (StringHash(what)))) then // INLINED!!
                return
            endif
            call SaveBoolean(Table__ht, (((((s__ResourcePreloader__S_tb) + (3))))), (StringHash(what)), ( true)) // INLINED!!
            call DestroyEffect(AddSpecialEffect((what), GetUnitX(s__ResourcePreloader__S_dummy), GetUnitY(s__ResourcePreloader__S_dummy))) // INLINED!!







    endfunction
//end of: PRELOAD_TYPE("Effect", "string", "effect", "StringHash(what)", "3")
//textmacro instance: PRELOAD_TYPE("Sound", "string", "sound", "StringHash(what)", "4")
    function PreloadSound takes string what returns nothing

            if (LoadBoolean(Table__ht, (((((s__ResourcePreloader__S_tb) + (4))))), (StringHash(what)))) then // INLINED!!
                return
            endif
            call SaveBoolean(Table__ht, (((((s__ResourcePreloader__S_tb) + (4))))), (StringHash(what)), ( true)) // INLINED!!
            call ResourcePreloader__DoSoundPreload(what)







    endfunction
//end of: PRELOAD_TYPE("Sound", "string", "sound", "StringHash(what)", "4")




















































    






//Implemented from module ResourcePreloader__Init:
        function s__ResourcePreloader__S_ResourcePreloader__Init___onInit takes nothing returns nothing
            local rect world= GetWorldBounds()

                set s__ResourcePreloader__S_tb=s__TableArray__staticgetindex(5)

            set s__ResourcePreloader__S_dummy=CreateUnit(ResourcePreloader_PRELOAD_UNIT_OWNER, ResourcePreloader_PRELOAD_UNIT_TYPE_ID, 0, 0, 0)
            call SetUnitY(s__ResourcePreloader__S_dummy, GetRectMaxY(world) + ResourcePreloader_PRELOAD_UNIT_Y_BOUNDS_EXTENSION)
            call UnitAddAbility(s__ResourcePreloader__S_dummy, 'AInv')
            call UnitAddAbility(s__ResourcePreloader__S_dummy, 'Avul')
            call UnitRemoveAbility(s__ResourcePreloader__S_dummy, 'Amov')
            call RemoveRect(world)
            set world=null
        endfunction



//library ResourcePreloader ends
//library StringIndexer:

    




            
//Implemented from module StringIndexer__Init:
            function s__StringIndexer__D_StringIndexer__Init___onInit takes nothing returns nothing
                set s__StringIndexer__D_data=s__Table_create()
            endfunction



    
    function GetStringById takes integer i returns string
        return StringIndexer__strings[i]
    endfunction
    
    function GetStringId takes string t returns integer

            return (LoadInteger(Table__ht, (s__StringIndexer__D_data), (StringHash(t)))) // INLINED!!



    endfunction
    
    function IndexString takes string t returns integer
        local integer i= StringHash(t)
        

            if (LoadInteger(Table__ht, (s__StringIndexer__D_data), (i))) == 0 then // INLINED!!
                set StringIndexer__count=StringIndexer__count + 1
                
                call SaveInteger(Table__ht, (s__StringIndexer__D_data), (i), ( StringIndexer__count)) // INLINED!!

                set StringIndexer__strings[StringIndexer__count]=t
                return StringIndexer__count
            endif

            return (LoadInteger(Table__ht, (s__StringIndexer__D_data), (i))) // INLINED!!












    endfunction
    

//library StringIndexer ends
//library TimerUtilsEx:

    // Configuration
    
    
    
    // JassHelper doesn't support static ifs for globals.






//Implemented from module TimerUtilsEx__Init:
        function s__TimerUtilsEx__Data_TimerUtilsEx__Init___onInit takes nothing returns nothing

                local integer i= TimerUtilsEx__QUANTITY
                loop
                    set i=i - 1
                    set TimerUtilsEx__tT[i]=CreateTimer()
                    exitwhen i == 0
                endloop
                
                set TimerUtilsEx__tN=TimerUtilsEx__QUANTITY



        endfunction
    
    // Double free protection
    function TimerUtilsEx__ValidTimer takes integer i returns boolean

            return (LoadBoolean(Table__ht, (((s__TimerUtilsEx__Data_tb))), (- i))) // INLINED!!



    endfunction
    
    function TimerUtilsEx__Get takes integer id returns integer







            return s__TimerUtilsEx__Data_data[id - 0x100000]

    endfunction
    
    function TimerUtilsEx__Set takes integer id,integer data returns nothing







            set s__TimerUtilsEx__Data_data[id - 0x100000]=data

    endfunction
    
    function SetTimerData takes timer t,integer data returns nothing
        set s__TimerUtilsEx__Data_data[(GetHandleId(t) ) - 0x100000]=( data) // INLINED!!
    endfunction
    
    function GetTimerData takes timer t returns integer
        return (s__TimerUtilsEx__Data_data[(GetHandleId(t)) - 0x100000]) // INLINED!!
    endfunction
    
    function NewTimerEx takes integer data returns timer
        local integer id
        if TimerUtilsEx__tN == 0 then



                return null

        else
            set TimerUtilsEx__tN=TimerUtilsEx__tN - 1
        endif
        set id=GetHandleId(TimerUtilsEx__tT[TimerUtilsEx__tN])

            call SaveBoolean(Table__ht, (((s__TimerUtilsEx__Data_tb))), (- id), ( true)) // INLINED!!



        set s__TimerUtilsEx__Data_data[(id ) - 0x100000]=( data) // INLINED!!
        return TimerUtilsEx__tT[TimerUtilsEx__tN]
    endfunction
    
    function NewTimer takes nothing returns timer
        return NewTimerEx(0)
    endfunction
    
    function ReleaseTimer takes timer t returns integer
        local integer id= GetHandleId(t)
        local integer data= 0
        
        // Pause the timer just in case.
        call PauseTimer(t)
        
        // Make sure the timer is valid.
        if (LoadBoolean(Table__ht, (((s__TimerUtilsEx__Data_tb))), (- (id)))) then // INLINED!!
            // Get the timer's data.
            set data=(s__TimerUtilsEx__Data_data[(id) - 0x100000]) // INLINED!!
            
            // Unmark handle id as a valid timer.

                call RemoveSavedBoolean(Table__ht, (((s__TimerUtilsEx__Data_tb))), (- id)) // INLINED!!



            
            //If it's not run in USE_HASH mode, this next block is useless.
















            
            //Recycle the timer.
            set TimerUtilsEx__tT[TimerUtilsEx__tN]=t
            set TimerUtilsEx__tN=TimerUtilsEx__tN + 1
            
        //Tried to pass a bad timer.
        endif
        
        //Return Timer Data.
        return data
    endfunction


//library TimerUtilsEx ends
//library WRSPreDamage:

    function WRSPreDamage_Damage takes nothing returns nothing
                local real x
                local real y
                local real x2
                local real y2
                local integer t
                local integer d
                local unit sor
                local unit tar
                
                if GetAttacker() == (LoadUnitHandle(Table__ht, (((PsyI))), (0))) then // INLINED!!
                
                     set sor=GetAttacker()
                     set tar=GetTriggerUnit()
                
                    if (LoadInteger(Table__ht, (PsyI), (- 25))) != 16 and (LoadInteger(Table__ht, (PsyI), (- 25))) != 19 then // INLINED!!
                    
                    
                        set t=GetUnitTypeId(sor)
                        set d=(LoadInteger(Table__ht, (Miss), (t))) // INLINED!!
                    
                        set x=GetUnitX(sor)
                        set y=GetUnitY(sor)
                    
                        set x2=GetUnitX(tar)
                        set y2=GetUnitY(tar)
                    
                        if WithinDistance(x , y , x2 , y2 , 140) then
                            call UnitAddAbility(sor, s__MissData_abil2[d])
                        else
                            call UnitRemoveAbility(sor, s__MissData_abil2[d])
                        endif
                    
                    elseif (LoadUnitHandle(Table__ht, (((PsyI))), (- 30))) != null and not IsUnitHidden((LoadUnitHandle(Table__ht, (((PsyI))), (- 30)))) or ( (LoadUnitHandle(Table__ht, (((PsyI))), (- 31))) != null and not IsUnitHidden((LoadUnitHandle(Table__ht, (((PsyI))), (- 31)))) ) then // INLINED!!
                        
                        call IssueTargetOrderById((LoadUnitHandle(Table__ht, (((PsyI))), (- 30))), 851983, tar) // INLINED!!
                        call IssueTargetOrderById((LoadUnitHandle(Table__ht, (((PsyI))), (- 31))), 851983, tar) // INLINED!!
                        call IssueImmediateOrderById((LoadUnitHandle(Table__ht, (((PsyI))), (0))), 851972) // INLINED!!
                    endif
                    
                    set sor=null
                    set tar=null
                        
                elseif not UnitAlive((LoadUnitHandle(Table__ht, (((PsyI))), (0)))) then // INLINED!!
                    call DestroyTrigger(GetTriggeringTrigger())
                endif
                
    endfunction 


//library WRSPreDamage ends
//library unitData:

    function GetUnitMass takes unit a returns real
        local real r=LoadReal((udg_hash), GetUnitTypeId(a), StringHash("CustomData_Mass")) // INLINED!!
        if r == 0 then
            return 100.0
        else
            return r
        endif
    endfunction
    
    function SaveMass takes integer unitid,real mass returns nothing
        call SaveReal((udg_hash), unitid, StringHash("CustomData_Mass"), mass) // INLINED!!
    endfunction
    

//library unitData ends
//library IPool:

//Implemented from module Alloc:
        function s__IPool__data_allocate takes nothing returns integer
            return Alloc_Allocate(si__IPool__data)
        endfunction
        function s__IPool__data_deallocate takes integer this returns nothing
            call Alloc_Deallocate(si__IPool__data , this)
        endfunction
//Implemented from module IPool__Init:
    function s__IPool__data_IPool__Init___onInit takes nothing returns nothing
        set s__IPool__data_tar=s__TableArray__staticgetindex(8192)
    endfunction

    function IPool__Create takes nothing returns integer
        local integer this= (Alloc_Allocate(si__IPool__data)) // INLINED!!
        set s__IPool__data_locks[this]=0
        return this
    endfunction
    function IPool__Destroy takes integer this returns boolean
        if s__IPool__data_locks[this] == - 1 or this == 0 then
            return false
        endif
        set s__IPool__data_locks[this]=- 1
        call Alloc_Deallocate(si__IPool__data , (this)) // INLINED!!
        return true
    endfunction

    function IPool__Lock takes integer i returns nothing
        if s__IPool__data_locks[i] == - 1 then
            return
        endif
        set s__IPool__data_locks[i]=s__IPool__data_locks[i] + 1
    endfunction
    function IPool__Unlock takes integer i returns boolean
        if s__IPool__data_locks[i] == - 1 then
            return false
        endif
        set s__IPool__data_locks[i]=s__IPool__data_locks[i] - 1
        return s__IPool__data_locks[i] == 0
    endfunction

   
    function s__IPool__get_weight takes integer this returns integer
        return s__IPool__data_weight[(this)]
    endfunction
    function s__IPool__set_weight takes integer this,integer lbs returns nothing
        set s__IPool__data_weight[(this)]=lbs
    endfunction

    function s__IPool__get_table takes integer this returns integer
        return s__IPool__data_int[(this)]
    endfunction
    function s__IPool__set_table takes integer this,integer t returns nothing
        set s__IPool__data_int[(this)]=t
    endfunction

    function s__IPool_create takes nothing returns integer
        local integer this= IPool__Create()
        set s__IPool__data_int[((this))]=(s__Table_create()) // INLINED!!
        return this
    endfunction
    function s__IPool_flush takes integer this returns nothing
        call FlushChildHashtable(Table__ht, ((s__IPool__data_int[((this))]))) // INLINED!!
        call FlushChildHashtable(Table__ht, (((s__IPool__data_tar) + (this)))) // INLINED!!
        set s__IPool__data_weight[((this))]=(0) // INLINED!!
    endfunction

    function s__IPool_destroy takes integer this returns nothing
        if IPool__Destroy(this) then
            call s__Table_destroy((s__IPool__data_int[((this))])) // INLINED!!
            call FlushChildHashtable(Table__ht, (((s__IPool__data_tar) + (this)))) // INLINED!!
            set s__IPool__data_weight[((this))]=(0) // INLINED!!
        endif
    endfunction

    function s__IPool_lock takes integer this returns nothing
        call IPool__Lock(this)
    endfunction
    function s__IPool_unlock takes integer this returns nothing
        if IPool__Unlock(this) then
            call s__IPool_destroy(this)
        endif
    endfunction

    //One-liner method to get a random item from the pool based on weight
    function s__IPool_getItem takes integer this returns integer
        return (LoadInteger(Table__ht, ((s__IPool__data_int[((this))])), (GetRandomInt(0, (s__IPool__data_weight[((this))]) - 1)))) // INLINED!!
    endfunction

    function s__IPool_weightOf takes integer this,integer value returns integer
        return (LoadInteger(Table__ht, (((s__IPool__data_tar) + (this))), (value))) // INLINED!!
    endfunction
    function s__IPool_chanceOf takes integer this,integer value returns real
        return (LoadInteger(Table__ht, (((s__IPool__data_tar) + ((this)))), ((value)))) / ( (s__IPool__data_weight[((this))]) + 0. ) //don't divide by 0 here or else! // INLINED!!
    endfunction
    function s__IPool_contains takes integer this,integer value returns boolean
        return (HaveSavedInteger(Table__ht, (((s__IPool__data_tar) + (this))), (value))) // INLINED!!
    endfunction

    function s__IPool_add takes integer this,integer value,integer lbs returns nothing
        local integer tb= (s__IPool__data_int[((this))]) // INLINED!!
        local integer i= (s__IPool__data_weight[((this))]) // INLINED!!
        if lbs < 1 then
            return
        endif
        call SaveInteger(Table__ht, (((s__IPool__data_tar) + (this))), (value), ( (LoadInteger(Table__ht, (((s__IPool__data_tar) + (this))), (value))) + lbs)) // INLINED!!
        set lbs=i + lbs
        set s__IPool__data_weight[((this))]=(lbs) //Important // INLINED!!
        loop
            exitwhen i == lbs
            call SaveInteger(Table__ht, (tb), (i), ( value)) //treat this.table as an array // INLINED!!
            set i=i + 1
        endloop
    endfunction
   
    function s__IPool_remove takes integer this,integer value returns nothing
        local integer tb= (s__IPool__data_int[((this))]) // INLINED!!
        local integer new
        local integer i= (s__IPool__data_weight[((this))]) // INLINED!!
        local integer n= 0
        local integer val
        if not (HaveSavedInteger(Table__ht, (((s__IPool__data_tar) + ((this)))), ((value)))) then // INLINED!!
            return
        endif
        set new=s__Table_create()
        set s__IPool__data_int[((this))]=(new) // INLINED!!
        loop
            set i=i - 1
            set val=(LoadInteger(Table__ht, (tb), (i))) // INLINED!!
            if val != value then
                call SaveInteger(Table__ht, (new), (n), ( val)) //write to the new Table without gaps // INLINED!!
                set n=n + 1
            endif
            exitwhen i == 0
        endloop
        set s__IPool__data_weight[((this))]=(n) //lower pool weight // INLINED!!
        call s__Table_destroy(tb) //abandon old Table instance
        call RemoveSavedInteger(Table__ht, (((s__IPool__data_tar) + (this))), (value)) //clear the value's weight now that it's gone // INLINED!!
    endfunction

    function s__IPool_copy takes integer this returns integer
        local integer new= s__IPool_create()
        local integer i= (s__IPool__data_weight[((this))]) // INLINED!!
        local integer tt= (s__IPool__data_int[((this))]) // INLINED!!
        local integer nt= (s__IPool__data_int[((new))]) // INLINED!!
        local integer dt= ((s__IPool__data_tar) + (new)) // INLINED!!
        local integer val
        if i == 0 then
            call s__IPool_destroy(new)
            return 0
        endif
        set s__IPool__data_weight[((new))]=(i) // INLINED!!
        loop
            set i=i - 1
            exitwhen i == 0
            set val=(LoadInteger(Table__ht, (tt), (i))) // INLINED!!
            call SaveInteger(Table__ht, (nt), (i), ( val)) // INLINED!!
            call SaveInteger(Table__ht, (dt), (val), ( (LoadInteger(Table__ht, (dt), (val))) + 1)) // INLINED!!
        endloop
        return new
    endfunction
       

















//New struct to handle deliberately-rare chances
   

    //you can change a value's weight via subpoolinstance[value].weight = blah
    //you can also change the entire pool's weight via subpoolinstance.weight = blah.
    function s__SubPool__get_weight takes integer this returns integer
        return s__IPool__data_weight[(this)]
    endfunction
    function s__SubPool__set_weight takes integer this,integer lbs returns nothing
        set s__IPool__data_weight[(this)]=lbs
    endfunction

    function s__SubPool__get_value takes integer this returns integer
        return s__IPool__data_int[(this)]
    endfunction
    function s__SubPool__set_value takes integer this,integer val returns nothing
        set s__IPool__data_int[(this)]=val
    endfunction


    function s__SubPool__get_pool takes integer this returns integer
        return s__SubPool_iPool[this]
    endfunction
    function s__SubPool__set_pool takes integer this,integer ip returns nothing
        if ip != 0 then
            call IPool__Lock((ip)) // INLINED!!
        endif
        if s__SubPool_iPool[this] != 0 then
            call s__IPool_unlock(s__SubPool_iPool[this])
        endif
        set s__SubPool_iPool[this]=ip
    endfunction

    function s__SubPool_create takes integer totalWeight returns integer
        local integer this= IPool__Create()
        set s__SubPool_next[this]=this
        set s__SubPool_prev[this]=this //I'm my own best friend
        set s__IPool__data_weight[((this))]=(totalWeight) // INLINED!!
        return this
    endfunction
    function s__SubPool_destroy takes integer this returns nothing
        local integer curr= this
        if s__SubPool_next[this] == - 1 then
            return
        endif
        loop
            set curr=s__SubPool_next[curr]
            call IPool__Destroy(curr) //destroy all the things
            exitwhen curr == this
        endloop
        set s__SubPool_next[this]=- 1
        call s__SubPool__set_pool(this,0)
        if s__SubPool_nest[this] != 0 then
            if s__IPool__data_locks[(s__SubPool_nest[this])] == 1 then
                call s__SubPool_destroy(s__SubPool_nest[this])
            else
                call IPool__Unlock(s__SubPool_nest[this])
            endif
            set s__SubPool_nest[this]=0
        endif
        call FlushChildHashtable(Table__ht, (((s__IPool__data_tar) + (this)))) // INLINED!!
    endfunction

    function s__SubPool_lock takes integer this returns nothing
        call IPool__Lock(this)
    endfunction
    function s__SubPool_unlock takes integer this returns nothing
        if IPool__Unlock(this) then
            call s__SubPool_destroy(this)
        endif
    endfunction

    function s__SubPool__get_subPool takes integer this returns integer
        return s__SubPool_nest[this]
    endfunction
    function s__SubPool__set_subPool takes integer this,integer ip returns nothing
        if this == ip then
            return
        endif
        if ip != 0 then
            call IPool__Lock((ip)) // INLINED!!
        endif
        if s__SubPool_nest[this] != 0 then
            call s__SubPool_unlock(s__SubPool_nest[this])
        endif
        set s__SubPool_nest[this]=ip
    endfunction

    function s__SubPool_add takes integer this,integer val,integer lbs returns nothing
        local integer new
        if lbs <= 0 then
            return
        endif
        if (HaveSavedInteger(Table__ht, (((s__IPool__data_tar) + (this))), (val))) then // INLINED!!
            set new=(LoadInteger(Table__ht, (((s__IPool__data_tar) + (this))), (val))) // INLINED!!
            set s__IPool__data_weight[((new))]=((s__IPool__data_weight[((new))]) + lbs) // INLINED!!
            return
        endif
        set new=IPool__Create()
        set s__SubPool_prev[new]=s__SubPool_prev[this]
        set s__SubPool_next[s__SubPool_prev[this]]=new
        set s__SubPool_prev[this]=new
        set s__SubPool_next[new]=this

        set s__IPool__data_int[((new))]=(val) // INLINED!!
        set s__IPool__data_weight[((new))]=(lbs) // INLINED!!
       
        call SaveInteger(Table__ht, (((s__IPool__data_tar) + (this))), (val), ( new)) // INLINED!!
    endfunction

    function s__SubPool_contains takes integer this,integer val returns boolean
        return (HaveSavedInteger(Table__ht, (((s__IPool__data_tar) + (this))), (val))) // INLINED!!
    endfunction
    function s__SubPool__getindex takes integer this,integer val returns integer
        return (LoadInteger(Table__ht, (((s__IPool__data_tar) + (this))), (val))) // INLINED!!
    endfunction
    function s__SubPool__setindex takes integer this,integer val,integer newWeight returns nothing
        set s__IPool__data_weight[(((LoadInteger(Table__ht, (((s__IPool__data_tar) + ((this)))), ((val))))))]=(newWeight) // INLINED!!
    endfunction

    function s__SubPool_remove takes integer this,integer val returns nothing
        local integer node= (LoadInteger(Table__ht, (((s__IPool__data_tar) + ((this)))), ((val)))) // INLINED!!
        if IPool__Destroy(node) then
            set s__SubPool_next[s__SubPool_prev[node]]=s__SubPool_next[node]
            set s__SubPool_prev[s__SubPool_next[node]]=s__SubPool_prev[node]
            call RemoveSavedInteger(Table__ht, (((s__IPool__data_tar) + (this))), (val)) // INLINED!!
        else
        endif
    endfunction
    function s__SubPool_getItem takes integer this returns integer
        local integer curr= this
        local integer i= GetRandomInt(1, (s__IPool__data_weight[((this))])) // INLINED!!
        loop
            set curr=s__SubPool_next[curr]
            set i=i - (s__IPool__data_weight[((curr))]) // INLINED!!
            exitwhen i <= 0
        endloop
        if curr == this then
            if s__SubPool_nest[this] != 0 then
                set i=s__SubPool_getItem(s__SubPool_nest[this])
            else
                set i=0
            endif
            if i == 0 and (s__SubPool_iPool[(this)]) != 0 then //if no low-probability item could be found... // INLINED!!
                set i=s__IPool_getItem((s__SubPool_iPool[(this)])) //pick a random int from main pool // INLINED!!
            endif
        else
            set i=(s__IPool__data_int[((curr))]) // INLINED!!
        endif
        return i
    endfunction

    function s__SubPool_copy takes integer this returns integer
        local integer new= s__SubPool_create((s__IPool__data_weight[((this))])) // INLINED!!
        local integer curr= this
        call s__SubPool__set_pool(new,s__SubPool_iPool[this])
        call s__SubPool__set_subPool(new,s__SubPool_nest[this])
        loop
            set curr=s__SubPool_next[curr]
            exitwhen curr == this
            call s__SubPool_add(new,(s__IPool__data_int[((curr))]) , (s__IPool__data_weight[((curr))])) // INLINED!!
        endloop
        return new
    endfunction

























//library IPool ends
//library ListT:

//textmacro instance: DEFINE_LIST("", "IntegerList", "integer")
    // No default ctor and dctor due to limited array size

    function s__IntegerListItem__get_data takes integer this returns integer
        return (LoadInteger(Table__ht, ((((this)))), (- 1))) // hashtable[ node, -1 ] = data // INLINED!!
    endfunction
    function s__IntegerListItem__set_data takes integer this,integer value returns nothing
        call SaveInteger(Table__ht, ((((this)))), (- 1), ( value)) // INLINED!!
    endfunction

    function s__IntegerListItem__get_next takes integer this returns integer
        return (LoadInteger(Table__ht, ((this)), (- 2))) // hashtable[ node, -2 ] = next // INLINED!!
    endfunction
    function s__IntegerListItem__set_next takes integer this,integer value returns nothing
        call SaveInteger(Table__ht, ((this)), (- 2), ( value)) // INLINED!!
    endfunction

    function s__IntegerListItem__get_prev takes integer this returns integer
        return (LoadInteger(Table__ht, ((this)), (- 3))) // hashtable[ node, -3 ] = prev // INLINED!!
    endfunction
    function s__IntegerListItem__set_prev takes integer this,integer value returns nothing
        call SaveInteger(Table__ht, ((this)), (- 3), ( value)) // INLINED!!
    endfunction


//Implemented from module Alloc:
        function s__IntegerList_allocate takes nothing returns integer
            return Alloc_Allocate(si__IntegerList)
        endfunction
        function s__IntegerList_deallocate takes integer this returns nothing
            call Alloc_Deallocate(si__IntegerList , this)
        endfunction

    function s__IntegerList_setNodeOwner takes integer node,integer owner returns nothing
        call SaveInteger(Table__ht, ((node)), (- 4), ( owner)) // INLINED!!
    endfunction

    function s__IntegerList_getNodeOwner takes integer node returns integer
        return (LoadInteger(Table__ht, ((node)), (- 4))) // INLINED!!
    endfunction

    function s__IntegerList_createNode takes integer this,integer value returns integer
        local integer node= s__Table_create()
        call SaveInteger(Table__ht, (((((node))))), (- 1), ( (value))) // INLINED!!
        call SaveInteger(Table__ht, (((node ))), (- 4), ( ( this))) // ownership // INLINED!!
        return node
    endfunction

    function s__IntegerList_deleteNode takes integer this,integer node returns nothing
        call s__Table_destroy((node)) // also removes ownership
    endfunction

    function s__IntegerList_create takes nothing returns integer
        local integer this= (Alloc_Allocate(si__IntegerList)) // INLINED!!
        set s__IntegerList_count[this]=0
        return this
    endfunction

    function s__IntegerList_clear takes integer this returns nothing
        local integer node= s__IntegerList_first[this]
        local integer temp

        loop // recycle all Table indexes
            exitwhen 0 == node
            set temp=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
            call s__IntegerList_deleteNode(this,node)
            set node=temp
        endloop

        set s__IntegerList_first[this]=0
        set s__IntegerList_last[this]=0
        set s__IntegerList_count[this]=0
    endfunction

    function s__IntegerList_destroy takes integer this returns nothing
        call s__IntegerList_clear(this)
        call Alloc_Deallocate(si__IntegerList , (this)) // INLINED!!
    endfunction

    function s__IntegerList_front takes integer this returns integer
        return (LoadInteger(Table__ht, (((((s__IntegerList_first[this]))))), (- 1))) // INLINED!!
    endfunction

    function s__IntegerList_back takes integer this returns integer
        return (LoadInteger(Table__ht, (((((s__IntegerList_last[this]))))), (- 1))) // INLINED!!
    endfunction

    function s__IntegerList_empty takes integer this returns boolean
        return s__IntegerList_count[this] == 0
    endfunction

    function s__IntegerList_size takes integer this returns integer
        return s__IntegerList_count[this]
    endfunction

    function s__IntegerList_push takes integer this,integer value returns integer
        local integer node= s__IntegerList_createNode(this,value)

        if not (s__IntegerList_count[(this)] == 0) then // INLINED!!
            call SaveInteger(Table__ht, (((s__IntegerList_last[this]))), (- 2), ( (node))) // INLINED!!
            call SaveInteger(Table__ht, (((node))), (- 3), ( (s__IntegerList_last[this]))) // INLINED!!
        else
            set s__IntegerList_first[this]=node
            call SaveInteger(Table__ht, (((node))), (- 3), ( (0))) // INLINED!!
        endif

        set s__IntegerList_last[this]=node
        call SaveInteger(Table__ht, (((node))), (- 2), ( (0))) // INLINED!!
        set s__IntegerList_count[this]=s__IntegerList_count[this] + 1
        return this
    endfunction

    function s__IntegerList_unshift takes integer this,integer value returns integer
        local integer node= s__IntegerList_createNode(this,value)

        if not (s__IntegerList_count[(this)] == 0) then // INLINED!!
            call SaveInteger(Table__ht, (((s__IntegerList_first[this]))), (- 3), ( (node))) // INLINED!!
            call SaveInteger(Table__ht, (((node))), (- 2), ( (s__IntegerList_first[this]))) // INLINED!!
        else
            set s__IntegerList_last[this]=node
            call SaveInteger(Table__ht, (((node))), (- 2), ( (0))) // INLINED!!
        endif

        set s__IntegerList_first[this]=node
        call SaveInteger(Table__ht, (((node))), (- 3), ( (0))) // INLINED!!
        set s__IntegerList_count[this]=s__IntegerList_count[this] + 1
        return this
    endfunction

    function s__IntegerList_pop takes integer this returns integer
        local integer node

        if not (s__IntegerList_count[(this)] == 0) then // INLINED!!
            set node=s__IntegerList_last[this]
            set s__IntegerList_last[this]=(LoadInteger(Table__ht, (((s__IntegerList_last[this]))), (- 3))) // INLINED!!

            if s__IntegerList_last[this] == 0 then
                set s__IntegerList_first[this]=0
            else
                call SaveInteger(Table__ht, (((s__IntegerList_last[this]))), (- 2), ( (0))) // INLINED!!
            endif

            call s__IntegerList_deleteNode(this,node)
            set s__IntegerList_count[this]=s__IntegerList_count[this] - 1
        endif
        return this
    endfunction

    function s__IntegerList_shift takes integer this returns integer
        local integer node

        if not (s__IntegerList_count[(this)] == 0) then // INLINED!!
            set node=s__IntegerList_first[this]
            set s__IntegerList_first[this]=(LoadInteger(Table__ht, (((s__IntegerList_first[this]))), (- 2))) // INLINED!!

            if s__IntegerList_first[this] == 0 then
                set s__IntegerList_last[this]=0
            else
                call SaveInteger(Table__ht, (((s__IntegerList_first[this]))), (- 3), ( (0))) // INLINED!!
            endif

            call s__IntegerList_deleteNode(this,node)
            set s__IntegerList_count[this]=s__IntegerList_count[this] - 1
        endif
        return this
    endfunction

    function s__IntegerList__staticgetindex takes integer other returns integer
        local integer instance= s__IntegerList_create()
        local integer node= s__IntegerList_first[other]

        loop
            exitwhen node == 0
            call s__IntegerList_push(instance,(LoadInteger(Table__ht, (((((node))))), (- 1)))) // INLINED!!
            set node=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
        endloop

        return instance
    endfunction

    function s__IntegerList_find takes integer this,integer value returns integer
        local integer node= s__IntegerList_first[this]
        loop
            exitwhen node == 0 or (LoadInteger(Table__ht, (((((node))))), (- 1))) == value // INLINED!!
            set node=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
        endloop
        return node
    endfunction

    function s__IntegerList_erase takes integer this,integer node returns boolean
        if (LoadInteger(Table__ht, (((node))), (- 4))) == this then // match ownership // INLINED!!
            if node == s__IntegerList_first[this] then
                call s__IntegerList_shift(this)
            elseif node == s__IntegerList_last[this] then
                call s__IntegerList_pop(this)
            else
                call SaveInteger(Table__ht, ((((LoadInteger(Table__ht, (((node))), (- 3)))))), (- 2), ( ((LoadInteger(Table__ht, (((node))), (- 2)))))) // INLINED!!
                call SaveInteger(Table__ht, ((((LoadInteger(Table__ht, (((node))), (- 2)))))), (- 3), ( ((LoadInteger(Table__ht, (((node))), (- 3)))))) // INLINED!!
                call s__IntegerList_deleteNode(this,node)
                set s__IntegerList_count[this]=s__IntegerList_count[this] - 1
            endif
            return true
        endif
        return false
    endfunction

    function s__IntegerList_remove takes integer this,integer node returns boolean
        return s__IntegerList_erase(this,node)
    endfunction

    function s__IntegerList_removeElem takes integer this,integer value returns integer
        local integer node= s__IntegerList_find(this,value)
        if node != 0 then
            call s__IntegerList_erase(this,node)
        endif
        return this
    endfunction
//end of: DEFINE_LIST("", "IntegerList", "integer")
// Run here any global list types you want to be defined.




//library ListT ends
//library MagneticPull:
    
    function MagneticPull__Loop takes nothing returns nothing
                local real x
                local real y
                local real x2= GetUnitX(udg_Spell__Target)
                local real y2= GetUnitY(udg_Spell__Target)
                local real x3
                local real y3
                local integer b= GetUnitUserData(udg_Spell__Caster)
                local integer a
                local integer s= (LoadInteger(Table__ht, (SilvGroup), (b))) // INLINED!!
                local integer i= 1
                local real arc
                local real d
                
                
                set udg_Spell__InRangePoint=udg_Spell__TargetPoint
                set udg_Spell__InRange=1000
                
                loop
                    exitwhen i > udg_Spell__InRangeCount
                    set a=GetUnitUserData(udg_Spell__InRangeUnits[i])
                    set udg_UDex=a
                    
                    //we don't want to affect the spell caster and the unit has to have silvs embedded and he must not already be in a knockback
                    if udg_Spell__InRangeUnits[i] != udg_Spell__Caster and (LoadInteger(Table__ht, (((s__IPool__data_tar) + ((s)))), ((a)))) != 0 and not udg_IsUnitBeingKnockedBack[udg_UDex] then // INLINED!!
                        set x=GetUnitX(udg_Spell__InRangeUnits[i])
                        set y=GetUnitY(udg_Spell__InRangeUnits[i])
                        if not WithinDistance(x , y , x2 , y2 , 125) then
                            set x3=x2 - x
                            set y3=y2 - y
                            
                            //pull speed is based on the number of silvs and unit mass
                            set d=SquareRoot(x3 * x3 + y3 * y3) * ( 100 + (LoadInteger(Table__ht, (((s__IPool__data_tar) + ((s)))), ((a)))) ) / GetUnitMass(udg_Spell__InRangeUnits[i]) // INLINED!!
                            set arc=Atan2(y3, x3) * bj_RADTODEG
                            call GenericKBLiteAngle(1 , arc , udg_Spell__InRangeUnits[i] , udg_Spell__Caster , d , 0 , null)
                        endif
                    endif
                    set i=i + 1
                endloop
                    
                
    endfunction 

    function MagneticPull__eff takes nothing returns nothing
                //checks that the targeted unit is indeed metal
                if GetUnitTypeId(udg_Spell__Target) == 'h04L' then
                        set udg_Spell__Filter_AllowMagicImmune=true
                        set udg_Spell__Filter_AllowStructure=false
                        set udg_Spell__StartDuration=true
                endif
    endfunction 
    
    function MagneticPull_onInit takes nothing returns nothing
                call RegisterSpellSystem('A0B8' , function MagneticPull__eff , function MagneticPull__Loop , null , 0.5 , 3)
    endfunction


//library MagneticPull ends
//library MissileEffect:
    
    // This is a simple helper library for the Relativistic Missiles system.
    // Credits:
    //     Sevion for the Alloc module
    //         - www.hiveworkshop.com/threads/snippet-alloc.192348/
    //     Nestharus for World Bounds Library
    
    
    
    
    

//Implemented from module MissileEffect__LinkedList:

        function s__MissileEffect__Effect_init takes integer this returns integer
            set s__MissileEffect__Effect_next[this]=this
            set s__MissileEffect__Effect_prev[this]=this

            return this
        endfunction

        function s__MissileEffect__Effect_pushBack takes integer this,integer node returns integer
            set s__MissileEffect__Effect_prev[node]=s__MissileEffect__Effect_prev[this]
            set s__MissileEffect__Effect_next[node]=this
            set s__MissileEffect__Effect_next[s__MissileEffect__Effect_prev[this]]=node
            set s__MissileEffect__Effect_prev[this]=node

            return node
        endfunction

        function s__MissileEffect__Effect_pushFront takes integer this,integer node returns integer
            set s__MissileEffect__Effect_prev[node]=this
            set s__MissileEffect__Effect_next[node]=s__MissileEffect__Effect_next[this]
            set s__MissileEffect__Effect_prev[s__MissileEffect__Effect_next[this]]=node
            set s__MissileEffect__Effect_next[this]=node

            return node
        endfunction

        function s__MissileEffect__Effect_pop takes integer this returns nothing
            set s__MissileEffect__Effect_next[s__MissileEffect__Effect_prev[this]]=s__MissileEffect__Effect_next[this]
            set s__MissileEffect__Effect_prev[s__MissileEffect__Effect_next[this]]=s__MissileEffect__Effect_prev[this]
        endfunction
//Implemented from module Alloc:
        function s__MissileEffect__Effect_allocate takes nothing returns integer
            return Alloc_Allocate(si__MissileEffect__Effect)
        endfunction
        function s__MissileEffect__Effect_deallocate takes integer this returns nothing
            call Alloc_Deallocate(si__MissileEffect__Effect , this)
        endfunction


        function s__MissileEffect__Effect_remove takes integer this returns nothing
            call DestroyEffect(s__MissileEffect__Effect_effect[this])
            call s__MissileEffect__Effect_pop(this)
            call Alloc_Deallocate(si__MissileEffect__Effect , (this)) // INLINED!!
            set s__MissileEffect__Effect_effect[this]=null
        endfunction

        function s__MissileEffect__Effect_insert takes integer this,string fxpath,real x,real y,real z,real scale returns integer
            local integer node= s__MissileEffect__Effect_pushBack(this,(Alloc_Allocate(si__MissileEffect__Effect))) // INLINED!!

            set s__MissileEffect__Effect_x[node]=x
            set s__MissileEffect__Effect_y[node]=y
            set s__MissileEffect__Effect_z[node]=z
            set s__MissileEffect__Effect_yaw[node]=0.
            set s__MissileEffect__Effect_pitch[node]=0.
            set s__MissileEffect__Effect_roll[node]=0.
            set s__MissileEffect__Effect_path[node]=fxpath
            set s__MissileEffect__Effect_size[node]=scale
            set s__MissileEffect__Effect_effect[node]=AddSpecialEffect(fxpath, x, y)
            call BlzSetSpecialEffectZ(s__MissileEffect__Effect_effect[node], z)
            call BlzSetSpecialEffectScale(s__MissileEffect__Effect_effect[node], scale)

            return node
        endfunction

        function s__MissileEffect__Effect_create takes nothing returns integer
            return s__MissileEffect__Effect_init(((Alloc_Allocate(si__MissileEffect__Effect)))) // INLINED!!
        endfunction


        
        function s__MissileEffect__set_timeScale takes integer this,real newTimeScale returns nothing
            set s__MissileEffect_time[this]=newTimeScale
            call BlzSetSpecialEffectTimeScale(s__MissileEffect_effect[this], s__MissileEffect_time[this])
        endfunction
        
        function s__MissileEffect__get_timeScale takes integer this returns real
            return s__MissileEffect_time[this]
        endfunction

        function s__MissileEffect__set_alpha takes integer this,integer newAlpha returns nothing
            set s__MissileEffect_transparency[this]=newAlpha
            call BlzSetSpecialEffectAlpha(s__MissileEffect_effect[this], s__MissileEffect_transparency[this])
        endfunction

        function s__MissileEffect__get_alpha takes integer this returns integer
            return s__MissileEffect_transparency[this]
        endfunction

        function s__MissileEffect__set_playerColor takes integer this,integer playerId returns nothing
            set s__MissileEffect_playercolor[this]=playerId
            call BlzSetSpecialEffectColorByPlayer(s__MissileEffect_effect[this], Player(playerId))
        endfunction

        function s__MissileEffect__get_playerColor takes integer this returns integer
            return s__MissileEffect_playercolor[this]
        endfunction

        function s__MissileEffect__set_animation takes integer this,integer animType returns nothing
            set s__MissileEffect_animtype[this]=animType
            call BlzPlaySpecialEffect(s__MissileEffect_effect[this], ConvertAnimType(s__MissileEffect_animtype[this]))
        endfunction

        function s__MissileEffect__get_animation takes integer this returns integer
            return s__MissileEffect_animtype[this]
        endfunction

        
        function s__MissileEffect_scale takes integer this,effect sfx,real scale returns nothing
            set s__MissileEffect_size[this]=scale
            call BlzSetSpecialEffectScale(sfx, scale)
        endfunction   

        function s__MissileEffect_orient takes integer this,real yaw,real pitch,real roll returns nothing
            local integer node= s__MissileEffect__Effect_next[s__MissileEffect_attachments[this]]

            set s__MissileEffect_yaw[this]=yaw
            set s__MissileEffect_pitch[this]=pitch
            set s__MissileEffect_roll[this]=roll
            call BlzSetSpecialEffectOrientation(s__MissileEffect_effect[this], yaw, pitch, roll)

            loop
                exitwhen node == s__MissileEffect_attachments[this]
                    set s__MissileEffect__Effect_yaw[node]=yaw
                    set s__MissileEffect__Effect_pitch[node]=pitch
                    set s__MissileEffect__Effect_roll[node]=roll
                    call BlzSetSpecialEffectOrientation(s__MissileEffect__Effect_effect[node], yaw, pitch, roll)
                set node=s__MissileEffect__Effect_next[node]
            endloop
        endfunction

        function s__MissileEffect_move takes integer this,real x,real y,real z returns boolean
            local integer node= s__MissileEffect__Effect_next[s__MissileEffect_attachments[this]]

            if not ( x > s__WorldBounds_maxX or x < s__WorldBounds_minX or y > s__WorldBounds_maxY or y < s__WorldBounds_minY ) then
                call BlzSetSpecialEffectPosition(s__MissileEffect_effect[this], x, y, z)
                loop
                    exitwhen node == s__MissileEffect_attachments[this]
                        call BlzSetSpecialEffectPosition(s__MissileEffect__Effect_effect[node], x - s__MissileEffect__Effect_x[node], y - s__MissileEffect__Effect_y[node], z - s__MissileEffect__Effect_z[node])
                    set node=s__MissileEffect__Effect_next[node]
                endloop
                return true
            endif
            return false
        endfunction

        function s__MissileEffect_attach takes integer this,string fxpath,real dx,real dy,real dz,real scale returns effect
            local integer node= s__MissileEffect__Effect_insert(s__MissileEffect_attachments[this],fxpath , dx , dy , dz , scale)

            call BlzSetSpecialEffectPosition(s__MissileEffect__Effect_effect[node], BlzGetLocalSpecialEffectX(s__MissileEffect_effect[this]) - dx, BlzGetLocalSpecialEffectY(s__MissileEffect_effect[this]) - dy, BlzGetLocalSpecialEffectZ(s__MissileEffect_effect[this]) - dz)

            return s__MissileEffect__Effect_effect[node]
        endfunction

        function s__MissileEffect_detach takes integer this,effect sfx returns nothing
            local integer node= s__MissileEffect__Effect_next[s__MissileEffect_attachments[this]]

            loop
                exitwhen node == s__MissileEffect_attachments[this]
                    if GetHandleId(s__MissileEffect__Effect_effect[node]) == GetHandleId(sfx) then
                        call s__MissileEffect__Effect_remove(node)
                        exitwhen true
                    endif
                set node=s__MissileEffect__Effect_next[node]
            endloop
        endfunction

        function s__MissileEffect_setColor takes integer this,integer red,integer green,integer blue returns nothing
            call BlzSetSpecialEffectColor(s__MissileEffect_effect[this], red, green, blue)
        endfunction

        
        function s__MissileEffect_destroy takes integer this returns nothing
            local integer node= s__MissileEffect__Effect_next[s__MissileEffect_attachments[this]]

            loop
                exitwhen node == s__MissileEffect_attachments[this]
                    call s__MissileEffect__Effect_remove(node)
                set node=s__MissileEffect__Effect_next[node]
            endloop
            call DestroyEffect(s__MissileEffect_effect[this])
            call Alloc_Deallocate(si__MissileEffect__Effect , (s__MissileEffect_attachments[this])) // INLINED!!
            
            set s__MissileEffect_effect[this]=null
            set s__MissileEffect_path[this]=null
            set s__MissileEffect_size[this]=1.
            call s__MissileEffect_deallocate(this)
        endfunction

        function s__MissileEffect_create takes real x,real y,real z returns integer
            local integer this= s__MissileEffect__allocate()

            set s__MissileEffect_effect[this]=AddSpecialEffect("", x, y)
            set s__MissileEffect_path[this]=""
            set s__MissileEffect_size[this]=1
            set s__MissileEffect_time[this]=0
            set s__MissileEffect_transparency[this]=0
            set s__MissileEffect_animtype[this]=0
            set s__MissileEffect_playercolor[this]=0
            set s__MissileEffect_attachments[this]=(s__MissileEffect__Effect_init(((Alloc_Allocate(si__MissileEffect__Effect))))) // INLINED!!
            call BlzSetSpecialEffectZ(s__MissileEffect_effect[this], z)

            return this
        endfunction

//library MissileEffect ends
//library RegisterPlayerEvent:

function GetAnyPlayerEventTrigger takes playerevent whichEvent returns trigger
    return (GetIndexNativeEventTrigger(bj_MAX_PLAYER_SLOTS , (GetHandleId(whichEvent)))) // INLINED!!
endfunction

function RegisterPlayerEvent__TriggerRegisterPlayerEventAware takes trigger t,player p,playerevent evt returns event
    if evt == EVENT_PLAYER_CHAT then
        return TriggerRegisterPlayerChatEvent(t, p, "", false) // match any string
    else
        return TriggerRegisterPlayerEvent(t, p, evt)
    endif
endfunction

function GetPlayerEventTrigger takes player whichPlayer,playerevent whichEvent returns trigger
     return GetIndexNativeEventTrigger(GetPlayerId(whichPlayer) , GetHandleId(whichEvent))
endfunction

function RegisterAnyPlayerEvent takes playerevent whichEvent,code func returns nothing
     local integer eventId= GetHandleId(whichEvent)
     local integer index= 0
     local trigger t= null
     
     if RegisterNativeEventTrigger(bj_MAX_PLAYER_SLOTS , eventId) then
         set t=(GetIndexNativeEventTrigger(bj_MAX_PLAYER_SLOTS , (eventId))) // INLINED!!
         loop
             call RegisterPlayerEvent__TriggerRegisterPlayerEventAware(t , Player(index) , whichEvent)
             set index=index + 1
             exitwhen index == bj_MAX_PLAYER_SLOTS
         endloop
         set t=null
     endif
     
     call RegisterIndexNativeEvent(bj_MAX_PLAYER_SLOTS , (eventId ) , ( func)) // INLINED!!
endfunction

function RegisterPlayerEvent takes player whichPlayer,playerevent whichEvent,code func returns nothing
     local integer eventId= GetHandleId(whichEvent)
     local integer playerId= GetPlayerId(whichPlayer)
     
     if RegisterNativeEventTrigger(playerId , eventId) then
            call RegisterPlayerEvent__TriggerRegisterPlayerEventAware(GetIndexNativeEventTrigger(playerId , eventId) , whichPlayer , whichEvent)
     endif
     call RegisterIndexNativeEvent(playerId , eventId , func)
endfunction


//library RegisterPlayerEvent ends
//library RegisterPlayerUnitEvent:

function GetAnyPlayerUnitEventTrigger takes playerunitevent whichEvent returns trigger
    return (GetIndexNativeEventTrigger(bj_MAX_PLAYER_SLOTS , (GetHandleId(whichEvent)))) // INLINED!!
endfunction

function GetPlayerUnitEventTrigger takes player whichPlayer,playerunitevent whichEvent returns trigger
    return GetIndexNativeEventTrigger(GetPlayerId(whichPlayer) , GetHandleId(whichEvent))
endfunction

function RegisterAnyPlayerUnitEvent takes playerunitevent whichEvent,code func returns nothing
    local integer eventId= GetHandleId(whichEvent)
    local integer index= 0
    local trigger t= null

    if RegisterNativeEventTrigger(bj_MAX_PLAYER_SLOTS , eventId) then
        set t=(GetIndexNativeEventTrigger(bj_MAX_PLAYER_SLOTS , (eventId))) // INLINED!!
        loop
            call TriggerRegisterPlayerUnitEvent(t, Player(index), whichEvent, null)
            set index=index + 1
            exitwhen index == bj_MAX_PLAYER_SLOTS
        endloop
        set t=null
    endif

    call RegisterIndexNativeEvent(bj_MAX_PLAYER_SLOTS , (eventId ) , ( func)) // INLINED!!
endfunction

function RegisterPlayerUnitEvent takes player whichPlayer,playerunitevent whichEvent,code func returns nothing
    local integer playerId= GetPlayerId(whichPlayer)
    local integer eventId= GetHandleId(whichEvent)

    if RegisterNativeEventTrigger(playerId , eventId) then
        call TriggerRegisterPlayerUnitEvent(GetIndexNativeEventTrigger(playerId , eventId), whichPlayer, whichEvent, null)
    endif

    call RegisterIndexNativeEvent(playerId , eventId , func)
endfunction


//library RegisterPlayerUnitEvent ends
//library RegisterUnitEvent:

function GetUnitEventTrigger takes unitevent whichEvent returns trigger
    return (GetIndexNativeEventTrigger(bj_MAX_PLAYER_SLOTS , (GetHandleId(whichEvent)))) // INLINED!!
endfunction

function RegisterUnitEvent takes unit whichUnit,unitevent whichEvent,code func returns nothing
    local integer unitId= GetHandleId(whichUnit)
    local integer eventId= GetHandleId(whichEvent)

    if RegisterNativeEventTrigger(unitId , eventId) then
        call TriggerRegisterUnitEvent(GetIndexNativeEventTrigger(unitId , eventId), whichUnit, whichEvent)
    endif

    call RegisterIndexNativeEvent(unitId , eventId , func)
endfunction


//library RegisterUnitEvent ends
//library TimerUtils:

//library TimerUtils ends
//library Missiles:
    
    // Thanks and Credits to BPower, Dirac and Vexorian for the Missile Library's at which i based
    // this Missiles library. Credits and thanks to AGD and for the effect orientation ideas.
    // This version of Missiles requires patch 1.31+
    
    // How to Import:
    //     1 - Copy this and MissileEffect librarys into your map
    
    
    // Thanks and Full Credits to BPower, Dirac and Vexorian for the Missile Library's at which i based
    // this Missiles library. Credits to Vexorian for the dummy model.
    
    // How to Import:
    //     1 -First copy the Missile dummy unit into your map and then import the dummy.mdx
    //     model, setting the missile dummy model path to imported dummy.mdx model.
    //     Dummy model: https://www.hiveworkshop.com/threads/vexorians-dummy-model.149230/
    //     WorldBounds: https://github.com/nestharus/JASS/blob/master/jass/Systems/WorldBounds/script.j
    //     DummyRecycler: https://www.hiveworkshop.com/threads/dummy-recycler-v1-25.277659/ (Highly Recommended)
    
    //     2 - Copy this library into your map and set the
    //         DUMMY_RAW_CODE to the raw code of the missile dummy (ctrl + d) and you
    //         are done
    
    // How to Use:
    //         This system works almost identicaly to the Missile library by BPower but
    //         with a more user friendly interface in my opinion. Also this system
    //         allows you to create Arc/Curved Homing missiles like Dirac's system.
    
    //         Differently than both BPower and Dirac systems, you are not required 
    //         to use the ImplementStruct at the end of your struct. To make your struct
    //         behave like a Missile simply make it extends Missiles and you are done.
    
    //         After that you will have access to the events in the MissileEvents Interface.
    //         Simply declare the event you want for your strcut to have and the system 
    //         takes care of the rest. You can access the members and functions using 
    //         the "this" or "." syntax which is a plus. to terminate a missile, simply
    //         return true or call terminate() within the method. Example:
    
    //         struct MySpell extends Missiles
    //             method onPeriod takes nothing returns boolean
    //                 // will display the missile current position
    //                 call ClearTextMessages()
    //                 call BJDebugMsg(I2S(.x))
    //                 call BJDebugMsg(I2S(.y))
    //                 call BJDebugMsg(I2S(.z))
    
    //                 return false
    //             endmethod
    //         endstruct
                
    //         function Spell takes nothing returns nothing
    //             // the create method takes the initial and the final coordinates
    //             // if the target member is set, the missile home
    //             local MySpell spell = MySpell.create(fromX, fromY, fromZ, toX, toY, toZ)
    
    //             set spell.source   = GetTriggerUnit()
    //             set spell.target   = GetSpellTargetUnit() -> when a target is specified the missile will be homing
    //             set spell.speed    = 1000 -> warcraft 3 speed unit
    //             set spell.duration = 1.5 -> will set the speed to match the time passed
    //             set spell.model    = "Some Model.dmx"
    //             set spell.scale    = 1.3
    //             set spell.arc      = 30 (degrees converted to radians internally)
    //             set spell.curve    = GetRandomReal(-40, 40) (degrees converted to radians internally
    
    //             call spell.launch()
    //         endfunction
    
    //         Available members and methods:
    //             Coordinates impact               -> the impact coordiantes (x, y, z, anngle, slope, alpha, distance)
    //             Coordinates origin               -> same, but for origin
    //             //-------------------------------------------------------
    //             readonly real    x               -> current x position of the missile
    //             readonly real    y               -> current y position of the missile
    //             readonly real    z               -> current z position of the missile   
    //             readonly real    prevX           -> last x position of the missile
    //             readonly real    prevY           -> last y position of the missile
    //             readonly real    prevZ           -> last z position of the missile
    //             readonly real    height          -> the arc of the missile (change it using the .arc operator)
    //             readonly real    turn            -> the turn rate of the missile
    //             readonly real    open            -> the curvature of the missile (change it using the .curve operator)
    //             readonly real    veloc           -> the missile speed (change it using the .speed or .duration operator)
    //             readonly real    travel          -> distance travelled
    //             readonly unit    dummy           -> the dummy unit
    //             readonly boolean launched        -> true if the missile was already launched
    //             readonly boolean allocated       -> true if the missile can still perform its movement operations
    //             //-------------------------------------------------------
    //             unit    source                   -> the source unit (optional)
    //             unit    target                   -> the target unit (optional and if set to a valid unit the missile will be homing)
    //             player  owner                    -> the owner of the missile (optional)
    //             boolean collideZ                 -> set to true if you want the missile to consider z in collisions
    //             real    collision                -> the collision size of the missile (optional. The onHit and onDestructable events only works if this is greater than 0)
    //             real    damage                   -> stores the damage you want the missile to deal (optional)
    //             real    acceleration             -> if different than 0 then the missile will change its speed with time (optional)
    //             integer data                     -> just in case you want to pass some information to the missile to retrieve it later (optional)
    
    //             (call)
    //             method deflect takes real x, real y returns nothing
    //                 -   Deflects the missile from the target point, changing
    //                 -   it's course to the new x and y.
    //                 -   If target is a valid unit, deflect will null the target
    //                 -   and then deflects the missile
    
    //             (call)
    //             method deflectZ takes real x, real y, real z returns nothing
    //                 -   Deflects the missile from the target point, changing
    //                 -   it's course to the new x, y and z.
    //                 -   If target is a valid unit, deflect will null the target
    //                 -   and then deflects the missile
                  
    //             (call)
    //             method bounce takes nothing returns nothing
    //                 -   Bounces the missile from it's current Z position.
    //                 -   Useful when assigning targets to missiles that were
    //                 -   already active, it fixes the rough Z position change.
    
    //             (call)
    //             method flush takes widget w returns nothing
    //                 -   call this method to allow the missile to be able to hit
    //                 -   a unit or destructable again
    
    //             (call)
    //             method flushAll nothing returns nothing
    //                 -   flushes the hit table for the missile
                  
    //             (call)
    //             method hitted takes widget w returns boolean
    //                 -   returns true if the missile has hitted the widget
    
                    
    //             (optional)
    //             method onHit takes unit hit returns boolean
    //                 -   Runs every time the missile collides with a unit.
    //                 -   If returns true the missile is destroyed.
    
    //             (optional)
    //             method onDestructable takes destructable dest returns boolean
    //                 -   Runs every time the missile collides with a destructable.
    //                 -   If returns true the missile is destroyed.

    //             (optional)
    //             method onItem takes item i returns boolean
    //                 -   Runs every time the missile collides with an item.
    //                 -   If returns true the missile is destroyed.

    //             (optional)
    //             method onMissile takes Missiles missile returns boolean
    //                 -   Runs every time the missile collides with another missile.
    //                 -   By default, missiles collide only once
    //                 -   If returns true the missile is destroyed.
    //                 -   Please, be aware that this method can be very performance
    //                 -   intensive, so careful!
                     
    //             (optional)
    //             method onPeriod takes nothing returns boolean
    //                 -   Runs every period.
    //                 -   If returns true the missile is destroyed.
            
    //             (optional)
    //             method onFinish takes nothing returns boolean
    //                 -   Runs whenever the missile finishes it's course.
    //                 -   If returns true the missile is destroyed.
            
    //             (optional)
    //             method onTerrain takes nothing returns boolean
    //                 -   Runs whenever the missile collides with terrain height
    //                 -   greater then the missile current z
    //                 -   If returns true the missile is destroyed.
            
    //             (optional)
    //             method onRemove takes nothing returns nothing
    //                 -   Runs whenever the missile is deallocated.

    //             (optional)
    //             method onBoundaries takes nothing returns boolean
    //                 -   Runs whenever the missile is trying to move
    //                 -   out of map bounds.
    // /* ----------------------------------- END ---------------------------------- */
    
    
    
    
    
    
    

    
    function Missiles__GetLocZ takes real x,real y returns real
        call MoveLocation(Missiles__LOC, x, y)
        return GetLocationZ(Missiles__LOC)
    endfunction
    
    function Missiles__GetUnitZ takes unit u returns real
        return Missiles__GetLocZ(GetUnitX(u) , GetUnitY(u)) + GetUnitFlyHeight(u)
    endfunction
    
    function Missiles__SetUnitZ takes unit u,real z returns nothing
        call SetUnitFlyHeight(u, z - Missiles__GetLocZ(GetUnitX(u) , GetUnitY(u)), 0)
    endfunction
    
    function Missiles__GetMapCliffLevel takes nothing returns integer
        return GetTerrainCliffLevel(s__WorldBounds_maxX, s__WorldBounds_maxY)
    endfunction



        function s__Missiles__Pool_recycle takes unit dummy returns nothing
            if GetUnitTypeId(dummy) == Missiles__DUMMY then
                call GroupAddUnit(s__Missiles__Pool_group, dummy)
                call SetUnitX(dummy, s__WorldBounds_maxX)
                call SetUnitY(dummy, s__WorldBounds_maxY)
                call SetUnitOwner(dummy, s__Missiles__Pool_player, false)
                call PauseUnit(dummy, true)
            endif
        endfunction

        function s__Missiles__Pool_retrieve takes real x,real y,real z,real face returns unit
            if BlzGroupGetSize(s__Missiles__Pool_group) > 0 then
                set bj_lastCreatedUnit=FirstOfGroup(s__Missiles__Pool_group)
                call PauseUnit(bj_lastCreatedUnit, false)
                call GroupRemoveUnit(s__Missiles__Pool_group, bj_lastCreatedUnit)
                call SetUnitX(bj_lastCreatedUnit, x)
                call SetUnitY(bj_lastCreatedUnit, y)
                call Missiles__SetUnitZ(bj_lastCreatedUnit , z)
                call BlzSetUnitFacingEx(bj_lastCreatedUnit, face)
            else
                set bj_lastCreatedUnit=CreateUnit(s__Missiles__Pool_player, Missiles__DUMMY, x, y, face)
                call Missiles__SetUnitZ(bj_lastCreatedUnit , z)
                call UnitRemoveAbility(bj_lastCreatedUnit, 'Amrf')
            endif

            return bj_lastCreatedUnit
        endfunction

        function s__Missiles__Pool_onExpire takes nothing returns nothing
            local integer this= (s__TimerUtilsEx__Data_data[(GetHandleId((GetExpiredTimer()))) - 0x100000]) // INLINED!!

            call s__Missiles__Pool_recycle(s__Missiles__Pool_unit[this])
            call ReleaseTimer(s__Missiles__Pool_timer[this])
            
            set s__Missiles__Pool_timer[this]=null
            set s__Missiles__Pool_unit[this]=null

            call s__Missiles__Pool_deallocate(this)
        endfunction

        function s__Missiles__Pool_recycleTimed takes unit dummy,real delay returns nothing
            local integer this

            if GetUnitTypeId(dummy) != Missiles__DUMMY then
            else
                set this=s__Missiles__Pool__allocate()

                set s__Missiles__Pool_timer[this]=NewTimerEx(this)
                set s__Missiles__Pool_unit[this]=dummy
                
                call TimerStart(s__Missiles__Pool_timer[this], delay, false, function s__Missiles__Pool_onExpire)
            endif
        endfunction

        function s__Missiles__Pool_onInit takes nothing returns nothing
            local integer i= 0
            local unit u

            loop
                exitwhen i == Missiles_SWEET_SPOT
                    set u=CreateUnit(s__Missiles__Pool_player, Missiles__DUMMY, s__WorldBounds_maxX, s__WorldBounds_maxY, 0)
                    call PauseUnit(u, false)
                    call GroupAddUnit(s__Missiles__Pool_group, u)
                    call UnitRemoveAbility(u, 'Amrf')
                set i=i + 1
            endloop

            set u=null
        endfunction


        // Creates an origin - impact link.

        function s__Missiles__Coordinates_math takes integer a,integer b returns nothing
            local real dx
            local real dy
            loop
                set dx=s__Missiles__Coordinates_x[b] - s__Missiles__Coordinates_x[a]
                set dy=s__Missiles__Coordinates_y[b] - s__Missiles__Coordinates_y[a]
                set dx=dx * dx + dy * dy
                set dy=SquareRoot(dx)
                exitwhen dx != 0. and dy != 0.
                set s__Missiles__Coordinates_x[b]=s__Missiles__Coordinates_x[b] + .01
                set s__Missiles__Coordinates_z[b]=s__Missiles__Coordinates_z[b] - Missiles__GetLocZ(s__Missiles__Coordinates_x[b] - .01 , s__Missiles__Coordinates_y[b]) + Missiles__GetLocZ(s__Missiles__Coordinates_x[b] , s__Missiles__Coordinates_y[b])
            endloop

            set s__Missiles__Coordinates_square[a]=dx
            set s__Missiles__Coordinates_distance[a]=dy
            set s__Missiles__Coordinates_angle[a]=Atan2(s__Missiles__Coordinates_y[b] - s__Missiles__Coordinates_y[a], s__Missiles__Coordinates_x[b] - s__Missiles__Coordinates_x[a])
            set s__Missiles__Coordinates_slope[a]=( s__Missiles__Coordinates_z[b] - s__Missiles__Coordinates_z[a] ) / dy
            set s__Missiles__Coordinates_alpha[a]=Atan(s__Missiles__Coordinates_slope[a])
            // Set b.
            if s__Missiles__Coordinates_ref[b] == a then
                set s__Missiles__Coordinates_angle[b]=s__Missiles__Coordinates_angle[a] + bj_PI
                set s__Missiles__Coordinates_distance[b]=dy
                set s__Missiles__Coordinates_slope[b]=- s__Missiles__Coordinates_slope[a]
                set s__Missiles__Coordinates_alpha[b]=- s__Missiles__Coordinates_alpha[a]
                set s__Missiles__Coordinates_square[b]=dx
            endif
        endfunction

        function s__Missiles__Coordinates_link takes integer a,integer b returns nothing
            set s__Missiles__Coordinates_ref[a]=b
            set s__Missiles__Coordinates_ref[b]=a
            call s__Missiles__Coordinates_math(a , b)
        endfunction

        function s__Missiles__Coordinates_move takes integer this,real toX,real toY,real toZ returns nothing
            set s__Missiles__Coordinates_x[this]=toX
            set s__Missiles__Coordinates_y[this]=toY
            set s__Missiles__Coordinates_z[this]=toZ + Missiles__GetLocZ(toX , toY)
            if s__Missiles__Coordinates_ref[this] != this then
                call s__Missiles__Coordinates_math(this , s__Missiles__Coordinates_ref[this])
            endif
        endfunction

        function s__Missiles__Coordinates_destroy takes integer this returns nothing
            call s__Missiles__Coordinates_deallocate(this)
        endfunction

        function s__Missiles__Coordinates_create takes real x,real y,real z returns integer
            local integer this= s__Missiles__Coordinates__allocate()
            set s__Missiles__Coordinates_ref[this]=this
            call s__Missiles__Coordinates_move(this,x , y , z)
            return this
        endfunction
        
    
    
    
    


       
       
    
    
    
    
    
    
    
    
    
    

        
        
        
        
        
        
//Implemented from module Missiles__Operators:
        
        function s__Missiles__set_model takes integer this,string fx returns nothing
            call DestroyEffect(s__MissileEffect_effect[s__Missiles_effect[this]])
            set s__MissileEffect_path[s__Missiles_effect[this]]=fx
            set s__MissileEffect_effect[s__Missiles_effect[this]]=AddSpecialEffect(fx, s__Missiles__Coordinates_x[s__Missiles_origin[this]], s__Missiles__Coordinates_y[s__Missiles_origin[this]])
            call BlzSetSpecialEffectZ(s__MissileEffect_effect[s__Missiles_effect[this]], s__Missiles__Coordinates_z[s__Missiles_origin[this]])
            call BlzSetSpecialEffectYaw(s__MissileEffect_effect[s__Missiles_effect[this]], s__Missiles_cA[this])
        endfunction

        function s__Missiles__get_model takes integer this returns string
            return s__MissileEffect_path[s__Missiles_effect[this]]
        endfunction
        
        
        function s__Missiles__set_curve takes integer this,real value returns nothing
            set s__Missiles_open[this]=Tan(value * bj_DEGTORAD) * s__Missiles__Coordinates_distance[s__Missiles_origin[this]]
        endfunction
        
        function s__Missiles__get_curve takes integer this returns real
            return Atan(s__Missiles_open[this] / s__Missiles__Coordinates_distance[s__Missiles_origin[this]]) * bj_RADTODEG
        endfunction
        
        
        function s__Missiles__set_arc takes integer this,real value returns nothing
            set s__Missiles_height[this]=Tan(value * bj_DEGTORAD) * s__Missiles__Coordinates_distance[s__Missiles_origin[this]] / 4
        endfunction
        
        function s__Missiles__get_arc takes integer this returns real
            return Atan(4 * s__Missiles_height[this] / s__Missiles__Coordinates_distance[s__Missiles_origin[this]]) * bj_RADTODEG
        endfunction
        
        
        function s__Missiles__set_scale takes integer this,real value returns nothing
            set s__MissileEffect_size[s__Missiles_effect[this]]=value
            call s__MissileEffect_scale(s__Missiles_effect[this],s__MissileEffect_effect[s__Missiles_effect[this]] , value)
        endfunction

        function s__Missiles__get_scale takes integer this returns real
            return s__MissileEffect_size[s__Missiles_effect[this]]
        endfunction

        
        function s__Missiles__set_speed takes integer this,real newspeed returns nothing
            local real d= s__Missiles__Coordinates_distance[s__Missiles_origin[this]]
            local real s
            local real vel
        
            set s__Missiles_veloc[this]=newspeed * Missiles_PERIOD
            set vel=s__Missiles_veloc[this] * s__Missiles_dilation
            set s=s__Missiles_travel[this] + vel
            set s__Missiles_nextX[this]=s__Missiles_x[this] + vel * Cos(s__Missiles_cA[this])
            set s__Missiles_nextY[this]=s__Missiles_y[this] + vel * Sin(s__Missiles_cA[this])

            if s__Missiles_height[this] != 0 or s__Missiles__Coordinates_slope[s__Missiles_origin[this]] != 0 then
                set s__Missiles_nextZ[this]=4 * s__Missiles_height[this] * s * ( d - s ) / ( d * d ) + s__Missiles__Coordinates_slope[s__Missiles_origin[this]] * s + s__Missiles__Coordinates_z[s__Missiles_origin[this]]
                set s__Missiles_z[this]=s__Missiles_nextZ[this]
            endif
        endfunction

        function s__Missiles__get_speed takes integer this returns real
            return s__Missiles_veloc[this] / Missiles_PERIOD
        endfunction

        
        function s__Missiles__set_duration takes integer this,real flightTime returns nothing
            local real d= s__Missiles__Coordinates_distance[s__Missiles_origin[this]]
            local real s
            local real vel
        
            set s__Missiles_veloc[this]=RMaxBJ(0.00000001, ( s__Missiles__Coordinates_distance[s__Missiles_origin[this]] - s__Missiles_travel[this] ) * Missiles_PERIOD / RMaxBJ(0.00000001, flightTime))
            set s__Missiles_time[this]=flightTime
            set vel=s__Missiles_veloc[this] * s__Missiles_dilation
            set s=s__Missiles_travel[this] + vel
            set s__Missiles_nextX[this]=s__Missiles_x[this] + vel * Cos(s__Missiles_cA[this])
            set s__Missiles_nextY[this]=s__Missiles_y[this] + vel * Sin(s__Missiles_cA[this])

            if s__Missiles_height[this] != 0 or s__Missiles__Coordinates_slope[s__Missiles_origin[this]] != 0 then
                set s__Missiles_nextZ[this]=4 * s__Missiles_height[this] * s * ( d - s ) / ( d * d ) + s__Missiles__Coordinates_slope[s__Missiles_origin[this]] * s + s__Missiles__Coordinates_z[s__Missiles_origin[this]]
                set s__Missiles_z[this]=s__Missiles_nextZ[this]
            endif
        endfunction
        
        function s__Missiles__get_duration takes integer this returns real
            return s__Missiles_time[this]
        endfunction
        
        
        function s__Missiles__set_vision takes integer this,real sightRange returns nothing
            set s__Missiles_sight[this]=sightRange
            
            if s__Missiles_dummy[this] == null then
                if s__Missiles_owner[this] == null then
                    if s__Missiles_source[this] != null then
                        set s__Missiles_dummy[this]=s__Missiles__Pool_retrieve(s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_z[this] , 0)
                        call SetUnitOwner(s__Missiles_dummy[this], GetOwningPlayer(s__Missiles_source[this]), false)
                        call BlzSetUnitRealField(s__Missiles_dummy[this], UNIT_RF_SIGHT_RADIUS, sightRange)
                    endif
                else
                    set s__Missiles_dummy[this]=s__Missiles__Pool_retrieve(s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_z[this] , 0)
                    call SetUnitOwner(s__Missiles_dummy[this], s__Missiles_owner[this], false)
                    call BlzSetUnitRealField(s__Missiles_dummy[this], UNIT_RF_SIGHT_RADIUS, sightRange)
                endif
            else
                call SetUnitOwner(s__Missiles_dummy[this], s__Missiles_owner[this], false)
                call BlzSetUnitRealField(s__Missiles_dummy[this], UNIT_RF_SIGHT_RADIUS, sightRange)
            endif
        endfunction
        
        function s__Missiles__get_vision takes integer this returns real
            return s__Missiles_sight[this]
        endfunction

        
        function s__Missiles__set_timeScale takes integer this,real newTimeScale returns nothing
            call s__MissileEffect__set_timeScale(s__Missiles_effect[this],newTimeScale)
        endfunction
        
        function s__Missiles__get_timeScale takes integer this returns real
            return (s__MissileEffect_time[(s__Missiles_effect[this])]) // INLINED!!
        endfunction

        
        function s__Missiles__set_alpha takes integer this,integer newAlpha returns nothing
            call s__MissileEffect__set_alpha(s__Missiles_effect[this],newAlpha)
        endfunction

        function s__Missiles__get_alpha takes integer this returns integer
            return (s__MissileEffect_transparency[(s__Missiles_effect[this])]) // INLINED!!
        endfunction

        
        function s__Missiles__set_playerColor takes integer this,integer playerId returns nothing
            call s__MissileEffect__set_playerColor(s__Missiles_effect[this],playerId)
        endfunction

        function s__Missiles__get_playerColor takes integer this returns integer
            return (s__MissileEffect_playercolor[(s__Missiles_effect[this])]) // INLINED!!
        endfunction

        
        function s__Missiles__set_animation takes integer this,integer animType returns nothing
            call s__MissileEffect__set_animation(s__Missiles_effect[this],animType)
        endfunction

        function s__Missiles__get_animation takes integer this returns integer
            return (s__MissileEffect_animtype[(s__Missiles_effect[this])]) // INLINED!!
        endfunction
//Implemented from module Missiles__Methods:
        
        function s__Missiles_bounce takes integer this returns nothing
            call s__Missiles__Coordinates_move(s__Missiles_origin[this],s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_z[this] - Missiles__GetLocZ(s__Missiles_x[this] , s__Missiles_y[this]))
            
            set s__Missiles_travel[this]=0
            set s__Missiles_finished[this]=false
        endfunction

        function s__Missiles_deflect takes integer this,real tx,real ty,real tz returns nothing
            local real locZ= Missiles__GetLocZ(s__Missiles_x[this] , s__Missiles_y[this])
            
            set s__Missiles_target[this]=null
            set s__Missiles_toZ[this]=tz
            
            if s__Missiles_z[this] < locZ then
                set s__Missiles_nextX[this]=s__Missiles_prevX[this]
                set s__Missiles_nextY[this]=s__Missiles_prevY[this]
                set s__Missiles_nextZ[this]=s__Missiles_prevZ[this]
            endif
            
            call s__Missiles__Coordinates_move(s__Missiles_impact[this],tx , ty , tz)
            call s__Missiles__Coordinates_move(s__Missiles_origin[this],s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_z[this] - locZ)
            
            set s__Missiles_travel[this]=0
            set s__Missiles_finished[this]=false
        endfunction
        
        function s__Missiles_deflectTarget takes integer this,unit u returns nothing
            call s__Missiles_deflect(this,GetUnitX(u) , GetUnitY(u) , s__Missiles_toZ[this])
            set s__Missiles_target[this]=u
        endfunction

        
        function s__Missiles_flushAll takes integer this returns nothing
            call FlushChildHashtable(s__Missiles_table, this)
        endfunction

        function s__Missiles_flush takes integer this,widget w returns nothing
            if w != null then
                call RemoveSavedBoolean(s__Missiles_table, this, GetHandleId(w))
            endif
        endfunction

        function s__Missiles_hitted takes integer this,widget w returns boolean
            return HaveSavedBoolean(s__Missiles_table, this, GetHandleId(w))
        endfunction

        
        function s__Missiles_attach takes integer this,string model,real dx,real dy,real dz,real scale returns effect
            return s__MissileEffect_attach(s__Missiles_effect[this],model , dx , dy , dz , scale)
        endfunction

        function s__Missiles_detach takes integer this,effect attachment returns nothing
            if attachment != null then
                call s__MissileEffect_detach(s__Missiles_effect[this],attachment)
            endif
        endfunction

        
        function s__Missiles_pause takes integer this,boolean flag returns nothing
        local integer aux
        
        set s__Missiles_paused[this]=flag
        if not s__Missiles_paused[this] and s__Missiles_pkey[this] != - 1 then
            set s__Missiles_id=s__Missiles_id + 1
            set s__Missiles_missiles[s__Missiles_id]=this
            set aux=s__Missiles_frozen[s__Missiles_pid]
            set s__Missiles_pkey[aux]=s__Missiles_pkey[this]
            set s__Missiles_frozen[s__Missiles_pkey[this]]=s__Missiles_frozen[s__Missiles_pid]
            set s__Missiles_pid=s__Missiles_pid - 1
            set s__Missiles_pkey[this]=- 1

            if s__Missiles_id + 1 > Missiles_SWEET_SPOT and Missiles_SWEET_SPOT > 0 then
                set s__Missiles_dilation=( s__Missiles_id + 1 ) / Missiles_SWEET_SPOT
            else
                set s__Missiles_dilation=1.
            endif

            if s__Missiles_id == 0 then
                call TimerStart(s__Missiles_timer, Missiles_PERIOD, true, function sc__Missiles_move)
            endif
            
            if (st__Missiles__MissileEvents_onResume[si__Missiles__MissileEvents_type[this]]!=null) then
                if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onResume(this) then
                    call sc__Missiles_terminate(this)
                else
                    if s__Missiles_finished[this] then
                        call sc__Missiles_terminate(this)
                    endif
                endif
            else
                if s__Missiles_finished[this] then
                    call sc__Missiles_terminate(this)
                endif
            endif
        endif
        endfunction

        
        function s__Missiles_color takes integer this,integer red,integer green,integer blue returns nothing
            call BlzSetSpecialEffectColor(s__MissileEffect_effect[(s__Missiles_effect[this])], (red ), ( green ), ( blue)) // INLINED!!
        endfunction
        
        
        function s__Missiles_onDest takes nothing returns nothing
            local integer this= s__Missiles_temp
            local destructable d= GetEnumDestructable()
            local real dz
            local real tz

            if not HaveSavedBoolean(s__Missiles_table, this, GetHandleId(d)) then
                if s__Missiles_collideZ[this] then
                    set dz=Missiles__GetLocZ(GetWidgetX(d) , GetWidgetY(d))
                    set tz=GetDestructableOccluderHeight(d)
                    if dz + tz >= s__Missiles_z[this] - s__Missiles_collision[this] and dz <= s__Missiles_z[this] + s__Missiles_collision[this] then
                        call SaveBoolean(s__Missiles_table, this, GetHandleId(d), true)
                        if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onDestructable(this,d) then
                            set d=null
                            call sc__Missiles_terminate(this)
                            return
                        endif
                    endif
                else
                    call SaveBoolean(s__Missiles_table, this, GetHandleId(d), true)
                    if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onDestructable(this,d) then
                        set d=null
                        call sc__Missiles_terminate(this)
                        return
                    endif
                endif
            endif

            set d=null
        endfunction

        
        function s__Missiles_onItems takes nothing returns nothing
            local integer this= s__Missiles_temp
            local item i= GetEnumItem()
            local real dz

            if not HaveSavedBoolean(s__Missiles_table, this, GetHandleId(i)) then
                if s__Missiles_collideZ[this] then
                    set dz=Missiles__GetLocZ(GetItemX(i) , GetItemY(i))
                    if dz + Missiles__ITEM_SIZE >= s__Missiles_z[this] - s__Missiles_collision[this] and dz <= s__Missiles_z[this] + s__Missiles_collision[this] then
                        call SaveBoolean(s__Missiles_table, this, GetHandleId(i), true)
                        if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onItem(this,i) then
                            set i=null
                            call sc__Missiles_terminate(this)
                            return
                        endif
                    endif
                else
                    call SaveBoolean(s__Missiles_table, this, GetHandleId(i), true)
                    if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onItem(this,i) then
                        set i=null
                        call sc__Missiles_terminate(this)
                        return
                    endif
                endif
            endif

            set i=null
        endfunction

        
        function s__Missiles_terminate takes integer this returns nothing
        local integer aux
    
        if s__Missiles_allocated[this] and s__Missiles_launched[this] then
            set s__Missiles_allocated[this]=false
            
            if s__Missiles_pkey[this] != - 1 then
                set aux=s__Missiles_frozen[s__Missiles_pid]
                set s__Missiles_pkey[aux]=s__Missiles_pkey[this]
                set s__Missiles_frozen[s__Missiles_pkey[this]]=s__Missiles_frozen[s__Missiles_pid]
                set s__Missiles_pid=s__Missiles_pid - 1
                set s__Missiles_pkey[this]=- 1
            endif
            
            if (st__Missiles__MissileEvents_onRemove[si__Missiles__MissileEvents_type[this]]!=null) then
                call sc__Missiles__MissileEvents_onRemove(this)
            endif
            
            if s__Missiles_dummy[this] != null then
                call s__Missiles__Pool_recycle(s__Missiles_dummy[this])
            endif
            
            set aux=s__Missiles_collection[s__Missiles_count]
            set s__Missiles_index[aux]=s__Missiles_index[this]
            set s__Missiles_collection[s__Missiles_index[this]]=s__Missiles_collection[s__Missiles_count]
            set s__Missiles_count=s__Missiles_count - 1
            set s__Missiles_index[this]=- 1
            
            call s__Missiles__Coordinates_deallocate((s__Missiles_origin[this])) // INLINED!!
            call s__Missiles__Coordinates_deallocate((s__Missiles_impact[this])) // INLINED!!
            call s__MissileEffect_destroy(s__Missiles_effect[this])
            call sc__Missiles_reset(this)
            call FlushChildHashtable(s__Missiles_table, this)
        endif
        endfunction

        
        function s__Missiles_reset takes integer this returns nothing
            set s__Missiles_launched[this]=false
            set s__Missiles_finished[this]=false
            set s__Missiles_collideZ[this]=false
            set s__Missiles_paused[this]=false
            set s__Missiles_roll[this]=false
            set s__Missiles_source[this]=null
            set s__Missiles_target[this]=null
            set s__Missiles_owner[this]=null
            set s__Missiles_dummy[this]=null
            set s__Missiles_open[this]=0.
            set s__Missiles_height[this]=0.
            set s__Missiles_veloc[this]=0.
            set s__Missiles_acceleration[this]=0.
            set s__Missiles_collision[this]=0.
            set s__Missiles_damage[this]=0.
            set s__Missiles_travel[this]=0.
            set s__Missiles_turn[this]=0.
            set s__Missiles_time[this]=0.
            set s__Missiles_sight[this]=0.
            set s__Missiles_data[this]=0
            set s__Missiles_type[this]=0
            set s__Missiles_tileset[this]=0
            set s__Missiles_pkey[this]=- 1
            set s__Missiles_index[this]=- 1
        endfunction

        
        function s__Missiles_remove takes integer this,integer i returns integer
            if s__Missiles_paused[this] then
//Implemented from module Missiles__OnPause:
        set s__Missiles_pid=s__Missiles_pid + 1
        set s__Missiles_pkey[this]=s__Missiles_pid
        set s__Missiles_frozen[s__Missiles_pid]=this
        
        if (st__Missiles__MissileEvents_onPause[si__Missiles__MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onPause(this) then
                call s__Missiles_terminate(this)
            endif
        endif
            else
//Implemented from module Missiles__OnRemove:
            endif
            
            set s__Missiles_missiles[i]=s__Missiles_missiles[s__Missiles_id]
            set s__Missiles_id=s__Missiles_id - 1

            if s__Missiles_id + 1 > Missiles_SWEET_SPOT and Missiles_SWEET_SPOT > 0 then
                set s__Missiles_dilation=( s__Missiles_id + 1 ) / Missiles_SWEET_SPOT
            else
                set s__Missiles_dilation=1
            endif

            if s__Missiles_id == - 1 then
                call PauseTimer(s__Missiles_timer)
            endif
            
            if not s__Missiles_allocated[this] then
                call sc__Missiles__MissileEvents_deallocate(this)
            endif

            return i - 1
        endfunction
        
        
        function s__Missiles_move takes nothing returns nothing
            local integer j= 0
            local integer i
            local integer k
            local unit u
            local real a
            local real d
            local real s
            local real h
            local real c
            local real dx
            local real dy
            local real vel
            local real yaw
            local real pitch
            local integer missile
            local integer o
            local integer this

            if Missiles_SWEET_SPOT > 0 then
                set i=s__Missiles_last
            else
                set i=0
            endif
            
            loop
                exitwhen ( ( j >= Missiles_SWEET_SPOT and Missiles_SWEET_SPOT > 0 ) or j > s__Missiles_id )
                    set this=s__Missiles_missiles[i]
                    set s__Missiles_temp=this
                    if s__Missiles_allocated[this] and not s__Missiles_paused[this] then
//Implemented from module Missiles__OnHit:
        set o=s__Missiles_origin[this]
        set h=s__Missiles_height[this]
        set c=s__Missiles_open[this]
        set d=s__Missiles__Coordinates_distance[o]
    
        if (st__Missiles__MissileEvents_onHit[si__Missiles__MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                call GroupEnumUnitsInRange(s__Missiles_group, s__Missiles_x[this], s__Missiles_y[this], s__Missiles_collision[this] + Missiles__COLLISION_SIZE, null)
                loop
                    set u=FirstOfGroup(s__Missiles_group)
                    exitwhen u == null
                        if not HaveSavedBoolean(s__Missiles_table, this, GetHandleId(u)) then
                            if IsUnitInRangeXY(u, s__Missiles_x[this], s__Missiles_y[this], s__Missiles_collision[this]) then
                                if s__Missiles_collideZ[this] then
                                    set dx=Missiles__GetLocZ(GetUnitX(u) , GetUnitY(u)) + GetUnitFlyHeight(u)
                                    set dy=BlzGetUnitCollisionSize(u)
                                    if dx + dy >= s__Missiles_z[this] - s__Missiles_collision[this] and dx <= s__Missiles_z[this] + s__Missiles_collision[this] then
                                        call SaveBoolean(s__Missiles_table, this, GetHandleId(u), true)
                                        if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onHit(this,u) then
                                            call s__Missiles_terminate(this)
                                            exitwhen true
                                        endif
                                    endif
                                else
                                    call SaveBoolean(s__Missiles_table, this, GetHandleId(u), true)
                                    if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onHit(this,u) then
                                        call s__Missiles_terminate(this)
                                        exitwhen true
                                    endif
                                endif
                            endif
                        endif
                    call GroupRemoveUnit(s__Missiles_group, u)
                endloop
            endif
        endif
//Implemented from module Missiles__OnMissile:
        if (st__Missiles__MissileEvents_onMissile[si__Missiles__MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                set k=0
                loop
                    exitwhen k > s__Missiles_count
                        set missile=s__Missiles_collection[k]
                        if missile != this then
                            if not HaveSavedBoolean(s__Missiles_table, this, missile) then
                                set dx=s__Missiles_x[missile] - s__Missiles_x[this]
                                set dy=s__Missiles_y[missile] - s__Missiles_y[this]
                                if SquareRoot(dx * dx + dy * dy) <= s__Missiles_collision[this] then
                                    call SaveBoolean(s__Missiles_table, this, missile, true)
                                    if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onMissile(this,missile) then
                                        call s__Missiles_terminate(this)
                                        exitwhen true
                                    endif
                                endif
                            endif
                        endif
                    set k=k + 1
                endloop
            endif
        endif
//Implemented from module Missiles__OnDestructable:
        if (st__Missiles__MissileEvents_onDestructable[si__Missiles__MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                set dx=s__Missiles_collision[this]
                call SetRect(s__Missiles_rect, s__Missiles_x[this] - dx, s__Missiles_y[this] - dx, s__Missiles_x[this] + dx, s__Missiles_y[this] + dx)
                call EnumDestructablesInRect(s__Missiles_rect, null, function s__Missiles_onDest)
            endif
        endif
//Implemented from module Missiles__OnItem:
        if (st__Missiles__MissileEvents_onItem[si__Missiles__MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                set dx=s__Missiles_collision[this]
                call SetRect(s__Missiles_rect, s__Missiles_x[this] - dx, s__Missiles_y[this] - dx, s__Missiles_x[this] + dx, s__Missiles_y[this] + dx)
                call EnumItemsInRect(s__Missiles_rect, null, function s__Missiles_onItems)
            endif
        endif
//Implemented from module Missiles__OnCliff:
        if (st__Missiles__MissileEvents_onCliff[si__Missiles__MissileEvents_type[this]]!=null) then
            set dx=GetTerrainCliffLevel(s__Missiles_nextX[this], s__Missiles_nextY[this])
            set dy=GetTerrainCliffLevel(s__Missiles_x[this], s__Missiles_y[this])
            if dy < dx and s__Missiles_z[this] < ( dx - (GetTerrainCliffLevel(s__WorldBounds_maxX, s__WorldBounds_maxY)) ) * bj_CLIFFHEIGHT then // INLINED!!
                if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onCliff(this) then
                    call s__Missiles_terminate(this)
                endif
            endif
        endif
//Implemented from module Missiles__OnTerrain:
        if (st__Missiles__MissileEvents_onTerrain[si__Missiles__MissileEvents_type[this]]!=null) then
            if Missiles__GetLocZ(s__Missiles_x[this] , s__Missiles_y[this]) > s__Missiles_z[this] then
                if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onTerrain(this) then
                    call s__Missiles_terminate(this)
                endif
            endif
        endif
//Implemented from module Missiles__OnTileset:
        if (st__Missiles__MissileEvents_onTileset[si__Missiles__MissileEvents_type[this]]!=null) then
            set k=GetTerrainType(s__Missiles_x[this], s__Missiles_y[this])
            if k != s__Missiles_tileset[this] then
                if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onTileset(this,k) then
                    call s__Missiles_terminate(this)
                endif
            endif
            set s__Missiles_tileset[this]=k
        endif
//Implemented from module Missiles__OnPeriod:
        if (st__Missiles__MissileEvents_onPeriod[si__Missiles__MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onPeriod(this) then
                call s__Missiles_terminate(this)
            endif
        endif
//Implemented from module Missiles__OnOrient:
        // Homing or not
        set u=s__Missiles_target[this]
        if u != null and GetUnitTypeId(u) != 0 then
            call s__Missiles__Coordinates_move(s__Missiles_impact[this],GetUnitX(u) , GetUnitY(u) , GetUnitFlyHeight(u) + s__Missiles_toZ[this])
            set dx=s__Missiles__Coordinates_x[s__Missiles_impact[this]] - s__Missiles_nextX[this]
            set dy=s__Missiles__Coordinates_y[s__Missiles_impact[this]] - s__Missiles_nextY[this]
            set a=Atan2(dy, dx)
            set s__Missiles_travel[this]=s__Missiles__Coordinates_distance[o] - SquareRoot(dx * dx + dy * dy)
        else
            set a=s__Missiles__Coordinates_angle[o]
            set s__Missiles_target[this]=null
        endif
        
        // turn rate
        if s__Missiles_turn[this] != 0 and not ( Cos(s__Missiles_cA[this] - a) >= Cos(s__Missiles_turn[this]) ) then
            if Sin(a - s__Missiles_cA[this]) >= 0 then
                set s__Missiles_cA[this]=s__Missiles_cA[this] + s__Missiles_turn[this]
            else
                set s__Missiles_cA[this]=s__Missiles_cA[this] - s__Missiles_turn[this]
            endif
        else
            set s__Missiles_cA[this]=a
        endif

        set vel=s__Missiles_veloc[this] * s__Missiles_dilation
        set yaw=s__Missiles_cA[this]
        set s=s__Missiles_travel[this] + vel
        set s__Missiles_veloc[this]=s__Missiles_veloc[this] + s__Missiles_acceleration[this]
        set s__Missiles_travel[this]=s
        set pitch=s__Missiles__Coordinates_alpha[o]
        set s__Missiles_prevX[this]=s__Missiles_x[this]
        set s__Missiles_prevY[this]=s__Missiles_y[this]
        set s__Missiles_prevZ[this]=s__Missiles_z[this]
        set s__Missiles_x[this]=s__Missiles_nextX[this]
        set s__Missiles_y[this]=s__Missiles_nextY[this]
        set s__Missiles_z[this]=s__Missiles_nextZ[this]
        set s__Missiles_nextX[this]=s__Missiles_x[this] + vel * Cos(yaw)
        set s__Missiles_nextY[this]=s__Missiles_y[this] + vel * Sin(yaw)

        // arc calculation
        if h != 0 or s__Missiles__Coordinates_slope[o] != 0 then
            set s__Missiles_nextZ[this]=4 * h * s * ( d - s ) / ( d * d ) + s__Missiles__Coordinates_slope[o] * s + s__Missiles__Coordinates_z[o]
            set pitch=pitch - Atan(( ( 4 * h ) * ( 2 * s - d ) ) / ( d * d ))
        endif
        
        // curve calculation
        if c != 0 then
            set dx=4 * c * s * ( d - s ) / ( d * d )
            set a=yaw + bj_PI / 2
            set s__Missiles_x[this]=s__Missiles_x[this] + dx * Cos(a)
            set s__Missiles_y[this]=s__Missiles_y[this] + dx * Sin(a)
            set yaw=yaw + Atan(- ( ( 4 * c ) * ( 2 * s - d ) ) / ( d * d ))
        endif
//Implemented from module Missiles__OnFinish:
        if s >= d - 0.0001 then
            set s__Missiles_finished[this]=true
            if (st__Missiles__MissileEvents_onFinish[si__Missiles__MissileEvents_type[this]]!=null) then
                if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onFinish(this) then
                    call s__Missiles_terminate(this)
                else
                    if s__Missiles_travel[this] > 0 and not s__Missiles_paused[this] then
                        call s__Missiles_terminate(this)
                    endif
                endif
            else
                call s__Missiles_terminate(this)
            endif
        else
            if not s__Missiles_roll[this] then
                call s__MissileEffect_orient(s__Missiles_effect[this],yaw , - pitch , 0)
            else
                call s__MissileEffect_orient(s__Missiles_effect[this],yaw , - pitch , Atan2(c, h))
            endif
        endif
//Implemented from module Missiles__OnBoundaries:
        if not s__MissileEffect_move(s__Missiles_effect[this],s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_z[this]) then
            if (st__Missiles__MissileEvents_onBoundaries[si__Missiles__MissileEvents_type[this]]!=null) then
                if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onBoundaries(this) then
                    call s__Missiles_terminate(this)
                endif
            endif
        else
            if s__Missiles_dummy[this] != null then
                call SetUnitX(s__Missiles_dummy[this], s__Missiles_x[this])
                call SetUnitY(s__Missiles_dummy[this], s__Missiles_y[this])
            endif
        endif
                    else
                        set i=s__Missiles_remove(this,i)
                        set j=j - 1
                    endif
                set i=i + 1
                set j=j + 1

                if i > s__Missiles_id and Missiles_SWEET_SPOT > 0 then
                    set i=0
                endif
            endloop
            set s__Missiles_last=i

            set u=null
        endfunction
        
        
        function s__Missiles_launch takes integer this returns nothing
            if not s__Missiles_launched[this] and s__Missiles_allocated[this] then
                set s__Missiles_launched[this]=true
                set s__Missiles_id=s__Missiles_id + 1
                set s__Missiles_missiles[s__Missiles_id]=this
                set s__Missiles_count=s__Missiles_count + 1
                set s__Missiles_index[this]=s__Missiles_count
                set s__Missiles_collection[s__Missiles_count]=this
                
                if s__Missiles_id + 1 > Missiles_SWEET_SPOT and Missiles_SWEET_SPOT > 0 then
                    set s__Missiles_dilation=( s__Missiles_id + 1 ) / Missiles_SWEET_SPOT
                else
                    set s__Missiles_dilation=1.
                endif

                if s__Missiles_id == 0 then
                    call TimerStart(s__Missiles_timer, Missiles_PERIOD, true, function s__Missiles_move)
                endif
            endif
        endfunction

        
        function s__Missiles_create takes real x,real y,real z,real toX,real toY,real toZ returns integer
            local integer this= s__Missiles__allocate()

            call s__Missiles_reset(this)
            set s__Missiles_origin[this]=s__Missiles__Coordinates_create(x , y , z)
            set s__Missiles_impact[this]=s__Missiles__Coordinates_create(toX , toY , toZ)
            set s__Missiles_effect[this]=s__MissileEffect_create(x , y , s__Missiles__Coordinates_z[s__Missiles_origin[this]])
            call s__Missiles__Coordinates_link(s__Missiles_origin[this] , s__Missiles_impact[this])
            set s__Missiles_allocated[this]=true
            set s__Missiles_cA[this]=s__Missiles__Coordinates_angle[s__Missiles_origin[this]]
            set s__Missiles_x[this]=x
            set s__Missiles_y[this]=y
            set s__Missiles_z[this]=s__Missiles__Coordinates_z[s__Missiles_impact[this]]
            set s__Missiles_prevX[this]=x
            set s__Missiles_prevY[this]=y
            set s__Missiles_prevZ[this]=s__Missiles__Coordinates_z[s__Missiles_impact[this]]
            set s__Missiles_nextX[this]=x
            set s__Missiles_nextY[this]=y
            set s__Missiles_nextZ[this]=s__Missiles__Coordinates_z[s__Missiles_impact[this]]
            set s__Missiles_toZ[this]=toZ
            
            return this
        endfunction

//library Missiles ends
//library Missilies:

//Implemented from module Alloc:
        function s__MissData_allocate takes nothing returns integer
            return Alloc_Allocate(si__MissData)
        endfunction
        function s__MissData_deallocate takes integer this returns nothing
            call Alloc_Deallocate(si__MissData , this)
        endfunction
    
        
        //the ability necessary for units that are part of the psycho
        //another psycho specific variable
        
        function s__MissData_create takes real Aoe,conditionfunc func,real size,real dur,integer abil returns integer
                local integer this= (Alloc_Allocate(si__MissData)) // INLINED!!
                set s__MissData_Aoe[this]=Aoe
                set s__MissData_func[this]=func
                set s__MissData_size[this]=size
                set s__MissData_dur[this]=dur
                set s__MissData_abil[this]=abil
                set s__MissData_model[this]=null
                return this
        endfunction 
        
        function s__MissData_destroy takes integer this returns nothing
                call Alloc_Deallocate(si__MissData , (this)) // INLINED!!
        endfunction 
        
        function s__MissData_MutInt takes nothing returns nothing
                 local integer this
                 local timer t= GetExpiredTimer()
                 
                 call ReleaseTimer(t)
                 set t=null
                 
                 //Defiler
                 set this=s__MissData_create(0 , Condition(function sc__AcidEffect_cast) , 1.0 , 15 , 'XA01')
                 call SaveInteger(Table__ht, (Miss), ('h01V'), ( this)) // INLINED!!
                 call SaveInteger(Table__ht, (Miss), ('h01X'), ( this)) // INLINED!!
                 //Human Development
                 set this=s__MissData_create(0 , null , 1.0 , 15 , 0)
                 call SaveInteger(Table__ht, (Miss), ('h01I'), ( this)) // INLINED!!
                 call SaveInteger(Table__ht, (Miss), ('h01J'), ( this)) // INLINED!!
                 //Guardian
                 set this=s__MissData_create(0 , null , 1.0 , 15 , 0)
                 call SaveInteger(Table__ht, (Miss), ('h04Y'), ( this)) // INLINED!!
                 
                 set this=0
                 
        endfunction 
        
        function s__MissData_AlienInt takes nothing returns nothing
                 local integer this
                 local timer t= GetExpiredTimer()
                 
                 //Energy
                 set this=s__MissData_create(0 , null , 1.0 , 15 , 0)
                 call SaveInteger(Table__ht, (Miss), ('h035'), ( this)) // INLINED!!
                 call SaveInteger(Table__ht, (Miss), ('h036'), ( this)) // INLINED!!
                 //Alien
                set this=s__MissData_create(0 , Condition(function sc__AcidEffect_cast) , 1.0 , 15 , 'XA01')
                call SaveInteger(Table__ht, (Miss), ('h02M'), ( this)) // INLINED!!
                call SaveInteger(Table__ht, (Miss), ('h02N'), ( this)) // INLINED!!
                 //Manipulation
                 set this=s__MissData_create(0 , null , 1.0 , 15 , 0)
                 call SaveInteger(Table__ht, (Miss), ('h02V'), ( this)) // INLINED!!
                 call SaveInteger(Table__ht, (Miss), ('h02W'), ( this)) // INLINED!!
                 //Combustion
                 set this=s__MissData_create(0 , Condition(function sc__FireEffect_cast) , 1.0 , 15 , 'XA02')
                 call SaveInteger(Table__ht, (Miss), ('h03A'), ( this)) // INLINED!!
                 call SaveInteger(Table__ht, (Miss), ('h03B'), ( this)) // INLINED!!
                 //Illiusion
                 set this=s__MissData_create(0 , null , 1.0 , 15 , 0)
                 call SaveInteger(Table__ht, (Miss), ('h03C'), ( this)) // INLINED!!
                 call SaveInteger(Table__ht, (Miss), ('h03D'), ( this)) // INLINED!!
                 //Spacial
                 set this=s__MissData_create(0 , null , 1.0 , 15 , 0)
                 call SaveInteger(Table__ht, (Miss), ('h031'), ( this)) // INLINED!!
                 call SaveInteger(Table__ht, (Miss), ('h032'), ( this)) // INLINED!!
                 //Temporal
                 set this=s__MissData_create(0 , null , 1.0 , 15 , 0)
                 call SaveInteger(Table__ht, (Miss), ('h02Y'), ( this)) // INLINED!!
                 call SaveInteger(Table__ht, (Miss), ('h030'), ( this)) // INLINED!!
                 //Webspinner
                 set this=s__MissData_create(0 , null , 1.0 , 15 , 0)
                 call SaveInteger(Table__ht, (Miss), ('h03V'), ( this)) // INLINED!!
                 call SaveInteger(Table__ht, (Miss), ('h03W'), ( this)) // INLINED!!
                 
                 set this=0
                 
                 call TimerStart(t, 0.01, false, function s__MissData_MutInt)
        endfunction 
        
        function s__MissData_ShipInit takes nothing returns nothing
                  local integer this
                  local timer t= GetExpiredTimer()
                  //Albadar
                  set this=s__MissData_create(60 , null , 1.0 , 15 , 0)
                  call SaveInteger(Table__ht, (Miss), ('h02Q'), ( this)) // INLINED!!
                  //Drone
                  set this=s__MissData_create(60 , null , 1.0 , 15 , 0)
                  call SaveInteger(Table__ht, (Miss), ('h02T'), ( this)) // INLINED!!
                  //Hunter
                  set this=s__MissData_create(60 , null , 1.0 , 15 , 0)
                  call SaveInteger(Table__ht, (Miss), ('h02H'), ( this)) // INLINED!!
                  //Pirate
                  set this=s__MissData_create(60 , null , 1.0 , 15 , 0)
                  call SaveInteger(Table__ht, (Miss), ('h02B'), ( this)) // INLINED!!
                  //Raptor
                  set this=s__MissData_create(60 , null , 1.0 , 15 , 0)
                  call SaveInteger(Table__ht, (Miss), ('h002'), ( this)) // INLINED!!
                  //Sheepy
                  set this=s__MissData_create(60 , null , 1.0 , 15 , 0)
                  call SaveInteger(Table__ht, (Miss), ('h03J'), ( this)) // INLINED!!
                  //Swagger
                  set this=s__MissData_create(300 , null , 1.750 , 15 , 0)
                  call SaveInteger(Table__ht, (Miss), ('h00X'), ( this)) // INLINED!!
                  
                  call TimerStart(t, 0.01, false, function s__MissData_AlienInt)
                  
                  set t=null
                  
                  set this=0
        endfunction 
        
        
        function s__MissData_onInt takes nothing returns nothing
                local integer this
                local timer t= GetExpiredTimer()
            
                //Acid
                set this=s__MissData_create(0 , Condition(function sc__AcidEffect_cast) , 1.0 , 15 , 0)
                call SaveInteger(Table__ht, (Miss), ('h02R'), ( this)) // INLINED!!
                //Cryo
                set this=s__MissData_create(0 , Condition(function sc__IceEffect_cast) , 1.0 , 15 , 'XA00')
                call SaveInteger(Table__ht, (Miss), ('h00J'), ( this)) // INLINED!!
                //Dark Matter
                set this=s__MissData_create(0 , null , 1.0 , 15 , 0)
                call SaveInteger(Table__ht, (Miss), ('h00L'), ( this)) // INLINED!!
                //Pyro
                set this=s__MissData_create(0 , Condition(function sc__FireEffect_cast) , 1.0 , 15 , 'XA02')
                call SaveInteger(Table__ht, (Miss), ('h00E'), ( this)) // INLINED!!
                //Guard
                set this=s__MissData_create(0 , null , 1.0 , 15 , 0)
                call SaveInteger(Table__ht, (Miss), ('h02G'), ( this)) // INLINED!!
                //Illiusion
                set this=s__MissData_create(0 , null , 1.0 , 15 , 0)
                call SaveInteger(Table__ht, (Miss), ('h00M'), ( this)) // INLINED!!
                //Machinegun
                set this=s__MissData_create(0 , null , 1.0 , 15 , 0)
                call SaveInteger(Table__ht, (Miss), ('h03U'), ( this)) // INLINED!!
                //Operative
                set this=s__MissData_create(0 , null , 1.0 , 15 , 'XA04')
                call SaveInteger(Table__ht, (Miss), ('h024'), ( this)) // INLINED!!
                //Photon
                set this=s__MissData_create(0 , null , 1.0 , 15 , 'XA06')
                call SaveInteger(Table__ht, (Miss), ('h00F'), ( this)) // INLINED!!
                //Plasma
                set this=s__MissData_create(0 , null , 1.0 , 15 , 'XA05')
                call SaveInteger(Table__ht, (Miss), ('h00D'), ( this)) // INLINED!!
                //Rad
                set this=s__MissData_create(0 , null , 1.0 , 15 , 'XA08')
                call SaveInteger(Table__ht, (Miss), ('h00N'), ( this)) // INLINED!!
                //Rocket
                set this=s__MissData_create(0 , null , 1.0 , 15 , 'XA04')
                call SaveInteger(Table__ht, (Miss), ('h00C'), ( this)) // INLINED!!
                //Scientist
                set this=s__MissData_create(0 , null , 1.0 , 15 , 'XA09')
                call SaveInteger(Table__ht, (Miss), ('h027'), ( this)) // INLINED!!
                //Telsa
                set this=s__MissData_create(0 , Condition(function sc__ElectroEffect_cast) , 1.0 , 15 , 'XA03')
                call SaveInteger(Table__ht, (Miss), ('h00I'), ( this)) // INLINED!!
                //Aqua
                set this=s__MissData_create(0 , Condition(function sc__WaterEffect_cast) , 1.0 , 15 , 'XA07')
                call SaveInteger(Table__ht, (Miss), ('h050'), ( this)) // INLINED!!
                
                set this=0
                
                call TimerStart(t, 0.01, false, function s__MissData_ShipInit)
                
                set t=null
        endfunction 
    




//library Missilies ends
//library Movespeed:

    
       
       
       




       
        function s__Movespeed_destroy takes integer this returns nothing
            local integer head= s__Movespeed_head[this]
            local integer i= GetUnitUserData(s__Movespeed_u[this])
            local integer r= 0
            local integer s= (LoadInteger(Table__ht, (Mover), (i))) // INLINED!!
            set s__Movespeed_pb[head]=s__Movespeed_pb[head] - s__Movespeed_pb[this]
            set s__Movespeed_fb[head]=s__Movespeed_fb[head] - s__Movespeed_fb[this]
            set s__Movespeed_count[head]=s__Movespeed_count[head] - 1
            if s__Movespeed_t[this] != null then

                    call ReleaseTimer(s__Movespeed_t[this])








                set s__Movespeed_t[this]=null
            endif
            if s__Movespeed_count[head] == 0 then

                    call RemoveSavedInteger(Table__ht, (s__Movespeed_tb), (GetHandleId(s__Movespeed_u[this]))) // INLINED!!



                call s__Movespeed_deallocate(head)
            endif
            call h__SetUnitMoveSpeed(s__Movespeed_u[this], ( s__Movespeed_default[head] + s__Movespeed_fb[head] ) * ( 1 + s__Movespeed_pb[head] ))
            call s__IPool_remove(s,this)
            set r=s__IPool_getItem(s)
            if (LoadInteger(Table__ht, (((s__IPool__data_tar) + ((s)))), ((r)))) == 0 then // INLINED!!
                call RemoveSavedInteger(Table__ht, (Mover), (i)) // INLINED!!
                call s__IPool_destroy(s)
            endif
            call s__Movespeed_deallocate(this)
        endfunction
       
        function s__Movespeed_change takes integer this,real newPercentBonus,real newFlatBonus returns nothing
            local integer head= s__Movespeed_head[this]
            set s__Movespeed_pb[head]=s__Movespeed_pb[head] + newPercentBonus - s__Movespeed_pb[this]
            set s__Movespeed_fb[head]=s__Movespeed_fb[head] + newFlatBonus - s__Movespeed_fb[this]
            set s__Movespeed_pb[this]=newPercentBonus
            set s__Movespeed_fb[this]=newFlatBonus
            call h__SetUnitMoveSpeed(s__Movespeed_u[this], ( s__Movespeed_default[head] + s__Movespeed_fb[head] ) * ( 1 + s__Movespeed_pb[head] ))
        endfunction
       
        function s__Movespeed_create takes unit u,real percentBonus,integer flatBonus returns integer
            local integer this= s__Movespeed__allocate()
            local integer id= GetHandleId(u)
            local integer head
            local integer i= GetUnitUserData(u)
            local integer r= 0
            local integer s= (LoadInteger(Table__ht, (Mover), (i))) // INLINED!!

                if (HaveSavedInteger(Table__ht, (s__Movespeed_tb), (id))) then // INLINED!!
                    set head=(LoadInteger(Table__ht, (s__Movespeed_tb), (id))) // INLINED!!
                    set s__Movespeed_count[head]=s__Movespeed_count[head] + 1
                else
                    set head=s__Movespeed__allocate()
                    set s__Movespeed_pb[head]=0
                    set s__Movespeed_fb[head]=0
                    set s__Movespeed_count[head]=1
                    set s__Movespeed_default[head]=GetUnitDefaultMoveSpeed(u)
                    call SaveInteger(Table__ht, (s__Movespeed_tb), (id), ( head)) // INLINED!!
                endif













            set s__Movespeed_u[this]=u
            set s__Movespeed_pb[this]=percentBonus
            set s__Movespeed_fb[this]=flatBonus
            set s__Movespeed_head[this]=head
            set s__Movespeed_pb[head]=s__Movespeed_pb[head] + s__Movespeed_pb[this]
            set s__Movespeed_fb[head]=s__Movespeed_fb[head] + s__Movespeed_fb[this]
            set r=s__IPool_getItem(s)
            if (LoadInteger(Table__ht, (((s__IPool__data_tar) + ((s)))), ((r)))) == 0 then // INLINED!!
                set s=s__IPool_create()
            endif
            call s__IPool_add(s,this , 10)
            call h__SetUnitMoveSpeed(u, ( s__Movespeed_default[head] + s__Movespeed_fb[head] ) * ( 1 + s__Movespeed_pb[head] ))
            return this
        endfunction
       
        function s__Movespeed_expired takes nothing returns nothing

                call s__Movespeed_destroy(((s__TimerUtilsEx__Data_data[(GetHandleId((GetExpiredTimer()))) - 0x100000]))) // INLINED!!





        endfunction
       
        function s__Movespeed__get_duration takes integer this returns real
            if s__Movespeed_t[this] == null then
                return 0.0
            endif
            return TimerGetRemaining(s__Movespeed_t[this])
        endfunction
       
        function s__Movespeed__set_duration takes integer this,real time returns nothing
            if s__Movespeed_t[this] == null then

                    set s__Movespeed_t[this]=NewTimerEx(this)








            endif
            call TimerStart(s__Movespeed_t[this], time, false, function s__Movespeed_expired)
        endfunction
        
        function s__Movespeed_Morph takes nothing returns nothing
                  local integer s= (LoadInteger(Table__ht, (Mover), (udg_UDex))) // INLINED!!
                  local integer s2= s__IPool_create()
                  local integer this
                  
                  //this allows it to stop referencing the IPool
                  call RemoveSavedInteger(Table__ht, (Mover), (s)) // INLINED!!
                  call SaveInteger(Table__ht, (Mover), (udg_UDex), ( s2)) // INLINED!!
                  
                  loop
                      set this=s__IPool_getItem(s)
                      exitwhen (LoadInteger(Table__ht, (((s__IPool__data_tar) + ((s)))), ((this)))) == 0 // INLINED!!
                      
                      call s__Movespeed_change(this,s__Movespeed_pb[this] , s__Movespeed_fb[this])
                      
                      //terminate the loop
                      call s__IPool_remove(s,this)
                      //resave the value into the new IPool
                      call s__IPool_add(s2,this , 10)
                  endloop
                  
                  //destroy the previous IPool since we no longer need it
                  call s__IPool_destroy(s)
                  
        endfunction
       

            function s__Movespeed_onInit takes nothing returns nothing
                local trigger t=CreateTrigger()
                call h__TriggerRegisterVariableEvent(t, "udg_UnitTypeEvent", EQUAL, 1.00)
                call TriggerAddCondition(t, Condition(function s__Movespeed_Morph))
                set t=null
                set s__Movespeed_tb=s__Table_create()
                set Mover=s__Table_create()
            endfunction

       

//library Movespeed ends
//library PolarityChange:

function PolarityChange__Act takes nothing returns nothing
            local string s
            local integer p
            local ability a
            local unit u
            local integer p2
            
            if GetSpellAbilityId() == 'A097' then
                set u=GetTriggerUnit()
                set a=BlzGetUnitAbility(u, 'A097')
                set p=BlzGetAbilityIntegerField(a, ABILITY_IF_PRIORITY)
                set p2=((GetPlayerId(GetTriggerPlayer()))) // INLINED!!
                if p == 3 then
                    set p=0
                else
                    set p=p + 1
                endif
                
                if p == 0 then
                
                    set s="Changes the Force Suit's attack from pushing enemies to pulling them instead. Right now, if you read this, you push enemies (default)"
                    
                elseif p == 1 then
                
                    set s="Changes the Force Suit's attack from pulling enemies to pushing them instead. Force vortex also pulls enemies. Right now, if you read this, you are pulling enemies."
                
                elseif p == 2 then
                
                    set s="Changes the Force Suit's attack from pushing enemies to pulling them instead. Force vortex also pulls enemies. Right now, if you read this, you push enemies"
                    
                elseif p == 3 then
                
                    set s="Changes the Force Suit's attack from pulling enemies to pushing them instead. Force vortex also pushes enemies. Right now, if you read this, you are pulling enemies."
                
                endif
                
                call BlzSetAbilityIntegerField(a, ABILITY_IF_PRIORITY, p)
                if s__User_id[(s__User_LocalId)] == s__User_id[p2] then // INLINED!!
                    call BlzSetAbilityExtendedTooltip('A097', s, 0)
                endif
                call SetUnitAbilityLevel(u, 'A097', 2)
                call SetUnitAbilityLevel(u, 'A097', 1)
                    
                if p < 2 then
                    set s="Tosses a small grenade that will explode and push back nearby units."
                else
                    set s="Tosses a small grenade that will explode and pull in nearby units."
                endif
                
                set a=BlzGetUnitAbility(u, 'A06A')
                
                call BlzSetAbilityIntegerField(a, ABILITY_IF_PRIORITY, p)
                 if ( s__User_id[(s__User_LocalId)] == s__User_id[p2] ) then // INLINED!!
                    call BlzSetAbilityExtendedTooltip('A06A', s, 0)
                endif
                call SetUnitAbilityLevel(u, 'A06A', 2)
                call SetUnitAbilityLevel(u, 'A06A', 1)
                
                set s=null
                set a=null
                set u=null
            endif
                
                
                
endfunction 

function PolarityChange__onInit takes nothing returns nothing
    call RegisterAnyPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT , function PolarityChange__Act)
endfunction


//library PolarityChange ends
//library Push:

function Push_Move takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("pushlibrary_unit")) // INLINED!!
local real dps=LoadReal((udg_hash), GetHandleId(k), StringHash("dps")) // INLINED!!
local real angle=LoadReal((udg_hash), GetHandleId(k), StringHash("angle")) // INLINED!!
local real decay=LoadReal((udg_hash), GetHandleId(k), StringHash("decay")) // INLINED!!
local real x=GetUnitX(a) + dps * Cos(angle * bj_DEGTORAD) / 25.0
local real y=GetUnitY(a) + dps * Sin(angle * bj_DEGTORAD) / 25.0
if dps <= 0.0 then
call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
call PauseTimer(k)
call ReleaseTimer(k)
return
endif
if RectContainsCoords(gg_rct_Space, x, y) then
if GetUnitMoveSpeed(a) == 0.0 then
call SetUnitPosition(a, x, y)
else
call SetUnitX(a, x)
call SetUnitY(a, y)
endif
endif
call SaveReal((udg_hash), GetHandleId(k), StringHash("dps"), dps - decay / 25.0) // INLINED!!
endfunction

function Push takes unit a,real dps,real decay,real angle returns nothing
local timer k=(NewTimerEx(0)) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("pushlibrary_unit"), a) // INLINED!!
call TimerStart(k, 0.04, true, function Push_Move)
call SaveReal((udg_hash), GetHandleId(k), StringHash("angle"), angle) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("dps"), dps) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("decay"), decay) // INLINED!!

set k=null
endfunction


////////////
//This push can be used in stations and has pathing
//Scaled by unit's mass index, which is saved in the UnitCustomData init trigger.
//Default for a non-registered unit is 100.
function Push2_Move takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("pushlibrary_unit")) // INLINED!!
local real dps=LoadReal((udg_hash), GetHandleId(k), StringHash("dps")) // INLINED!!
local real angle=LoadReal((udg_hash), GetHandleId(k), StringHash("angle")) // INLINED!!
local real decay=LoadReal((udg_hash), GetHandleId(k), StringHash("decay")) // INLINED!!
local real x=GetUnitX(a) + dps * Cos(angle * bj_DEGTORAD) / 50.0
local real y=GetUnitY(a) + dps * Sin(angle * bj_DEGTORAD) / 50.0
local location b=Location(x, y)
local real height=GetLocationZ(b)
local real hay
call RemoveLocation(b)
set b=null
set b=GetUnitLoc(a)
set hay=GetLocationZ(b)
call RemoveLocation(b)
set b=null
if dps <= 0.0 then
call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
call PauseTimer(k)
call ReleaseTimer(k)
set k=null
return
endif
if IsPointPathable(x , y , false) and height <= hay + 20.0 and GetTerrainCliffLevel(GetUnitX(a), GetUnitY(a)) == GetTerrainCliffLevel(x, y) then
if GetUnitMoveSpeed(a) == 0.0 then
call SetUnitPosition(a, x, y)
else
call SetUnitX(a, x)
call SetUnitY(a, y)
endif
endif
call SaveReal((udg_hash), GetHandleId(k), StringHash("dps"), dps - decay / 50.0) // INLINED!!
endfunction

function Push2 takes unit a,real dps,real decay,real angle returns nothing
local timer k= (NewTimerEx(0)) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("pushlibrary_unit"), a) // INLINED!!
call TimerStart(k, 0.02, true, function Push2_Move)
call SaveReal((udg_hash), GetHandleId(k), StringHash("angle"), angle) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("dps"), dps * 100 / GetUnitMass(a)) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("decay"), decay) // INLINED!!

set k=null
set a=null
endfunction

//This one uses SetUnitPosition instead of SetUnitX
//Its original purpose, of being used for units with 0 move speed, is obsolete. However you may still want to use this for
//making a unit unable to move while being pushed.
function Push3_Move takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("pushlibrary_unit")) // INLINED!!
local real dps=LoadReal((udg_hash), GetHandleId(k), StringHash("dps")) // INLINED!!
local real angle=LoadReal((udg_hash), GetHandleId(k), StringHash("angle")) // INLINED!!
local real decay=LoadReal((udg_hash), GetHandleId(k), StringHash("decay")) // INLINED!!
local real x=GetUnitX(a) + dps * Cos(angle * bj_DEGTORAD) / 25.0
local real y=GetUnitY(a) + dps * Sin(angle * bj_DEGTORAD) / 25.0
if dps <= 0.0 then
call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
call PauseTimer(k)
call ReleaseTimer(k)
return
endif
if RectContainsCoords(gg_rct_Space, x, y) then
call SetUnitPosition(a, x, y)
endif
call SaveReal((udg_hash), GetHandleId(k), StringHash("dps"), dps - decay / 25.0) // INLINED!!

set k=null
set a=null
endfunction

function Push3 takes unit a,real dps,real decay,real angle returns nothing
local timer k=(NewTimerEx(0)) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("pushlibrary_unit"), a) // INLINED!!
call TimerStart(k, 0.04, true, function Push3_Move)
call SaveReal((udg_hash), GetHandleId(k), StringHash("angle"), angle) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("dps"), dps) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("decay"), decay) // INLINED!!

set k=null
endfunction


//library Push ends
//library RiseAndFall:
   



   
   




   
    function s__RiseAndFall__staticgetindex takes unit u returns integer



            return LoadInteger(s__RiseAndFall_instance_storage, GetHandleId(u), 0)

    endfunction 
   
    function s__RiseAndFall_isUnitAirborne takes unit u returns boolean



            return LoadInteger(s__RiseAndFall_instance_storage, GetHandleId(u), 0) != 0

    endfunction
   
    function s__RiseAndFall_destroy takes integer this returns nothing



            call FlushChildHashtable(s__RiseAndFall_instance_storage, GetHandleId(s__RiseAndFall_u[this]))

        set s__RiseAndFall_u[this]=null
        call s__IntegerList_removeElem(s__RiseAndFall_list,this)
        if (s__IntegerList_count[(s__RiseAndFall_list)]) == 0 then // INLINED!!
            call PauseTimer(s__RiseAndFall_clock)
        endif
        call s__RiseAndFall_deallocate(this)
    endfunction 
   
    function s__RiseAndFall_update takes nothing returns nothing
        local integer this
        local integer node= s__IntegerList_first[s__RiseAndFall_list]
        local integer nodeNext
        local real s
        local real hs
       
        loop
            exitwhen node == 0
            set nodeNext=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
            set this=(LoadInteger(Table__ht, (((((node))))), (- 1))) // INLINED!!
           
            set s__RiseAndFall_progress[this]=s__RiseAndFall_progress[this] + s__RiseAndFall_speed[this]
           
            if s__RiseAndFall_progress[this] >= 1. then
                call SetUnitFlyHeight(s__RiseAndFall_u[this], s__RiseAndFall_heightEnd[this], 0.)
                if s__RiseAndFall_isAirborne[this] then
                    set hs=s__RiseAndFall_heightStart[this]
                    set s__RiseAndFall_heightStart[this]=s__RiseAndFall_heightEnd[this]
                    set s__RiseAndFall_heightEnd[this]=hs
                    set s__RiseAndFall_progress[this]=0.
                else
                    call s__RiseAndFall_destroy(this)
                endif
            else
               
                set s=s__RiseAndFall_progress[this]
                if s__RiseAndFall_useSmoothstep[this] then
                    call SetUnitFlyHeight(s__RiseAndFall_u[this], s__RiseAndFall_heightStart[this] + ( s__RiseAndFall_heightEnd[this] - s__RiseAndFall_heightStart[this] ) * ( s * s * s * ( s * ( s * 6 - 15 ) + 10 ) ), 0.) //smoothstep
                else
                    call SetUnitFlyHeight(s__RiseAndFall_u[this], s__RiseAndFall_heightStart[this] + ( s__RiseAndFall_heightEnd[this] - s__RiseAndFall_heightStart[this] ) * ( s * s ), 0.)
                endif
            endif
       
            set node=nodeNext
        endloop
    endfunction
   
    function s__RiseAndFall_end takes integer this,real endZ,real spd returns nothing
        local real height= GetUnitFlyHeight(s__RiseAndFall_u[this])
        if endZ != height then
            set s__RiseAndFall_heightStart[this]=height
            set s__RiseAndFall_heightEnd[this]=endZ
            set s__RiseAndFall_progress[this]=0.
            set s__RiseAndFall_isAirborne[this]=false
            set s__RiseAndFall_useSmoothstep[this]=false
            if spd == 0. then // divide by zero prevention
                set spd=600.
            endif
            set s__RiseAndFall_speed[this]=RiseAndFall__INTERVAL / ( ( s__RiseAndFall_heightStart[this] - s__RiseAndFall_heightEnd[this] ) / spd )
        else
            call s__RiseAndFall_destroy(this)
        endif
    endfunction 
   
    function s__RiseAndFall_createEx takes unit u,real currentZ,real endZ,real duration,boolean smooth,boolean airborn returns integer
        local integer this= (LoadInteger(s__RiseAndFall_instance_storage, GetHandleId((u)), 0)) // INLINED!!
       
        if this != 0 then
            call s__RiseAndFall_end(this,GetUnitFlyHeight(u) , 1.)
        endif
       
        set this=s__RiseAndFall__allocate()
        set s__RiseAndFall_u[this]=u
        set s__RiseAndFall_heightStart[this]=currentZ
        set s__RiseAndFall_heightEnd[this]=endZ
        set s__RiseAndFall_progress[this]=0.
        set s__RiseAndFall_speed[this]=RiseAndFall__INTERVAL / duration
        set s__RiseAndFall_useSmoothstep[this]=smooth
        set s__RiseAndFall_isAirborne[this]=airborn
       



            call SaveInteger(s__RiseAndFall_instance_storage, GetHandleId(u), 0, this)

       
        call s__IntegerList_push(s__RiseAndFall_list,this)
        if (s__IntegerList_count[(s__RiseAndFall_list)]) == 1 then // INLINED!!
            call TimerStart(s__RiseAndFall_clock, RiseAndFall__INTERVAL, true, function s__RiseAndFall_update)
        endif
       
        return this
    endfunction
   
    function s__RiseAndFall_create takes unit u,real currentZ,real endZ,real duration,boolean smooth returns integer
        return s__RiseAndFall_createEx(u , currentZ , endZ , duration , smooth , false)
    endfunction
   
    function s__RiseAndFall_createAirborne takes unit u,real currentZ,real endZ,real duration returns integer
        return s__RiseAndFall_createEx(u , currentZ , endZ , duration , true , true)
    endfunction
   
//Implemented from module RiseAndFall__Init:
    function s__RiseAndFall_RiseAndFall__Init___onInit takes nothing returns nothing

            set s__RiseAndFall_instance_storage=InitHashtable()

        set s__RiseAndFall_list=s__IntegerList_create()
    endfunction


//library RiseAndFall ends
//library TimedHandles:



    // here you may add or remove handle types
//textmacro instance: TIMEDHANDLES("effect", "DestroyEffect")
        
        
            




            
            function s__effectTimed_destroy takes integer this returns nothing
                call DestroyEffect(s__effectTimed_effect_var[this])
                set s__effectTimed_effect_var[this]=null
                

                    set s__effectTimed_elapsed[this]=0

                
                call s__effectTimed_deallocate(this)
            endfunction
            
            function s__effectTimed_remove takes nothing returns nothing

                    local integer i= 0
                    local integer this
                    loop
                        exitwhen i > s__effectTimed_index
                        set this=s__effectTimed_instance[i]
                        set s__effectTimed_elapsed[this]=s__effectTimed_elapsed[this] + TimedHandles__UPDATE_PERIOD
                        if ( s__effectTimed_elapsed[this] >= s__effectTimed_duration[this] ) then
                            set s__effectTimed_instance[i]=s__effectTimed_instance[s__effectTimed_index]
                            set i=i - 1
                            set s__effectTimed_index=s__effectTimed_index - 1
                            call s__effectTimed_destroy(this)
                            if ( s__effectTimed_index == - 1 ) then
                                call PauseTimer(s__effectTimed_timer)
                            endif
                        endif
                        set i=i + 1
                    endloop













            endfunction
            
            function s__effectTimed_create takes effect h,real timeout returns integer
                local integer this= s__effectTimed__allocate()
                

                    set s__effectTimed_index=s__effectTimed_index + 1
                    set s__effectTimed_instance[s__effectTimed_index]=this
                    if ( s__effectTimed_index == 0 ) then
                        call TimerStart(s__effectTimed_timer, TimedHandles__UPDATE_PERIOD, true, function s__effectTimed_remove)
                    endif
                    set s__effectTimed_duration[this]=timeout










                
                set s__effectTimed_effect_var[this]=h
                
                return this
            endfunction
            
        
        function DestroyEffectTimed takes effect h,real duration returns integer
            return s__effectTimed_create(h , duration)
        endfunction

//end of: TIMEDHANDLES("effect", "DestroyEffect")
//textmacro instance: TIMEDHANDLES("lightning", "DestroyLightning")
        
        
            




            
            function s__lightningTimed_destroy takes integer this returns nothing
                call DestroyLightning(s__lightningTimed_lightning_var[this])
                set s__lightningTimed_lightning_var[this]=null
                

                    set s__lightningTimed_elapsed[this]=0

                
                call s__lightningTimed_deallocate(this)
            endfunction
            
            function s__lightningTimed_remove takes nothing returns nothing

                    local integer i= 0
                    local integer this
                    loop
                        exitwhen i > s__lightningTimed_index
                        set this=s__lightningTimed_instance[i]
                        set s__lightningTimed_elapsed[this]=s__lightningTimed_elapsed[this] + TimedHandles__UPDATE_PERIOD
                        if ( s__lightningTimed_elapsed[this] >= s__lightningTimed_duration[this] ) then
                            set s__lightningTimed_instance[i]=s__lightningTimed_instance[s__lightningTimed_index]
                            set i=i - 1
                            set s__lightningTimed_index=s__lightningTimed_index - 1
                            call s__lightningTimed_destroy(this)
                            if ( s__lightningTimed_index == - 1 ) then
                                call PauseTimer(s__lightningTimed_timer)
                            endif
                        endif
                        set i=i + 1
                    endloop













            endfunction
            
            function s__lightningTimed_create takes lightning h,real timeout returns integer
                local integer this= s__lightningTimed__allocate()
                

                    set s__lightningTimed_index=s__lightningTimed_index + 1
                    set s__lightningTimed_instance[s__lightningTimed_index]=this
                    if ( s__lightningTimed_index == 0 ) then
                        call TimerStart(s__lightningTimed_timer, TimedHandles__UPDATE_PERIOD, true, function s__lightningTimed_remove)
                    endif
                    set s__lightningTimed_duration[this]=timeout










                
                set s__lightningTimed_lightning_var[this]=h
                
                return this
            endfunction
            
        
        function DestroyLightningTimed takes lightning h,real duration returns integer
            return s__lightningTimed_create(h , duration)
        endfunction

//end of: TIMEDHANDLES("lightning", "DestroyLightning")
//textmacro instance: TIMEDHANDLES("weathereffect", "RemoveWeatherEffect")
        
        
            




            
            function s__weathereffectTimed_destroy takes integer this returns nothing
                call RemoveWeatherEffect(s__weathereffectTimed_weathereffect_var[this])
                set s__weathereffectTimed_weathereffect_var[this]=null
                

                    set s__weathereffectTimed_elapsed[this]=0

                
                call s__weathereffectTimed_deallocate(this)
            endfunction
            
            function s__weathereffectTimed_remove takes nothing returns nothing

                    local integer i= 0
                    local integer this
                    loop
                        exitwhen i > s__weathereffectTimed_index
                        set this=s__weathereffectTimed_instance[i]
                        set s__weathereffectTimed_elapsed[this]=s__weathereffectTimed_elapsed[this] + TimedHandles__UPDATE_PERIOD
                        if ( s__weathereffectTimed_elapsed[this] >= s__weathereffectTimed_duration[this] ) then
                            set s__weathereffectTimed_instance[i]=s__weathereffectTimed_instance[s__weathereffectTimed_index]
                            set i=i - 1
                            set s__weathereffectTimed_index=s__weathereffectTimed_index - 1
                            call s__weathereffectTimed_destroy(this)
                            if ( s__weathereffectTimed_index == - 1 ) then
                                call PauseTimer(s__weathereffectTimed_timer)
                            endif
                        endif
                        set i=i + 1
                    endloop













            endfunction
            
            function s__weathereffectTimed_create takes weathereffect h,real timeout returns integer
                local integer this= s__weathereffectTimed__allocate()
                

                    set s__weathereffectTimed_index=s__weathereffectTimed_index + 1
                    set s__weathereffectTimed_instance[s__weathereffectTimed_index]=this
                    if ( s__weathereffectTimed_index == 0 ) then
                        call TimerStart(s__weathereffectTimed_timer, TimedHandles__UPDATE_PERIOD, true, function s__weathereffectTimed_remove)
                    endif
                    set s__weathereffectTimed_duration[this]=timeout










                
                set s__weathereffectTimed_weathereffect_var[this]=h
                
                return this
            endfunction
            
        
        function RemoveWeatherEffectTimed takes weathereffect h,real duration returns integer
            return s__weathereffectTimed_create(h , duration)
        endfunction

//end of: TIMEDHANDLES("weathereffect", "RemoveWeatherEffect")
//textmacro instance: TIMEDHANDLES("item", "RemoveItem")
        
        
            




            
            function s__itemTimed_destroy takes integer this returns nothing
                call RemoveItem(s__itemTimed_item_var[this])
                set s__itemTimed_item_var[this]=null
                

                    set s__itemTimed_elapsed[this]=0

                
                call s__itemTimed_deallocate(this)
            endfunction
            
            function s__itemTimed_remove takes nothing returns nothing

                    local integer i= 0
                    local integer this
                    loop
                        exitwhen i > s__itemTimed_index
                        set this=s__itemTimed_instance[i]
                        set s__itemTimed_elapsed[this]=s__itemTimed_elapsed[this] + TimedHandles__UPDATE_PERIOD
                        if ( s__itemTimed_elapsed[this] >= s__itemTimed_duration[this] ) then
                            set s__itemTimed_instance[i]=s__itemTimed_instance[s__itemTimed_index]
                            set i=i - 1
                            set s__itemTimed_index=s__itemTimed_index - 1
                            call s__itemTimed_destroy(this)
                            if ( s__itemTimed_index == - 1 ) then
                                call PauseTimer(s__itemTimed_timer)
                            endif
                        endif
                        set i=i + 1
                    endloop













            endfunction
            
            function s__itemTimed_create takes item h,real timeout returns integer
                local integer this= s__itemTimed__allocate()
                

                    set s__itemTimed_index=s__itemTimed_index + 1
                    set s__itemTimed_instance[s__itemTimed_index]=this
                    if ( s__itemTimed_index == 0 ) then
                        call TimerStart(s__itemTimed_timer, TimedHandles__UPDATE_PERIOD, true, function s__itemTimed_remove)
                    endif
                    set s__itemTimed_duration[this]=timeout










                
                set s__itemTimed_item_var[this]=h
                
                return this
            endfunction
            
        
        function RemoveItemTimed takes item h,real duration returns integer
            return s__itemTimed_create(h , duration)
        endfunction

//end of: TIMEDHANDLES("item", "RemoveItem")
//textmacro instance: TIMEDHANDLES("unit", "RemoveUnit")
        
        
            




            
            function s__unitTimed_destroy takes integer this returns nothing
                call RemoveUnit(s__unitTimed_unit_var[this])
                set s__unitTimed_unit_var[this]=null
                

                    set s__unitTimed_elapsed[this]=0

                
                call s__unitTimed_deallocate(this)
            endfunction
            
            function s__unitTimed_remove takes nothing returns nothing

                    local integer i= 0
                    local integer this
                    loop
                        exitwhen i > s__unitTimed_index
                        set this=s__unitTimed_instance[i]
                        set s__unitTimed_elapsed[this]=s__unitTimed_elapsed[this] + TimedHandles__UPDATE_PERIOD
                        if ( s__unitTimed_elapsed[this] >= s__unitTimed_duration[this] ) then
                            set s__unitTimed_instance[i]=s__unitTimed_instance[s__unitTimed_index]
                            set i=i - 1
                            set s__unitTimed_index=s__unitTimed_index - 1
                            call s__unitTimed_destroy(this)
                            if ( s__unitTimed_index == - 1 ) then
                                call PauseTimer(s__unitTimed_timer)
                            endif
                        endif
                        set i=i + 1
                    endloop













            endfunction
            
            function s__unitTimed_create takes unit h,real timeout returns integer
                local integer this= s__unitTimed__allocate()
                

                    set s__unitTimed_index=s__unitTimed_index + 1
                    set s__unitTimed_instance[s__unitTimed_index]=this
                    if ( s__unitTimed_index == 0 ) then
                        call TimerStart(s__unitTimed_timer, TimedHandles__UPDATE_PERIOD, true, function s__unitTimed_remove)
                    endif
                    set s__unitTimed_duration[this]=timeout










                
                set s__unitTimed_unit_var[this]=h
                
                return this
            endfunction
            
        
        function RemoveUnitTimed takes unit h,real duration returns integer
            return s__unitTimed_create(h , duration)
        endfunction

//end of: TIMEDHANDLES("unit", "RemoveUnit")
//textmacro instance: TIMEDHANDLES("ubersplat", "DestroyUbersplat")
        
        
            




            
            function s__ubersplatTimed_destroy takes integer this returns nothing
                call DestroyUbersplat(s__ubersplatTimed_ubersplat_var[this])
                set s__ubersplatTimed_ubersplat_var[this]=null
                

                    set s__ubersplatTimed_elapsed[this]=0

                
                call s__ubersplatTimed_deallocate(this)
            endfunction
            
            function s__ubersplatTimed_remove takes nothing returns nothing

                    local integer i= 0
                    local integer this
                    loop
                        exitwhen i > s__ubersplatTimed_index
                        set this=s__ubersplatTimed_instance[i]
                        set s__ubersplatTimed_elapsed[this]=s__ubersplatTimed_elapsed[this] + TimedHandles__UPDATE_PERIOD
                        if ( s__ubersplatTimed_elapsed[this] >= s__ubersplatTimed_duration[this] ) then
                            set s__ubersplatTimed_instance[i]=s__ubersplatTimed_instance[s__ubersplatTimed_index]
                            set i=i - 1
                            set s__ubersplatTimed_index=s__ubersplatTimed_index - 1
                            call s__ubersplatTimed_destroy(this)
                            if ( s__ubersplatTimed_index == - 1 ) then
                                call PauseTimer(s__ubersplatTimed_timer)
                            endif
                        endif
                        set i=i + 1
                    endloop













            endfunction
            
            function s__ubersplatTimed_create takes ubersplat h,real timeout returns integer
                local integer this= s__ubersplatTimed__allocate()
                

                    set s__ubersplatTimed_index=s__ubersplatTimed_index + 1
                    set s__ubersplatTimed_instance[s__ubersplatTimed_index]=this
                    if ( s__ubersplatTimed_index == 0 ) then
                        call TimerStart(s__ubersplatTimed_timer, TimedHandles__UPDATE_PERIOD, true, function s__ubersplatTimed_remove)
                    endif
                    set s__ubersplatTimed_duration[this]=timeout










                
                set s__ubersplatTimed_ubersplat_var[this]=h
                
                return this
            endfunction
            
        
        function DestroyUbersplatTimed takes ubersplat h,real duration returns integer
            return s__ubersplatTimed_create(h , duration)
        endfunction

//end of: TIMEDHANDLES("ubersplat", "DestroyUbersplat")
    
    // Do not edit below this line
    
    

//library TimedHandles ends
//library VesselUpgrade:

    function RogueAndroidEvolution takes nothing returns nothing
        local integer id= GetPlayerId(udg_RogueAndroid) + 1
        local unit r=udg_Playerhero[id]
        local real x= GetUnitX(r)
        local real y= GetUnitY(r)
        local integer i=0
    
        //Boolean flag to not re-evolve while evolving ;)
        set udg_RogueAndroidIsUpgrading=true
    
        //Add Invulnerability to rogueAndroidUnit
        call UnitAddAbility(r, 'Avul')
    
        //Play attack animation
        call SetUnitAnimation(r, "attack")
    
        call PauseUnit(r, true)
    
        //call SetUnitTimeScalePercent(rogueAndroidUnit, 0.2)//No idea, probably animation.
        //call SetUnitPositionLoc(rogueAndroidUnit, b)
   
        set udg_RogueAndroidEvolveVisualEffect=AddSpecialEffect("Rogue Droid Evolve2.mdx", x, y)
    
        //Calls the VFX every 0.5 seconds, and after X ticks, it by itself calls the rogue android evolution finish.
        call TimerStart(udg_RogueAndroidEvolveTimer, 0.5, true, function sc__VesselUpgradeFinish_Done)
        
        set r=null

    endfunction

    function IterateCorpsesDetermineEvolution takes nothing returns nothing
        local unit u= GetEnumUnit()
        local integer id= GetPlayerId(udg_RogueAndroid) + 1
        local real x
        local real y
        
        //If picked unit is a corpse
        if GetUnitAbilityLevel(u, 'A077') == 1 and GetUnitAbilityLevel(u, 'A07P') == 0 then
        
            set x=GetUnitX(udg_Playerhero[id])
            set y=GetUnitY(udg_Playerhero[id])
            
            if IsUnitInRangeXY(u, x, y, 140) then
                //Everything up to here is filtering, so pure evolution logic happens below, without checking for corpses or chips or other possible edge-use cases.
                call RogueAndroidEvolution()
            elseif IsUnitInRangeXY(u, x, y, 300.00) then
                call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffffba00No cyborg can inject his chip properly from such a distance, please stand above your target corpse.")
            endif
        
        //else if its android corpse, notify to the player he cant chip it for obvious reasons
        elseif GetUnitAbilityLevel(u, 'A07P') == 1 then
        
            set x=GetUnitX(udg_Playerhero[id])
            set y=GetUnitY(udg_Playerhero[id])
        
            if IsUnitInRangeXY(u, x, y, 140) then
                call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffff0000This corpse seems to be of a machine. No flesh, no use.")
            endif
        endif
        
        set u=null
    endfunction

    function VesselUpgrade__CorpseGrab takes nothing returns nothing
        local integer id= GetPlayerId(udg_RogueAndroid) + 1
        
        if ( not udg_RogueAndroidIsUpgrading ) and UnitAlive(udg_Playerhero[id]) and GetUnitTypeId(udg_Playerhero[id]) != 'h057' then
            //Pick all corpses nearby
            call GroupEnumUnitsOfPlayer(TempEnumGroup, Player(PLAYER_NEUTRAL_PASSIVE), Condition(function IterateCorpsesDetermineEvolution))
        endif
    endfunction

//===========================================================================
    function VesselUpgrade_VesselInit takes player p returns nothing
        call RegisterPlayerEvent(p , EVENT_PLAYER_END_CINEMATIC , function VesselUpgrade__CorpseGrab)
        set udg_RogueAndroidEvolveTimer=(NewTimerEx(0)) // INLINED!!
    endfunction

//library VesselUpgrade ends
//library chatTest:


function chatTest__easeInOutSine takes real t returns real

    return - ( Cos(bj_PI * t) - 1. ) / 2.

endfunction

function chatTest__frameFix takes nothing returns nothing
local real width= BlzGetLocalClientWidth()
local real height= BlzGetLocalClientHeight()

    call BlzFrameSetSize(BlzGetFrameByName("Main", 0), 0.6 * width / height, 0.6)

endfunction

function chatTest__convertTime takes integer time returns string
local integer Quotient= time
local string minutes= I2S(Quotient / 60)
local string seconds= I2S(Quotient - ( Quotient / 60 ) * 60)

    if StringLength(minutes) < 2 then
        set minutes="0" + minutes
    endif
    if StringLength(seconds) < 2 then
        set seconds="0" + seconds
    endif
    
    return "[" + minutes + ":" + seconds + "]"

endfunction

function chatTest__updateGameTime takes nothing returns nothing

    set chatTest_gameTime=chatTest_gameTime + 1
    call chatTest__frameFix()

endfunction

function chatTest_getMessageSender takes integer messageID returns string

    return chatTest_playerColor[chatTest__messageSender[messageID]] + GetPlayerName(Player(chatTest__messageSender[messageID]))

endfunction

function chatTest_getMessageContent takes integer messageID returns string

    return chatTest__messageContent[messageID]

endfunction

function chatTest_getMessageType takes integer messageID returns string

    if chatTest__messageType[messageID] == 0 then
        return chatTest__ALL_PLAYERS_MESSAGE_TYPE
    elseif chatTest__messageType[messageID] == 1 then
        return chatTest__ALLIED_PLAYERS_MESSAGE_TYPE
    endif

    return "null"

endfunction

function chatTest_getMessageReceivers takes integer messageID returns string
local integer pID= 23
local integer receivers= chatTest__messageReceivers[messageID]
local string list= ""

    if receivers == 0 then
        return "null"
    endif

    loop
        exitwhen pID < 0 or receivers == 0
            if GetPlayerController(Player(pID)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(pID)) == PLAYER_SLOT_STATE_PLAYING then
                if receivers - R2I(1 * Pow(2, pID)) >= 0 then // check if player is supposed to receive the message
                    set receivers=receivers - R2I(1 * Pow(2, pID))
                    if list == "" then
                        set list=I2S(pID)
                    else
                        set list=list + ", " + I2S(pID)
                    endif
                endif
            endif
        set pID=pID - 1
    endloop

    return list

endfunction

function chatTest_getMessageTime takes integer messageID returns string

    return chatTest__convertTime(chatTest__messageTime[messageID])

endfunction

function chatTest__sizeCheck takes string message returns boolean

    if StringLength(message) > chatTest__MESSAGE_LENGTH_LIMIT then
        return false
    endif

    return true

endfunction

function chatTest__hideMessage takes nothing returns nothing
local integer HandleID= GetHandleId(GetExpiredTimer())
local integer current= LoadInteger(chatTest__Hashtable, HandleID, chatTest__FRAME_HASH)
local integer prev= chatTest__previousFrame[current]
local integer duration= LoadInteger(chatTest__Hashtable, HandleID, chatTest__DURATION_HASH) + 1

    call SaveInteger(chatTest__Hashtable, HandleID, chatTest__DURATION_HASH, duration)
    if chatTest__asyncVisibility[current] then // following stuff is all async, and only happens if player was meant to see the message
        if ( prev == 0 or not chatTest__frameInUse[prev] or chatTest__currentY[prev] >= chatTest__FONT_SIZE + 0.005 ) and chatTest__frameAlpha[current] < 0 then
            call BlzFrameSetPoint(chatTest__frameMessage[current], FRAMEPOINT_BOTTOMLEFT, chatTest__frameMessagePanel, FRAMEPOINT_BOTTOMLEFT, 0., 0.)
            set chatTest__frameAlpha[current]=0
        endif
        if chatTest__frameAlpha[current] >= 0 and chatTest__frameAlpha[current] < 255 and duration < chatTest__MESSAGE_DURATION then
            set chatTest__frameAlpha[current]=chatTest__frameAlpha[current] + 3
            call BlzFrameSetAlpha(chatTest__frameMessage[current], chatTest__frameAlpha[current])
        elseif duration > chatTest__MESSAGE_DURATION and chatTest__frameAlpha[current] > 0 then
            set chatTest__frameAlpha[current]=chatTest__frameAlpha[current] - 3
            call BlzFrameSetAlpha(chatTest__frameMessage[current], chatTest__frameAlpha[current])
        endif
        if chatTest__targetY[current] > chatTest__currentY[current] and chatTest__frameAlpha[current] >= 0 then
            set chatTest__timeSinceStart[current]=chatTest__timeSinceStart[current] + 1
            if chatTest__timeSinceStart[current] < 20 then
                set chatTest__currentY[current]=chatTest__startY[current] + ( chatTest__targetY[current] - chatTest__startY[current] ) * (- ( Cos(bj_PI * ((chatTest__timeSinceStart[current] / 20.)*1.0)) - 1. ) / 2.) // INLINED!!
            else
                set chatTest__currentY[current]=chatTest__targetY[current]
            endif
            call BlzFrameSetPoint(chatTest__frameMessage[current], FRAMEPOINT_BOTTOMLEFT, chatTest__frameMessagePanel, FRAMEPOINT_BOTTOMLEFT, 0., chatTest__currentY[current])
        endif
    endif

    if duration > chatTest__MESSAGE_DURATION + 100 then
        set chatTest__frameInUse[current]=false
        set chatTest__asyncVisibility[current]=false
        call BlzFrameSetVisible(chatTest__frameMessage[current], false)
        set chatTest__currentY[current]=0.
        set chatTest__frameAlpha[current]=- 1
        set chatTest__timeSinceStart[current]=0
        call FlushChildHashtable(chatTest__Hashtable, GetHandleId(GetExpiredTimer()))
        call PauseTimer(GetExpiredTimer())
    endif

endfunction

// Generates the message frontend in following shematic: [messageType][timeStamp] :icon: Playername: message
function chatTest_generateMessage takes integer time,string messagetype,string messageIcon,string message,integer receivers returns nothing
local integer current= 1
local integer HandleID
local integer prev= 0
local string timestamp= chatTest__convertTime(time)
local integer pID
    
    loop
        exitwhen not chatTest__frameInUse[chatTest__Iterator]
            if chatTest__Iterator > chatTest__MAX_MESSAGES then
                set chatTest__Iterator=1
			else
				set chatTest__Iterator=chatTest__Iterator + 1
            endif
    endloop

    //call BJDebugMsg("Expected Time: " + I2S(time))
    //call BJDebugMsg("Expected Type: " + messagetype)
    //call BJDebugMsg("Expected Icon: " + messageIcon)
    //call BJDebugMsg("Expected Content: " + message)
    //call BJDebugMsg("Expected Receivers: " + I2S(receivers))

    // no reason to do these async, since only frameMessage visiblity matters
    call BlzFrameSetText(chatTest__frameMessageType[chatTest__Iterator], messagetype)
    call BlzFrameSetText(chatTest__frameMessageTimeStamp[chatTest__Iterator], timestamp)
    call BlzFrameSetText(chatTest__frameMessageText[chatTest__Iterator], message)
    if messageIcon != "" and messageIcon != null then
        call BlzFrameSetTexture(chatTest__frameMessageIcon[chatTest__Iterator], messageIcon, 0, true)
        call BlzFrameSetVisible(chatTest__frameMessageIconContainer[chatTest__Iterator], true)
        call BlzFrameSetPoint(chatTest__frameMessageTextContainer[chatTest__Iterator], FRAMEPOINT_LEFT, chatTest__frameMessageIconContainer[chatTest__Iterator], FRAMEPOINT_RIGHT, 0.003, 0.)
    else
        call BlzFrameSetVisible(chatTest__frameMessageIconContainer[chatTest__Iterator], false)
        call BlzFrameSetPoint(chatTest__frameMessageTextContainer[chatTest__Iterator], FRAMEPOINT_LEFT, chatTest__frameMessageTimeStampContainer[chatTest__Iterator], FRAMEPOINT_RIGHT, 0.003, 0.)
    endif

    set pID=23 // reverse order to be able to perform substraction check
    loop
        exitwhen pID < 0 or receivers == 0
            if GetPlayerController(Player(pID)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(pID)) == PLAYER_SLOT_STATE_PLAYING then
                if receivers - R2I(1 * Pow(2, pID)) >= 0 then // check if player is supposed to receive the message
                    set receivers=receivers - R2I(1 * Pow(2, pID)) // substract value from receiver panel
                    if GetLocalPlayer() == Player(pID) then
                        call BlzFrameSetVisible(chatTest__frameMessage[chatTest__Iterator], true)
                        set chatTest__asyncVisibility[chatTest__Iterator]=true // async
                        set chatTest__previousFrame[chatTest__Iterator]=chatTest__tempPrev // async
                        set prev=chatTest__tempPrev // local async
                        set chatTest__tempPrev=chatTest__Iterator // async
                        set current=chatTest__Iterator // local async
                        loop
                            exitwhen prev == 0
                                if prev == current then
                                    set chatTest__previousFrame[current]=0 // async
                                    set prev=0 // local async
                                elseif chatTest__frameInUse[prev] and chatTest__asyncVisibility[prev] then
                                    set chatTest__targetY[prev]=chatTest__targetY[prev] + chatTest__FONT_SIZE + 0.005 // async
                                    set chatTest__startY[prev]=chatTest__currentY[prev] // async
                                    set chatTest__timeSinceStart[prev]=0 // async
                                    set current=prev // local async
                                    set prev=chatTest__previousFrame[current] // local async
                                else
                                    set prev=0 // local async
                                endif
                        endloop
                    endif
                endif
            endif
        set pID=pID - 1
    endloop

    set chatTest__frameInUse[chatTest__Iterator]=true

    set HandleID=GetHandleId(chatTest__timerMessage[chatTest__Iterator])
    call SaveInteger(chatTest__Hashtable, HandleID, chatTest__FRAME_HASH, chatTest__Iterator)
    call TimerStart(chatTest__timerMessage[chatTest__Iterator], 0.01, true, function chatTest__hideMessage)

endfunction

function chatTest__sendPlayerMessage takes integer messageID,integer pid returns nothing
local string visualMessageType= chatTest_getMessageType(messageID)
local string sender= chatTest_getMessageSender(messageID)
local string message= sender + "|r: " + (chatTest__messageContent[(messageID)]) // INLINED!!
local integer receivers= chatTest__messageReceivers[messageID]
local integer time= chatTest__messageTime[messageID]
local string icon= chatTest_playerIcon[chatTest__messageSender[messageID]]
local integer s= GetSectorMain(udg_Playerhero[pid + 1] , 0 , 0)


if pid != - 1 then
    set receivers=R2I(1 * Pow(2, pid))
elseif (LoadInteger(Table__ht, (GroupChat), (s + - 50000))) == - 1 then // INLINED!!
    set receivers=sc__GenTimer_StatMess(s)
endif

call chatTest_generateMessage(time , visualMessageType , icon , message , receivers)

endfunction

//Implemented from module Alloc:
        function s__chatTest__TimedMessData_allocate takes nothing returns integer
            return Alloc_Allocate(si__chatTest__TimedMessData)
        endfunction
        function s__chatTest__TimedMessData_deallocate takes integer this returns nothing
            call Alloc_Deallocate(si__chatTest__TimedMessData , this)
        endfunction
        
        
        
        function s__chatTest__TimedMessData_destroy takes integer this returns nothing
            call Alloc_Deallocate(si__chatTest__TimedMessData , (this)) // INLINED!!
        endfunction
        
        function s__chatTest__TimedMessData_EndMessageTime takes nothing returns nothing
            local timer t= GetExpiredTimer()
            local integer this= (s__TimerUtilsEx__Data_data[(GetHandleId((t))) - 0x100000]) // INLINED!!
            
            if (LoadInteger(Table__ht, (GroupChat), (( s__chatTest__TimedMessData_pid[this] + 1 ) * - 10))) == 0 then // INLINED!!
            
                if (LoadInteger(Table__ht, (GroupChat), (( s__chatTest__TimedMessData_pid[this] + 1 ) * - 1000))) != - 1 then // INLINED!!
                    set s__chatTest__TimedMessData_pid[this]=- 1
                endif
                    
                call chatTest__sendPlayerMessage(s__chatTest__TimedMessData_messid[this] , s__chatTest__TimedMessData_pid[this])
            endif
            
            call Alloc_Deallocate(si__chatTest__TimedMessData , ((this))) // INLINED!!
            
            call ReleaseTimer(t)
            
            set t=null
                        
        endfunction
        
        function s__chatTest__TimedMessData_create takes integer pid,integer messid returns integer
            local integer this= (Alloc_Allocate(si__chatTest__TimedMessData)) // INLINED!!
            local timer t
            
            set s__chatTest__TimedMessData_pid[this]=pid
            set s__chatTest__TimedMessData_messid[this]=messid
            
            set t=NewTimerEx(this)
            
            call TimerStart(t, 0.01, false, function s__chatTest__TimedMessData_EndMessageTime)
            
            set t=null
            
            return this
            
        endfunction
        

function chatTest__syncPlayerMessage takes nothing returns nothing
local integer pID= S2I(SubString(BlzGetTriggerSyncPrefix(), 12, StringLength(BlzGetTriggerSyncPrefix())))
local string Data= BlzGetTriggerSyncData()
local integer messageID= S2I(SubString(Data, 0, StringLength(Data) - 11))
local integer messageReceived= S2I(SubString(Data, StringLength(Data) - 1, StringLength(Data)))
local integer allChatSyncValue
local integer pi= pID
local integer d

    //call BJDebugMsg("Player " + I2S(pID) + " synched")
    set chatTest__syncValue[messageID]=chatTest__syncValue[messageID] - R2I(1 * Pow(2, pID))
    //call BJDebugMsg("New Sync Value: " + I2S(syncValue[messageID]))
    set chatTest__messageReceivers[messageID]=chatTest__messageReceivers[messageID] + R2I(messageReceived * ( Pow(2, pID) )) // geometric sequence to tell which players received the message
    //call BJDebugMsg("New Receivers Value: " + I2S(messageReceivers[messageID]))
    if chatTest__syncValue[messageID] == 0 then
        set allChatSyncValue=0
        set pID=0
        loop
            exitwhen pID > 23
                if GetPlayerController(Player(pID)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(pID)) == PLAYER_SLOT_STATE_PLAYING then
                    set allChatSyncValue=allChatSyncValue + R2I(1 * Pow(2, pID)) // calculate expected partial sum of all players
                endif
            set pID=pID + 1
        endloop
        if chatTest__messageReceivers[messageID] == allChatSyncValue then // compare syncValue partial sum with messageReceivers partial sum
            set chatTest__messageType[messageID]=0 // All Chat
        else
            set chatTest__messageType[messageID]=1 // Allies Chat
        endif
        
        //delays for a short period to allow time for the group index to valid
        call s__chatTest__TimedMessData_create(pi , messageID)
        
    endif

endfunction

function chatTest__processPlayerMessage takes integer sender,string message,string log returns integer
local integer messageID
local integer pID= 0

    set messageID=chatTest__messageIterator
    if chatTest__messageIterator < JASS_MAX_ARRAY_SIZE then
        set chatTest__messageIterator=chatTest__messageIterator + 1
    else
        set chatTest__messageIterator=0
    endif

    set chatTest__messageTime[messageID]=chatTest_gameTime
    set chatTest__messageSender[messageID]=sender
    set chatTest__messageContent[messageID]=message
    set chatTest__messageReceivers[messageID]=0
    set chatTest__syncValue[messageID]=0
    loop
        exitwhen pID > 23
            if GetPlayerController(Player(pID)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(pID)) == PLAYER_SLOT_STATE_PLAYING then
                set chatTest__syncValue[messageID]=chatTest__syncValue[messageID] + R2I(1 * Pow(2, pID)) // geometric sequence to tell the current sync status of each player
                if GetLocalPlayer() == Player(pID) then
                    if log != "" then
                        call BlzSendSyncData("New Message " + I2S(pID), I2S(messageID) + "_RECEIVED_1") // this way everyone receives a list of players that received the message
                    else
                        call BlzSendSyncData("New Message " + I2S(pID), I2S(messageID) + "_RECEIVED_0") // this way everyone receives a list of players that received the message
                    endif
                endif
            endif
        set pID=pID + 1
    endloop

    return messageID

endfunction
    
// This function sends out a message to one player as system message. (receiver is a player ID)
function chatTest_sendSystemMessage takes integer receiver,string message returns nothing
local string visualMessageType
local integer receivers

    if GetPlayerController(Player(receiver)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(receiver)) == PLAYER_SLOT_STATE_PLAYING then
        set visualMessageType=chatTest_SYSTEM_MESSAGE_TYPE
        set receivers=R2I(1 * Pow(2, receiver))
        call chatTest_generateMessage(chatTest_gameTime , visualMessageType , chatTest_systemIcon , message , receivers)
    endif
    
endfunction

// This function sends out a message to multiple player as system message. (receivers is a partial sum)
function chatTest_sendSystemMessageMultiple takes integer receivers,string message returns nothing
local string visualMessageType

    set visualMessageType=chatTest_SYSTEM_MESSAGE_TYPE
    call chatTest_generateMessage(chatTest_gameTime , visualMessageType , chatTest_systemIcon , message , receivers)
    
endfunction

// This function sends out a message to all players as system message.
function chatTest_print takes string message returns nothing
local integer receivers= 0
local integer pID= 0
local string visualMessageType= chatTest_SYSTEM_MESSAGE_TYPE

    loop
        exitwhen pID > 23
            if GetPlayerController(Player(pID)) == MAP_CONTROL_USER and GetPlayerSlotState(Player(pID)) == PLAYER_SLOT_STATE_PLAYING then
                set receivers=receivers + R2I(1 * Pow(2, pID)) // calculate expected partial sum of all players
            endif
        set pID=pID + 1
    endloop
    call chatTest_generateMessage(chatTest_gameTime , visualMessageType , chatTest_systemIcon , message , receivers)

endfunction

function chatTest__commandEvent takes integer pID,string message returns nothing
local integer i= 1
local string array argsv
local integer current= 0
local integer last= 0

    // Splits the message into a array to read message content as parameter
    loop
        exitwhen i > StringLength(message)
            if SubString(message, i - 1, i) == " " then
                set argsv[current]=SubString(message, last, i - 1)
                set last=i
                set current=current + 1
            elseif i == StringLength(message) then
                set argsv[current]=SubString(message, last, i)
            endif
        set i=i + 1
    endloop

    if argsv[0] == "caminfo" then
        call chatTest_sendSystemMessage(pID , "|cFFFFCC00Current Camera Information|r:")
        call chatTest_sendSystemMessage(pID , "|cFFFFCC00Targ|r = |cff00ffff( " + R2SW(GetCameraTargetPositionX(), 0, 0) + ", " + R2SW(GetCameraTargetPositionY(), 0, 0) + ", " + R2SW(GetCameraTargetPositionZ(), 0, 0) + " )|r")
        call chatTest_sendSystemMessage(pID , "|cFFFFCC00Dist|r = |cff00ffff" + R2SW(GetCameraField(CAMERA_FIELD_TARGET_DISTANCE), 0, 0) + "|r")
        call chatTest_sendSystemMessage(pID , "|cFFFFCC00FarZ|r = |cff00ffff" + R2SW(GetCameraField(CAMERA_FIELD_FARZ), 0, 0) + "|r")
        call chatTest_sendSystemMessage(pID , "|cFFFFCC00AoA|r = |cff00ffff" + R2SW(GetCameraField(CAMERA_FIELD_ANGLE_OF_ATTACK) * bj_RADTODEG, 0, 2) + "|r")
        call chatTest_sendSystemMessage(pID , "|cFFFFCC00FoV|r = |cff00ffff" + R2SW(GetCameraField(CAMERA_FIELD_FIELD_OF_VIEW) * bj_RADTODEG, 0, 2) + "|r")
        call chatTest_sendSystemMessage(pID , "|cFFFFCC00Roll|r = |cff00ffff" + R2SW(GetCameraField(CAMERA_FIELD_ROLL) * bj_RADTODEG, 0, 2) + "|r")
        call chatTest_sendSystemMessage(pID , "|cFFFFCC00Rot|r = |cff00ffff" + R2SW(GetCameraField(CAMERA_FIELD_ROTATION) * bj_RADTODEG, 0, 2) + "|r")
    elseif argsv[0] == "sysinfo" then
        call chatTest_sendSystemMessage(pID , "|cFFFFCC00System Version: |r|cff00ffff" + chatTest__CHAT_SYSTEM_VERSION + "|r")
        call chatTest_sendSystemMessage(pID , "|cFFFFCC00Command Syntax: |r|cff00ffff" + chatTest__COMMAND_SYNTAX + "|r")
        call chatTest_sendSystemMessage(pID , "|cFFFFCC00System Messages: |r|cff00ffff" + chatTest_SYSTEM_MESSAGE_TYPE + "|r")
        call chatTest_sendSystemMessage(pID , "|cFFFFCC00All Player Messages: |r|cff00ffff" + chatTest__ALL_PLAYERS_MESSAGE_TYPE + "|r")
        call chatTest_sendSystemMessage(pID , "|cFFFFCC00Allied Players Messages: |r|cff00ffff" + chatTest__ALLIED_PLAYERS_MESSAGE_TYPE + "|r")
        call chatTest_sendSystemMessage(pID , "|cFFFFCC00Message Length Limit: |r|cff00ffff" + I2S(chatTest__MESSAGE_LENGTH_LIMIT) + "|r")
    elseif argsv[0] == "message" then
        set i=S2I(argsv[1])
        if chatTest__messageContent[i] != null then
            call chatTest_sendSystemMessage(pID , "|cFFFFCC00Message Sender: |r|cff00ffff" + chatTest_getMessageSender(i) + "|r")
            call chatTest_sendSystemMessage(pID , "|cFFFFCC00Message Content: |r|cff00ffff" + (chatTest__messageContent[(i)]) + "|r") // INLINED!!
            call chatTest_sendSystemMessage(pID , "|cFFFFCC00Message Time: |r|cff00ffff" + (chatTest__convertTime(chatTest__messageTime[(i)])) + "|r") // INLINED!!
            call chatTest_sendSystemMessage(pID , "|cFFFFCC00Message Receivers: |r|cff00ffff" + chatTest_getMessageReceivers(i) + "|r")
            call chatTest_sendSystemMessage(pID , "|cFFFFCC00Message Type: |r|cff00ffff" + chatTest_getMessageType(i) + "|r")
        else
            call chatTest_sendSystemMessage(pID , "|cFFFFCC00No message with given id found. (Searched ID: " + I2S(i) + ")|r")
        endif
    else
        call chatTest_sendSystemMessage(pID , "Couldn't find the command '" + argsv[0] + "'.")
    endif

endfunction

function chatTest__chatAction takes nothing returns nothing
local integer pID= GetPlayerId(GetTriggerPlayer())
local string message= GetEventPlayerChatString()

    if SubString(message, 0, StringLength(chatTest__COMMAND_SYNTAX)) == chatTest__COMMAND_SYNTAX then
        // Command
      //  call commandEvent(pID, SubString(message, StringLength(COMMAND_SYNTAX), StringLength(message)))
    elseif chatTest__frameChatHistory != null then
        // Message
        //call print("Log Data: " + BlzFrameGetText(frameChatHistory))
        if chatTest__sizeCheck(message) then
            call chatTest__processPlayerMessage(GetPlayerId(GetTriggerPlayer()) , message , BlzFrameGetText(chatTest__frameChatHistory))
        else
            call chatTest_sendSystemMessage(pID , chatTest__MESSAGE_SIZE_OVERFLOW)
        endif
    endif

    if chatTest__frameChatHistory != null then
        call BlzFrameSetText(chatTest__frameChatHistory, "")
    endif

endfunction

function chatTest__generateMessageFrame takes integer createContext returns nothing

    set chatTest__frameMessage[createContext]=BlzCreateSimpleFrame("Message", chatTest__frameMessagePanel, createContext)
    call BlzFrameSetSize(chatTest__frameMessage[createContext], 0.8, chatTest__FONT_SIZE + 0.005)

    call BlzFrameSetSize(BlzGetFrameByName("Message Type Container", createContext), 0.045, chatTest__FONT_SIZE + 0.005)
    set chatTest__frameMessageType[createContext]=BlzGetFrameByName("Message Type", createContext)
    call BlzFrameSetSize(chatTest__frameMessageType[createContext], 0.045, chatTest__FONT_SIZE + 0.005)
    call BlzFrameSetFont(chatTest__frameMessageType[createContext], chatTest__CHAT_FONT, chatTest__FONT_SIZE, 0)

    set chatTest__frameMessageTimeStampContainer[createContext]=BlzGetFrameByName("Message Timestamp Container", createContext)
    call BlzFrameSetSize(chatTest__frameMessageTimeStampContainer[createContext], 0.045, chatTest__FONT_SIZE + 0.005)
    set chatTest__frameMessageTimeStamp[createContext]=BlzGetFrameByName("Message Timestamp", createContext)
    call BlzFrameSetSize(chatTest__frameMessageTimeStamp[createContext], 0.045, chatTest__FONT_SIZE + 0.005)
    call BlzFrameSetFont(chatTest__frameMessageTimeStamp[createContext], chatTest__CHAT_FONT, chatTest__FONT_SIZE, 0)

    set chatTest__frameMessageIconContainer[createContext]=BlzGetFrameByName("Message Icon Container", createContext)
    call BlzFrameSetSize(chatTest__frameMessageIconContainer[createContext], chatTest__FONT_SIZE + 0.005, chatTest__FONT_SIZE + 0.005)
    set chatTest__frameMessageIcon[createContext]=BlzGetFrameByName("Message Icon", createContext)
        
    set chatTest__frameMessageTextContainer[createContext]=BlzGetFrameByName("Message Text Container", createContext)
    call BlzFrameSetSize(chatTest__frameMessageTextContainer[createContext], 0.675, chatTest__FONT_SIZE + 0.005)
    set chatTest__frameMessageText[createContext]=BlzGetFrameByName("Message Text", createContext)
    call BlzFrameSetSize(chatTest__frameMessageText[createContext], 0.675, chatTest__FONT_SIZE + 0.005)
    call BlzFrameSetFont(chatTest__frameMessageText[createContext], chatTest__CHAT_FONT, chatTest__FONT_SIZE, 0)

    call BlzFrameSetVisible(chatTest__frameMessage[createContext], false)
    call BlzFrameSetAlpha(chatTest__frameMessage[createContext], 0)
    set chatTest__timerMessage[createContext]=CreateTimer()

    set chatTest__frameInUse[createContext]=false
    set chatTest__startY[createContext]=0.
    set chatTest__currentY[createContext]=0.
    set chatTest__targetY[createContext]=0.
    set chatTest__frameAlpha[createContext]=- 1
    set chatTest__timeSinceStart[createContext]=0
    set chatTest__asyncVisibility[createContext]=false
    set chatTest__previousFrame[createContext]=0

endfunction

function chatTest__chatInit takes nothing returns nothing
local integer current= 0
local trigger trig1
local trigger trig2

    // Try to load ChatSystem.toc, otherwise don't init system
    if BlzLoadTOCFile("UI\\ChatSystem.toc") then
        set trig1=CreateTrigger()
        set trig2=CreateTrigger()
        loop
            exitwhen current > 23
                call TriggerRegisterPlayerChatEvent(trig1, Player(current), "", false)
                call BlzTriggerRegisterPlayerSyncEvent(trig2, Player(current), "New Message " + I2S(current), false)
            set current=current + 1
        endloop
        call TriggerAddAction(trig1, function chatTest__chatAction)
        call TriggerAddAction(trig2, function chatTest__syncPlayerMessage)
        set trig1=null
        set trig2=null

        call BlzFrameSetVisible(BlzGetOriginFrame(ORIGIN_FRAME_CHAT_MSG, 0), false) // hides default chat

        
        set chatTest__frameMain=BlzCreateSimpleFrame("Main", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), 0)
        set chatTest__frameMessagePanel=BlzGetFrameByName("Message Panel", 0)
        set current=1
        loop
            exitwhen current > chatTest__MAX_MESSAGES
                call chatTest__generateMessageFrame(current)
            set current=current + 1
        endloop

        call BlzFrameSetAbsPoint(chatTest__frameMain, FRAMEPOINT_BOTTOM, 0.4, 0.)
        call BlzFrameSetPoint(chatTest__frameMessagePanel, chatTest__CHAT_REFPOINT, chatTest__frameMain, chatTest__CHAT_REFPOINT, chatTest__CHAT_X, chatTest__CHAT_Y)

        //call print("Successfully loaded Chat System v" + CHAT_SYSTEM_VERSION)
        call BlzGetFrameByName("ChatHistoryDisplay", 0)
        set chatTest__frameChatHistory=BlzGetFrameByName("ChatHistoryDisplay", 0)
        if chatTest__frameChatHistory == null then
          //  call print("Singleplayer detected, normal chat messages are disabled. (Commands will remain working)")
        else
          //call print("Multiplayer detected, normal chat messages and commands will work as intended")
            call BlzFrameSetText(chatTest__frameChatHistory, "")
            // hide observer chat radio button cause it cause desyncs
            call BlzFrameSetVisible(BlzGetFrameByName("ChatObserversRadioButton", 0), false)
            call BlzFrameSetEnable(BlzGetFrameByName("ChatObserversRadioButton", 0), false)
            call BlzFrameSetVisible(BlzGetFrameByName("ChatObserversLabel", 0), false)
            // move everyone button where observer chat would normally be
            call BlzFrameSetPoint(BlzGetFrameByName("ChatEveryoneRadioButton", 0), FRAMEPOINT_TOP, BlzGetFrameByName("ChatAlliesRadioButton", 0), FRAMEPOINT_BOTTOM, 0., - 0.002)
        endif

        set chatTest_playerColor[0]="|cffff0303"
        set chatTest_playerColor[1]="|cff0042ff"
        set chatTest_playerColor[2]="|cff1ce6b9"
        set chatTest_playerColor[3]="|cff540081"
        set chatTest_playerColor[4]="|cfffffc01"
        set chatTest_playerColor[5]="|cfffe8a0e"
        set chatTest_playerColor[6]="|cff20c000"
        set chatTest_playerColor[7]="|cffe55bb0"
        set chatTest_playerColor[8]="|cff959697"
        set chatTest_playerColor[9]="|cff7ebff1"
        set chatTest_playerColor[10]="|cff106246"
        set chatTest_playerColor[11]="|cff4e2a04"
        set chatTest_playerColor[12]="|cff9B0000"
        set chatTest_playerColor[13]="|cff0000C3"
        set chatTest_playerColor[14]="|cff00EAFF"
        set chatTest_playerColor[15]="|cffBE00FE"
        set chatTest_playerColor[16]="|cffEBCD87"
        set chatTest_playerColor[17]="|cffF8A48B"
        set chatTest_playerColor[18]="|cffBFFF80"
        set chatTest_playerColor[19]="|cffDCB9EB"
        set chatTest_playerColor[20]="|cff282828"
        set chatTest_playerColor[21]="|cffEBF0FF"
        set chatTest_playerColor[22]="|cff00781E"
        set chatTest_playerColor[23]="|cffA46F33"

        set chatTest_playerIcon[0]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[1]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[2]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[3]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[4]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[5]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[6]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[7]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[8]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[9]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[10]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[11]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[12]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[13]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[14]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[15]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[16]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[17]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[18]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[19]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[20]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[21]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[22]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        set chatTest_playerIcon[23]="ReplaceableTextures\\CommandButtons\\BTNPeasant.blp"
        
        call TriggerEvaluate(st__ChatSys_ChatInt) // INLINED!!

        call TimerStart(CreateTimer(), 1.0, true, function chatTest__updateGameTime)
    endif

endfunction

function chatTest__onInit takes nothing returns nothing

    call TimerStart(CreateTimer(), 0., false, function chatTest__chatInit)

endfunction


//library chatTest ends
//library AttachObject:


    


//textmacro instance: DEFINE_LIST("", "AOList", "integer")
    // No default ctor and dctor due to limited array size

    function s__AOListItem__get_data takes integer this returns integer
        return (LoadInteger(Table__ht, ((((this)))), (- 1))) // hashtable[ node, -1 ] = data // INLINED!!
    endfunction
    function s__AOListItem__set_data takes integer this,integer value returns nothing
        call SaveInteger(Table__ht, ((((this)))), (- 1), ( value)) // INLINED!!
    endfunction

    function s__AOListItem__get_next takes integer this returns integer
        return (LoadInteger(Table__ht, ((this)), (- 2))) // hashtable[ node, -2 ] = next // INLINED!!
    endfunction
    function s__AOListItem__set_next takes integer this,integer value returns nothing
        call SaveInteger(Table__ht, ((this)), (- 2), ( value)) // INLINED!!
    endfunction

    function s__AOListItem__get_prev takes integer this returns integer
        return (LoadInteger(Table__ht, ((this)), (- 3))) // hashtable[ node, -3 ] = prev // INLINED!!
    endfunction
    function s__AOListItem__set_prev takes integer this,integer value returns nothing
        call SaveInteger(Table__ht, ((this)), (- 3), ( value)) // INLINED!!
    endfunction


//Implemented from module Alloc:
        function s__AOList_allocate takes nothing returns integer
            return Alloc_Allocate(si__AOList)
        endfunction
        function s__AOList_deallocate takes integer this returns nothing
            call Alloc_Deallocate(si__AOList , this)
        endfunction

    function s__AOList_setNodeOwner takes integer node,integer owner returns nothing
        call SaveInteger(Table__ht, ((node)), (- 4), ( owner)) // INLINED!!
    endfunction

    function s__AOList_getNodeOwner takes integer node returns integer
        return (LoadInteger(Table__ht, ((node)), (- 4))) // INLINED!!
    endfunction

    function s__AOList_createNode takes integer this,integer value returns integer
        local integer node= s__Table_create()
        call SaveInteger(Table__ht, (((((node))))), (- 1), ( (value))) // INLINED!!
        call SaveInteger(Table__ht, (((node ))), (- 4), ( ( this))) // ownership // INLINED!!
        return node
    endfunction

    function s__AOList_deleteNode takes integer this,integer node returns nothing
        call s__Table_destroy((node)) // also removes ownership
    endfunction

    function s__AOList_create takes nothing returns integer
        local integer this= (Alloc_Allocate(si__AOList)) // INLINED!!
        set s__AOList_count[this]=0
        return this
    endfunction

    function s__AOList_clear takes integer this returns nothing
        local integer node= s__AOList_first[this]
        local integer temp

        loop // recycle all Table indexes
            exitwhen 0 == node
            set temp=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
            call s__AOList_deleteNode(this,node)
            set node=temp
        endloop

        set s__AOList_first[this]=0
        set s__AOList_last[this]=0
        set s__AOList_count[this]=0
    endfunction

    function s__AOList_destroy takes integer this returns nothing
        call s__AOList_clear(this)
        call Alloc_Deallocate(si__AOList , (this)) // INLINED!!
    endfunction

    function s__AOList_front takes integer this returns integer
        return (LoadInteger(Table__ht, (((((s__AOList_first[this]))))), (- 1))) // INLINED!!
    endfunction

    function s__AOList_back takes integer this returns integer
        return (LoadInteger(Table__ht, (((((s__AOList_last[this]))))), (- 1))) // INLINED!!
    endfunction

    function s__AOList_empty takes integer this returns boolean
        return s__AOList_count[this] == 0
    endfunction

    function s__AOList_size takes integer this returns integer
        return s__AOList_count[this]
    endfunction

    function s__AOList_push takes integer this,integer value returns integer
        local integer node= s__AOList_createNode(this,value)

        if not (s__AOList_count[(this)] == 0) then // INLINED!!
            call SaveInteger(Table__ht, (((s__AOList_last[this]))), (- 2), ( (node))) // INLINED!!
            call SaveInteger(Table__ht, (((node))), (- 3), ( (s__AOList_last[this]))) // INLINED!!
        else
            set s__AOList_first[this]=node
            call SaveInteger(Table__ht, (((node))), (- 3), ( (0))) // INLINED!!
        endif

        set s__AOList_last[this]=node
        call SaveInteger(Table__ht, (((node))), (- 2), ( (0))) // INLINED!!
        set s__AOList_count[this]=s__AOList_count[this] + 1
        return this
    endfunction

    function s__AOList_unshift takes integer this,integer value returns integer
        local integer node= s__AOList_createNode(this,value)

        if not (s__AOList_count[(this)] == 0) then // INLINED!!
            call SaveInteger(Table__ht, (((s__AOList_first[this]))), (- 3), ( (node))) // INLINED!!
            call SaveInteger(Table__ht, (((node))), (- 2), ( (s__AOList_first[this]))) // INLINED!!
        else
            set s__AOList_last[this]=node
            call SaveInteger(Table__ht, (((node))), (- 2), ( (0))) // INLINED!!
        endif

        set s__AOList_first[this]=node
        call SaveInteger(Table__ht, (((node))), (- 3), ( (0))) // INLINED!!
        set s__AOList_count[this]=s__AOList_count[this] + 1
        return this
    endfunction

    function s__AOList_pop takes integer this returns integer
        local integer node

        if not (s__AOList_count[(this)] == 0) then // INLINED!!
            set node=s__AOList_last[this]
            set s__AOList_last[this]=(LoadInteger(Table__ht, (((s__AOList_last[this]))), (- 3))) // INLINED!!

            if s__AOList_last[this] == 0 then
                set s__AOList_first[this]=0
            else
                call SaveInteger(Table__ht, (((s__AOList_last[this]))), (- 2), ( (0))) // INLINED!!
            endif

            call s__AOList_deleteNode(this,node)
            set s__AOList_count[this]=s__AOList_count[this] - 1
        endif
        return this
    endfunction

    function s__AOList_shift takes integer this returns integer
        local integer node

        if not (s__AOList_count[(this)] == 0) then // INLINED!!
            set node=s__AOList_first[this]
            set s__AOList_first[this]=(LoadInteger(Table__ht, (((s__AOList_first[this]))), (- 2))) // INLINED!!

            if s__AOList_first[this] == 0 then
                set s__AOList_last[this]=0
            else
                call SaveInteger(Table__ht, (((s__AOList_first[this]))), (- 3), ( (0))) // INLINED!!
            endif

            call s__AOList_deleteNode(this,node)
            set s__AOList_count[this]=s__AOList_count[this] - 1
        endif
        return this
    endfunction

    function s__AOList__staticgetindex takes integer other returns integer
        local integer instance= s__AOList_create()
        local integer node= s__AOList_first[other]

        loop
            exitwhen node == 0
            call s__AOList_push(instance,(LoadInteger(Table__ht, (((((node))))), (- 1)))) // INLINED!!
            set node=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
        endloop

        return instance
    endfunction

    function s__AOList_find takes integer this,integer value returns integer
        local integer node= s__AOList_first[this]
        loop
            exitwhen node == 0 or (LoadInteger(Table__ht, (((((node))))), (- 1))) == value // INLINED!!
            set node=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
        endloop
        return node
    endfunction

    function s__AOList_erase takes integer this,integer node returns boolean
        if (LoadInteger(Table__ht, (((node))), (- 4))) == this then // match ownership // INLINED!!
            if node == s__AOList_first[this] then
                call s__AOList_shift(this)
            elseif node == s__AOList_last[this] then
                call s__AOList_pop(this)
            else
                call SaveInteger(Table__ht, ((((LoadInteger(Table__ht, (((node))), (- 3)))))), (- 2), ( ((LoadInteger(Table__ht, (((node))), (- 2)))))) // INLINED!!
                call SaveInteger(Table__ht, ((((LoadInteger(Table__ht, (((node))), (- 2)))))), (- 3), ( ((LoadInteger(Table__ht, (((node))), (- 3)))))) // INLINED!!
                call s__AOList_deleteNode(this,node)
                set s__AOList_count[this]=s__AOList_count[this] - 1
            endif
            return true
        endif
        return false
    endfunction

    function s__AOList_remove takes integer this,integer node returns boolean
        return s__AOList_erase(this,node)
    endfunction

    function s__AOList_removeElem takes integer this,integer value returns integer
        local integer node= s__AOList_find(this,value)
        if node != 0 then
            call s__AOList_erase(this,node)
        endif
        return this
    endfunction
//end of: DEFINE_LIST("", "AOList", "integer")


function ListTGetRandom takes integer list returns integer
    local integer size= (s__AOList_count[(list)]) // INLINED!!
    local integer i
    local integer node= 0
           
   
    // thanks to Wareditor for that bit of code
    if size > 0 then
        set i=GetRandomInt(1, size)
        if i > size / 2 then
            set i=size - i
            set node=s__AOList_last[list]
            loop
                exitwhen i == 0
                set node=(LoadInteger(Table__ht, (((node))), (- 3))) // INLINED!!
                set i=i - 1
            endloop
        else
            set i=i - 1
            set node=s__AOList_first[list]
            loop
                exitwhen i == 0
                set node=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
                set i=i - 1
            endloop
        endif
    endif
   
    return node
endfunction
   

// specfic for reading Guest data
   
    function s__GuestEx_destroy takes integer this returns nothing
        set s__GuestEx_host[this]=null
        set s__GuestEx_guest[this]=null
        set s__GuestEx_fx[this]=null
        call s__GuestEx_deallocate(this)
    endfunction
   
    function s__GuestEx_create takes unit h,unit g,effect fx returns integer
        local integer this= s__GuestEx__allocate()
        set s__GuestEx_host[this]=h
        set s__GuestEx_guest[this]=g
        set s__GuestEx_fx[this]=fx
        return this
    endfunction

   
   
   
   
   
    function s__AttachObject__Guest_destroy takes integer this returns nothing
        if s__AttachObject__Guest_fx[this] != null then
            call FlushChildHashtable(AttachObject__GuestIdStorage, GetHandleId(s__AttachObject__Guest_fx[this]))
            set s__AttachObject__Guest_fx[this]=null
        else
            call FlushChildHashtable(AttachObject__GuestIdStorage, GetHandleId(s__AttachObject__Guest_u[this]))
            set s__AttachObject__Guest_u[this]=null
        endif
        set s__AttachObject__Guest_parent[this]=null
        set s__AttachObject__Guest_staticAngle[this]=false
        set s__AttachObject__Guest_dynamicFacing[this]=false
        set s__AttachObject__Guest_updateFacing[this]=false
        set s__AttachObject__Guest_isHidden[this]=false
        set s__AttachObject__Guest_angleRate[this]=0.
        set s__AttachObject__Guest_idleAngle[this]=0.
        call s__GuestEx_destroy(s__AttachObject__Guest_ex[this])
        set s__AttachObject__Guest_ex[this]=0
        call s__AttachObject__Guest_deallocate(this)
    endfunction
   
    function s__AttachObject__Guest_create takes unit g,effect fx,unit h returns integer
        local integer this= s__AttachObject__Guest__allocate()
       
        call s__AOList_push(s__AttachObject__GlobalListT_Guests,this)
       
        set s__AttachObject__Guest_parent[this]=h
        set s__AttachObject__Guest_u[this]=g
        set s__AttachObject__Guest_fx[this]=fx
        set s__AttachObject__Guest_ex[this]=s__GuestEx_create(h , g , fx)
       
        if g == null then
            call SaveInteger(AttachObject__GuestIdStorage, GetHandleId(fx), 0, this)
        else
            call SaveInteger(AttachObject__GuestIdStorage, GetHandleId(g), 0, this)
        endif
       
        return this
    endfunction
   

   
   
   
    function s__AttachObject__Host_destroy takes integer this returns nothing
        call FlushChildHashtable(AttachObject__HostIdStorage, GetHandleId(s__AttachObject__Host_u[this]))
        call s__AOList_destroy(s__AttachObject__Host_guestList[this])
        set s__AttachObject__Host_u[this]=null
        set s__AttachObject__Host_hiddenState[this]=false
       
        call s__AOList_removeElem(s__AttachObject__GlobalListT_Hosts,this)
        if (s__AOList_count[(s__AttachObject__GlobalListT_Hosts)] == 0) then // INLINED!!
            call PauseTimer(AttachObject__Clock)
        endif
       
        call s__AttachObject__Host_deallocate(this)
    endfunction
   
    function s__AttachObject__Host_addGuest takes integer this,integer guest returns nothing
        call s__AOList_push(s__AttachObject__Host_guestList[this],guest)
    endfunction
   
    function s__AttachObject__Host_create takes unit h returns integer
        local integer this= s__AttachObject__Host__allocate()
       
        set s__AttachObject__Host_guestList[this]=s__AOList_create()
        call s__AOList_push(s__AttachObject__GlobalListT_Hosts,this)
       
        set s__AttachObject__Host_u[this]=h
        set s__AttachObject__Host_hiddenState[this]=IsUnitHidden(h)
        call SaveInteger(AttachObject__HostIdStorage, GetHandleId(h), 0, this)
        return this
    endfunction
   

   

   
    function s__EffectTimed_update takes nothing returns nothing
        local integer this
       
        local integer node= s__AOList_first[s__EffectTimed_fxList]
        local integer nodeNext
       
        loop
            exitwhen node == 0
            set nodeNext=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
            set this=(LoadInteger(Table__ht, (((((node))))), (- 1))) // INLINED!!
           
            set s__EffectTimed_dur[this]=s__EffectTimed_dur[this] - AttachObject__TIMEOUT
            if s__EffectTimed_dur[this] <= 0. then
                call DestroyEffect(s__EffectTimed_fx[this])
                set s__EffectTimed_fx[this]=null
                call s__EffectTimed_deallocate(this)
            endif
           
            set node=nodeNext
        endloop
       
        if (s__AOList_count[(s__EffectTimed_fxList)]) < 1 then // INLINED!!
            call PauseTimer(s__EffectTimed_clock)
        endif
    endfunction
   
    function s__EffectTimed_start takes effect vfx,real duration returns nothing
        local integer this= s__EffectTimed__allocate()
        set s__EffectTimed_fx[this]=vfx
        set s__EffectTimed_dur[this]=duration
        call s__AOList_push(s__EffectTimed_fxList,this)
        if (s__AOList_count[(s__EffectTimed_fxList)]) == 1 then // INLINED!!
            call TimerStart(s__EffectTimed_clock, AttachObject__TIMEOUT, true, function s__EffectTimed_update)
        endif
    endfunction
   

//REFERENCE AND OTHER USEFUL FUNCTIONS

// library use only
function AttachObject__GetPrivateHostUnitId takes unit h returns integer
    return LoadInteger(AttachObject__HostIdStorage, GetHandleId(h), 0)
endfunction

function AttachObject__GetPrivateGuestUnitId takes unit g returns integer
    return LoadInteger(AttachObject__GuestIdStorage, GetHandleId(g), 0)
endfunction

function AttachObject__GetPrivateGuestEffectId takes effect e returns integer
    return LoadInteger(AttachObject__GuestIdStorage, GetHandleId(e), 0)
endfunction

// public use
function GetHost takes integer guest returns unit
    return s__AttachObject__Guest_parent[guest]
endfunction

function IsUnitHost takes unit h returns boolean
    return LoadInteger(AttachObject__HostIdStorage, GetHandleId(h), 0) != 0
endfunction

function IsUnitGuest takes unit g returns boolean
    return LoadInteger(AttachObject__GuestIdStorage, GetHandleId(g), 0) != 0
endfunction

function IsEffectGuest takes effect e returns boolean
    return LoadInteger(AttachObject__GuestIdStorage, GetHandleId(e), 0) != 0
endfunction

function IsGuestUnit takes integer ex returns boolean
    return s__GuestEx_guest[ex] != null
endfunction

function IsGuestEffect takes integer ex returns boolean
    return s__GuestEx_fx[ex] != null
endfunction

function GetGuestUnitId takes unit g returns integer
    local integer guest= LoadInteger(AttachObject__GuestIdStorage, GetHandleId(g), 0)
    return s__AttachObject__Guest_ex[guest]
endfunction

function GetGuestEffectId takes effect e returns integer
    local integer guest= LoadInteger(AttachObject__GuestIdStorage, GetHandleId(e), 0)
    return s__AttachObject__Guest_ex[guest]
endfunction

function GetNumberOfGuests takes unit h returns integer
    local integer host= (LoadInteger(AttachObject__HostIdStorage, GetHandleId((h)), 0)) // INLINED!!
    return (s__AOList_count[(s__AttachObject__Host_guestList[host])]) // INLINED!!
endfunction

function GroupUnitGuests takes unit h returns group
    local integer host= (LoadInteger(AttachObject__HostIdStorage, GetHandleId((h)), 0)) // INLINED!!
    local integer guest
   
    local integer node= s__AOList_first[s__AttachObject__Host_guestList[host]]
   
    if AttachObject__GuestGroup == null then
        set AttachObject__GuestGroup=CreateGroup()
    else
        call GroupClear(AttachObject__GuestGroup)
    endif
   
    if (LoadInteger(AttachObject__HostIdStorage, GetHandleId((h)), 0) != 0) then // INLINED!!
        loop
            exitwhen node == 0
            set guest=(LoadInteger(Table__ht, (((((node))))), (- 1))) // INLINED!!
            call GroupAddUnit(AttachObject__GuestGroup, s__AttachObject__Guest_u[guest])
            set node=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
        endloop
    endif
   
    return AttachObject__GuestGroup
endfunction

function GetGuestList takes unit h returns integer
    local integer host= (LoadInteger(AttachObject__HostIdStorage, GetHandleId((h)), 0)) // INLINED!!
    local integer guest
   
    local integer list= s__IntegerList_create()
    local integer node= s__AOList_first[s__AttachObject__Host_guestList[host]]
   
    loop
        exitwhen node == 0
        set guest=(LoadInteger(Table__ht, (((((node))))), (- 1))) // INLINED!!
        call s__IntegerList_push(list,s__AttachObject__Guest_ex[guest])
        set node=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
    endloop
    return list
endfunction

function GetRandomGuest takes unit h,boolexpr guestFilter returns unit
   
    local integer host= (LoadInteger(AttachObject__HostIdStorage, GetHandleId((h)), 0)) // INLINED!!
    local integer guest
    local integer node= ListTGetRandom(s__AttachObject__Host_guestList[host])
    local unit u
    local triggercondition tcnd
    local boolean firstPass= false
    local integer n= (s__AOList_count[(s__AttachObject__Host_guestList[host])]) // INLINED!!
       
    if guestFilter == null then
        set guest=(LoadInteger(Table__ht, (((((node))))), (- 1))) // INLINED!!
        return s__AttachObject__Guest_u[guest]
    else
        set firstPass=( node == s__AOList_first[s__AttachObject__Host_guestList[host]] )
        set FilterGuest=null
       
        loop
            exitwhen node == 0 and firstPass
           
            if node == 0 and not firstPass then
                set node=s__AOList_first[s__AttachObject__Host_guestList[host]]
                set firstPass=true
            endif
           
            set guest=(LoadInteger(Table__ht, (((((node))))), (- 1))) // INLINED!!
            set u=s__AttachObject__Guest_u[guest]
           
            set tcnd=TriggerAddCondition(AttachObject__FilterTrig, guestFilter)
            if TriggerEvaluate(AttachObject__FilterTrig) then
                set FilterGuest=u
            endif
            call TriggerRemoveCondition(AttachObject__FilterTrig, tcnd)
           
            set node=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
        endloop
       
        set u=null
        set tcnd=null
       
        return FilterGuest
    endif
    return null
endfunction

function ShowGuest takes integer ex returns nothing
    local integer guest
    if s__GuestEx_guest[ex] != null then
        set guest=GetGuestUnitId(s__GuestEx_guest[ex])
        if IsUnitHidden(s__AttachObject__Guest_u[guest]) then
            call ShowUnit(s__AttachObject__Guest_u[guest], true)
            if GetUnitAbilityLevel(s__AttachObject__Guest_u[guest], 'Aloc') > 0 then
                call UnitRemoveAbility(s__AttachObject__Guest_u[guest], 'Aloc')
                call UnitAddAbility(s__AttachObject__Guest_u[guest], 'Aloc')
            endif
        endif
    else
        set guest=GetGuestEffectId(s__GuestEx_fx[ex])
    endif
    set s__AttachObject__Guest_isHidden[guest]=false
endfunction

function AttachObject__ShowGuestEx takes integer guest returns nothing
    set s__AttachObject__Guest_isHidden[guest]=false
    if s__AttachObject__Guest_u[guest] != null then
        if IsUnitHidden(s__AttachObject__Guest_u[guest]) then
            call ShowUnit(s__AttachObject__Guest_u[guest], true)
            if GetUnitAbilityLevel(s__AttachObject__Guest_u[guest], 'Aloc') > 0 then
                call UnitRemoveAbility(s__AttachObject__Guest_u[guest], 'Aloc')
                call UnitAddAbility(s__AttachObject__Guest_u[guest], 'Aloc')
            endif
        endif
    endif
endfunction

function ShowGuestsEx takes unit h,boolean flag returns nothing
   
    local integer host= (LoadInteger(AttachObject__HostIdStorage, GetHandleId((h)), 0)) // INLINED!!
    local integer guest
   
    local integer node= s__AOList_first[s__AttachObject__Host_guestList[host]]
   
    loop
        exitwhen node == 0
        set guest=(LoadInteger(Table__ht, (((((node))))), (- 1))) // INLINED!!
        if flag then
            call AttachObject__ShowGuestEx(guest)
        else
            call ShowUnit(s__AttachObject__Guest_u[guest], false)
            call BlzSetSpecialEffectZ(s__AttachObject__Guest_fx[guest], - 1000.)
            set s__AttachObject__Guest_isHidden[guest]=true
        endif
        set node=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
    endloop
   
endfunction

function ShowGuests takes unit h returns nothing
    call ShowGuestsEx(h , true)
endfunction

function HideGuests takes unit h returns nothing
    call ShowGuestsEx(h , false)
endfunction


//Core function to dettach guests from hosts
function AttachObject__DettachObject takes integer guest,boolean resetHeight,real time returns nothing
    local integer host
   

        local real hc
        local real hd
        local integer moveType
        local real duration

   
    if s__AttachObject__Guest_turretTrigger[guest] != null then
        call FlushChildHashtable(AttachObject__TurretStorage, GetHandleId(s__AttachObject__Guest_turretTrigger[guest]))
        call DestroyTrigger(s__AttachObject__Guest_turretTrigger[guest])
        set s__AttachObject__Guest_turretTrigger[guest]=null
    endif
   
    if s__AttachObject__Guest_parent[guest] != null then
        set host=(LoadInteger(AttachObject__HostIdStorage, GetHandleId((s__AttachObject__Guest_parent[guest])), 0)) // INLINED!!
       
        call s__AOList_removeElem(s__AttachObject__Host_guestList[host],guest)
       
        if s__AttachObject__Guest_u[guest] != null then
            if UnitAlive(s__AttachObject__Guest_u[guest]) and time > 0. then
                call UnitApplyTimedLife(s__AttachObject__Guest_u[guest], 'BTLF', time)
            endif
           

                if resetHeight then

                        set hc=GetUnitFlyHeight(s__AttachObject__Guest_u[guest])
                        set hd=GetUnitDefaultFlyHeight(s__AttachObject__Guest_u[guest])
                        set moveType=BlzGetUnitMovementType(s__AttachObject__Guest_u[guest])
                        set duration=( hc - hd ) / AttachObject__FALL_SPEED
                        if duration < 0. then
                            set duration=- duration
                        endif
call s__RiseAndFall_createEx((s__AttachObject__Guest_u[guest] ) , (( hc )*1.0) , (( hd )*1.0) , (( duration )*1.0) , ( ( moveType == 8 or moveType == 2 )) , false) // INLINED!!



                endif

        endif
       
        if s__AttachObject__Guest_fx[guest] != null and time > 0. then
            call s__EffectTimed_start(s__AttachObject__Guest_fx[guest] , time)
        endif
       
        call SetUnitPropWindow(s__AttachObject__Guest_u[guest], GetUnitDefaultPropWindow(s__AttachObject__Guest_u[guest]) * bj_DEGTORAD)
        call UnitRemoveAbility(s__AttachObject__Guest_u[guest], 'Aeth')
        call SetUnitPathing(s__AttachObject__Guest_u[guest], true)
       
        if (s__AOList_count[(s__AttachObject__Host_guestList[host])] == 0) then // INLINED!!
            call s__AttachObject__Host_destroy(host)
        endif
    endif
   
    call s__AttachObject__Guest_destroy(guest)
endfunction

function AttachObject__DettachAllObjects takes integer host,boolean resetHeight,real time returns nothing
    local integer guest
   
    local integer node= s__AOList_first[s__AttachObject__Host_guestList[host]]
    local integer nodeNext
       
    loop
        exitwhen node == 0
        set nodeNext=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
        set guest=(LoadInteger(Table__ht, (((((node))))), (- 1))) // INLINED!!
        call AttachObject__DettachObject(guest , resetHeight , time)
        set node=nodeNext
    endloop
   
endfunction

function DettachEffect takes effect fx,boolean resetHeight,real time returns nothing
    call AttachObject__DettachObject((LoadInteger(AttachObject__GuestIdStorage, GetHandleId((fx)), 0)) , resetHeight , time) // INLINED!!
endfunction

function DettachUnit takes unit g,boolean resetHeight,real time returns nothing
    call AttachObject__DettachObject((LoadInteger(AttachObject__GuestIdStorage, GetHandleId((g)), 0)) , resetHeight , time) // INLINED!!
endfunction

function DettachAllGuests takes unit h,boolean resetHeight,real time returns nothing
    call AttachObject__DettachAllObjects((LoadInteger(AttachObject__HostIdStorage, GetHandleId((h)), 0)) , resetHeight , time) // INLINED!!
endfunction


function AttachObject__TurretActions takes nothing returns nothing
    local integer guest= LoadInteger(AttachObject__TurretStorage, GetHandleId(GetTriggeringTrigger()), 0)
    set s__AttachObject__Guest_cooldown[guest]=s__AttachObject__Guest_cooldownReset[guest]
    if GetUnitCurrentOrder(s__AttachObject__Guest_u[guest]) != AttachObject__ORDER_ATTACK then
        call IssuePointOrderById(s__AttachObject__Guest_u[guest], AttachObject__ORDER_ATTACK, GetUnitX(s__AttachObject__Guest_u[guest]), GetUnitY(s__AttachObject__Guest_u[guest]))
    endif
endfunction

function AttachObject__UpdateGuests takes nothing returns nothing
   
    local real x
    local real y
    local real z
    local real t
    local real f
    local real a
    local real xNew
    local real yNew
   
    local integer node= s__AOList_first[s__AttachObject__GlobalListT_Hosts]
    local integer nodeNext
    local integer nNode
    local integer nNodeNext
   
    local integer host
    local integer guest
   
    // This loop cycles through all the Hosts and a secondary loop inside cycles through their
    // attached Guests, updating their x, y and z coordiates.
    loop
   
        exitwhen node == 0
        set nodeNext=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
       
        set host=(LoadInteger(Table__ht, (((((node))))), (- 1))) // INLINED!!
        set x=GetUnitX(s__AttachObject__Host_u[host])
        set y=GetUnitY(s__AttachObject__Host_u[host])
        set z=GetUnitFlyHeight(s__AttachObject__Host_u[host]) // fly height
        set t=BlzGetLocalUnitZ(s__AttachObject__Host_u[host]) // terrain height
        set f=GetUnitFacing(s__AttachObject__Host_u[host])
       
        if not IsUnitHidden(s__AttachObject__Host_u[host]) then
           
            // unhide guests if host was previously hidden
            if s__AttachObject__Host_hiddenState[host] then
                set s__AttachObject__Host_hiddenState[host]=false
                call ShowGuestsEx(s__AttachObject__Host_u[host] , true)
            endif
           
            if x != s__AttachObject__Host_x[host] or y != s__AttachObject__Host_y[host] or z != s__AttachObject__Host_z[host] or t != s__AttachObject__Host_t[host] or f != s__AttachObject__Host_f[host] then
               
                set nNode=s__AOList_first[s__AttachObject__Host_guestList[host]]
                loop
                    exitwhen nNode == 0
                    set nNodeNext=(LoadInteger(Table__ht, (((nNode))), (- 2))) // INLINED!!
                   
                    set guest=(LoadInteger(Table__ht, (((((nNode))))), (- 1))) // INLINED!!
                   
                    // required for manually hidden special effects
                    if not s__AttachObject__Guest_isHidden[guest] then
                        if s__AttachObject__Guest_staticAngle[guest] then
                            set a=0.
                        else
                            set a=f * bj_DEGTORAD
                        endif
                       
                        set xNew=s__AttachObject__Guest_offsetFix[guest] + x + Cos(s__AttachObject__Guest_angle[guest] + a) * s__AttachObject__Guest_distance[guest]
                        set yNew=s__AttachObject__Guest_offsetFix[guest] + y + Sin(s__AttachObject__Guest_angle[guest] + a) * s__AttachObject__Guest_distance[guest]
                       
                        if s__AttachObject__Guest_u[guest] != null then
                            call SetUnitX(s__AttachObject__Guest_u[guest], xNew)
                            call SetUnitY(s__AttachObject__Guest_u[guest], yNew)
                            if z != s__AttachObject__Host_z[host] then
                                call SetUnitFlyHeight(s__AttachObject__Guest_u[guest], z + s__AttachObject__Guest_zOffset[guest], 0.)
                            endif
                        endif
                       
                        if s__AttachObject__Guest_fx[guest] != null then
                            call BlzSetSpecialEffectPosition(s__AttachObject__Guest_fx[guest], xNew, yNew, t + z + s__AttachObject__Guest_zOffset[guest])
                        endif
                    endif
                   
                    set nNode=nNodeNext
                endloop
               
                set s__AttachObject__Host_x[host]=x
                set s__AttachObject__Host_y[host]=y
                set s__AttachObject__Host_z[host]=z
                set s__AttachObject__Host_t[host]=t
                set s__AttachObject__Host_f[host]=f * bj_RADTODEG
           
            endif
           
        else
           
            // hide guests if host was not previously hidden
            if not s__AttachObject__Host_hiddenState[host] then
                set s__AttachObject__Host_hiddenState[host]=true
                call ShowGuestsEx(s__AttachObject__Host_u[host] , false)
            endif
           
        endif
       
        set node=nodeNext
       
    endloop
   
    set node=s__AOList_first[s__AttachObject__GlobalListT_Guests]
   
    // Updates the facing angle of Guests that rotate when idle and when not to turn (eg when in combat).
    loop
   
        exitwhen node == 0
        set nodeNext=(LoadInteger(Table__ht, (((node))), (- 2))) // INLINED!!
       
        set guest=(LoadInteger(Table__ht, (((((node))))), (- 1))) // INLINED!!
       
        if s__AttachObject__Guest_u[guest] != null and not UnitAlive(s__AttachObject__Guest_u[guest]) then
            call AttachObject__DettachObject(guest , true , 0.)
        else
           
            if s__AttachObject__Guest_updateFacing[guest] and not s__AttachObject__Guest_isHidden[guest] then
               
                if s__AttachObject__Guest_dynamicFacing[guest] then
                    set f=GetUnitFacing(s__AttachObject__Guest_parent[guest])
                else
                    set f=0.
                endif
               
                set s__AttachObject__Guest_facing[guest]=s__AttachObject__Guest_facing[guest] + s__AttachObject__Guest_angleRate[guest]
                       
                if s__AttachObject__Guest_u[guest] == null then
                    call BlzSetSpecialEffectYaw(s__AttachObject__Guest_fx[guest], s__AttachObject__Guest_facing[guest] + f * bj_DEGTORAD)
                else
                    if GetUnitCurrentOrder(s__AttachObject__Guest_u[guest]) != 0 then
                        if s__AttachObject__Guest_cooldown[guest] > 0. then
                            set s__AttachObject__Guest_cooldown[guest]=s__AttachObject__Guest_cooldown[guest] - AttachObject__TIMEOUT
                        else
                            set s__AttachObject__Guest_cooldown[guest]=s__AttachObject__Guest_cooldownReset[guest]
                            call IssueImmediateOrderById(s__AttachObject__Guest_u[guest], 851973) //order stunned
                            call SetUnitFacing(s__AttachObject__Guest_u[guest], s__AttachObject__Guest_idleAngle[guest] + f)
                        endif
                       
                        if s__AttachObject__Guest_angleRate[guest] != 0. then
                            // Store the facing of the unit if it needs to rotate later
                            set s__AttachObject__Guest_facing[guest]=GetUnitFacing(s__AttachObject__Guest_u[guest])
                        endif
                    else
                        call SetUnitFacing(s__AttachObject__Guest_u[guest], s__AttachObject__Guest_facing[guest] + f)
                    endif
                endif
               
            endif
           
        endif
       
        set node=nodeNext
   
    endloop
endfunction


function AttachObject__SetFacingProperties takes integer guest,real startAngle,real rate,real cooldown,boolean dynamicFacing,boolean turretMode returns nothing
    if guest != 0 then
        set s__AttachObject__Guest_cooldownReset[guest]=cooldown
        set s__AttachObject__Guest_cooldown[guest]=cooldown
        set s__AttachObject__Guest_updateFacing[guest]=true
       
        set s__AttachObject__Guest_angleRate[guest]=rate * AttachObject__TIMEOUT
        set s__AttachObject__Guest_dynamicFacing[guest]=dynamicFacing
           
        if s__AttachObject__Guest_u[guest] == null then
            set s__AttachObject__Guest_facing[guest]=startAngle * bj_DEGTORAD
            set s__AttachObject__Guest_idleAngle[guest]=s__AttachObject__Guest_facing[guest]
            set s__AttachObject__Guest_angleRate[guest]=s__AttachObject__Guest_angleRate[guest] * bj_DEGTORAD
            call BlzSetSpecialEffectYaw(s__AttachObject__Guest_fx[guest], s__AttachObject__Guest_facing[guest])
        else
            set s__AttachObject__Guest_facing[guest]=startAngle
            set s__AttachObject__Guest_idleAngle[guest]=startAngle
            call SetUnitFacing(s__AttachObject__Guest_u[guest], s__AttachObject__Guest_facing[guest])
        endif
       
        if turretMode and s__AttachObject__Guest_u[guest] != null then
            set s__AttachObject__Guest_turretTrigger[guest]=CreateTrigger()
            call TriggerRegisterUnitEvent(s__AttachObject__Guest_turretTrigger[guest], s__AttachObject__Guest_u[guest], EVENT_UNIT_ACQUIRED_TARGET)
            call TriggerRegisterUnitEvent(s__AttachObject__Guest_turretTrigger[guest], s__AttachObject__Guest_u[guest], EVENT_UNIT_TARGET_IN_RANGE)
            call SaveInteger(AttachObject__TurretStorage, GetHandleId(s__AttachObject__Guest_turretTrigger[guest]), 0, guest)
            call TriggerAddCondition(s__AttachObject__Guest_turretTrigger[guest], Condition(function AttachObject__TurretActions))
        endif
    endif
endfunction

function SetEffectFacingProperties takes effect fx,real startAngle,real rate,boolean dynamicFacing returns nothing
    call AttachObject__SetFacingProperties((LoadInteger(AttachObject__GuestIdStorage, GetHandleId((fx)), 0)) , startAngle , rate , 0. , dynamicFacing , false) // INLINED!!
endfunction

function SetUnitFacingProperties takes unit g,real startAngle,real rate,real cooldown,boolean dynamicFacing,boolean turretMode returns nothing
    call AttachObject__SetFacingProperties((LoadInteger(AttachObject__GuestIdStorage, GetHandleId((g)), 0)) , startAngle , rate , cooldown , dynamicFacing , turretMode) // INLINED!!
endfunction


function AttachObject__AttachObject takes unit g,effect fx,unit h,real angle,real distance,real zOffset,real offsetFix,boolean staticAngle returns integer
   
    local integer host= (LoadInteger(AttachObject__HostIdStorage, GetHandleId((h)), 0)) // INLINED!!
    local integer guest
    local integer node= s__AOList_first[s__AttachObject__GlobalListT_Hosts]
    local real x= GetUnitX(h)
    local real y= GetUnitY(h)
    local real z= GetUnitFlyHeight(h)
    local real t= BlzGetLocalUnitZ(h)
    local real f= GetUnitFacing(h)
    local real a
    local real xNew
    local real yNew

    if g == null then
        set guest=(LoadInteger(AttachObject__GuestIdStorage, GetHandleId((g)), 0)) // INLINED!!
    else
        set guest=(LoadInteger(AttachObject__GuestIdStorage, GetHandleId((fx)), 0)) // INLINED!!
    endif
   
    // if there is no host or not effect and guest unit, end the function
    if h == null or ( g == null and fx == null ) then
        return 0
    endif
   
    // if guest instance is not null then it's already attached to a unit
    if guest != 0 then
        if s__AttachObject__Guest_parent[guest] == h then
            return 0
        else
            call AttachObject__DettachObject(guest , false , 0.)
        endif
    endif
   
    // check if the Host has an instance
    if host == 0 then
        set host=s__AttachObject__Host_create(h)
        set s__AttachObject__Host_x[host]=x
        set s__AttachObject__Host_y[host]=y
        set s__AttachObject__Host_z[host]=z
        set s__AttachObject__Host_t[host]=t
        set s__AttachObject__Host_f[host]=f
    endif
   
    set guest=s__AttachObject__Guest_create(g , fx , h)
   
    call s__AOList_push(s__AttachObject__Host_guestList[(host)],(guest)) // INLINED!!
   
    set s__AttachObject__Guest_angle[guest]=angle * bj_DEGTORAD
    set s__AttachObject__Guest_staticAngle[guest]=staticAngle
    set s__AttachObject__Guest_distance[guest]=distance
    set s__AttachObject__Guest_zOffset[guest]=zOffset
    set s__AttachObject__Guest_offsetFix[guest]=offsetFix
   
    // if angle is static then ignore the Host's facing angle.
    if staticAngle then
        set a=s__AttachObject__Guest_angle[guest]
    else
        set a=s__AttachObject__Guest_angle[guest] + f * bj_DEGTORAD
    endif
   
    set xNew=offsetFix + x + Cos(a) * distance
    set yNew=offsetFix + y + Sin(a) * distance
   
    if g == null then
        set s__AttachObject__Guest_facing[guest]=f * bj_DEGTORAD
        call BlzSetSpecialEffectPosition(fx, xNew, yNew, t + z + zOffset)
        call BlzSetSpecialEffectYaw(fx, s__AttachObject__Guest_facing[guest])
    else
        set s__AttachObject__Guest_facing[guest]=f
        call SetUnitX(g, xNew)
        call SetUnitY(g, yNew)
        call SetUnitFlyHeight(g, z + zOffset, 0.)
        call SetUnitFacing(g, s__AttachObject__Guest_facing[guest])
        call SetUnitPropWindow(g, 0.)
        call UnitAddAbility(g, 'Aeth')
        call SetUnitPathing(g, false)
    endif
   
    if (s__AOList_count[(s__AttachObject__GlobalListT_Hosts)]) == 1 then // INLINED!!
        call TimerStart(AttachObject__Clock, AttachObject__TIMEOUT, true, function AttachObject__UpdateGuests)
    endif
   
    return s__AttachObject__Guest_ex[guest]
endfunction

function AttachEffectToHost takes effect fx,unit h,real angle,real distance,real zOffset,real offsetFix,boolean staticAngle returns integer
    return AttachObject__AttachObject(null , fx , h , angle , distance , zOffset , offsetFix , staticAngle)
endfunction

function AttachUnitToHost takes unit g,unit h,real angle,real distance,real zOffset,real offsetFix,boolean staticAngle returns integer
    return AttachObject__AttachObject(g , null , h , angle , distance , zOffset , offsetFix , staticAngle)
endfunction


// Initialisation - the module, the module's method and the struct must all be private. The method must be static.

//Implemented from module AttachObject__init:
    function s__AttachObject__Init_AttachObject__init___onInit takes nothing returns nothing
        set s__AttachObject__GlobalListT_Guests=s__AOList_create()
        set s__AttachObject__GlobalListT_Hosts=s__AOList_create()
        set s__EffectTimed_fxList=s__AOList_create()
    endfunction


//library AttachObject ends
//library DeterministicEnervation:

    function DeterministicEnervation__eff takes nothing returns nothing
                local ability a
                local ability b
                local unit u= (GetRecycledDummy(((GetUnitX(udg_Spell__Caster) )*1.0) , (( GetUnitY(udg_Spell__Caster) )*1.0) , (( 0)*1.0) , DummyRecycler__angle[DummyRecycler__countNext[DummyRecycler__countHead[DummyRecycler__upper]]])) // INLINED!!
                local unit u2= (GetRecycledDummy(((GetUnitX(udg_Spell__Target) )*1.0) , (( GetUnitY(udg_Spell__Target) )*1.0) , (( 0)*1.0) , DummyRecycler__angle[DummyRecycler__countNext[DummyRecycler__countHead[DummyRecycler__upper]]])) // INLINED!!
                
                call UnitAddTimedAbility((u ) , ( 'A0BB' ) , 1 , (( 12 )*1.0) , ( true) , 0 , 0.00 , null , null) // INLINED!!
                call UnitAddTimedAbility((u2 ) , ( 'A0BB' ) , 1 , (( 12 )*1.0) , ( true) , 0 , 0.00 , null , null) // INLINED!!
                
                call PauseUnit(u, false)
                call PauseUnit(u2, false)
                
                set a=BlzGetUnitAbility(u, 'A0BB')
                set b=BlzGetUnitAbility(u2, 'A0BB')
                
                call BlzSetAbilityRealLevelField(a, ABILITY_RLF_ATTACK_SPEED_FACTOR_SLO2, 0, - 0.200)
                call BlzSetAbilityRealLevelField(a, ABILITY_RLF_MOVEMENT_SPEED_FACTOR_SLO1, 0, - 0.200)
                call BlzSetAbilityRealLevelField(b, ABILITY_RLF_ATTACK_SPEED_FACTOR_SLO2, 0, 0.200)
                call BlzSetAbilityRealLevelField(b, ABILITY_RLF_MOVEMENT_SPEED_FACTOR_SLO1, 0, 0.200)
                
                //Ensures that abilities are updated
                call SetUnitAbilityLevel(u, 'A0BB', 2)
                call SetUnitAbilityLevel(u, 'A0BB', 1)
                call SetUnitAbilityLevel(u2, 'A0BB', 2)
                call SetUnitAbilityLevel(u2, 'A0BB', 1)
                
                call IssueTargetOrderById(u, 852075, udg_Spell__Caster)
                call IssueTargetOrderById(u2, 852075, udg_Spell__Target)
                
                //sfx
call s__effectTimed_create((AddSpecialEffectTarget("Abilities\\Spells\\Undead\\Cripple\\CrippleTarget.mdl", udg_Spell__Target, "chest") ) , (( 12)*1.0)) // INLINED!!
call s__effectTimed_create((AddSpecialEffectTarget("Abilities\\Spells\\Items\\AIsp\\SpeedTarget.mdl", udg_Spell__Caster, "head") ) , (( 12)*1.0)) // INLINED!!
                
                call DummyAddRecycleTimer(u , 1.0)
                call DummyAddRecycleTimer(u2 , 1.0)
                
                set a=null
                set b=null
                set u=null
                set u2=null
                
    endfunction 

    function DeterministicEnervation_onInit takes nothing returns nothing
                call RegisterSpellSystem('A0B9' , function DeterministicEnervation__eff , null , null , 0 , 0)
    endfunction 


//library DeterministicEnervation ends
//library DetonateSilvs:

function DetonateSilvs__eff takes nothing returns nothing
    local integer slivAttacks
    local integer b= GetUnitUserData(udg_Spell__Caster)
    local integer s= (LoadInteger(Table__ht, (SilvGroup), (b))) // INLINED!!
    local real x
    local real y
    
    //safety mechanism to make sure the loop will terminate
    if (LoadInteger(Table__ht, (((s__IPool__data_tar) + ((s)))), ((b)))) == 0 then // INLINED!!
        return
    else
        call s__IPool_remove(s,b)
    endif

    loop
        set udg_UDex=s__IPool_getItem(s)
        //Exitwhen there are no iterations left
        exitwhen (LoadInteger(Table__ht, (((s__IPool__data_tar) + ((s)))), ((udg_UDex)))) == 0 // INLINED!!
        
        
        set x=GetUnitX(udg_UDexUnits[udg_UDex])
        set y=GetUnitY(udg_UDexUnits[udg_UDex])
        
        
        //Play SFX on unit's location
        call SetSoundPosition(gg_snd_MeatwagonMissileHit1, x, y, 0)
        call SetSoundVolume(gg_snd_MeatwagonMissileHit1, 127)
        call StartSound(gg_snd_MeatwagonMissileHit1)
        
        //Get how many slivAttacks picked unit has taken
        set slivAttacks=(LoadInteger(Table__ht, (((s__IPool__data_tar) + ((s)))), ((udg_UDex)))) // INLINED!!
            
        //if 10 attacks (25*10=250), it becomes AoE
        //What it would do single-target - 150, and that 150 becomes AoE now.
        if slivAttacks > 9 then
            call UnitDamageTarget(udg_Spell__Caster, udg_UDexUnits[udg_UDex], I2R(slivAttacks) * 25.0 - 150, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
            call DamageAreaForPlayerTK(udg_Spell__CasterOwner , 250.0 , 150 , x , y)
        else //Single target dmg
            call UnitDamageTarget(udg_Spell__Caster, udg_UDexUnits[udg_UDex], I2R(slivAttacks) * 25.0, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
        endif
            
        //Pure Special Effects (visual) below
            
call s__effectTimed_create((AddSpecialEffect("Objects\\Spawnmodels\\NightElf\\NightElfBlood\\NightElfBloodDruidBear.mdl", x, y) ) , (( 10)*1.0)) // INLINED!!
                
        if not IsUnitType(udg_UDexUnits[udg_UDex], UNIT_TYPE_TAUREN) and not IsUnitType(udg_UDexUnits[udg_UDex], UNIT_TYPE_STRUCTURE) then
                
            if slivAttacks > 3 then
call s__effectTimed_create((AddSpecialEffect("Objects\\Spawnmodels\\Human\\HumanBlood\\BloodElfSpellThiefBlood.mdl", x, y) ) , (( 10)*1.0)) // INLINED!!
            endif
                    
            if slivAttacks > 5 then
call s__effectTimed_create((AddSpecialEffect("Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl", x, y) ) , (( 10)*1.0)) // INLINED!!
            endif
                
            if slivAttacks > 7 then
call s__effectTimed_create((AddSpecialEffect("Objects\\Spawnmodels\\Undead\\UndeadLargeDeathExplode\\UndeadLargeDeathExplode.mdl", x, y) ) , (( 10)*1.0)) // INLINED!!
            endif
                    
            if slivAttacks > 9 then
call s__effectTimed_create((AddSpecialEffect("Abilities\\Spells\\Orc\\WarStomp\\WarStompCaster.mdl", x, y) ) , (( 10)*1.0)) // INLINED!!
            endif
        else
call s__effectTimed_create((AddSpecialEffect("Objects\\Spawnmodels\\NightElf\\NECancelDeath\\NECancelDeath.mdl", x, y) ) , (( 10)*1.0)) // INLINED!!
                    
            if slivAttacks > 5 then
call s__effectTimed_create((AddSpecialEffect("Abilities\\Spells\\Orc\\WarStomp\\WarStompCaster.mdl", x, y) ) , (( 10)*1.0)) // INLINED!!
            endif
        endif
                
        //Remove unit, so the next picked unit will not be the same ;)
        call s__IPool_remove(s,udg_UDex)
        
    endloop
    
    //destroy the group since we no longer need it.
    call s__IPool_destroy(s)
    call RemoveSavedInteger(Table__ht, (SilvGroup), (b)) // INLINED!!
            
endfunction

//===========================================================================
function DetonateSilvs_onInit takes nothing returns nothing
            call RegisterSpellSystem('A07S' , function DetonateSilvs__eff , null , null , 1 , 1)
endfunction


//library DetonateSilvs ends
//library FlashGrenade:
        
        
        
        function s__FlashGrenade__Flash_onPeriod takes integer this returns boolean
                  local integer c= s__Missiles_data[this]
                   
                  set s__Count_c[c]=s__Count_c[c] + 1
                   
                  if s__Count_c[c] > 224 then
                    return true
                  endif
                  
                  if (s__Missiles_veloc[(this)] / Missiles_PERIOD) != 800 then // INLINED!!
                    call s__Missiles__set_speed(this,800)
                  endif
                  
                  return false
        endfunction 
        
        function s__FlashGrenade__Flash_onDestructable takes integer this,destructable dest returns boolean
                   local integer t= GetDestructableTypeId(dest)
                   local real x
                   local real y
                   local boolean o
                   
                   set x=s__Missiles_x[this] + Cos(3.14159 - s__FlashGrenade__Flash_ang[this]) * 200
                   set y=s__Missiles_y[this] + Sin(3.14159 - s__FlashGrenade__Flash_ang[this]) * 200
                   
                   set s__FlashGrenade__Flash_ang[this]=Atan2(y - s__Missiles_y[this], x - s__Missiles_x[this])
                   
                   if ( t == 'B000' or t == 'B001' ) then
                        set o=LoadBoolean((udg_hash), GetHandleId(dest), StringHash("isopen")) // INLINED!!
                        if o == false then
                            
                            call s__Missiles_deflect(this,x , y , 25)
                            return false
                        endif
                   endif
                   
                   call s__Missiles_deflect(this,x , y , 25)

                   return false
        endfunction 
        
        function s__FlashGrenade__Flash_onCliff takes integer this returns boolean
                  local real x= s__Missiles_x[this] + Cos(3.14159 - s__FlashGrenade__Flash_ang[this]) * 200
                  local real y= s__Missiles_y[this] + Sin(3.14159 - s__FlashGrenade__Flash_ang[this]) * 200
                  
                  set s__FlashGrenade__Flash_ang[this]=Atan2(y - s__Missiles_y[this], x - s__Missiles_x[this])
                  
                  call s__Missiles_deflect(this,x , y , 25)
                  
                  return false
                  
        endfunction
        
        function s__FlashGrenade__Flash_onFinish takes integer this returns boolean
                 local integer c= s__Missiles_data[this]
                 local unit fog= null
                 local real s= 0
                 local ability a
                 local integer p= ((GetPlayerId(GetOwningPlayer(s__Missiles_source[this])))) // INLINED!!
                
                 
                 if ( s__User_id[(s__User_LocalId)] == s__User_id[p] ) then // INLINED!!
                    set s=9999999999999999
                 endif
                 
                 //sfx
                 set bj_lastCreatedEffect=AddSpecialEffect("SuitEffects\\Flashbang.mdx", s__Missiles_x[this], s__Missiles_y[this])
                 call BlzSetSpecialEffectZ(bj_lastCreatedEffect, s)
call s__effectTimed_create((bj_lastCreatedEffect ) , (( 0.01)*1.0)) // INLINED!!
                 
                 call sc__Count_destroy(c)
                 call GroupEnumUnitsInRange(TempEnumGroup, s__Missiles_x[this], s__Missiles_y[this], 400, null)
                 loop
                      set fog=FirstOfGroup(TempEnumGroup)
                      exitwhen fog == null
                      set bj_lastCreatedUnit=(GetRecycledDummy(((s__Missiles_x[this] )*1.0) , (( s__Missiles_y[this] )*1.0) , (( 0)*1.0) , DummyRecycler__angle[DummyRecycler__countNext[DummyRecycler__countHead[DummyRecycler__upper]]])) // INLINED!!
                      call PauseUnit(bj_lastCreatedUnit, false)
                      call UnitAddTimedAbility((bj_lastCreatedUnit ) , ( 'A00N' ) , 1 , (( 3.0 )*1.0) , ( true) , 0 , 0.00 , null , null) // INLINED!!
                      //modify the blind ability
                      set a=BlzGetUnitAbility(bj_lastCreatedUnit, 'A00N')
                      call BlzSetAbilityRealLevelField(a, ABILITY_RLF_CAST_RANGE, 0, 9999999999)
                      call BlzSetUnitAbilityCooldown(bj_lastCreatedUnit, 'A00N', 0, 0)
                      call BlzSetUnitAbilityManaCost(bj_lastCreatedUnit, 'A00N', 0, 0)
                      call BlzSetAbilityRealLevelField(a, ABILITY_RLF_CHANCE_TO_MISS_CRS, 0, 300)
                      //make sure the ability is updated
                      call SetUnitAbilityLevel(bj_lastCreatedUnit, 'A00N', 2)
                      call SetUnitAbilityLevel(bj_lastCreatedUnit, 'A00N', 1)
                 
                      if fog != s__Missiles_source[this] then
                        //blind the target
                        call IssueTargetOrderById(bj_lastCreatedUnit, 852190, fog)
                      endif
                      call DummyAddRecycleTimer(bj_lastCreatedUnit , 3.0)
                      call GroupRemoveUnit(TempEnumGroup, fog)
                 endloop
                 
                 set a=null
                 set p=s__User_NULL
                 
                 return false
        endfunction 
    
    
    function FlashGrenade__eff takes nothing returns nothing
            local integer m
            local real x
            local real y
            local real x2
            local real y2
            local real ang
            local integer c= sc__Count_create()
            
            set x=GetUnitX(udg_Spell__Caster)
            set y=GetUnitY(udg_Spell__Caster)
                
            set x2=GetSpellTargetX()
            set y2=GetSpellTargetY()
            
            set ang=Atan2(y2 - y, x2 - x)
                
            set m=s__FlashGrenade__Flash__allocate(x , y , 25 , x2 , y2 , 25)
            set s__Missiles_source[m]=udg_Spell__Caster
            call s__Missiles__set_speed(m,800)
            call s__Missiles__set_scale(m,2.0)
            call s__Missiles__set_duration(m,5)
            call s__Missiles__set_arc(m,60)
            call s__Missiles__set_model(m,"SuitEffects\\Flashbang_NoFlash.mdx")
            set s__Missiles_collision[m]=160
            set s__Missiles_collideZ[m]=true
            set s__FlashGrenade__Flash_ang[m]=ang
            set s__Missiles_data[m]=c
            call s__Missiles_launch(m)
    endfunction 
    
    
    function FlashGrenade_onInit takes nothing returns nothing
            call RegisterSpellSystem('A09C' , function FlashGrenade__eff , null , null , 0 , 0)
    endfunction 


//library FlashGrenade ends
//library ForceVortex:

function ForceVortex__Slide takes nothing returns nothing
local timer k= GetExpiredTimer()
local unit l= LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
local real zvelocity= LoadReal((udg_hash), GetHandleId(k), StringHash("zvelocity")) // INLINED!!
local real c= LoadReal((udg_hash), GetHandleId(k), StringHash("angle")) // INLINED!!
local real height= LoadReal((udg_hash), GetHandleId(k), StringHash("height")) // INLINED!!
local real zforce= LoadReal((udg_hash), GetHandleId(k), StringHash("force")) // INLINED!!
local real x= GetUnitX(l)
local real y= GetUnitY(l)
local real x2= x + zforce * Cos(c * bj_DEGTORAD)
local real y2= y + zforce * Sin(c * bj_DEGTORAD)
local real x3
local real y3
local unit fog
local real arc
local integer a= BlzGetAbilityIntegerField(BlzGetUnitAbility(l, 'A06A'), ABILITY_IF_PRIORITY)

call SetUnitFlyHeight(l, height - GetTerrainZ(x , y), 0)

if GetTerrainZ(x2 , y2) > height then
    //If the collision is a result of the projectile falling then...
    if GetTerrainZ(x , y) == GetTerrainZ(x2 , y2) then
        set height=GetTerrainZ(x2 , y2)
        set zvelocity=- 0.5 * zvelocity
    elseif GetTerrainCliffLevel(x2, y2) > GetTerrainCliffLevel(x, y) then
        call KillUnit(l)
    endif
endif

call SetUnitX(l, x2)
call SetUnitY(l, y2)
call SetUnitFacing(l, c)

if not UnitAlive(l) then
    call PauseTimer(k)
    call ReleaseTimer(k)
    set udg_TempUnit=l
    call GroupEnumUnitsInRange(TempEnumGroup, x, y, 220, null)
    loop
        set fog=FirstOfGroup(TempEnumGroup)
        exitwhen fog == null
        set x2=GetUnitX(fog)
        set y2=GetUnitY(fog)
        
        if GetUnitPointValue(fog) != 37 and GetUnitAbilityLevel(fog, 'Aloc') != 1 then
            if a < 2 then
                set arc=bj_RADTODEG * Atan2(y2 - y, x2 - x)
                call Push2(fog , 800.0 , 400.0 , arc)
            else
                set x3=x - x2
                set y3=y - y2
                set arc=bj_RADTODEG * Atan2(y3, x3)
                set x3=SquareRoot(x3 * x3 + y3 * y3) * 100 / GetUnitMass(fog)
                call GenericKBLiteAngle(0.5 , arc , fog , l , x3 , 0 , " .mdx")
            endif
        endif
        
        call GroupRemoveUnit(TempEnumGroup, fog)
    endloop
    if a < 2 then
        set bj_lastCreatedEffect=AddSpecialEffect("war3mapImported\\IceSparks.mdx", x, y)
        call BlzSetSpecialEffectScale(bj_lastCreatedEffect, 6.0)
call s__effectTimed_create((bj_lastCreatedEffect ) , (( 1.0)*1.0)) // INLINED!!
    else
        set bj_lastCreatedEffect=AddSpecialEffect("SuitEffects\\Cyclon Explosion.mdx", x, y)
        call BlzSetSpecialEffectScale(bj_lastCreatedEffect, 1.0)
        call DestroyEffect(bj_lastCreatedEffect)
    endif
    call SetSoundPosition(gg_snd_BlueFireBurst, x, y, 0)
    call StartSound(gg_snd_BlueFireBurst)
endif

call SaveReal((udg_hash), GetHandleId(k), StringHash("height"), height + zvelocity / 25.0) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("zvelocity"), zvelocity - 40) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("angle"), c) // INLINED!!

set k=null
set l=null

endfunction


function ForceVortex__Act takes nothing returns nothing
local timer k
local real r
local unit u
local integer b

    if GetSpellAbilityId() == 'A06A' then
        set u=GetTriggerUnit()
        set b=BlzGetAbilityIntegerField(BlzGetUnitAbility(u, 'A097'), ABILITY_IF_PRIORITY)
        
        set k=(NewTimerEx(0)) // INLINED!!
        set udg_TempPoint=GetUnitLoc(u)
        set udg_TempPoint2=GetSpellTargetLoc()
        set r=DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2)
        if r > 900.0 then
            set r=900.0
        endif
        call SetUnitAnimation(u, "spell throw")
        call SaveReal((udg_hash), GetHandleId(k), StringHash("height"), GetLocationZ(udg_TempPoint)) // INLINED!!
        call SaveReal((udg_hash), GetHandleId(k), StringHash("force"), r / 900.0 * 450 / 25.0) // INLINED!!
        set udg_TempBool=false
        
        set bj_lastCreatedUnit=CreateUnit(Player(PLAYER_NEUTRAL_AGGRESSIVE), 'e01S', GetUnitX(u), GetUnitY(u), AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
        call UnitAddAbility(bj_lastCreatedUnit, 'A06A')
        call BlzSetAbilityIntegerField(BlzGetUnitAbility(bj_lastCreatedUnit, 'A06A'), ABILITY_IF_PRIORITY, b)
        call RemoveLocation(udg_TempPoint)
        call RemoveLocation(udg_TempPoint2)
        call RemoveLocation(udg_TempPoint3)
            
        call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), bj_lastCreatedUnit) // INLINED!!
        call TimerStart(k, 0.04, true, function ForceVortex__Slide)
        call SaveReal((udg_hash), GetHandleId(k), StringHash("angle"), GetUnitFacing(bj_lastCreatedUnit)) // INLINED!!
        call SaveReal((udg_hash), GetHandleId(k), StringHash("zvelocity"), 600.0) // INLINED!!
        set k=null
        set u=null
    endif
        
endfunction

//===========================================================================
function ForceVortex__onInit takes nothing returns nothing
    call RegisterAnyPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT , function ForceVortex__Act)
endfunction


//library ForceVortex ends
//library Generator:

    function Generator__CameraCheck takes nothing returns nothing
                local integer p= s__User_first
                local real x
                local real y
                
                loop
                    exitwhen p == s__User_NULL
                    
                    set x=GetUnitX(udg_Playerhero[s__User_id[p] + 1])
                    set y=GetUnitY(udg_Playerhero[s__User_id[p] + 1])
                    
                    
                    //the value to indicate that a station is in darkness
                    if s__User_id[(s__User_LocalId)] == s__User_id[p] then // INLINED!!
                            if (LoadInteger(Table__ht, (GroupChat), (GetSectorMain(null , x , y) + - 50000))) == - 1 then // INLINED!!
                                call SetDayNightModels("Event\\Blackout\\DNCAnimated2_Darker.mdx", "Event\\Blackout\\DNCDarkNightsLordUnit.mdx")
                                call SetSkyModel("Event\\Blackout\\SummerSphereCT2.mdx")
                            else
                                call SetDayNightModels("Environment\\DNC\\DNCDalaran\\DNCDalaranTerrain\\DNCDalaranTerrain.mdl", "Environment\\DNC\\DNCDalaran\\DNCDalaranUnit\\DNCDalaranUnit.mdl")
                                call SetSkyModel("Event\\Blackout\\StarSphere.mdx")
                    
                            endif
                    endif
                    
                    set p=s__User_next[p]
                    
                endloop
    endfunction
    
    
    function Generator__GroupUnitsInRect takes rect r returns nothing
                local unit u= null
                
                call GroupEnumUnitsInRect(TempEnumGroup, r, null)
                loop
                    set u=FirstOfGroup(TempEnumGroup)
                    exitwhen u == null
                    
                    if UnitRemoveAbility(u, 'A0B4') then
                    else
                        call UnitAddAbility(u, 'A0B4')
                    endif
                    call GroupRemoveUnit(TempEnumGroup, u)
                endloop
    endfunction
    
    
    
    
        
        
        //the sector index
        
        //the final count
        
//Implemented from module CTLExpire:
        function s__GenTimer_create takes nothing returns integer
            return CTL__CT(s__GenTimer_rctl32)
        endfunction
        function s__GenTimer_destroy takes integer this returns nothing
            call CTL__DT(this)
        endfunction
        function s__GenTimer_ectl32 takes nothing returns boolean
            local integer this=CTL__rf[s__GenTimer_rctl32]
            loop
                exitwhen 0 == this
        
        set s__GenTimer_c[this]=s__GenTimer_c[this] + 1
        
        //the amount necessary to fully play the gen death animation
        if s__GenTimer_c[this] >= s__GenTimer_e[this] then
        
            if s__GenTimer_u[this] != null then
                //Play the alternative death animation
                call AddUnitAnimationProperties(s__GenTimer_u[this], "Upgrade", true)
                call SetUnitAnimationByIndex(s__GenTimer_u[this], 2)
                call SetUnitTimeScale(s__GenTimer_u[this], 0.50)
            
                set s__GenTimer_u[this]=null
            else
                call Generator__GroupUnitsInRect(GetRectSector(s__GenTimer_s[this]))
            endif
            
            call CTL__DT((this)) // INLINED!!
            
        endif
        
//Implemented from module CTLEnd:
                set this=CTL__n[this]
            endloop
            return false
        endfunction
        function s__GenTimer_CTLEnd___onInit takes nothing returns nothing
            set s__GenTimer_rctl32=CTL__A(function s__GenTimer_ectl32)
        endfunction
        
        function s__GenTimer_start takes unit gen,integer sector returns integer
                    local integer this= (CTL__CT(s__GenTimer_rctl32)) // INLINED!!
                    
                    set s__GenTimer_c[this]=0
                    if gen == null then
                        set s__GenTimer_s[this]=sector
                        set s__GenTimer_e[this]=80
                    else
                        set s__GenTimer_u[this]=gen
                        set s__GenTimer_e[this]=216
                    endif
                    return this
        endfunction 
        
        function s__GenTimer_StatMess takes integer sector returns integer
            local integer b= 0
            local integer p= s__User_first
            
            loop
                exitwhen p == s__User_NULL
                if GetSectorMain(udg_Playerhero[s__User_id[p] + 1] , 0 , 0) == sector then
                    set b=b + R2I(1 * Pow(2, s__User_id[p]))
                endif
                set p=s__User_next[p]
            endloop
            
            return b
    
        endfunction
        
    
    
    

    function Generator__GenDeath takes nothing returns nothing
                local boolean t= GetUnitTypeId(udg_DamageEventTarget) == 'n00M'
                local real hp
                local integer s
                local integer p= s__User_NULL
                
                if t then
                    
                    set hp=GetWidgetLife(udg_DamageEventTarget)
                    set s=GetSectorMain(udg_DamageEventTarget , 0 , 0)
                    
                    if udg_DamageEventAmount >= hp and (LoadInteger(Table__ht, (GroupChat), (s + - 50000))) != - 1 then // INLINED!!
                    
                        set udg_DamageEventAmount=0
                        
                        call SetWidgetLife(udg_DamageEventTarget, 1)
                        call SetUnitInvulnerable(udg_DamageEventTarget, true)
                        
                        //Plays the death upgrade animation
                        call AddUnitAnimationProperties(udg_DamageEventTarget, "Upgrade", true)
                        call SetUnitAnimationByIndex(udg_DamageEventTarget, 0)
                        call PauseUnit(udg_DamageEventTarget, true)
                    
                        //marks the station as being disabled of its generator
                        call SaveInteger(Table__ht, (GroupChat), (s + - 50000), ( - 1)) // INLINED!!
                        
                        //give all units in station the night vision
                        call s__GenTimer_start(null , s)
                        
                        call chatTest_generateMessage(chatTest_gameTime , chatTest_SYSTEM_MESSAGE_TYPE , null , "|cff800000WARNING:|r |cff008000System shutting down...|r" , s__GenTimer_StatMess(s))
                        call chatTest_generateMessage(chatTest_gameTime , chatTest_SYSTEM_MESSAGE_TYPE , null , "|cff800000WARNING:|r |cff008000Shields disabled...|r" , s__GenTimer_StatMess(s))
                        call chatTest_generateMessage(chatTest_gameTime , chatTest_SYSTEM_MESSAGE_TYPE , null , "|cff008000Generator disabled.|r" , s__GenTimer_StatMess(s))
                        if GetSectorMain(udg_Playerhero[s__User_id[(s__User_LocalId)] + 1] , 0 , 0) == s then // INLINED!!
                            call PlaySoundBJ(gg_snd_StarfallCaster1)
                        endif
                        
                    elseif hp - udg_DamageEventAmount <= 0.5 * BlzGetUnitMaxHP(udg_DamageEventTarget) and (LoadInteger(Table__ht, (GroupChat), (s + - 50000))) != - 2 then // INLINED!!
                        call SetUnitAnimationByIndex(udg_DamageEventTarget, 3)
                        call SaveInteger(Table__ht, (GroupChat), (s + - 50000), ( - 2)) // INLINED!!
                        call s__GenTimer_start(udg_DamageEventTarget , 0)
                    endif
                    
                endif
                
    endfunction 
    
    function Generator__GenRepair takes nothing returns nothing
                local boolean t= GetUnitTypeId(udg_Spell__Target) == 'n00M'
                local real hp
                local integer s
                local real maxhp
                
                if t then
                
                    set hp=GetWidgetLife(udg_Spell__Target)
                    set maxhp=BlzGetUnitMaxHP(udg_Spell__Target)
                    set s=GetSectorMain(udg_Spell__Target , 0 , 0)
                    
                    if hp >= 0.50 * maxhp then
                    
                        call AddUnitAnimationProperties(udg_Spell__Target, "Upgrade", false)
                        call SetUnitAnimationByIndex(udg_Spell__Target, 1)
                        call SaveInteger(Table__ht, (GroupChat), (s + - 50000), ( 0)) // INLINED!!
                        
                    elseif hp >= 0.25 * maxhp then
                        
                        //Removes the night vision from all units that are in the station
                        call Generator__GroupUnitsInRect(GetRectSector(s))
                        
                        call AddUnitAnimationProperties(udg_Spell__Target, "Upgrade", true)
                        call SetUnitAnimationByIndex(udg_Spell__Target, 2)
                        call PauseUnit(udg_Spell__Target, false)
                        call SetUnitInvulnerable(udg_Spell__Target, false)
                        call SaveInteger(Table__ht, (GroupChat), (s + - 50000), ( - 2)) // INLINED!!
                        
                    endif
                
                endif
                        
    
    endfunction 
    
    function Generator__LightUnit takes nothing returns nothing
                local unit u= GetTriggerUnit()
                local real x= GetUnitX(u)
                local real y= GetUnitY(u)
                local integer s= GetSectorMain(null , x , y)
                
                if (LoadInteger(Table__ht, (GroupChat), (s - 50000))) == - 1 then // INLINED!!
                    if UnitRemoveAbility(u, 'A0B4') then
                    else
                        call UnitAddAbility(u, 'A0B4')
                    endif
                endif
                
                set u=null
    endfunction 

    function Generator_GenInt takes nothing returns nothing
            local timer ti= (NewTimerEx(0)) // INLINED!!
            local trigger t= CreateTrigger()
            local region r= CreateRegion()
            
            //Niffy 
            call RegionAddRect(r, gg_rct_ST4S2)
            //Kyo   
            call RegionAddRect(r, gg_rct_ST3)
            //Abitress 
            call RegionAddRect(r, gg_rct_ST1)
           // Swagger 
            call RegionAddRect(r, gg_rct_ST5)
           // Syluss 
            call RegionAddRect(r, gg_rct_ST9)
           // Pown   
            call RegionAddRect(r, gg_rct_ST10)
            
            call TimerStart(ti, 0.0312500, true, function Generator__CameraCheck)
            call h__TriggerRegisterVariableEvent(t, "udg_DamageModifierEvent", EQUAL, 1.00)
            call TriggerAddCondition(t, Condition(function Generator__GenDeath))
            
            set t=CreateTrigger()
            call TriggerRegisterEnterRegion(t, r, null)
            call TriggerRegisterLeaveRegion(t, r, null)
            
            call TriggerAddCondition(t, Condition(function Generator__LightUnit))
            
            
            //Service Suit repair
            call RegisterSpellSystem('A00Q' , null , null , function Generator__GenRepair , 0 , 0)
            //Operative Suit Repair
            call RegisterSpellSystem('A08V' , null , null , function Generator__GenRepair , 0 , 0)
            
            set ti=null
            set t=null
            set r=null
    endfunction 




//library Generator ends
//library GroupChats:

    function GroupChats_getSender takes integer id returns string

        return chatTest_playerColor[id] + GetPlayerName(Player(id)) + ":|r"

    endfunction
    
    function GroupChats__IsPlayerInGroup takes integer gi,integer pi returns integer
                //the group count
                local integer gc= 0
                local integer i= 0
                
                //Player hero coordinates
                local real x= GetUnitX(udg_Playerhero[pi + 1])
                local real y= GetUnitY(udg_Playerhero[pi + 1])
                
                //Sector Indexs
                local integer s= GetSectorMain(null , x , y)
                local integer s2
                
                //the group
                local integer gp= (LoadInteger(Table__ht, (GroupChat), (gi))) // INLINED!!
            
                loop
                    exitwhen i > 11
                    
                    //is player in the same station?
                    set x=GetUnitX(udg_Playerhero[i + 1])
                    set y=GetUnitY(udg_Playerhero[i + 1])
                    set s2=GetSectorMain(null , x , y)
                    
                    //Is player in group?
                    if (HaveSavedInteger(Table__ht, (((s__IPool__data_tar) + ((gp)))), ((i)))) or (LoadInteger(Table__ht, (GroupChat), (( i + 1 ) * - 10))) == gi then // INLINED!!
                        
                        //Generator is on and the other player unit is not in a sector that does not have generator on 
                        //or Generator isn't on and the player unit is in the same sector
                        if ( (LoadInteger(Table__ht, (GroupChat), (s + - 50000))) >= 0 and (LoadInteger(Table__ht, (GroupChat), (s2 + - 50000))) >= 0 ) or ( (LoadInteger(Table__ht, (GroupChat), (s + - 50000))) == - 1 and s == s2 ) then // INLINED!!
                            set gc=gc + R2I(1 * Pow(2, i))
                        endif
                        
                    endif
                    
                    set i=i + 1
                    
                endloop
                
                //if the player is muted by alien ability then only send the player the message
                if (LoadInteger(Table__ht, (GroupChat), (( pi + 1 ) * - 1000))) == - 1 then // INLINED!!
                
                    set gc=R2I(1 * Pow(2, pi)) //the partial sum for the specific player
                    
                endif
                
                return gc
                    
    endfunction
    
    
    function GroupChats_Chat takes player p,string chat returns nothing
                local integer s= s__String_create(chat)
                local integer s2
                local integer pi= GetPlayerId(p)
                local integer si= s__String_find(s,";" , 0)
                local integer b= (LoadInteger(Table__ht, (s__StringIndexer__D_data), (StringHash((SubString((s__String_value[(s)]), 0, si)))))) // INLINED!!
                
                //Checks if group is valid
                if b != 0 then
                    
                    set s2=s__String_create("[|cff808080" + SubString((s__String_value[(s)]), 0, si) + "|r]") // INLINED!!
                    
                    call SaveInteger(Table__ht, (GroupChat), (( pi + 1 ) * - 10), ( b)) // INLINED!!
                
                elseif (LoadInteger(Table__ht, (GroupChat), (( pi + 1 ) * - 10))) != 0 then // INLINED!!
            
                    set b=(LoadInteger(Table__ht, (GroupChat), (( pi + 1 ) * - 10))) // INLINED!!
                    
                    set s2=s__String_create((StringIndexer__strings[(b)])) // INLINED!!
                    
                    //for group names, [] needs to be added
                    if s__String_find(s2,"[" , 0) == - 1 then
                        call s__String_append(s2,"]")
                        call s__String_insert(s2,0 , "[")
                    endif
        
                else
                    //if group is invalid do not generate message
                    call s__String_destroy(s)
                    return
                    
                endif
                
                if si == - 1 then
                
                    set si=0
                    
                endif
                
                call s__String_replace(s,0 , (s__String_length[(s)]) , SubString((s__String_value[(s)]), si, (s__String_length[(s)]))) // INLINED!!
                
                if s__String_find(s,";" , 0) != - 1 then
                
                    call s__String_shift(s)
                    
                endif
                
                call chatTest_generateMessage(chatTest_gameTime , (s__String_value[(s2)]) , chatTest_playerIcon[pi] , GroupChats_getSender(pi) + " " + (s__String_value[(s)]) , GroupChats__IsPlayerInGroup(b , pi)) // INLINED!!
                
                call s__String_destroy(s)
                call s__String_destroy(s2)
                
    endfunction 
    
    function GroupChats_EvilBroadcast takes string chat,player p returns nothing
                local integer pi= GetPlayerId(p)
                local integer s= s__String_create(chat)
                
                if udg_Player_IsParasiteSpawn[pi] or p == udg_Parasite then
                
                    call SaveInteger(Table__ht, (GroupChat), (( pi + 1 ) * - 10), ( (LoadInteger(Table__ht, (s__StringIndexer__D_data), (StringHash((ALIEN_MESSAGE_TYPE))))))) // INLINED!!
                    
                elseif udg_Player_IsMutantSpawn[pi] or p == udg_Mutant then
                
                    call SaveInteger(Table__ht, (GroupChat), (( pi + 1 ) * - 10), ( (LoadInteger(Table__ht, (s__StringIndexer__D_data), (StringHash((MUTANT_MESSAGE_TYPE))))))) // INLINED!!
                    
                elseif udg_Player_IsRogueAndroidSpawn[pi] or p == udg_RogueAndroid then
                    
                    call SaveInteger(Table__ht, (GroupChat), (( pi + 1 ) * - 10), ( (LoadInteger(Table__ht, (s__StringIndexer__D_data), (StringHash((ROGUE_MESSAGE_TYPE))))))) // INLINED!!
                    
                endif
                
                call s__String_shift(s)
                
                call GroupChats_Chat(p , (s__String_value[(s)])) // INLINED!!
                
    endfunction 
    
    
    
    function GroupChats_Gadd takes string s,integer pid,player p returns nothing
                local integer pi= GetPlayerId(p)
                local integer gc= (LoadInteger(Table__ht, (s__StringIndexer__D_data), (StringHash((s))))) // INLINED!!
                local integer rg
                
                if gc != 0 then
                
                    set rg=(LoadInteger(Table__ht, (GroupChat), (gc))) // INLINED!!
                    
                    call s__IPool_add(rg,pid , 1)
                    
                    call chatTest_sendSystemMessage(pid , "|cff008000You have been added to " + s + "|r")
                    call chatTest_sendSystemMessage(pid , "|cff008000Utilize |cff0000ffgroupname|r|cffff0000;|r|cffc0c0c0message|r |cff008000once to speak to your other member personnel|r")
                    call chatTest_sendSystemMessage(pi , "|cff008000Personnel added to group channel successfully.|r")
                else
                    
                    call chatTest_sendSystemMessage(pi , "|cff800000Systemic error: group not found.|r")
                    
                endif
                
    endfunction

    function GroupChats_Create takes string si,player p returns nothing
        local integer s= s__String_create(si)
        local integer gc= 0
        local integer rg= s__IPool_create()
        local integer pid= GetPlayerId(p)
        
        //Checks to make sure the group name isn't already taken
        if (LoadInteger(Table__ht, (s__StringIndexer__D_data), (StringHash((SubString((s__String_value[(s)]), 13, (s__String_length[(s)]))))))) == 0 then // INLINED!!
        
            //Indexes the group name
            set gc=IndexString(SubString((s__String_value[(s)]), 13, (s__String_length[(s)]))) // INLINED!!
            
            //Saves the group of players that belongs to the group to the group name index
            call SaveInteger(Table__ht, (GroupChat), (gc), ( rg)) // INLINED!!
        
            //Saves the player to the group
            call s__IPool_add(rg,pid , 1)
            
            call chatTest_sendSystemMessage(pid , "|cff008000Group successfully created.|r")
            
        else
        
            call s__IPool_destroy(rg)
            call chatTest_sendSystemMessage(pid , "|cff800000Systemic Error: group channel already utilized.|r")
            
        endif
        
        call s__String_destroy(s)
        set rg=0
        
    endfunction 


//library GroupChats ends
//library MagneticAttacks:

function SlivText takes real r,unit a,unit u returns nothing
    local location b= GetUnitLoc(a)
    local texttag w= CreateTextTagLocBJ(I2S(R2I(r)), b, 90.00, 6.00, 100, 0.00, 0.00, 0)
    call AddSpecialEffect("Abilities\\Spells\\Human\\FlakCannons\\FlakTarget.mdl", GetUnitX(u) + 70 * Cos(( GetUnitFacing(u) - 6 ) * bj_DEGTORAD), GetUnitY(u) + 70 * Sin(( GetUnitFacing(u) - 6 ) * bj_DEGTORAD))
    call PlaySoundAtPointBJ(gg_snd_AxeMissileLaunch1, 100, b, 0)
    call SetTextTagVelocityBJ(w, 86.00, 90)
    call SetTextTagPermanent(w, false)
    call SetTextTagFadepoint(w, 0.0)
    call SetTextTagLifespan(w, 2.00)
    call SetTextTagVisibility(w, false)
    
    if IsLocationVisibleToPlayer(b, GetLocalPlayer()) then
        call SetTextTagVisibility(w, true)
    endif
    
    call RemoveLocation(b)
    set b=null
    set w=null
endfunction

//simply prevent unit from attacking if unit is attacking an ally
function MagneticAttacks__Actions takes nothing returns nothing
    local integer t= GetUnitTypeId(GetAttacker())
    local unit u
    local unit u2
    
    if t != 'h04K' then
        return
    else
        set u=GetAttacker()
        set u2=GetTriggerUnit()
    endif
    
    //Is Alien
    if ( ( IsPlayerAlien(GetOwningPlayer(u)) and IsPlayerAlien(GetOwningPlayer(u2)) ) and not ( udg_AllowAlienTK ) and not ( IsPlayerMainInfected(GetOwningPlayer(u)) ) ) or ( ( IsPlayerMutant(GetOwningPlayer(u)) and IsPlayerMutant(GetOwningPlayer(u2)) ) and not ( udg_AllowMutantTK ) and not ( IsPlayerMainInfected(GetOwningPlayer(u)) ) ) then
        set u=null
        set u2=null
        return
    endif

endfunction


function MagneticAttacks_DamageEffect takes unit sor,unit tar,real damage returns nothing
        local integer b= GetUnitUserData(sor)
        local integer s= (LoadInteger(Table__ht, (SilvGroup), (b))) // INLINED!!
        local integer a= GetUnitUserData(tar)
        
        
        if (LoadInteger(Table__ht, (((s__IPool__data_tar) + ((s)))), ((b)))) == 0 then // INLINED!!
            set s=s__IPool_create()
            call SaveInteger(Table__ht, (SilvGroup), (b), ( s)) // INLINED!!
            call s__IPool_add(s,b , 10)
        endif
        
        //If max sliv attacks
        if (LoadInteger(Table__ht, (((s__IPool__data_tar) + ((s)))), ((a)))) > 11 then // INLINED!!
        
            //Show sliv number text over the unit
            call SlivText(( I2R((LoadInteger(Table__ht, (((s__IPool__data_tar) + ((s)))), ((a))))) ) * 25.0 , tar , sor) // INLINED!!
        
            //Special Effect (to show unit has maxed out on slivs)
call s__effectTimed_create((AddSpecialEffect("Abilities\\Spells\\Human\\FlakCannons\\FlakTarget.mdl", GetUnitX(tar), GetUnitY(tar)) ) , (( 10)*1.0)) // INLINED!!
        
        else
            //Show sliv number text over the unit
            call SlivText(( I2R((LoadInteger(Table__ht, (((s__IPool__data_tar) + ((s)))), ((a))))) + 1 ) * 25.0 , tar , sor) // INLINED!!
    
            //Increment slivAttacks by one.
            call s__IPool_add(s,a , 1)
        endif
        
endfunction 


//===========================================================================
function MagneticAttacks__onInit takes nothing returns nothing
    set SilvGroup=s__Table_create()
    call RegisterAnyPlayerUnitEvent(EVENT_PLAYER_UNIT_ATTACKED , function MagneticAttacks__Actions)
endfunction


//library MagneticAttacks ends
//library Planet:



function Planet___IsDestType takes destructable d returns boolean
    if GetDestructableTypeId(d) == 'DTrx' then
        return false
    elseif GetDestructableTypeId(d) == 'YT40' then
        return false
    elseif GetDestructableTypeId(d) == 'YT16' then
        return false
    elseif GetDestructableTypeId(d) == 'YT30' then
        return false
    elseif GetDestructableTypeId(d) == 'YT06' then
        return false
    endif
    
    return true
endfunction

function DestAction takes nothing returns nothing
    local destructable d= GetEnumDestructable()
    
    if Planet___IsDestType(d) then
        call KillDestructable(d)
    elseif GetDestructableTypeId(d) == 'B006' then
        call RemoveDestructable(d)
    endif
    
    set d=null
    
endfunction


function Planet___Damage takes unit sor,unit tar returns nothing
    if (GetUnitAbilityLevel((tar), 'A071') == 1) then // INLINED!!
        call UnitDamageTarget(sor, tar, 10000.0, true, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
    elseif sor != tar then
        call UnitDamageTarget(sor, tar, 4900.0, true, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
    else
        call UnitDamageTarget(sor, tar, 20.0, true, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
    endif
endfunction


function SwaggerDamage takes unit u returns nothing
           local real h
           local integer d
           if udg_Swagger_Grounded == true and UnitAlive(gg_unit_h00X_0049) then
           
                call UnitDamageTarget(u, gg_unit_h00X_0049, 20000, true, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
                
                set h=GetWidgetLife(gg_unit_h00X_0049) / 20000.0
                
                    if I2R(R2I(h)) == h then
                        set d=R2I(h)
                    else
                        set d=R2I(h) + 1
                    endif
                    
                call DisplayTextToPlayer(GetLocalPlayer(), 0, 0, "|cffFF0000WARNING: Atmospheric disturbance is damaging U.S.I. Swagger hull integrity. An immediate launch is recommended. Estimated " + I2S(d) + " impacts remaining before hull integrity failure.")
            endif

endfunction 


    
    
    
//Implemented from module CTLExpire:
        function s__Finish_create takes nothing returns integer
            return CTL__CT(s__Finish_rctl32)
        endfunction
        function s__Finish_destroy takes integer this returns nothing
            call CTL__DT(this)
        endfunction
        function s__Finish_ectl32 takes nothing returns boolean
            local integer this=CTL__rf[s__Finish_rctl32]
            loop
                exitwhen 0 == this
    
    set s__Finish_c[this]=s__Finish_c[this] + 1
    
    if s__Finish_c[this] == 360 then
    
        set bj_lastCreatedEffect=AddSpecialEffect("war3mapImported\\NuclearExplosion.mdl", s__Finish_x[this], s__Finish_y[this])
        call BlzSetSpecialEffectScale(bj_lastCreatedEffect, 2)
        call BlzSetSpecialEffectTimeScale(bj_lastCreatedEffect, 0.75)
call s__effectTimed_create((bj_lastCreatedEffect ) , (( 3.0)*1.0)) // INLINED!!
        
        call sc__Finish_EnumDestructablesInCircle(this,712.0 , function DestAction)
        
        call GroupEnumUnitsInRange(TempEnumGroup, s__Finish_x[this], s__Finish_y[this], 600, null)
        loop
             set bj_lastCreatedUnit=FirstOfGroup(TempEnumGroup)
             exitwhen bj_lastCreatedUnit == null
             
             call Planet___Damage(s__Finish_u[this] , bj_lastCreatedUnit)
             
             call GroupRemoveUnit(TempEnumGroup, bj_lastCreatedUnit)
        endloop
        
        call TerrainDeformCrater(s__Finish_x[this], s__Finish_y[this], 600, 128.00, 500, true)
        call SetBlight(Player(bj_PLAYER_NEUTRAL_EXTRA), s__Finish_x[this], s__Finish_y[this], 600, true)
        
        set bj_lastCreatedUnit=CreateUnit(Player(PLAYER_NEUTRAL_AGGRESSIVE), 'e014', s__Finish_x[this], s__Finish_y[this], GetRandomReal(0, 360))
        call SetUnitTimeScale(bj_lastCreatedUnit, 0.0)
        call PauseUnit(bj_lastCreatedUnit, true)
        
        set s__Finish_u[this]=null
        
    elseif s__Finish_c[this] > 360 and s__Finish_c[this] < 400 and ModuloInteger(s__Finish_c[this], 18) == 0 then
        
        call GroupEnumUnitsInRange(TempEnumGroup, s__Finish_x[this], s__Finish_y[this], 700, null)
        loop
             set bj_lastCreatedUnit=FirstOfGroup(TempEnumGroup)
             exitwhen bj_lastCreatedUnit == null
             
             call Planet___Damage(bj_lastCreatedUnit , bj_lastCreatedUnit)
             
             call GroupRemoveUnit(TempEnumGroup, bj_lastCreatedUnit)
        endloop
        
    elseif s__Finish_c[this] > 400 then
        set s__Finish_c[this]=361
    endif
    
//Implemented from module CTLEnd:
                set this=CTL__n[this]
            endloop
            return false
        endfunction
        function s__Finish_CTLEnd___onInit takes nothing returns nothing
            set s__Finish_rctl32=CTL__A(function s__Finish_ectl32)
        endfunction
    
    function s__Finish_EnumDestructablesInCircle takes integer this,real radius,code actionFunc returns nothing
            local rect r
            if radius >= 0 then
                set r=Rect(s__Finish_x[this] - radius, s__Finish_y[this] - radius, s__Finish_x[this] + radius, s__Finish_y[this] + radius)
                call EnumDestructablesInRect(r, null, actionFunc)
            endif
            call RemoveRect(r)
    endfunction 
    
    function s__Finish_start takes unit u,real x,real y returns nothing
             local integer this= (CTL__CT(s__Finish_rctl32)) // INLINED!!
             
             set s__Finish_u[this]=u
             set s__Finish_x[this]=x
             set s__Finish_y[this]=y
             
    endfunction 



    

    
    //the damage dealer 
    
    //the timer indciator
    
//Implemented from module CTL:
        function s__MinerthaTimer_create takes nothing returns integer
            return CTL__CT(s__MinerthaTimer_rctl32)
        endfunction
        function s__MinerthaTimer_destroy takes integer this returns nothing
            call CTL__DT(this)
        endfunction
        function s__MinerthaTimer_ectl32 takes nothing returns boolean
            local integer this=CTL__rf[s__MinerthaTimer_rctl32]

    //coordinates
    local real x
    local real y
    
    //the other coordinates
    local real x2
    local real y2
    
    //the integer loop
    local integer b= 0
    
    //the random angle
    local real a
    
    //the random distance
    local real d
    
    //the handle id of the planet
    local integer h= 0
    
//Implemented from module CTLExpire:
            loop
                exitwhen 0 == this
    
    set s__MinerthaTimer_c[this]=s__MinerthaTimer_c[this] + 1
    
    if ModuloInteger(s__MinerthaTimer_c[this], 18) == 0 then
            
           set udg_MinerthaDamageCounter=udg_MinerthaDamageCounter - 30000.00
           
           set x=GetRandomReal(GetRectMinX(gg_rct_Planet), GetRectMaxX(gg_rct_Planet))
           set y=GetRandomReal(GetRectMinY(gg_rct_Planet), GetRectMaxY(gg_rct_Planet))
           
           call SwaggerDamage(s__MinerthaTimer_u[this])
           
           loop
                exitwhen b > 70
                
                if b <= 35 then
                    set x2=x + Cos(bj_DEGTORAD * ( 10 * b )) * 600
                    set y2=y + Sin(bj_DEGTORAD * ( 10 * b )) * 600
                else
                    set d=GetRandomReal(0, 590.0)
                    set a=GetRandomReal(0, 360)
                    set x2=x + Cos(bj_DEGTORAD * a) * d
                    set y2=y + Sin(bj_DEGTORAD * a) * d
                endif
                
call s__effectTimed_create((AddSpecialEffect("Abilities\\Spells\\Other\\TalkToMe\\TalkToMe.mdl", x2, y2) ) , (( 10.0)*1.0)) // INLINED!!
                
                set b=b + 1
                
           endloop
           
           set udg_MinerthaDPS=udg_MinerthaDPS + 3.0
           
           call PingMinimapEx(x, y, 10.0, 64, 64, 255, false)
        
           call s__Finish_start(s__MinerthaTimer_u[this] , x , y)
           
    endif
    
    call SetUnitState(gg_unit_h008_0196, UNIT_STATE_MANA, udg_MinerthaDamageCounter)
    
    if udg_MinerthaDamageCounter < 30000 then
    
        set s__MinerthaTimer_u[this]=null
        
        call RemoveSavedInteger(Table__ht, (PlanetData), (GetUnitUserData(gg_unit_h008_0196))) // INLINED!!
        
        call DisplayTextToPlayer(Player(0), 0, 0, "FINISHED")
        
        call CTL__DT((this)) // INLINED!!
        
    endif
    
//Implemented from module CTLEnd:
                set this=CTL__n[this]
            endloop
            return false
        endfunction
        function s__MinerthaTimer_CTLEnd___onInit takes nothing returns nothing
            set s__MinerthaTimer_rctl32=CTL__A(function s__MinerthaTimer_ectl32)
        endfunction
    
    function s__MinerthaTimer_start takes real damage,unit source returns nothing
              local integer h= GetUnitUserData(gg_unit_h008_0196)
              local integer this= (LoadInteger(Table__ht, (PlanetData), (h))) // INLINED!!
              
              if s__MinerthaTimer_bol[this] == 0 then
                
                  set this=(CTL__CT(s__MinerthaTimer_rctl32)) // INLINED!!
                
                  set s__MinerthaTimer_u[this]=source
                
                  set s__MinerthaTimer_c[this]=0
                
                  set s__MinerthaTimer_bol[this]=1
                  
                  call SaveInteger(Table__ht, (PlanetData), (h), ( this)) // INLINED!!
                  
             else
             
                  set s__MinerthaTimer_u[this]=source
                  
             endif
             
             call DisplayTextToPlayer(Player(0), 0, 0, I2S(s__MinerthaTimer_bol[this]))
                
             set udg_MinerthaDamageCounter=udg_MinerthaDamageCounter + damage
             
             call DisplayTextToPlayer(Player(0), 0, 0, R2S(udg_MinerthaDamageCounter))
             
             
              
    endfunction 



//library Planet ends
//library SharedReactions:
    
    

    
    
//Implemented from module Alloc:
        function s__Generics_allocate takes nothing returns integer
            return Alloc_Allocate(si__Generics)
        endfunction
        function s__Generics_deallocate takes integer this returns nothing
            call Alloc_Deallocate(si__Generics , this)
        endfunction
        
        function s__Generics_BuffRemove takes unit tar,integer a,integer b returns nothing
                  call UnitRemoveAbility(tar, a)
                  call UnitRemoveAbility(tar, b)
        endfunction 
    
    
            
          
          //the target unit
          
          //the source
          
          //How long it lasts
          
          //How often the effects occur
          
          //this is the determinator to what effect occurs
          
          //effect
        //  private static effect array eff
          
          //auxillary varibles
          
//Implemented from module CTL:
        function s__ShareFunc_create takes nothing returns integer
            return CTL__CT(s__ShareFunc_rctl32)
        endfunction
        function s__ShareFunc_destroy takes integer this returns nothing
            call CTL__DT(this)
        endfunction
        function s__ShareFunc_ectl32 takes nothing returns boolean
            local integer this=CTL__rf[s__ShareFunc_rctl32]
          
          //the random indicator
          local integer r
          
          //the coordinates of the unit
          local real x
          local real y
          
          //the handle id
          local integer h
          
          //the movespeed bonus
          local integer ms
          
//Implemented from module CTLExpire:
            loop
                exitwhen 0 == this
          
          set h=GetUnitUserData(s__ShareFunc_tar[this])
          
          set s__ShareFunc_c[this]=s__ShareFunc_c[this] + 1
          
          if s__ShareFunc_c[this] >= s__ShareFunc_e[this] then
               
              call RemoveSavedInteger(Table__ht, (Elements), (h + s__ShareFunc_b[this] * 5000)) // INLINED!!
              
              set s__ShareFunc_tar[this]=null
              
              set s__ShareFunc_sor[this]=null
              
             // call DestroyEffect(.eff[this])
              
           //   set .eff[this] = null
              
              call CTL__DT((this)) // INLINED!!
              
         elseif ModuloInteger(s__ShareFunc_c[this], s__ShareFunc_per[this]) == 0 then
        
              
                if s__ShareFunc_b[this] == 1 and s__ShareFunc_c[this] >= 48 then
                    
                    if (LoadEffectHandle(Table__ht, (((Elements))), (h + this + s__ShareFunc_b[this] * 10))) != null then // INLINED!!
                            
                            call DestroyEffect((LoadEffectHandle(Table__ht, (((Elements))), (h + this + s__ShareFunc_b[this] * 10)))) // INLINED!!
                            
                            call SaveEffectHandle(Table__ht, (((Elements))), (h + this + s__ShareFunc_b[this] * 10), ( null)) // INLINED!!
                            
                            call RemoveSavedHandle(Table__ht, (((Elements))), (h + this + s__ShareFunc_b[this] * 10)) // INLINED!!
                            
                    endif
                    
                elseif s__ShareFunc_b[this] == 2 then
                
                    set r=GetRandomInt(0, 10)
                    
                    set ms=s__Movespeed_create(s__ShareFunc_tar[this] , 0.01 * r , 0)
                    call s__Movespeed__set_duration(ms,2.00)
                    
                    call UnitDamageTarget(s__ShareFunc_sor[this], s__ShareFunc_tar[this], 5 * r, false, true, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNKNOWN, WEAPON_TYPE_WHOKNOWS)
                    
call s__effectTimed_create((AddSpecialEffectTarget("Abilities\\Spells\\Orc\\Purge\\PurgeBuffTarget.mdl", s__ShareFunc_tar[this], "origin") ) , (( 2.0)*1.0)) // INLINED!!
                    
                    
                elseif s__ShareFunc_b[this] == 3 then
                    
                    call UnitDamageTarget(s__ShareFunc_sor[this], s__ShareFunc_tar[this], s__ShareFunc_dam[this], false, true, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNKNOWN, WEAPON_TYPE_WHOKNOWS)
                    
                    //every three seconds increase damage and armor reduction
                    if ModuloInteger(s__ShareFunc_c[this], 96) == 0 then
                    
                        set s__ShareFunc_dam[this]=s__ShareFunc_dam[this] + 2
                        call IncUnitAbilityLevel(s__ShareFunc_tar[this], 'A0CF')
                        
                    endif
                
               // elseif .b[this] == 5 then
                
                //    call UnitDamageTarget(.sor[this],.tar[this],4.390,false,true,ATTACK_TYPE_CHAOS,DAMAGE_TYPE_UNKNOWN,WEAPON_TYPE_WHOKNOWS)
                    
               /// elseif .b[this] == 6 then
                
                //    call SetUnitVertexColor(.tar[this],255,255,255,255)
                //    call UnitRemoveMoveSpeedBonuses(.tar[this],false,true)
                    
                endif
                        
        endif
            
//Implemented from module CTLNull:
                set this=CTL__n[this]
            endloop
          
//Implemented from module CTLEnd:
            return false
        endfunction
        function s__ShareFunc_CTLEnd___onInit takes nothing returns nothing
            set s__ShareFunc_rctl32=CTL__A(function s__ShareFunc_ectl32)
        endfunction
          
        function s__ShareFunc_Vaporize takes unit tar,unit sor,real damage returns nothing
                    local real d= 0.20 * damage
                    local real x
                    local real y
                    
                    if d >= GetWidgetLife(tar) then
                        
                        call SetUnitVertexColor(tar, 50, 50, 50, 0)
                        
                        call SaveBoolean(Table__ht, (((Elements))), (GetPlayerId(GetOwningPlayer(tar))), ( true)) // INLINED!!
                        
                    endif
                    
call s__effectTimed_create((AddSpecialEffectTarget("New\\Elements\\VolcanoAshes.mdx", tar, "chest") ) , (( 2.0)*1.0)) // INLINED!!
                    
                    call UnitDamageTarget(sor, tar, d, false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNKNOWN, WEAPON_TYPE_WHOKNOWS)
                    
                    
                    call s__Generics_BuffRemove(tar , 'XA07' , 'XA02')
                        
          endfunction 
          
          function s__ShareFunc_Freeze takes unit tar,unit sor returns integer
                     local integer this= (CTL__CT(s__ShareFunc_rctl32)) // INLINED!!
                     local integer h
                     
                     set s__ShareFunc_tar[this]=tar
                     set s__ShareFunc_sor[this]=sor
                     set s__ShareFunc_c[this]=0
                     set s__ShareFunc_b[this]=1
                     set s__ShareFunc_e[this]=144
                     set s__ShareFunc_per[this]=16
                     
                     set h=GetUnitUserData(tar)
                     
                     call SaveEffectHandle(Table__ht, (((Elements))), (h + this + s__ShareFunc_b[this] * 5000 * 10), ( AddSpecialEffectTarget("Abilities\\Spells\\Undead\\FreezingBreath\\FreezingBreathTargetArt.mdl", s__ShareFunc_tar[this], "origin"))) // INLINED!!
                     
                     call SaveInteger(Table__ht, (Elements), (h + s__ShareFunc_b[this] * 5000), ( this)) // INLINED!!
                     
                     call s__Generics_BuffRemove(tar , 'XA07' , 'B003')
                     
                     return this
          endfunction 
          
          function s__ShareFunc_ElectricCharge takes unit tar,unit sor returns integer
                    local integer this
                    local integer h= GetHandleId(tar)
                    
                    if (LoadInteger(Table__ht, (Elements), (h + 2 * 5000))) == 0 then // INLINED!!
                    
                        set this=(CTL__CT(s__ShareFunc_rctl32)) // INLINED!!
                        
                        set s__ShareFunc_tar[this]=tar
                        set s__ShareFunc_sor[this]=sor
                        set s__ShareFunc_c[this]=0
                        set s__ShareFunc_b[this]=2
                        set s__ShareFunc_e[this]=480
                        set s__ShareFunc_per[this]=80
                    
                        call SaveInteger(Table__ht, (Elements), (h + s__ShareFunc_b[this]), ( this)) // INLINED!!
                    endif
                    
                    call s__Generics_BuffRemove(tar , 'XA07' , 'XA03')
                    
                    return this
          endfunction
          
          function s__ShareFunc_Melt takes unit tar,unit sor returns integer
                    local integer this
                    local integer h= GetUnitUserData(tar)
                    
                    if (LoadInteger(Table__ht, (Elements), (h + 3 * 5000))) == 0 then // INLINED!!
                        
                        set this=(CTL__CT(s__ShareFunc_rctl32)) // INLINED!!
                        
                        set s__ShareFunc_tar[this]=tar
                        set s__ShareFunc_sor[this]=sor
                        set s__ShareFunc_c[this]=0
                        set s__ShareFunc_b[this]=3
                        set s__ShareFunc_e[this]=384
                        set s__ShareFunc_per[this]=32
                    
                        //the current amount of dps
                        set s__ShareFunc_dam[this]=2
                    
                        //the armor reduction ability
                        call UnitAddTimedAbility((s__ShareFunc_tar[this] ) , ( 'A0CF' ) , 1 , (( 13 )*1.0) , ( true) , 0 , 0.00 , null , null) // INLINED!!
    
                        call SaveInteger(Table__ht, (Elements), (h + s__ShareFunc_b[this] * 5000), ( this)) // INLINED!!
                        
                    endif
                    
                    call s__Generics_BuffRemove(tar , 'XA02' , 'B003')
                    
                    return this
          endfunction
          
          function s__ShareFunc_Electromagnetic takes unit tar,unit sor returns nothing
                    local integer this= (CTL__CT(s__ShareFunc_rctl32)) // INLINED!!
                     
                    set s__ShareFunc_tar[this]=tar
                    set s__ShareFunc_sor[this]=sor
                    set s__ShareFunc_c[this]=0
                    set s__ShareFunc_b[this]=4
                    set s__ShareFunc_e[this]=192
                    set s__ShareFunc_per[this]=1
                    
                    call s__Generics_BuffRemove(tar , 'XA03' , 'B01Z')
                    
          endfunction
          
         // static method AcidOverTime takes unit tar, unit sor returns nothing
                //    local thistype this
                //   local integer h = GetHandleId(tar) 
                                        
                //    if Elements[h + 5] != 0 then
                //         set this     = Elements[h + 5]
               //          set .c[this] = .e[this] + 1
               //     endif
                    
               //     set this = create()
                    
             //       set .eff[this] = AddSpecialEffectTarget("Abilities\\Weapons\\PoisonSting\\PoisonStingTarget.mdl",tar,"chest")
             //       set .tar[this] = tar
            //        set .sor[this] = sor
            //        set .c[this]   = 0
            //        set .b[this]   = 5
           //         set .e[this]   = 512
           //         set .per[this] = 32
                        
            //        set Elements[h + .b[this]] = this    
                     
                    
          
        //  endmethod
          
         // static method IceOverTime takes unit tar, unit sor returns nothing
              //      local thistype this
              //      local integer h     = GetHandleId(tar)
                    
              //      if Elements[h + 6] != 0 then
                //         set this     = Elements[h + 6]
               //          set .c[this] = 126
               //     endif 
                    
               //     set this = create()
                    
               //     set .eff[this] = AddSpecialEffectTarget("Abilities\\Spells\\Undead\\FrostArmor\\FrostArmorDamage.mdl",tar,"chest")
              //      set .tar[this] = tar
              //      set .sor[this] = sor
              //      set .c[this]   = 0
              //      set .b[this]   = 6
             //       set .e[this]   = 128
             //       set .per[this] = 127
                    
            //        call UnitAddMoveSpeedBonus(.tar[this],-0.170,0,4)
            //        call SetUnitVertexColor(.tar[this],173,216,230,255)
                    
                        
          //endmethod 
          
          function s__ShareFunc_Overload takes unit tar,unit sor,real damage returns nothing
                    local unit FOG
                    local real d= damage
                    
                    //coordinates of target
                    local real x= GetUnitX(tar)
                    local real y= GetUnitY(tar)
                    
                    //the coordinates of affected
                    local real x2
                    local real y2
                    
                    //angle 
                    local real a
                    
                    //the distance of target
                    local real di
                    local real dx
                    local real dy
                    
                    call GroupEnumUnitsInRange(TempEnumGroup, x, y, 250, null)
                    
                    //the sfx
                    set bj_lastCreatedEffect=AddSpecialEffect("war3mapImported\\FlameBomb.mdx", x, y)
call s__effectTimed_create((bj_lastCreatedEffect ) , (( 2.0)*1.0)) // INLINED!!
                    call BlzSetSpecialEffectScale(bj_lastCreatedEffect, 5.0)
                    call BlzSetSpecialEffectZ(bj_lastCreatedEffect, 10)
                    
                    loop
                        set FOG=FirstOfGroup(TempEnumGroup)
                        exitwhen FOG == null
                        if FOG != sor then
                        
                            set x2=GetUnitX(FOG)
                            set y2=GetUnitY(FOG)
                            
                            set a=Atan2(y2 - y, x2 - x)
                            
                            set dx=x2 - x
                            set dy=y2 - y
                            
                            set di=SquareRoot(dx * dx + dy + dy)
                            
                            //Damages the target up to additional 15% of original damage based on distance
                            call UnitDamageTarget(sor, FOG, damage * 0.15 - damage * 0.15 * di / 410, false, true, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNKNOWN, WEAPON_TYPE_WHOKNOWS)
                            
                            //knocks back the unit 
                            call GenericKBLiteAngle(1.20 , a , FOG , sor , 300 , 100 , null)
                            
                            call s__Generics_BuffRemove(tar , 'XA03' , 'B01Z')
                    
                        endif
                        
                        call GroupRemoveUnit(TempEnumGroup, FOG)
                        
                    endloop
                    
          endfunction 
            
    

//library SharedReactions ends
//library Status:
    
    
    
    //the counter
    
    //the player id
        
//Implemented from module CTLExpire:
        function s__Status__Recall_create takes nothing returns integer
            return CTL__CT(s__Status__Recall_rctl32)
        endfunction
        function s__Status__Recall_destroy takes integer this returns nothing
            call CTL__DT(this)
        endfunction
        function s__Status__Recall_ectl32 takes nothing returns boolean
            local integer this=CTL__rf[s__Status__Recall_rctl32]
            loop
                exitwhen 0 == this
    
    set s__Status__Recall_c[this]=s__Status__Recall_c[this] + 1
    
    if s__Status__Recall_c[this] > 130 then
    
        call CTL__DT((this)) // INLINED!!
        
    elseif ModuloInteger(s__Status__Recall_c[this], 32) == 0 then
        
        if s__Status__Recall_c[this] < 128 then
        
            call chatTest_sendSystemMessage(s__Status__Recall_p[this] , "|cFF00FF40........|r")
            
        elseif s__Status__Recall_c[this] >= 128 then
        
            call chatTest_sendSystemMessage(s__Status__Recall_p[this] , "|cFF00FF40Retrieval completed.|r")
            call chatTest_sendSystemMessage(s__Status__Recall_p[this] , "|cff800080Aliens|r")
            call chatTest_sendSystemMessage(s__Status__Recall_p[this] , (LoadStr(Table__ht, (((GroupChat))), (- 1)))) // INLINED!!
            call chatTest_sendSystemMessage(s__Status__Recall_p[this] , "|cff800080Mutant|r")
            call chatTest_sendSystemMessage(s__Status__Recall_p[this] , (LoadStr(Table__ht, (((GroupChat))), (- 2)))) // INLINED!!
            call chatTest_sendSystemMessage(s__Status__Recall_p[this] , "|cff800080Rogue Android|r")
            call chatTest_sendSystemMessage(s__Status__Recall_p[this] , (LoadStr(Table__ht, (((GroupChat))), (- 3)))) // INLINED!!
            
        endif
        
    endif
        
//Implemented from module CTLEnd:
                set this=CTL__n[this]
            endloop
            return false
        endfunction
        function s__Status__Recall_CTLEnd___onInit takes nothing returns nothing
            set s__Status__Recall_rctl32=CTL__A(function s__Status__Recall_ectl32)
        endfunction
    
    function s__Status__Recall_start takes integer p returns nothing
            local integer this= (CTL__CT(s__Status__Recall_rctl32)) // INLINED!!
            
            set s__Status__Recall_p[this]=p
            set s__Status__Recall_c[this]=0
            
    endfunction 
    
    
    
    function Status_changeStr takes string st,integer index,boolean stat returns nothing
                local integer s= s__String_create(st)
                
                if stat then
                
                    call s__String_replace(s,18 , (s__String_length[(s)]) , "|cff008000Alive|r") // INLINED!!
                    
                else
                
                    call s__String_replace(s,18 , (s__String_length[(s)]) , "|cff800000Dead|r") // INLINED!!
                    
                endif
                
                call SaveStr(Table__ht, (((GroupChat))), (index), ( (s__String_value[(s)]))) // INLINED!!
                
                call s__String_destroy(s)
    
    endfunction 
    
    
    function Status_retrieve takes player p returns nothing
                local integer i= GetPlayerId(p)
                
                call chatTest_sendSystemMessage(i , "|cFF00FF40Retrieving status...|r")
                
                call s__Status__Recall_start(i)
                
    endfunction 
    


//library Status ends
//library SwitchAbility:

            
            //the current key value
            
            //the alternative key
            
            //the player id
            
//Implemented from module CTLExpire:
        function s__SwitchAbility__ChanKey_create takes nothing returns integer
            return CTL__CT(s__SwitchAbility__ChanKey_rctl32)
        endfunction
        function s__SwitchAbility__ChanKey_destroy takes integer this returns nothing
            call CTL__DT(this)
        endfunction
        function s__SwitchAbility__ChanKey_ectl32 takes nothing returns boolean
            local integer this=CTL__rf[s__SwitchAbility__ChanKey_rctl32]
            loop
                exitwhen 0 == this
            
            set s__SwitchAbility__ChanKey_c[this]=1 + s__SwitchAbility__ChanKey_c[this]
            
            if (LoadInteger(Table__ht, (Keys), (s__SwitchAbility__ChanKey_p[this]))) != this or s__SwitchAbility__ChanKey_k[this] != s__SwitchAbility__ChanKey_k2[this] or s__SwitchAbility__ChanKey_c[this] > 320 then // INLINED!!
                call SaveInteger(Table__ht, (Keys), (s__SwitchAbility__ChanKey_p[this]), ( s__SwitchAbility__ChanKey_k2[this])) // INLINED!!
                call CTL__DT((this)) // INLINED!!
            endif
            
//Implemented from module CTLEnd:
                set this=CTL__n[this]
            endloop
            return false
        endfunction
        function s__SwitchAbility__ChanKey_CTLEnd___onInit takes nothing returns nothing
            set s__SwitchAbility__ChanKey_rctl32=CTL__A(function s__SwitchAbility__ChanKey_ectl32)
        endfunction
            
            function s__SwitchAbility__ChanKey_start takes integer pid,integer key returns integer
                        local integer this= (CTL__CT(s__SwitchAbility__ChanKey_rctl32)) // INLINED!!
                        
                        set s__SwitchAbility__ChanKey_c[this]=0
                        set s__SwitchAbility__ChanKey_k[this]=key
                        set s__SwitchAbility__ChanKey_p[this]=pid
                        set s__SwitchAbility__ChanKey_k2[this]=key
                        
                        return this
            endfunction 
    
    
    function SwitchAbility__MagChan takes integer pid returns nothing
                local integer p= ((pid)) // INLINED!!
                local unit u= udg_Playerhero[s__User_id[p] + 1]
                local ability a= BlzGetUnitAbility(u, 'A061')
                local integer b= BlzGetAbilityIntegerField(a, ABILITY_IF_PRIORITY)
                
                if b == 0 then
                    set b=1
                else
                    set b=0
                endif
                
                call BlzSetAbilityIntegerField(a, ABILITY_IF_PRIORITY, b)
                
                call SetUnitAbilityLevel(u, 'A061', 2)
                call SetUnitAbilityLevel(u, 'A061', 1)
                
                
                set p=s__User_NULL
                set u=null
                set a=null
    endfunction
    
    function SwitchAbility__ChemChan takes integer pid returns nothing
                local integer p= ((pid)) // INLINED!!
                local unit u= udg_Playerhero[s__User_id[p] + 1]
                local string s
                local ability a= BlzGetUnitAbility(u, 'A028')
                local integer b= BlzGetAbilityIntegerField(a, ABILITY_IF_PRIORITY)
                local real dur
                local integer dmg
                local real Aoe
                
                if b == 0 then
                    set b=1
                    set s="Hurls corrosive acid that increases the amount of damage the targeted group recieves by 6 Lasts 20 seconds."
                    set dur=20
                    set dmg=1
                    set Aoe=300
                else
                    set b=0
                    set s="Hurls corrosive acid that increases the amount of damage the target unit recieves by 17 Lasts 15 seconds."
                    set dur=15
                    set dmg=3
                    set Aoe=1
                endif
                
                call BlzSetAbilityRealLevelField(a, ABILITY_RLF_AREA_OF_EFFECT, 0, Aoe)
                call BlzSetAbilityRealLevelField(a, ABILITY_RLF_DURATION_NORMAL, 0, dur)
                call BlzSetAbilityIntegerField(a, ABILITY_IF_PRIORITY, b)
                call BlzSetAbilityIntegerLevelField(a, ABILITY_ILF_ARMOR_PENALTY_NAB3, 0, dmg)
                if s__User_id[(s__User_LocalId)] == s__User_id[p] then // INLINED!!
                    call BlzSetAbilityExtendedTooltip('A028', s, 0)
                endif
                
                //to update the ability info
                call SetUnitAbilityLevel(u, 'A028', 2)
                call SetUnitAbilityLevel(u, 'A028', 1)
                
                
                set p=s__User_NULL
                set u=null
                set a=null
                set s=null
    endfunction 
    
    function SwitchAbility__AC takes integer pid returns nothing
                local integer p= ((pid)) // INLINED!!
                local unit u= udg_Playerhero[s__User_id[p] + 1]
                local real cd
                //current ability id
                local integer a
                //alternative ability id
                local integer b
                if GetUnitAbilityLevel(u, 'A070') > 0 then
                    
                    //blind - photon
                    if GetUnitAbilityLevel(u, 'A00N') > 0 then
                            set a='A00N'
                            set b='A09C'
                    //magnetic saw - service
                    elseif GetUnitAbilityLevel(u, 'A061') > 0 then
                            call SwitchAbility__MagChan(pid)
                    //Phase Vortex - Dark matter
                    elseif GetUnitAbilityLevel(u, 'A09L') > 0 then
                            set a='A09L'
                            set b='A0A4'
                    //Energy Leech - Pulse Suit
                    elseif GetUnitAbilityLevel(u, 'A07X') > 0 then
                            set a='A07X'
                            set b='A0B7'
                    //Energy Offering - Pulse Suit
                    elseif GetUnitAbilityLevel(u, 'A0A3') > 0 then
                            set a='A0A3'
                            set b='A0B7'
                    //Magnetic Thrust - Magnetic Suit
                    elseif GetUnitAbilityLevel(u, 'A07U') > 0 then
                            set a='A07U'
                            set b='A0B8'
                    //Deterministic Invigoration - Guard
                    elseif GetUnitAbilityLevel(u, 'A09Q') > 0 then
                            set a='A09Q'
                            set b='A0B9'
                    //illusionary Double - Illusion
                    elseif GetUnitAbilityLevel(u, 'A00T') > 0 then
                            set a='A00T'
                            set b='A0BA'
                    //Chemistry - Scientist
                    elseif GetUnitAbilityLevel(u, 'A028') > 0 then
                            call SwitchAbility__ChemChan(pid)
                            
                    //the opposite abilities
                    
                    //Flash Grenade - Photon
                    elseif GetUnitAbilityLevel(u, 'A09C') > 0 then
                            set a='A09C'
                            set b='A00N'
                    
                    //Phase Burn - Dark Matter
                    elseif GetUnitAbilityLevel(u, 'A0A4') > 0 then
                            set a='A0A4'
                            set b='A09L'
                    //Pulsing Energy - Pulse 
                    elseif GetUnitAbilityLevel(u, 'A0B7') > 0 then
                            set a='A0B7'
                            set b='A07X'
                    //Magnetic Pull
                    elseif GetUnitAbilityLevel(u, 'A0B8') > 0 then
                            set a='A0B8'
                            set b='A07U'
                    //Deterministic Enervation - Guard Suit
                    elseif GetUnitAbilityLevel(u, 'A0B9') > 0 then
                            set a='A0B9'
                            set b='A09Q'
                    //Mirror
                    elseif GetUnitAbilityLevel(u, 'A0BA') > 0 then
                            set a='A0BA'
                            set b='A00T'
                    endif
                    
                    if a != 0 and b != 0 then
                        set cd=BlzGetUnitAbilityCooldownRemaining(u, a) / BlzGetAbilityCooldown(a, 0)
                        call UnitRemoveAbility(u, a)
                        call UnitAddAbility(u, b)
                        call BlzStartUnitAbilityCooldown(u, b, cd * BlzGetAbilityCooldown(b, 0))
                    endif
                    
                        
                else
                    call chatTest_sendSystemMessage(s__User_id[p] , "|cff800000Systemic Error|r")
                    call chatTest_sendSystemMessage(s__User_id[p] , "|cff800000Error Code: |r80-100")
                endif
                
                set u=null
                set p=s__User_NULL
    endfunction 

    function SwitchAbility_Change takes nothing returns nothing
                local integer p= ((GetPlayerId(GetTriggerPlayer()))) // INLINED!!
                local integer b= GetHandleId(BlzGetTriggerPlayerKey())
                local integer k= (LoadInteger(Table__ht, (Keys), (s__User_id[p]))) // INLINED!!
                
                
                if s__SwitchAbility__ChanKey_k2[k] != 0 and s__SwitchAbility__ChanKey_k2[k] != b then
                    set s__SwitchAbility__ChanKey_k2[k]=b
                    call chatTest_sendSystemMessage(s__User_id[p] , "|cFF00FF40Access code modified.|r")
                    call chatTest_sendSystemMessage(s__User_id[p] , "|cFF00FF40New Access Code: |r" + (LoadStr(Table__ht, (((Os))), (b)))) // INLINED!!
                elseif b == (LoadInteger(Table__ht, (Keys), (s__User_id[p]))) then // INLINED!!
                    call chatTest_sendSystemMessage(s__User_id[p] , "|cFF00FF40Protocol Accepted.|r")
                    call chatTest_sendSystemMessage(s__User_id[p] , "|cFF00FF40Modifying suit abilities.|r")
                    call SwitchAbility__AC(s__User_id[p])
                endif
                
                set p=s__User_NULL
    endfunction 
    
    function SwitchAbility_SendMessage takes integer pid returns nothing
                call chatTest_sendSystemMessage(pid , "|cFF00FF40Retrieving Access Code:|r")
                call chatTest_sendSystemMessage(pid , "|cFF00FF40Access Code: |r" + (LoadStr(Table__ht, (((Os))), ((LoadInteger(Table__ht, (Keys), (pid))))))) // INLINED!!
                call chatTest_sendSystemMessage(pid , "|cFF00FF40Modifying access code. Sumbit any key in the next 10 seconds|r")
                call SaveInteger(Table__ht, (Keys), (pid), ( s__SwitchAbility__ChanKey_start(pid , (LoadInteger(Table__ht, (Keys), (pid)))))) // INLINED!!
    endfunction 


//library SwitchAbility ends
//library WRSTaskEnd:

     
    function WRSTaskEnd_WRSData takes unit u returns nothing
                local ability a
                
                call DisplayTextToPlayer(Player(0), 0, 0, GetUnitName(u))
                
                if GetUnitTypeId(u) == 'p000' then
                    
                    
                     // call DestroyTrigger(GetTriggeringTrigger())
                
                      call BlzSetUnitBaseDamage(u, 19, 0)
                      call BlzSetUnitWeaponIntegerField(u, UNIT_WEAPON_IF_ATTACK_DAMAGE_SIDES_PER_DIE, 1, - 7)
                      call BlzSetUnitWeaponRealField(u, UNIT_WEAPON_RF_ATTACK_RANGE, 1, 750)
                      call BlzSetUnitRealField(u, UNIT_RF_ACQUISITION_RANGE, 1500)
                   
                      call BlzSetUnitMaxHP(u, 400)
                      call BlzSetUnitRealField(u, UNIT_RF_HIT_POINTS_REGENERATION_RATE, 32)
                      call BlzSetUnitMaxMana(u, 9999999999999999)
                 //     call BlzSetUnitRealField(u,UNIT_RF_MANA_REGENERATION,9999999999)
                      
                      //add inventory ability
                      call UnitAddAbility(u, 'AInv')
                    
                    //provides the attack ground ability simialr to Force Suit
                     // call UnitAddAbility(u,'A08A')
                    
                    //add the permanent invisibility since we don't want visible to other players and modify it
                   //   call UnitAddAbility(u,'Apiv')
                   //   set a = BlzGetUnitAbility(u,'Apiv')
                  //    call BlzSetAbilityRealLevelField(a,ABILITY_RLF_DURATION_HERO,0,0)
                  //    call BlzSetAbilityRealLevelField(a,ABILITY_RLF_DURATION_NORMAL,0,0)
                    //safety measure to make sure it updates
                      call SetUnitAbilityLevel(u, 'Apiv', 1)
                      call SetUnitAbilityLevel(u, 'Apiv', 0)
                    
                    //changing fly height
                      call SetUnitFlyHeight(u, 50, 50)
                    
                      call SetUnitTurnSpeed(u, 2.5000)

                    
                    //change sight radius
                      call BlzSetUnitRealField(u, UNIT_RF_SIGHT_RADIUS, 1800)
                      
                    //  call BlzSetUnitName(u,"|cff404040JtikoYeqqaTacejQuyekoQiyth|r hte |cff5a0000Beaqoh|r")
                    
                      set a=null
                    
                endif
                
                    
    endfunction

    function WRSTaskEnd_End takes integer pid returns nothing
        local integer p= ((pid)) // INLINED!!
        local real x= GetRectCenterX(gg_rct_BombTeleport)
        local real y= GetRectCenterY(gg_rct_BombTeleport)
        local real f= GetUnitFacing(GetClosestUnitInRange(x , y , 500 , null)) + 180
        
        if (LoadUnitHandle(Table__ht, (((PsyI))), (0))) != null then // INLINED!!
            set p=s__User_NULL
            return
        endif
        
        set bj_lastCreatedEffect=AddSpecialEffect("Psycho\\Effects\\Void Disc.mdx", x, y)
        call BlzSetSpecialEffectTimeScale(bj_lastCreatedEffect, 0.25)
        call BlzSetSpecialEffectScale(bj_lastCreatedEffect, 3.0)
call s__effectTimed_create((bj_lastCreatedEffect ) , (( 15)*1.0)) // INLINED!!
        call SetPlayerName(Player(21), "|cff5a0000Beaqoh|r")
        call SetPlayerAllianceStateBJ(Player(21), s__User_Local, bj_ALLIANCE_ALLIED_ADVUNITS)
        set p=s__User_NULL
        
        //cleanup
        call FlushChildHashtable(Table__ht, (PsyI)) // INLINED!!
        
        //no unit make it face toward the right
        if f == 180 then
            set f=315
        endif
        
        call StopSound(gg_snd_FrostmourneChant1, false, true)
        
        set bj_lastCreatedUnit=CreateUnit(Player(21), 'p000', x, y, f)
        call SaveUnitHandle(Table__ht, (((PsyI))), (0), ( bj_lastCreatedUnit)) // INLINED!!
        
        call WRSTaskEnd_WRSData((LoadUnitHandle(Table__ht, (((PsyI))), (0)))) // INLINED!!
        
        //Pauses it for 12 seconds until it has fully ascended.
        call PauseUnitForPeriod(bj_lastCreatedUnit , 12)
        
        //predamage to remvoe attack effects
        call RegisterAnyPlayerUnitEvent(EVENT_PLAYER_UNIT_ATTACKED , function WRSPreDamage_Damage)
        
    endfunction

//library WRSTaskEnd ends
//library Acid:

    
        function s__AcidEffect_cast takes nothing returns boolean
            local unit sor
            local unit tar
            local real dam
            
                
            set tar=tar2
            set sor=sor2
            set dam=EDamage
                
            //pyro       
            if GetUnitAbilityLevel(tar, 'B01X') > 0 then
                        
                call s__ShareFunc_Overload(tar , sor , dam)
                        
            // else
            //   call ShareFunc.AcidOverTime(tar,sor)
                
            endif
                
            set sor=null
            set tar=null
            
            return true
        
        endfunction 
    


//library Acid ends
//library ChatSystem:

    
    
    function ChatSystem_ColorStrToId takes string c returns integer
        if c == "red" or c == "rd" then
            return GetHandleId(PLAYER_COLOR_RED) //0
        elseif c == "blue" or c == "b" then
            return GetHandleId(PLAYER_COLOR_BLUE) //1
        elseif c == "teal" or c == "t" then
            return GetHandleId(PLAYER_COLOR_CYAN) //2
        elseif c == "purple" or c == "pe" then
            return GetHandleId(PLAYER_COLOR_PURPLE) //3
        elseif c == "yellow" or c == "yw" then
            return GetHandleId(PLAYER_COLOR_YELLOW) //4
        elseif c == "orange" or c == "o" then
            return GetHandleId(PLAYER_COLOR_ORANGE) //5
        elseif c == "green" or c == "gn" then
            return GetHandleId(PLAYER_COLOR_GREEN) //6
        elseif c == "pink" or c == "pk" then
            return GetHandleId(PLAYER_COLOR_PINK) //7
        elseif c == "gray" or c == "gy" then
            return GetHandleId(PLAYER_COLOR_LIGHT_GRAY) //8
        elseif c == "lightblue" or c == "lb" then
            return GetHandleId(PLAYER_COLOR_LIGHT_BLUE) //9
        elseif c == "darkgreen" or c == "dg" then
            return GetHandleId(PLAYER_COLOR_AQUA) //10
        elseif c == "brown" or c == "bn" then
            return GetHandleId(PLAYER_COLOR_BROWN) //11
        else
            return - 1
        endif
    endfunction 
    
    
    function ChatSystem__Message takes nothing returns nothing
                local integer s= s__String_create(GetEventPlayerChatString())
                local player p= GetTriggerPlayer()
                local integer pid= GetPlayerId(p)
                local integer ti= PsychoUser
                
                //position of ;
                local integer c
                
                //the player to be added index
                local integer sp
                
                if s__String_find(s,"-" , 0) == 0 then
                
                    if s__String_find(s,"cam" , 1) == 1 then
                    
                        call CamChange(p , (s__String_value[(s)]) , (s__String_length[(s)])) // INLINED!!
                        
                    elseif s__String_find(s,"creategroup" , 1) == 1 then
                        
                        call GroupChats_Create((s__String_value[(s)]) , p) // INLINED!!
                        
                    elseif s__String_find(s,"status" , 1) == 1 then
                    
                        call Status_retrieve(p)
                        
                    elseif s__String_find(s,"add" , 1) == 1 then
                    
                        set c=s__String_find(s,";" , 3)
                        
                        //sets the player to be added index variable based on the text that comes after the ;
                        set sp=ChatSystem_ColorStrToId(SubString((s__String_value[(s)]), c + 1, (s__String_length[(s)]))) // INLINED!!
                        
                        //To check if player actually exists
                        if sp != - 1 then
                        
                            call GroupChats_Gadd(SubString((s__String_value[(s)]), 5, c) , sp , p) // INLINED!!
                        
                        else
                            
                            call chatTest_sendSystemMessage(pid , "|cff800000Systemic Error: personnel not found.|r")
                            
                        endif
                        
                    elseif udg_TESTING then
                          if s__String_find(s,"psycho" , 1) == 1 then
                             call sc__PsychoOnInit_InitSet(pid)
                          elseif s__String_find(s,"task" , 1) == 1 then
                             call s__String_erase(s,0 , 5)
                             set sp=S2I((s__String_value[(s)])) // INLINED!!
                             if sp > 7 then
                                set s__PsychoTime_t[(ti)]=(7) // INLINED!!
                             elseif sp < 0 then
                                set s__PsychoTime_t[(ti)]=(0) // INLINED!!
                             else
                                set s__PsychoTime_t[(ti)]=(sp) // INLINED!!
                             endif
                             set s__PsychoTime_pIndex[(ti)]=(1) // INLINED!!
                          endif
                    endif
                elseif s__String_find(s,"=" , 0) == 0 then
                    
                    call SwitchAbility_SendMessage(pid)
                    
                elseif s__String_find(s,";" , 0) == - 1 and s__String_find(s,"[" , 0) == - 1 then
                
                    call GroupChats_Chat(p , (s__String_value[(s)])) // INLINED!!
                
                elseif s__String_find(s,"[" , 0) == 0 and (s__String_length[(s)]) == 1 then // INLINED!!
                
                    call SaveInteger(Table__ht, (GroupChat), (( pid + 1 ) * - 10), ( 0)) // INLINED!!
                    
                elseif (LoadInteger(Table__ht, (GroupChat), (( pid + 1 ) * - 10))) != (LoadInteger(Table__ht, (s__StringIndexer__D_data), (StringHash((DEAD_MESSAGE_TYPE))))) then // INLINED!!
                
                    if s__String_find(s,";" , 0) != - 1 and s__String_find(s,";" , 0) != 0 then
                    
                        call GroupChats_Chat(p , (s__String_value[(s)])) // INLINED!!
                        
                    elseif s__String_find(s,"[" , 0) == 0 then
                        
                        call GroupChats_EvilBroadcast((s__String_value[(s)]) , p) // INLINED!!
                        
                    endif
                    
                endif
                
                //checks if the person is responding to the question
                if (LoadInteger(Table__ht, (PsyI), (0))) == 5 then // INLINED!!
                    call SaveStr(Table__ht, (((PsyT))), (28), ( GetEventPlayerChatString())) // INLINED!!
                    call ForceEnumPlayers(EForce, (s__PsychoTime_m[(ti)])) // INLINED!!
                endif
                
                
                set p=null
                call s__String_destroy(s)
    endfunction 
    

    
        function s__ChatSys_ChatInt takes nothing returns nothing
                local timer t= (NewTimerEx(0)) // INLINED!!
                set GroupChat=s__Table_create()
                call IndexString(DEAD_MESSAGE_TYPE)
                 
                call SaveStr(Table__ht, (((GroupChat))), (- 3), ( "|cFF00FF40Status: |cffc0c0c0Unknown|r |r")) // INLINED!!
                call IndexString(ROGUE_MESSAGE_TYPE)
                
                call SaveStr(Table__ht, (((GroupChat))), (- 2), ( (LoadStr(Table__ht, (((GroupChat))), (- 3))))) // INLINED!!
                call IndexString(MUTANT_MESSAGE_TYPE)
                
                call SaveStr(Table__ht, (((GroupChat))), (- 1), ( (LoadStr(Table__ht, (((GroupChat))), (- 3))))) // INLINED!!
                call IndexString(ALIEN_MESSAGE_TYPE)
                
                call Generator_GenInt()
                
                set Miss=s__Table_create()
                
                set PsyP=s__Table_create()
                set PsyN=s__Table_create()
                set PsyT=s__Table_create()
                set PsyI=s__Table_create()
                 
                call RegisterAnyPlayerEvent(EVENT_PLAYER_CHAT , function ChatSystem__Message)
                
                call TimerStart(t, 0.01, false, function sc__PsychoOnInit_Init)
                
                set t=null
                
        endfunction 
    
    



//library ChatSystem ends
//library Electro:

    
        function s__ElectroEffect_cast takes nothing returns boolean
            local unit sor
            local unit tar
            local real dam
            
            set tar=tar2
            set sor=sor2
            set dam=EDamage
                
            //water
            if GetUnitAbilityLevel(tar, 'B024') > 0 or GetUnitAbilityLevel(tar, 'B023') > 0 then
                
                    call s__ShareFunc_ElectricCharge(tar , sor)
                       
            //pyro       
            elseif GetUnitAbilityLevel(tar, 'B01X') > 0 then
                        
                    call s__ShareFunc_Overload(tar , sor , dam)
                        
            endif
                
            set sor=null
            set tar=null
            
            return true
        
        endfunction 
    


//library Electro ends
//library Fire:


        function s__FireEffect_cast takes nothing returns boolean
            local integer h
            local integer t
            local unit tar
            local real dam= EDamage
            local unit sor


            
                set tar=tar2
                set sor=sor2
            
                //the water
                if GetUnitAbilityLevel(tar, 'B024') > 0 or GetUnitAbilityLevel(tar, 'B023') > 0 then
                
                        call s__ShareFunc_Vaporize(tar , sor , dam)
                
                //electro 
                elseif GetUnitAbilityLevel(tar, 'B01Z') > 0 then
                
                        call s__ShareFunc_Overload(tar , sor , dam)
                //ice        
                elseif GetUnitAbilityLevel(tar, 'B003') > 0 then
                        
                        call s__ShareFunc_Melt(tar , sor)
                        
                endif
                
                
                set h=GetUnitUserData(tar)
                
                set t=(LoadInteger(Table__ht, (Elements), (h + 1 * 5000))) // INLINED!!
                
                //unfreezes the target if he is frozen
                if s__ShareFunc_tar[t] != null then
                
                    set s__ShareFunc_c[t]=s__ShareFunc_c[t] + 48
                
                endif
            
                set tar=null
                set sor=null
            
                return true
        
        endfunction 


//library Fire ends
//library Ice:

    
        function s__IceEffect_cast takes nothing returns boolean
            local integer h
            local integer t
            local unit tar
            local unit sor
            
            set tar=tar2
            set sor=sor2
            
                
            set h=GetUnitUserData(tar)
            
            //the water
            if GetUnitAbilityLevel(tar, 'B024') > 0 or GetUnitAbilityLevel(tar, 'B023') > 0 then
                
                    set t=(LoadInteger(Table__ht, (Elements), (h + 1 * 5000))) // INLINED!!
                        
                    
                    if s__ShareFunc_tar[t] == null then
                        call s__ShareFunc_Freeze(tar , sor)
                    endif
                
            //electro 
            elseif GetUnitAbilityLevel(tar, 'B01Z') > 0 then
                
                    // call ShareFunc.Overload(Edamage)
                       
            //pyro       
            elseif GetUnitAbilityLevel(tar, 'B01X') > 0 then
            
                    call s__ShareFunc_Melt(tar , sor)
                    
            endif
                            
                
            set tar=null
            set sor=null
                
            
            return true
        
        endfunction 
    


//library Ice ends
//library Launch:


function AreaDamage takes unit u,real x,real y,real radius,real damage2 returns nothing
                local real d= 0
                local real r= 0
                loop
                      set bj_lastCreatedUnit=FirstOfGroup(TempEnumGroup)
                      exitwhen bj_lastCreatedUnit == null
                      
                      if bj_lastCreatedUnit != u then
                      
                        if GetUnitAbilityLevel(bj_lastCreatedUnit, 'A071') > 0 then
                              set r=100
                        else
                              set r=radius
                        endif
                        
                        if IsUnitInRangeXY(bj_lastCreatedUnit, x, y, 10) then
                        
                            if (s__UnitMoving_moving[(GetUnitUserData((bj_lastCreatedUnit)))]) then // INLINED!!
                                 set d=damage2 * 0.80
                            else
                                 set d=damage2
                            endif
                            
                        elseif IsUnitInRangeXY(bj_lastCreatedUnit, x, y, r * 0.166666666) then
                        
                            set d=damage2 * 0.80
                            
                        elseif IsUnitInRangeXY(bj_lastCreatedUnit, x, y, r * 0.33333333) or IsUnitInRangeXY(bj_lastCreatedUnit, x, y, r * 0.50) then
                        
                            set d=damage2 * .60

                        elseif IsUnitInRangeXY(bj_lastCreatedUnit, x, y, r * 0.66666666) or IsUnitInRangeXY(bj_lastCreatedUnit, x, y, r * 0.833333333) then
                        
                            set d=damage2 * 0.40
                            
                        elseif IsUnitInRangeXY(bj_lastCreatedUnit, x, y, r) then
                        
                            set d=damage2 * 0.20
                            
                        endif
                        
                        call UnitDamageTarget(u, bj_lastCreatedUnit, d, false, false, ATTACK_TYPE_CHAOS, null, null)
                        
                        if bj_lastCreatedUnit == gg_unit_h008_0196 then
                               call s__MinerthaTimer_start(d , u)
                        endif
                        
                        if u == (LoadUnitHandle(Table__ht, (((PsyI))), (0))) then // INLINED!!
                            call sc__WRSMissile_GetMissileFunctionEx(bj_lastCreatedUnit , d , u , 0)
                        endif
                     endif
                    
                     call GroupRemoveUnit(TempEnumGroup, bj_lastCreatedUnit)
                 endloop
    endfunction


        function s__Launch__Launch_onPeriod takes integer this returns boolean
        
                  if (s__Missiles_veloc[(this)] / Missiles_PERIOD) != BlzGetUnitWeaponRealField(s__Missiles_source[this], UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED, 0) then // INLINED!!
                    
                    call s__Missiles__set_speed(this,BlzGetUnitWeaponRealField(s__Missiles_source[this], UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED, 0))
                    
                  endif
                  
                  if s__Missiles_travel[this] > 75 and (s__MissileEffect_transparency[(s__Missiles_effect[(this)])]) == 0 then // INLINED!!
                  
                    call s__MissileEffect__set_alpha(s__Missiles_effect[(this)],(255)) // INLINED!!
                    call s__Missiles__set_model(this,BlzGetUnitWeaponStringField(s__Missiles_source[this], UNIT_WEAPON_SF_ATTACK_PROJECTILE_ART, 1))
                    
                  endif
                  
                  if s__Missiles_travel[this] > BlzGetUnitWeaponRealField(s__Missiles_source[this], UNIT_WEAPON_RF_ATTACK_RANGE, 0) + 200 then
                        return true
                  endif
                  
                  if s__Missiles_data[this] < 0 and s__Missiles_data[this] != - 62 then
                  
                    set s__Missiles_data[this]=s__Missiles_data[this] + 1
                
                  elseif s__Missiles_data[this] >= - 62 and s__Missiles_data[this] < 0 then
                        
                        return true
                        
                  endif
                  
                  return false
                 
        endfunction 
        
        function s__Launch__Launch_onHit takes integer this,unit hit returns boolean
                local integer d= (LoadInteger(Table__ht, (Miss), (s__Missiles_data[this]))) // INLINED!!
                local real x= GetUnitX(hit)
                local real y= GetUnitY(hit)
                
                set s__Missiles_target[this]=null
                
                if hit != s__Missiles_source[this] and GetUnitTypeId(hit) != 'H03I' and UnitAlive(hit) then
                    
                    call GroupEnumUnitsInRange(TempEnumGroup, x, y, 150, null)
                    call AreaDamage(s__Missiles_source[this] , x , y , 150 , s__Missiles_damage[this])
                    
                    if s__Missiles_data[this] >= 0 then
                    
                        set s__Missiles_data[this]=- 64
                        
                    endif
                    
                endif
                
                return false
        endfunction

        function s__Launch__Launch_onMissile takes integer this,integer missile returns boolean
                return false
        endfunction
        

function IncAngleDistance takes real x,real y,real x2,real y2,real dist,boolean Which returns real
            local real r= Atan2(y2 - y, x2 - x) + 6.28319
                        
            if Which == true then
            
                return x2 + Cos(r) * dist
            
            else
                return y2 + Sin(r) * dist
                
            endif
endfunction 


function Launch__DoDamage takes nothing returns nothing
            local integer t
            local integer d
            local integer m
            local real x
            local real y
            
            local real x2
            local real y2
            
            local real x3
            local real y3
            
            local timer ti
            
            if not udg_IsDamageCode then
                
                set t=GetUnitTypeId(udg_DamageEventSource)
                set d=(LoadInteger(Table__ht, (Miss), (t))) // INLINED!!
                set x=GetUnitX(udg_DamageEventSource)
                set y=GetUnitY(udg_DamageEventSource)
                
                set x2=GetUnitX(udg_DamageEventTarget)
                set y2=GetUnitY(udg_DamageEventTarget)
                
                set x3=IncAngleDistance(x , y , x2 , y2 , 10000 , true)
                set y3=IncAngleDistance(x , y , x2 , y2 , 10000 , false)
            
            
                if udg_DamageEventTarget == gg_unit_h005_0281 then
                    set x3=IncAngleDistance(x , y , x2 , y2 , 50 , true)
                    set y3=IncAngleDistance(x , y , x2 , y2 , 50 , false)
                endif
            
                //Minertha
                if udg_DamageEventTarget == gg_unit_h008_0196 then
                    set x3=IncAngleDistance(x , y , x2 , y2 , 200 , true)
                    set y3=IncAngleDistance(x , y , x2 , y2 , 200 , false)
                endif
            
                if s__MissData_Aoe[d] != 0 and udg_IsDamageRanged and not udg_IsDamageSpell then
                    set m=s__Launch__Launch__allocate(x , y , 100 , x3 , y3 , 100)
                
                    set s__Missiles_source[m]=udg_DamageEventSource
                    set s__Missiles_target[m]=udg_DamageEventTarget
                    set s__Missiles_damage[m]=udg_DamageEventAmount
                    call s__Missiles__set_speed(m,BlzGetUnitWeaponRealField(udg_DamageEventSource, UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED, 0))
                    call s__Missiles__set_scale(m,s__MissData_size[d])
                    call s__Missiles__set_duration(m,s__MissData_dur[d])
                    call s__Missiles__set_model(m,"")
                    call s__MissileEffect__set_alpha(s__Missiles_effect[(m)],(0)) // INLINED!!
                    call s__Missiles__set_arc(m,BlzGetUnitWeaponRealField(udg_DamageEventSource, UNIT_WEAPON_RF_ATTACK_PROJECTILE_ARC, 0))
                    set s__Missiles_data[m]=t
                    set s__Missiles_collideZ[m]=false
                    set s__Missiles_collision[m]=s__MissData_Aoe[d]
                    call s__Missiles_launch(m)
                
                    set udg_DamageEventAmount=0
                //if spell then activate minertha timer
                elseif GetUnitAbilityLevel(udg_DamageEventSource, 'A071') > 0 and udg_DamageEventTarget == gg_unit_h008_0196 and udg_IsDamageSpell then
                    call s__MinerthaTimer_start(udg_DamageEventAmount , udg_DamageEventSource)
                else
                    set sor2=udg_DamageEventSource
                    set tar2=udg_DamageEventTarget
                    set EDamage=udg_DamageEventAmount
                    
                    if GetUnitRace(sor2) != RACE_NIGHTELF or WithinDistance(x , y , x2 , y2 , 140) then
                        call UnitAddTimedAbility((udg_DamageEventTarget ) , ( s__MissData_abil[d] ) , 1 , (( 15 )*1.0) , ( true) , 0 , 0.00 , null , null) // INLINED!!
                        call ForceEnumPlayersCounted(EForce, s__MissData_func[d], 1)
                        if GetUnitTypeId(sor2) == 'h04K' and udg_IsDamageRanged then
                            call MagneticAttacks_DamageEffect(sor2 , tar2 , EDamage)
                            set udg_DamageEventAmount=0
                        endif
                        if GetUnitRace(sor2) == RACE_NIGHTELF then
                            set ti=(NewTimerEx(0)) // INLINED!!
                            call TimerStart(ti, 0.01, false, function sc__WRSMissile_ReAddAbility)
                            set ti=null
                        endif
                    else
                        if (LoadInteger(Table__ht, (PsyI), (- 25))) != 0 and (LoadInteger(Table__ht, (PsyI), (- 25))) != 3 and (LoadInteger(Table__ht, (PsyI), (- 25))) != 19 and (LoadInteger(Table__ht, (PsyI), (- 25))) != 16 then // INLINED!!
                            call ForForce(bj_FORCE_PLAYER[0], suitMISS)
                        elseif (LoadInteger(Table__ht, (PsyI), (- 25))) == 3 or (LoadInteger(Table__ht, (PsyI), (- 25))) == 12 then // INLINED!!
                            call TriggerEvaluate(st__ArtLaunch_onDamage) // INLINED!!
                        elseif (LoadUnitHandle(Table__ht, (((PsyI))), (- 30))) != null and not IsUnitHidden((LoadUnitHandle(Table__ht, (((PsyI))), (- 30)))) then // INLINED!!
                        
                        endif
                            
                    endif
                        
                endif
            endif
endfunction


function LaunchInit takes nothing returns nothing
            local trigger t= CreateTrigger()
            local timer ti= (NewTimerEx(0)) // INLINED!!
            
            set PlanetData=s__Table_create()
            set Elements=s__Table_create()
            set EForce=CreateForce()
            call h__TriggerRegisterVariableEvent(t, "udg_DamageModifierEvent", EQUAL, 1.00)
            call TriggerAddCondition(t, Condition(function Launch__DoDamage))

            call TimerStart(ti, 0.05, false, function s__MissData_onInt)
            
            set ti=null
            set t=null
endfunction 



//library Launch ends
//library WRSTasks:
    
    function WRSTasks__IsUnitAndroid takes nothing returns boolean
                return GetOwningPlayer(GetEnumUnit()) == udg_HiddenAndroid
    endfunction
    
    function WRSTasks__IsUnitLocustInRange takes nothing returns boolean
                local unit u= GetEnumUnit()
                local integer ti= PsychoUser
                
                if GetUnitAbilityLevel(u, 'Aloc') > 0 and GetUnitTypeId(u) == (LoadInteger(Table__ht, (((PsyT))), (30))) and IsUnitInRangeXY(u, (LoadReal(Table__ht, (((PsyT))), (31))), (LoadReal(Table__ht, (((PsyT))), (32))), 200) then // INLINED!!
                    set u=null
                    return true
                else
                    set u=null
                    return false
                endif
    endfunction 
    function WRSTasks__DoesUnitHaveItem takes unit u returns boolean
                local integer i= 0
                local integer ti= PsychoUser
                loop
                    exitwhen i > 200 or i > 5
                    if GetItemTypeId(UnitItemInSlot(u, i)) == (LoadInteger(Table__ht, (((PsyT))), (29))) then // INLINED!!
                        set i=201
                    endif
                    set i=i + 1
                endloop
                if i > 200 then
                    return true
                else
                    return false
                endif
    endfunction 
    
    function WRSTasks__DoesUnitHaveItemGroup takes nothing returns boolean
                if WRSTasks__DoesUnitHaveItem(GetEnumUnit()) then
                    return true
                else
                    return false
                endif
    endfunction 

    function WRSTasks_GetClosestUnitsInRange takes real x,real y,real range,integer count,boolexpr filter returns boolean
        local unit picked
        local integer i= 0
        call GroupEnumUnitsInRange(TempEnumGroup, x, y, range, filter)
        if filter == Condition(function WRSTasks__IsUnitAndroid) or filter == Condition(function WRSTasks__DoesUnitHaveItemGroup) then
            if BlzGroupGetSize(TempEnumGroup) > 0 then
                return true
            else
                return false
            endif
        endif
        loop
            set picked=GetClosestUnitInGroup(x , y , TempEnumGroup)
            exitwhen picked == null or i == count
            set i=i + 1
            call GroupRemoveUnit(TempEnumGroup, picked)
        endloop
        return false
    endfunction
    
    function WRSTasks_AcquireSubject takes nothing returns integer
                //String of the subject number to be killed
                local integer si
                
                local integer pg= s__IPool_create()
                local integer p= s__User_first
                
                //player id of owning unit to be killed
                local integer pi
                
                
                loop
                    exitwhen p == s__User_NULL
                    if s__User_id[p] != PsychoUser then
                        call s__IPool_add(pg,s__User_id[p] , 1)
                    endif
                    set p=s__User_next[p]
                endloop
                
                //converts player color names to integer values
                set pi=s__IPool_getItem(pg)
            
                call s__IPool_destroy(pg)
                
                return pi
    endfunction 
    
    function WRSTasks_TaskCheck takes nothing returns boolean
                local integer ti= PsychoUser
                local integer s= 0
                local integer i= 0
                local real x= 0
                local real y= 0
                local real x2= 0
                local real y2= 0
                local integer o= 0
                local player pn
                
                
                    set x=GetRectCenterX(gg_rct_BombTeleport)
                    set y=GetRectCenterY(gg_rct_BombTeleport)
                  
                    if (s__PsychoTime_t[(ti)]) == 0 and (LoadInteger(Table__ht, (PsyI), (0))) == 5 then // INLINED!!
            
                        set s=s__String_create((LoadStr(Table__ht, (((PsyT))), (28)))) // INLINED!!
                        if (s__String_value[(s)]) != null then // INLINED!!
                            if s__String_find(s,"yes" , 0) != - 1 or s__String_find(s,"red" , 0) != - 1 then
                                call SaveInteger(Table__ht, (PsyI), (0), ( 6)) // INLINED!!
                            elseif s__String_find(s,"no" , 0) != - 1 or s__String_find(s,"blue" , 0) != - 1 then
                                set i=R2I(1 * Pow(2, (s__PsychoTime_pi[(ti)]))) // INLINED!!
                                call chatTest_generateMessage(chatTest_gameTime , "[?????]" , chatTest_playerIcon[(s__PsychoTime_pi[(ti)])] , GroupChats_getSender((s__PsychoTime_pi[(ti)])) + " " + (LoadStr(Table__ht, (((PsyT))), (0))) + (LoadStr(Table__ht, (((PsyI))), (11))) , i) // INLINED!!
                                call TriggerEvaluate(st__PsychoOnInit_Init) // INLINED!!
                            endif
                        endif
                        
                        call s__String_destroy(s)
                        call SaveStr(Table__ht, (((PsyT))), (28), ( null)) // INLINED!!
                        call RemoveSavedHandle(Table__ht, (((PsyT))), (28)) // INLINED!!
                    elseif (s__PsychoTime_t[(ti)]) == 0 and (LoadStr(Table__ht, (((PsyT))), (28))) == null then // INLINED!!
                        if ( (LoadInteger(Table__ht, (PsyI), (0))) <= 4 and (LoadInteger(Table__ht, (PsyI), (0))) >= 0 ) or ( (LoadInteger(Table__ht, (PsyI), (0))) >= 6 and (LoadInteger(Table__ht, (PsyI), (0))) <= 9 ) then // INLINED!!
                            call SaveInteger(Table__ht, (PsyI), (0), ( (LoadInteger(Table__ht, (PsyI), (0))) + 1)) // INLINED!!
                        elseif (LoadInteger(Table__ht, (PsyI), (0))) == 10 then // INLINED!!
                            set s__PsychoTime_t[(ti)]=(1) // INLINED!!
                            call SaveInteger(Table__ht, (PsyI), (0), ( - 1)) // INLINED!!
                            set s__PsychoTime_pIndex[(ti)]=(1) // INLINED!!
                        endif
                    elseif (s__PsychoTime_t[(ti)]) == 1 then // INLINED!!
                        
                        if WRSTasks_GetClosestUnitsInRange(x , y , 300 , 10 , Condition(function WRSTasks__IsUnitAndroid)) then
                            
                            //modify the phrase to be more friendly
                            set s=s__String_create((LoadStr(Table__ht, (((PsyT))), (11)))) // INLINED!!
                            call s__String_assign(s,"What a ponderous conclusion, I had anticipated a more riveting resolution. Never the less, your following task is...")
                            call SaveStr(Table__ht, (((PsyT))), (11), ( (s__String_value[(s)]))) // INLINED!!
                            
                            call s__String_destroy(s)
                            
                            set s__PsychoTime_pIndex[(ti)]=(3) // INLINED!!
                            
                            return true
                        endif
                        
                        set i=0
                        loop
                            exitwhen i > 5 or i >= 200
                            if GetItemUserData(UnitItemInSlot(udg_Playerhero[(s__PsychoTime_pi[(ti)]) + 1], i)) == udg_AndroidRemoteID and udg_AndroidRemoteID != 0 then // INLINED!!
                                set i=200
                            endif
                            set i=i + 1
                        endloop
                        
                        if udg_Playerhero[(s__PsychoTime_pi[(ti)]) + 1] == udg_Android_MemoryCardOwner or i >= 200 then // INLINED!!
                            set s__PsychoTime_pIndex[(ti)]=(3) // INLINED!!
                        endif
                    elseif (s__PsychoTime_t[(ti)]) == 2 then // INLINED!!
                            if IsUnitInRangeXY(udg_Playerhero[(s__PsychoTime_epi[(ti)]) + 1], GetRectCenterX(gg_rct_BombTeleport), GetRectCenterY(gg_rct_BombTeleport), 300) and not UnitAlive(udg_Playerhero[(s__PsychoTime_epi[(ti)]) + 1]) then // INLINED!!
                                set s__PsychoTime_pIndex[(ti)]=(3) // INLINED!!
                                set i=R2I(1 * Pow(2, (s__PsychoTime_pi[(ti)]))) // INLINED!!
                                call chatTest_generateMessage(chatTest_gameTime , "[?????]" , chatTest_playerIcon[(s__PsychoTime_pi[(ti)])] , GroupChats_getSender((s__PsychoTime_pi[(ti)])) + " " + (LoadStr(Table__ht, (((PsyT))), (0))) + "Erase the previous transmission from your cerebral sea-horse. That was not a prospective for prying auricles. Proceeding to the next task." , i) // INLINED!!
                            endif
                    elseif (s__PsychoTime_t[(ti)]) == 3 then // INLINED!!
                            //checks if errun console is destroyed or kyo console is destroyed or kyo is destroyed or errun is destroyed
                            if GetUnitAbilityLevel(gg_unit_h04B_0165, 'A06R') > 0 or GetUnitAbilityLevel(gg_unit_h006_0026, 'A06R') > 0 or not UnitAlive(gg_unit_h007_0027) or not UnitAlive(gg_unit_h03T_0209) then
                                //change item to check for to experimental portal
                                call SaveInteger(Table__ht, (((PsyT))), (29), ( 'I00O')) // INLINED!!
                                set s__PsychoTime_pIndex[(ti)]=(3) // INLINED!!
                            endif
                    elseif (s__PsychoTime_t[(ti)]) == 4 then // INLINED!!
                            //safety measure to ensure that the experimental portal is being checked.
                            if (LoadInteger(Table__ht, (((PsyT))), (29))) != 'I00O' then // INLINED!!
                                call SaveInteger(Table__ht, (((PsyT))), (29), ( 'I00O')) // INLINED!!
                            endif
                            if IsUnitInRange(gg_unit_h04V_0253, gg_unit_h009_0029, 250) or GetItemTypeId(GetClosestItemInRange(x , y , 200 , null)) == 'I00O' or WRSTasks_GetClosestUnitsInRange(x , y , 300 , 10 , Condition(function WRSTasks__DoesUnitHaveItemGroup)) then
                                //change the itemtype to check for to fusion bomb
                                call SaveInteger(Table__ht, (((PsyT))), (29), ( 'I00N')) // INLINED!!
                                set s__PsychoTime_pIndex[(ti)]=(3) // INLINED!!
                            endif
                    elseif (s__PsychoTime_t[(ti)]) == 5 then // INLINED!!
                            //safety measure to ensure the fusion bomb is being checked
                            if (LoadInteger(Table__ht, (((PsyT))), (29))) != 'I00N' then // INLINED!!
                                call SaveInteger(Table__ht, (((PsyT))), (29), ( 'I00N')) // INLINED!!
                            endif
                            if WRSTasks__DoesUnitHaveItem(udg_Playerhero[(s__PsychoTime_pi[(ti)]) + 1]) then // INLINED!!
                                
                                //sets the coordinates to be used for the next task
                                call SaveReal(Table__ht, (((PsyT))), (31), (( GetRectCenterX(gg_rct_BombTeleport))*1.0)) // INLINED!!
                                call SaveReal(Table__ht, (((PsyT))), (32), (( GetRectCenterY(gg_rct_BombTeleport))*1.0)) // INLINED!!
                                
                                //the counter for the next task
                                call SaveInteger(Table__ht, (((PsyT))), (33), ( 0)) // INLINED!!
                                
                                //the indicator that all parts of the task has been completed
                                set o=s__IPool_create()
                                call SaveInteger(Table__ht, (((PsyT))), (34), ( o)) // INLINED!!
                                set s__PsychoTime_pIndex[(ti)]=(3) // INLINED!!
                            endif
                    elseif (s__PsychoTime_t[(ti)]) == 6 then // INLINED!!
                            call SaveInteger(Table__ht, (((PsyT))), (33), ( (LoadInteger(Table__ht, (((PsyT))), (33))) + 1)) // INLINED!!
                            if (LoadInteger(Table__ht, (((PsyT))), (33))) < 30 then // INLINED!!
                                set pn=Player(PLAYER_NEUTRAL_PASSIVE)
                                set o=(LoadInteger(Table__ht, (((PsyT))), (34))) // INLINED!!
                                
                                //fusion bomb
                                if not (HaveSavedInteger(Table__ht, (((s__IPool__data_tar) + ((o)))), ((3)))) then // INLINED!!
                                    call SaveInteger(Table__ht, (((PsyT))), (30), ( 'e004')) // INLINED!!
                                    call GroupEnumUnitsOfPlayer(TempEnumGroup, pn, Condition(function WRSTasks__IsUnitLocustInRange))
                                    if BlzGroupGetSize(TempEnumGroup) > 0 then
                                        call s__IPool_add(o,3 , 1)
                                    endif
                                endif
                                
                                //the experimental portal
                                if not (HaveSavedInteger(Table__ht, (((s__IPool__data_tar) + ((o)))), ((5)))) then // INLINED!!
                                    call SaveInteger(Table__ht, (((PsyT))), (30), ( 'e006')) // INLINED!!
                                    call GroupEnumUnitsOfPlayer(TempEnumGroup, pn, Condition(function WRSTasks__IsUnitLocustInRange))
                                    if BlzGroupGetSize(TempEnumGroup) > 0 then
                                        call s__IPool_add(o,5 , 1)
                                    endif
                                endif
                                
                                //the pown 
                                if not (HaveSavedInteger(Table__ht, (((s__IPool__data_tar) + ((o)))), ((4)))) then // INLINED!!
                                    call SaveInteger(Table__ht, (((PsyT))), (30), ( 'e005')) // INLINED!!
                                    call GroupEnumUnitsOfPlayer(TempEnumGroup, pn, Condition(function WRSTasks__IsUnitLocustInRange))
                                    if BlzGroupGetSize(TempEnumGroup) > 0 then
                                        call s__IPool_add(o,4 , 1)
                                    endif
                                endif
                                
                                set i=0
                                loop
                                    exitwhen i > 5 or i >= 200
                                    if GetItemUserData(UnitItemInSlot(udg_Playerhero[(s__PsychoTime_pi[(ti)]) + 1], i)) == udg_AndroidRemoteID then // INLINED!!
                                        set i=200
                                    endif
                                    set i=i + 1
                                endloop
                                
                                set x=GetItemX(udg_Android_MemoryCard)
                                set y=GetItemY(udg_Android_MemoryCard)
                                
                                //for readability purposes
                                set x2=(LoadReal(Table__ht, (((PsyT))), (31))) // INLINED!!
                                set y2=(LoadReal(Table__ht, (((PsyT))), (32))) // INLINED!!
                                
                                //If a fusion explosion, and a pown or experiemntal portal explosion, and the corpose are all at the portal termius, and android memory card is near corpose or
                                //the psychoplayer is near the terminus and has the latest remote within 3.75 seconds
                                if (HaveSavedInteger(Table__ht, (((s__IPool__data_tar) + ((o)))), ((3)))) and ( (HaveSavedInteger(Table__ht, (((s__IPool__data_tar) + ((o)))), ((5)))) or (HaveSavedInteger(Table__ht, (((s__IPool__data_tar) + ((o)))), ((4)))) ) and IsUnitInRangeXY(udg_Playerhero[(s__PsychoTime_epi[(ti)]) + 1], x2, y2, 200) and ( IsUnitInRangeXY(udg_Playerhero[(s__PsychoTime_epi[(ti)]) + 1], x, y, 200) or ( i >= 200 and IsUnitInRangeXY(udg_Playerhero[(s__PsychoTime_pi[(ti)]) + 1], x2, y2, 200) ) ) then // INLINED!!
                                      call s__IPool_destroy(o)
                                      set s__PsychoTime_pIndex[(ti)]=(3) // INLINED!!
                                endif
                                set pn=null
                            elseif (LoadInteger(Table__ht, (((PsyT))), (33))) == 30 then // INLINED!!
                                call s__IPool_flush(o)
                                call SaveInteger(Table__ht, (((PsyT))), (33), ( 0)) // INLINED!!
                            endif
                    elseif (s__PsychoTime_t[(ti)]) == 7 then // INLINED!!
                         set i=0
                         loop
                             exitwhen i > 11
                             call SaveStr(Table__ht, (((PsyT))), (i), ( null)) // INLINED!!
                             call SaveStr(Table__ht, (((PsyN))), (i), ( null)) // INLINED!!
                             call SaveStr(Table__ht, (((PsyP))), (i), ( null)) // INLINED!!
                             call SaveStr(Table__ht, (((PsyI))), (i), ( null)) // INLINED!!
                             set i=i + 1
                         endloop
                         call WRSTaskEnd_End((s__PsychoTime_pi[(ti)])) // INLINED!!
                    endif
                        
                return true
    endfunction 



//library WRSTasks ends
//library Water:

    
        function s__WaterEffect_cast takes nothing returns boolean
            local integer h
            local integer t
            local unit tar
            local unit sor
            local real dam
            
            
            set tar=tar2
            set sor=sor2
            set dam=EDamage
            
            set h=GetUnitUserData(tar)
            
            //the ice
            if GetUnitAbilityLevel(tar, 'B003') > 0 then
                
                    set t=(LoadInteger(Table__ht, (Elements), (h + 1 * 5000))) // INLINED!!
                        
                    
                    if s__ShareFunc_tar[t] == null then
                        call s__ShareFunc_Freeze(tar , sor)
                    endif
                
            //electro 
            elseif GetUnitAbilityLevel(tar, 'B01Z') > 0 then
                
                    call s__ShareFunc_ElectricCharge(tar , sor)
                       
            //pyro       
            elseif GetUnitAbilityLevel(tar, 'B01X') > 0 then
                        
                    call s__ShareFunc_Vaporize(tar , sor , dam)
                        
            endif
                
            set tar=null
            set sor=null
                
            return true
        
        endfunction 
    


//library Water ends
//library AutoArtillary:
    
    ////////////////////////////////////////////////////////////////////////
    //Configuration////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
        
    constant function AutoArtillary__MissileAmount takes nothing returns integer
                //How many missiles do you want to fire?
                return 10
    endfunction
        
    constant function AutoArtillary__MissileSpeed takes nothing returns real
                //How fast should the missiles be?
                return 900.0
    endfunction
    
    constant function AutoArtillary__MissileModel takes nothing returns string
                //the model missiles uses
                return "Psycho\\Effects\\Airstrike Rocket.mdx"
    endfunction 
    
    ////////////////////////////////////////////////////////////////////////
    //End of Configuration/////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    

        
        function s__AutoArtillary__ArtMissile_onHit takes integer this,unit hit returns boolean
            local integer d= (LoadInteger(Table__ht, (Miss), (GetUnitTypeId(s__Missiles_source[this])))) // INLINED!!
            local real x= GetUnitX(hit)
            local real y= GetUnitY(hit)
            if hit != s__Missiles_source[this] and UnitAlive(hit) then
                if WithinDistance(s__Missiles_x[this] , s__Missiles_y[this] , x , y , 80) and s__Missiles_z[this] <= 0 then
                    call GroupEnumUnitsInRange(TempEnumGroup, s__Missiles_x[this], s__Missiles_y[this], 200, null)
                    call AreaDamage(s__Missiles_source[this] , s__Missiles_x[this] , s__Missiles_y[this] , 200 , s__Missiles_damage[this])
                    return true
                else
                    call s__Missiles_flush(this,hit)
                endif
            endif

            return false
            
        endfunction

        function s__AutoArtillary__ArtMissile_onDestructable takes integer this,destructable dest returns boolean
            local integer b= GetDestructableTypeId(dest)
            local real h
            
            if b == 'B003' then
                
                call KillDestructable(dest)
            
            else
                set h=GetDestructableLife(dest)
                
                call SetDestructableLife(dest, h - s__Missiles_damage[this] * 10)
                
            endif
        
            return true
            
        endfunction
        
        function s__AutoArtillary__ArtMissile_onPeriod takes integer this returns boolean
                local integer d= (LoadInteger(Table__ht, (Miss), (GetUnitTypeId(s__Missiles_source[this])))) // INLINED!!
                local integer mi= s__Missiles_data[this]
                
                
                set s__WRSMissData_c[mi]=s__WRSMissData_c[mi] + 1
                
                if s__WRSMissData_c[mi] == 4 then
                
                    //Makes sure the speed is static
                    call s__Missiles__set_speed(this,(900.0)) // INLINED!!
                    
                endif
                
                if s__WRSMissData_c[mi] >= 480 then
                
                    return true
                    
                endif
                
                if not UnitAlive(s__Missiles_target[this]) then
                        return true
                endif
                
                return false
            
        endfunction
        
        function s__AutoArtillary__ArtMissile_onRemove takes integer this returns nothing
                 local integer wm= s__Missiles_data[this]
                 call sc__WRSMissData_destroy(wm)
               //  call DisplayTextToPlayer(Player(0),0,0,"MISSILE FINISHED")
        endfunction 
        
        function s__AutoArtillary__ArtMissile_onFinish takes integer this returns boolean
                    call GroupEnumUnitsInRange(TempEnumGroup, s__Missiles_x[this], s__Missiles_y[this], 200, null)
                    call AreaDamage(s__Missiles_source[this] , s__Missiles_x[this] , s__Missiles_y[this] , 200 , s__Missiles_damage[this])
                    return true
        endfunction 
        
    
    function AutoArtillary__GetRandomRange takes real radius returns real
     
            local real r= GetRandomReal(0, 1) + GetRandomReal(0, 1)
        
            if r > 1 then
            
                return ( 2 - r ) * radius
                
            endif
        
            return r * radius
            
    endfunction

        
        
        //the damage factor
        
        //Unit's that cast the spell coordinates
        
        //counter
        

//Implemented from module CTL:
        function s__ArtLaunch_create takes nothing returns integer
            return CTL__CT(s__ArtLaunch_rctl32)
        endfunction
        function s__ArtLaunch_destroy takes integer this returns nothing
            call CTL__DT(this)
        endfunction
        function s__ArtLaunch_ectl32 takes nothing returns boolean
            local integer this=CTL__rf[s__ArtLaunch_rctl32]
            local real theta
            local real radius
            local integer missile
            local real x
            local real y
            local integer d
            
//Implemented from module CTLExpire:
            loop
                exitwhen 0 == this

            if s__ArtLaunch_c[this] > 0 then
            
                set x=GetUnitX(s__ArtLaunch_u[this])
                set y=GetUnitY(s__ArtLaunch_u[this])
                set d=sc__WRSMissData_create(0)
                
                set s__ArtLaunch_c[this]=s__ArtLaunch_c[this] - 1
                set theta=2 * bj_PI * GetRandomReal(0, 1)
                set radius=AutoArtillary__GetRandomRange(350)
                
                set missile=s__AutoArtillary__ArtMissile__allocate(x , y , s__ArtLaunch_z[this] , s__ArtLaunch_x[this] + radius * Cos(theta) , s__ArtLaunch_y[this] + radius * Sin(theta) , s__ArtLaunch_z[this])
                
                //Missiles variables
                set s__Missiles_source[missile]=s__ArtLaunch_u[this]
                set s__Missiles_target[missile]=s__ArtLaunch_tar[this]
                call s__Missiles__set_model(missile,("Psycho\\Effects\\Airstrike Rocket.mdx")) // INLINED!!
                call s__Missiles__set_speed(missile,(900.0)) // INLINED!!
                call s__Missiles__set_duration(missile,5)
                set s__Missiles_owner[missile]=GetOwningPlayer(s__ArtLaunch_u[this])
                set s__Missiles_collision[missile]=0
                call s__Missiles__set_arc(missile,GetRandomReal(10, 65))
                call s__Missiles__set_curve(missile,GetRandomReal(5, 20) * - 1)
                set s__Missiles_damage[missile]=s__ArtLaunch_d[this]
                set s__Missiles_collideZ[missile]=true
                set s__Missiles_data[missile]=d

                call s__Missiles_launch(missile)
                
            else
                
                //clean leaks
                set s__ArtLaunch_u[this]=null
                set s__ArtLaunch_tar[this]=null
                
                call CTL__DT((this)) // INLINED!!
                
            endif
        
//Implemented from module CTLNull:
                set this=CTL__n[this]
            endloop
        
//Implemented from module CTLEnd:
            return false
        endfunction
        function s__ArtLaunch_CTLEnd___onInit takes nothing returns nothing
            set s__ArtLaunch_rctl32=CTL__A(function s__ArtLaunch_ectl32)
        endfunction
        

        function s__ArtLaunch_onDamage takes nothing returns nothing
            local integer this= (CTL__CT(s__ArtLaunch_rctl32)) // INLINED!!

            set s__ArtLaunch_u[this]=sor2
            set s__ArtLaunch_x[this]=GetUnitX(tar2)
            set s__ArtLaunch_y[this]=GetUnitY(tar2)
            set s__ArtLaunch_tar[this]=tar2
            set s__ArtLaunch_z[this]=75
            set s__ArtLaunch_c[this]=(10) // INLINED!!
            set s__ArtLaunch_d[this]=EDamage / s__ArtLaunch_c[this]
            
        endfunction
        
    

//library AutoArtillary ends
//library CannonProjectile:



        
        
        
        
        
        
        //current size of the special effect
        
//Implemented from module CTL:
        function s__CannonProjectile__DPSTimer_create takes nothing returns integer
            return CTL__CT(s__CannonProjectile__DPSTimer_rctl32)
        endfunction
        function s__CannonProjectile__DPSTimer_destroy takes integer this returns nothing
            call CTL__DT(this)
        endfunction
        function s__CannonProjectile__DPSTimer_ectl32 takes nothing returns boolean
            local integer this=CTL__rf[s__CannonProjectile__DPSTimer_rctl32]
        
        local real x= GetUnitX(s__CannonProjectile__DPSTimer_tar[this])
        local real y= GetUnitY(s__CannonProjectile__DPSTimer_tar[this])
        
//Implemented from module CTLExpire:
            loop
                exitwhen 0 == this
        
        set s__CannonProjectile__DPSTimer_c[this]=s__CannonProjectile__DPSTimer_c[this] + 1
        
        set s__CannonProjectile__DPSTimer_sizeE[this]=s__CannonProjectile__DPSTimer_sizeE[this] - 0.018
        
        call BlzSetSpecialEffectX(s__CannonProjectile__DPSTimer_e[this], x)
        call BlzSetSpecialEffectY(s__CannonProjectile__DPSTimer_e[this], y)
        call BlzSetSpecialEffectZ(s__CannonProjectile__DPSTimer_e[this], 0)
        
        call BlzSetSpecialEffectScale(s__CannonProjectile__DPSTimer_e[this], s__CannonProjectile__DPSTimer_sizeE[this])
        
        call UnitDamageTarget(s__CannonProjectile__DPSTimer_sor[this], s__CannonProjectile__DPSTimer_tar[this], s__CannonProjectile__DPSTimer_damage[this], false, true, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNKNOWN, WEAPON_TYPE_WHOKNOWS)
        
        if s__CannonProjectile__DPSTimer_tar[this] == gg_unit_h008_0196 then
              call s__MinerthaTimer_start(s__CannonProjectile__DPSTimer_damage[this] , s__CannonProjectile__DPSTimer_sor[this])
        endif
        
        
        if s__CannonProjectile__DPSTimer_c[this] >= 160 then
        
            set s__CannonProjectile__DPSTimer_tar[this]=null
            set s__CannonProjectile__DPSTimer_sor[this]=null
            call BlzSetSpecialEffectTimeScale(s__CannonProjectile__DPSTimer_e[this], 0.25)
            
        elseif s__CannonProjectile__DPSTimer_c[this] == 192 then
            call BlzSetSpecialEffectX(s__CannonProjectile__DPSTimer_e[this], GetRectCenterX(gg_rct_Timeout))
            call BlzSetSpecialEffectY(s__CannonProjectile__DPSTimer_e[this], GetRectCenterY(gg_rct_Timeout))
            call DestroyEffect(s__CannonProjectile__DPSTimer_e[this])
            set s__CannonProjectile__DPSTimer_e[this]=null
            call CTL__DT((this)) // INLINED!!
        endif
        
//Implemented from module CTLEnd:
                set this=CTL__n[this]
            endloop
            return false
        endfunction
        function s__CannonProjectile__DPSTimer_CTLEnd___onInit takes nothing returns nothing
            set s__CannonProjectile__DPSTimer_rctl32=CTL__A(function s__CannonProjectile__DPSTimer_ectl32)
        endfunction
        
        function s__CannonProjectile__DPSTimer_KyoStart takes real damage,unit sor,unit tar returns nothing
                    local integer this= (CTL__CT(s__CannonProjectile__DPSTimer_rctl32)) // INLINED!!
                    
                    set s__CannonProjectile__DPSTimer_c[this]=0
                    set s__CannonProjectile__DPSTimer_tar[this]=tar
                    set s__CannonProjectile__DPSTimer_sor[this]=sor
                    set s__CannonProjectile__DPSTimer_damage[this]=damage
                    set s__CannonProjectile__DPSTimer_e[this]=AddSpecialEffect("war3mapImported\\Firesphere.mdl", GetUnitX(tar), GetUnitY(tar))
                    set s__CannonProjectile__DPSTimer_sizeE[this]=3.0
                    
                    //Modify the sfx
                    call BlzSetSpecialEffectScale(s__CannonProjectile__DPSTimer_e[this], 3.0)
                    call BlzSetSpecialEffectZ(s__CannonProjectile__DPSTimer_e[this], 0)
                    call BlzPlaySpecialEffect(s__CannonProjectile__DPSTimer_e[this], ANIM_TYPE_DEATH)
        endfunction 








        function s__CannonProjectile__Launch_onPeriod takes integer this returns boolean
                  local real x= GetUnitX(s__CannonProjectile__Launch_tar[this])
                  local real y= GetUnitY(s__CannonProjectile__Launch_tar[this])
                  
                  if (s__Missiles_veloc[(this)] / Missiles_PERIOD) != 150 then // INLINED!!
                    
                    call s__Missiles__set_speed(this,150)
                    
                  endif
                  
                  if WithinDistance(s__Missiles_x[this] , s__Missiles_y[this] , x , y , 10) == false then
                        call s__Missiles_deflect(this,x , y , 300)
                  else
                        call s__CannonProjectile__DPSTimer_KyoStart(1250 , s__Missiles_source[this] , s__CannonProjectile__Launch_tar[this])
                        call s__Missiles__set_model(this,null)
                        
                        return true
                  endif
                  
                
                  return false
                  
                 
        endfunction 
        
        function s__CannonProjectile__Launch_onHit takes integer this,unit hit returns boolean
                  local real x
                  local real y
                  
                  if GetUnitAbilityLevel(hit, 'A072') > 0 then
                        set x=GetUnitX(hit)
                        set y=GetUnitY(hit)
                        if WithinDistance(s__Missiles_x[this] , s__Missiles_y[this] , x , y , 10) and hit != s__Missiles_source[this] then
                            set s__CannonProjectile__Launch_tar[this]=hit
                        else
                            call s__Missiles_flush(this,hit)
                        endif
                  endif
                  
                  return false
                  
        endfunction 
        

function CannonProjectile__KyoCannon takes nothing returns nothing
            local integer m= 0
            local unit cast
            local unit tar
            local real x
            local real y
            
            local real x2
            local real y2
            
            local real x3
            local real y3
            
            if GetSpellAbilityId() == 'A005' then
                set cast=GetTriggerUnit()
                set tar=GetSpellTargetUnit()
                
                set x=GetUnitX(cast)
                set y=GetUnitY(cast)
            
                set x2=GetUnitX(tar)
                set y2=GetUnitY(tar)
                
                set x3=IncAngleDistance(x , y , x2 , y2 , 100 , true)
                set y3=IncAngleDistance(x , y , x2 , y2 , 100 , false)
                
                set m=s__CannonProjectile__Launch__allocate(x , y , 300 , x3 , y3 , 300)
                
                set s__Missiles_source[m]=cast
                set s__CannonProjectile__Launch_tar[m]=tar
                set s__Missiles_damage[m]=udg_DamageEventAmount
                call s__Missiles__set_speed(m,150)
                call s__Missiles__set_scale(m,2.500)
                call s__Missiles__set_duration(m,999999)
                call s__Missiles__set_model(m,"war3mapImported\\Firesphere.mdl")
                set s__Missiles_collideZ[m]=false
                set s__Missiles_collision[m]=100
                set s__Missiles_data[m]=64
                call s__Missiles_launch(m)
            
            endif
            
            set cast=null
            set tar=null
endfunction 


//===========================================================================
function IntCannonProjectile takes nothing returns nothing
             call RegisterUnitEvent(gg_unit_h007_0027 , EVENT_UNIT_SPELL_EFFECT , function CannonProjectile__KyoCannon)
endfunction


//library CannonProjectile ends
//library MagneticSaw:

        
        
        function s__MagneticSaw__Saw_onPeriod takes integer this returns boolean
                  if (s__Missiles_veloc[(this)] / Missiles_PERIOD) != 1200 then // INLINED!!
                    call s__Missiles__set_speed(this,1200)
                  endif
                  
                  return false
        endfunction 
        
        function s__MagneticSaw__Saw_onHit takes integer this,unit hit returns boolean
                if hit != s__Missiles_source[this] and GetUnitTypeId(hit) != 'H03I' and UnitAlive(hit) then
                    call UnitDamageTarget(s__Missiles_source[this], hit, s__Missiles_damage[this], false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNKNOWN, WEAPON_TYPE_WHOKNOWS)
                    if not IsUnitType(hit, UNIT_TYPE_MECHANICAL) then
                        set bj_lastCreatedEffect=AddSpecialEffectTarget("SuitEffects\\Coup de Grace.mdx", hit, "chest")
call s__effectTimed_create((bj_lastCreatedEffect ) , (( 1.5)*1.0)) // INLINED!!
                    endif
                endif
                call s__Missiles_flush(this,hit)
                
                return false
        endfunction
        
        function s__MagneticSaw__Saw_onDestructable takes integer this,destructable dest returns boolean
                   local integer t= GetDestructableTypeId(dest)
                   local real h= GetDestructableLife(dest)
                   local real d= s__Missiles_damage[this]
                   local real x
                   local real y
                   local boolean o
                   
                   if ( t == 'B000' or t == 'B001' ) then
                        set o=LoadBoolean((udg_hash), GetHandleId(dest), StringHash("isopen")) // INLINED!!
                        if o == false then
                            set x=s__Missiles_x[this] + Cos(3.14159 - s__MagneticSaw__Saw_ang[this]) * 100000
                            set y=s__Missiles_y[this] + Sin(3.14159 - s__MagneticSaw__Saw_ang[this]) * 100000
                            call s__Missiles_deflect(this,x , y , 25)
                        endif
                   endif
                   
                   if t == 'B003' or t == 'B007' then
                        call KillDestructable(dest)
                        return false
                   endif
                   
                   call SetDestructableLife(dest, h - 200)
                   
                   if t == 'B00A' or t == 'B00B' or t == 'B00C' then
                        set bj_lastCreatedEffect=AddSpecialEffect("SuitEffects\\Coup de Grace.mdx", GetDestructableX(dest), GetDestructableY(dest))
call s__effectTimed_create((bj_lastCreatedEffect ) , (( 1.5)*1.0)) // INLINED!!
                   endif
                   
                   return false
        endfunction 
        
        function s__MagneticSaw__Saw_onCliff takes integer this returns boolean
                    return true
        endfunction 
    
    function MagneticSaw__eff takes nothing returns nothing
            local ability a= BlzGetUnitAbility(udg_Spell__Caster, GetSpellAbilityId())
            local integer b= BlzGetAbilityIntegerField(a, ABILITY_IF_PRIORITY)
            local integer m
            local real x
            local real y
            local real x2
            local real y2
            local real x3
            local real y3
            local destructable d
            local real ang
            
            if b == 0 then
                set bj_lastCreatedUnit=CreateUnit(udg_Spell__CasterOwner, 'h03N', GetUnitX(udg_Spell__Caster), GetUnitY(udg_Spell__Caster), bj_UNIT_FACING)
                call SetUnitTimeScale(bj_lastCreatedUnit, 2.00)
                //attack
                call IssueTargetOrderById(bj_lastCreatedUnit, 851983, udg_Spell__Target)
            else
                set x=GetUnitX(udg_Spell__Caster)
                set y=GetUnitY(udg_Spell__Caster)
                
                if udg_Spell__Target != null then
                    set x2=GetUnitX(udg_Spell__Target)
                    set y2=GetUnitY(udg_Spell__Target)
                elseif GetSpellTargetDestructable() != null then
                    set d=GetSpellTargetDestructable()
                    set x2=GetDestructableX(d)
                    set y2=GetDestructableY(d)
                    set d=null
                endif
            
                set x3=IncAngleDistance(x , y , x2 , y2 , 10000 , true)
                set y3=IncAngleDistance(x , y , x2 , y2 , 10000 , false)
                
                set ang=Atan2(y3 - y, x3 - x)
                
                set m=s__MagneticSaw__Saw__allocate(x , y , 25 , x3 , y3 , 25)
                set s__Missiles_source[m]=udg_Spell__Caster
                set s__Missiles_damage[m]=10
                call s__Missiles__set_speed(m,1200)
                call s__Missiles__set_scale(m,1.0)
                call s__Missiles__set_duration(m,5)
                call s__Missiles__set_model(m,"Abilities\\Weapons\\GlaiveMissile\\GlaiveMissile.mdl")
                set s__Missiles_collision[m]=160
                set s__MagneticSaw__Saw_ang[m]=ang
                call s__Missiles_launch(m)
            endif
            
            set a=null
    endfunction 


    function MagneticSaw_onInit takes nothing returns nothing
                call RegisterSpellSystem('A061' , function MagneticSaw__eff , null , null , 0 , 0)
    endfunction


//library MagneticSaw ends
//library PhaseBurn:
        
            
        
        function s__PhaseBurn__Phase_onPeriod takes integer this returns boolean
                  local real x= GetUnitX(s__PhaseBurn__Phase_tar[this])
                  local real y= GetUnitY(s__PhaseBurn__Phase_tar[this])
                  local real m= GetUnitState(s__PhaseBurn__Phase_tar[this], UNIT_STATE_MANA)
                  local real d= m * 1.10
                  local integer c= s__Missiles_data[this]
                  
                  if (s__Missiles_veloc[(this)] / Missiles_PERIOD) != 1800 then // INLINED!!
                    call s__Missiles__set_speed(this,1800)
                  endif
                  
                  set s__Count_c[c]=s__Count_c[c] + 1
                  
                  if s__Count_c[c] > 1 and (s__MissileEffect_transparency[(s__Missiles_effect[(this)])]) == 0 then // INLINED!!
                        call s__Missiles__set_model(this,"SuitEffects\\Void Spear.mdx")
                        call s__MissileEffect__set_alpha(s__Missiles_effect[(this)],(255)) // INLINED!!
                  endif
                  
                  if s__Count_c[c] > 384 then
                        return true
                  endif
                  
                  if WithinDistance(x , y , s__Missiles_x[this] , s__Missiles_y[this] , 40) then
                    call UnitDamageTarget(s__Missiles_source[this], s__PhaseBurn__Phase_tar[this], d, false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNKNOWN, WEAPON_TYPE_WHOKNOWS)
                    call SetUnitState(s__PhaseBurn__Phase_tar[this], UNIT_STATE_MANA, m * 0.5)
                    call DisplayTextToPlayer(Player(0), 0, 0, "DAMAGED")
                    return true
                  else
                    call s__Missiles_deflect(this,x , y , 25)
                  endif
                  
                    
                  return false
                  
        endfunction 
        
        function s__PhaseBurn__Phase_onRemove takes integer this returns nothing
                local integer c= s__Missiles_data[this]
                call sc__Count_destroy(c)
        endfunction 
        
            
    function PhaseBurn__eff takes nothing returns nothing
            local integer m
            local real x
            local real y
            local real x2
            local real y2
            local real x3
            local real y3
            local integer c
            
            set x=GetUnitX(udg_Spell__Caster)
            set y=GetUnitY(udg_Spell__Caster)
                
            set x2=GetUnitX(udg_Spell__Target)
            set y2=GetUnitY(udg_Spell__Target)
            
            set x3=IncAngleDistance(x , y , x2 , y2 , 10000 , true)
            set y3=IncAngleDistance(x , y , x2 , y2 , 10000 , false)
                
            set m=s__PhaseBurn__Phase__allocate(x , y , 25 , x3 , y3 , 25)
            set s__Missiles_source[m]=udg_Spell__Caster
            set s__PhaseBurn__Phase_tar[m]=udg_Spell__Target
            set s__Missiles_damage[m]=0
            call s__Missiles__set_speed(m,1800)
            call s__Missiles__set_scale(m,3.0)
            call s__Missiles__set_duration(m,12)
            call s__Missiles__set_model(m,".mdx")
            call s__MissileEffect__set_alpha(s__Missiles_effect[(m)],(0)) // INLINED!!
            set s__Missiles_collision[m]=160
            set s__Missiles_data[m]=sc__Count_create()
            call s__Missiles_launch(m)
       //     call SetUnitAnimationByIndex(udg_Spell__Caster,4)
    endfunction 
    
    function PhaseBurn_onInit takes nothing returns nothing
                call RegisterSpellSystem('A0A4' , function PhaseBurn__eff , null , null , 0 , 0)
    endfunction 



//library PhaseBurn ends
//library WRSMissiles:

//Implemented from module Alloc:
        function s__WRSMissData_allocate takes nothing returns integer
            return Alloc_Allocate(si__WRSMissData)
        endfunction
        function s__WRSMissData_deallocate takes integer this returns nothing
            call Alloc_Deallocate(si__WRSMissData , this)
        endfunction
        
        
        function s__WRSMissData_create takes integer tipe returns integer
            local integer this= (Alloc_Allocate(si__WRSMissData)) // INLINED!!
            //call BJDebugMsg("Created")
            set s__WRSMissData_c[this]=0
            set s__WRSMissData_t[this]=tipe
            return this
        endfunction
    
    
        function s__WRSMissData_destroy takes integer this returns nothing
            call BJDebugMsg("Destroying: " + I2S(this))
            call Alloc_Deallocate(si__WRSMissData , (this)) // INLINED!!
        endfunction
        
    

    
        
        function s__WRSMissile_AirEffect takes integer this returns nothing
                    
        endfunction
        
        function s__WRSMissile_PyroEffect takes integer this returns nothing
        
        endfunction 
        
        function s__WRSMissile_AcidEffect takes integer this returns nothing
        
        endfunction
        
        function s__WRSMissile_ElectroEffect takes integer this returns nothing
        
        endfunction 
        
        function s__WRSMissile_IceEffect takes integer this returns nothing
        
        endfunction 
        
        function s__WRSMissile_DarkEffect takes integer this returns nothing
        
        endfunction
        
        function s__WRSMissile_GetMissileFunctionEx takes unit hit,real damage,unit sor,integer data returns nothing
                local integer wm
                local integer d
                
                if data == 0 then
                    set d=(LoadInteger(Table__ht, (Miss), (GetUnitTypeId(sor)))) // INLINED!!
                else
                    set wm=data
                    set d=(LoadInteger(Table__ht, (Miss), (s__WRSMissData_t[wm]))) // INLINED!!
                endif
                    
                //add the elemental ability
                call UnitAddTimedAbility((hit ) , ( s__MissData_abil[d] ) , 1 , (( 15 )*1.0) , ( true) , 0 , 0.00 , null , null) // INLINED!!
                
                //activate elemental effect
                set sor2=sor
                set tar2=hit
                set EDamage=damage
                call ForceEnumPlayersCounted(EForce, s__MissData_func[d], 1)
        endfunction
        
        function s__WRSMissile_GetMissileFunction takes integer this returns nothing
                local integer i= s__WRSMissile_func[this]
                
                call s__WRSMissile_GetMissileFunctionEx(s__WRSMissile_hit[this] , s__Missiles_damage[this] , s__Missiles_source[this] , s__Missiles_data[this])
                
                 //telsa
                if i == 2 then
                   call s__WRSMissile_ElectroEffect(this)
                //Rocket
                elseif i == 3 then
                   
                //Cryo
                elseif i == 4 then
                   call s__WRSMissile_IceEffect(this)
                //Plasma
                elseif i == 5 then
        
                //Pyro
                elseif i == 6 then
                   call s__WRSMissile_PyroEffect(this)
                //Photon
                elseif i == 7 then
             
                //Service
                elseif i == 8 then
     
                //Dark Matter
                elseif i == 9 then
                    call s__WRSMissile_DarkEffect(this)
                //Illiusion
                elseif i == 10 then
                
                //Radiation
                elseif i == 11 then
               
                //Operative
                elseif i == 12 then
                 
                //Scientist
                elseif i == 13 then
                
                //Guard
                elseif i == 14 then
                 
                //Acidic
                elseif i == 15 then
                    call s__WRSMissile_AcidEffect(this)
                //Machine
                elseif i == 16 then
                  
                //Force
                elseif i == 17 then
                
                //Magnetic
                elseif i == 18 then
                
                //Pulse
                elseif i == 19 then
           
                endif
        endfunction 
        
        function s__WRSMissile_onRemove takes integer this returns nothing
                 local integer wm= s__Missiles_data[this]
                 call s__WRSMissData_destroy(wm)
               //  call DisplayTextToPlayer(Player(0),0,0,"MISSILE FINISHED")
        endfunction 
        
        function s__WRSMissile_onPeriod takes integer this returns boolean
            local integer wm= s__Missiles_data[this]
            local integer d= (LoadInteger(Table__ht, (Miss), (s__WRSMissData_t[wm]))) // INLINED!!
            local real x2= GetUnitX(s__WRSMissile_tar[this])
            local real y2= GetUnitY(s__WRSMissile_tar[this])
            
            
            if (s__Missiles_veloc[(this)] / Missiles_PERIOD) != BlzGetUnitWeaponRealField(s__Missiles_source[this], UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED, 0) then // INLINED!!
                    
                call s__Missiles__set_speed(this,BlzGetUnitWeaponRealField(s__Missiles_source[this], UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED, 0))
                    
            endif
            
            
            set s__WRSMissData_c[wm]=s__WRSMissData_c[wm] + 1
            
            if (LoadInteger(Table__ht, (PsyI), (- 25))) == 7 or (LoadInteger(Table__ht, (PsyI), (- 25))) == 18 or (LoadInteger(Table__ht, (PsyI), (- 25))) == 5 or (LoadInteger(Table__ht, (PsyI), (- 25))) == 11 or (LoadInteger(Table__ht, (PsyI), (- 25))) == 10 then // INLINED!!
               //   call BlzPlaySpecialEffect(.effect.effect, ANIM_TYPE_DEATH)
                  call s__Missiles__set_scale(this,3.0)
            endif
            

            if s__WRSMissData_c[wm] > s__MissData_vis[d] and (s__MissileEffect_transparency[(s__Missiles_effect[(this)])]) == 0 then // INLINED!!
                  
                call s__MissileEffect__set_alpha(s__Missiles_effect[(this)],(255)) // INLINED!!
                call s__Missiles__set_model(this,s__MissData_model[d])
            endif
                  
            if s__WRSMissData_c[wm] > 480 then
                  set s__WRSMissile_tar[this]=null
                  set s__WRSMissile_hit[this]=null
                  return true
            endif
            
            if not WithinDistance(s__Missiles_x[this] , s__Missiles_y[this] , x2 , y2 , 25) and UnitAlive(s__WRSMissile_tar[this]) then
                call s__Missiles_deflect(this,x2 , y2 , 0)
            elseif WithinDistance(s__Missiles_x[this] , s__Missiles_y[this] , x2 , y2 , 25) then
                set s__WRSMissile_hit[this]=s__WRSMissile_tar[this]
                call s__WRSMissile_GetMissileFunction(this)
                call GroupEnumUnitsInRange(TempEnumGroup, s__Missiles_x[this], s__Missiles_y[this], 200, null)
                call AreaDamage(s__Missiles_source[this] , s__Missiles_x[this] , s__Missiles_y[this] , 200 , s__Missiles_damage[this])
                set s__WRSMissile_tar[this]=null
                return true
            endif
            
            return false
                 
        endfunction 
        
        function s__WRSMissile_onHit takes integer this,unit hit returns boolean
                local real x= GetUnitX(hit)
                local real y= GetUnitY(hit)
                
                
                if hit != s__Missiles_source[this] and GetUnitTypeId(hit) != 'H03I' and GetUnitTypeId(hit) != 'h046' and GetUnitTypeId(hit) != 'h046' and UnitAlive(hit) and GetUnitAbilityLevel(hit, 'A078') <= 0 and WithinDistance(s__Missiles_x[this] , s__Missiles_y[this] , x , y , 80) then
                    set s__WRSMissile_hit[this]=hit
                    call UnitDamageTarget(s__Missiles_source[this], hit, s__Missiles_damage[this], true, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNKNOWN, WEAPON_TYPE_WHOKNOWS)
                    call s__WRSMissile_GetMissileFunction(this)
                else
                    call s__Missiles_flush(this,hit)
                endif
                
                return false
        endfunction
        
      //  method onCliff takes nothing returns boolean
      //          return true
      //  endmethod 
        
        function s__WRSMissile_ReAddAbility takes nothing returns nothing
                  local timer ti= GetExpiredTimer()
                  local integer t= GetUnitTypeId((LoadUnitHandle(Table__ht, (((PsyI))), (0)))) // INLINED!!
                  local integer d= (LoadInteger(Table__ht, (Miss), (t))) // INLINED!!
                  if (LoadInteger(Table__ht, (PsyI), (- 1))) != 0 then // INLINED!!
                    call UnitAddAbility((LoadUnitHandle(Table__ht, (((PsyI))), (0))), s__MissData_abil2[d]) // INLINED!!
                  endif
                  
                  call ReleaseTimer(ti)
                  
                  set ti=null
        endfunction 
        
        
        



//library WRSMissiles ends
//library SwitchInit:
    
//Implemented from module Alloc:
        function s__Count_allocate takes nothing returns integer
            return Alloc_Allocate(si__Count)
        endfunction
        function s__Count_deallocate takes integer this returns nothing
            call Alloc_Deallocate(si__Count , this)
        endfunction
            
            
        function s__Count_create takes nothing returns integer
            local integer this= (Alloc_Allocate(si__Count)) // INLINED!!
            set s__Count_c[this]=0
            return this
        endfunction
    
        function s__Count_destroy takes integer this returns nothing
            call Alloc_Deallocate(si__Count , (this)) // INLINED!!
        endfunction
            
    
    function SwitchInit__InitSpells takes nothing returns nothing
                local timer t= GetExpiredTimer()
                
                call RegisterSpellSystem('A0B7' , function PulsingEnergy__eff , null , null , 1 , 1) // INLINED!!
                call RegisterSpellSystem('A061' , function MagneticSaw__eff , null , null , 0 , 0) // INLINED!!
                call RegisterSpellSystem('A0A4' , function PhaseBurn__eff , null , null , 0 , 0) // INLINED!!
                call RegisterSpellSystem('A09C' , function FlashGrenade__eff , null , null , 0 , 0) // INLINED!!
                call RegisterSpellSystem('A07S' , function DetonateSilvs__eff , null , null , 1 , 1) // INLINED!!
                call RegisterSpellSystem('A0B8' , function MagneticPull__eff , function MagneticPull__Loop , null , 0.5 , 3) // INLINED!!
                call RegisterSpellSystem('A0B9' , function DeterministicEnervation__eff , null , null , 0 , 0) // INLINED!!
                
                call PauseTimer(t)
                call ReleaseTimer(t)
                set t=null
    endfunction 
    
    
    function SwitchInit__Names takes nothing returns nothing
        local timer t= GetExpiredTimer()
        
        set Os=s__Table_create()
        // "Lightweight" keys
        call SaveStr(Table__ht, (((Os))), ($08), ( "BACKSPACE")) // INLINED!!
        call SaveStr(Table__ht, (((Os))), ($09), ( "TAB")) // INLINED!!
        call SaveStr(Table__ht, (((Os))), ($0C), ( "CLEAR")) // INLINED!!
        call SaveStr(Table__ht, (((Os))), ($0D), ( "RETURN")) // INLINED!!
        call SaveStr(Table__ht, (((Os))), ($10), ( "SHIFT")) // INLINED!!
        call SaveStr(Table__ht, (((Os))), ($11), ( "CONTROL")) // INLINED!!
        call SaveStr(Table__ht, (((Os))), ($12), ( "ALT")) // INLINED!!
        call SaveStr(Table__ht, (((Os))), ($13), ( "PAUSE")) // INLINED!!
        call SaveStr(Table__ht, (((Os))), ($14), ( "CAPSLOCK")) // INLINED!!
        call SaveStr(Table__ht, (((Os))), ($1B), ( "ESCAPE")) // INLINED!!
        call SaveStr(Table__ht, (((Os))), ($20), ( "SPACE")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($21), ( "PAGEUP")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($22), ( "PAGEDOWN")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($23), ( "END")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($24), ( "HOME")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($25), ( "LEFT")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($26), ( "UP")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($27), ( "RIGHT")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($28), ( "DOWN")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($29), ( "SELECT")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($2A), ( "PRINT")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($2B), ( "EXECUTE")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($2C), ( "PRINTSCREEN")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($2D), ( "INSERT")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($2E), ( "DELETE")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($2F), ( "HELP")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($30), ( "0")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($31), ( "1")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($32), ( "2")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($33), ( "3")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($34), ( "4")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($35), ( "5")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($36), ( "6")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($37), ( "7")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($38), ( "8")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($39), ( "9")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($41), ( "A")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($42), ( "B")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($43), ( "C")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($44), ( "D")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($45), ( "E")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($46), ( "F")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($47), ( "G")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($48), ( "H")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($49), ( "I")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($4A), ( "J")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($4B), ( "K")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($4C), ( "L")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($4D), ( "M")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($4E), ( "N")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($4F), ( "O")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($50), ( "P")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($51), ( "Q")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($52), ( "R")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($53), ( "S")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($54), ( "T")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($55), ( "U")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($56), ( "V")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($57), ( "W")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($58), ( "X")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($59), ( "Y")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($5A), ( "Z")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($5B), ( "LMETA")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($5C), ( "RMETA")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($5D), ( "APPS")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($5F), ( "SLEEP")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($60), ( "NUMPAD0")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($61), ( "NUMPAD1")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($62), ( "NUMPAD2")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($63), ( "NUMPAD3")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($64), ( "NUMPAD4")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($65), ( "NUMPAD5")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($66), ( "NUMPAD6")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($67), ( "NUMPAD7")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($68), ( "NUMPAD8")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($69), ( "NUMPAD9")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($6A), ( "MULTIPLY")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($6B), ( "ADD")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($6C), ( "SEPARATOR ")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($6D), ( "SUBTRACT")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($6E), ( "DECIMAL")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($6F), ( "DIVIDE")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($70), ( "F1")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($71), ( "F2")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($72), ( "F3")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($73), ( "F4")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($74), ( "F5")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($75), ( "F6")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($76), ( "F7")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($77), ( "F8")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($78), ( "F9")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($79), ( "F10")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($7A), ( "F11")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($7B), ( "F12")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($7C), ( "F13")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($7D), ( "F14")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($7E), ( "F15")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($7F), ( "F16")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($80), ( "F17")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($81), ( "F18")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($82), ( "F19")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($83), ( "F20")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($84), ( "F21")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($85), ( "F22")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($86), ( "F23")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($87), ( "F24")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($90), ( "NUMLOCK")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($91), ( "SCROLLLOCK")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($A0), ( "LSHIFT")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($A1), ( "RSHIFT")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($A2), ( "LCONTROL")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($A3), ( "RCONTROL")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($A4), ( "LALT")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($A5), ( "RALT")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($BA), ( "OEM_1")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($BB), ( "OEM_PLUS")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($BC), ( "OEM_COMMA")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($BD), ( "OEM_MINUS")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($BE), ( "OEM_PERIOD")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($BF), ( "OEM_2")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($C0), ( "OEM_3")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($DB), ( "OEM_4")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($DC), ( "OEM_5")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($DD), ( "OEM_6")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($DE), ( "OEM_7")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($DF), ( "OEM_8")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($E1), ( "OEM_AX")) // INLINED!!
		call SaveStr(Table__ht, (((Os))), ($E2), ( "OEM_102")) // INLINED!!
        
        call TimerStart(t, 0.01, false, function SwitchInit__InitSpells)
        
    endfunction 

    function SwitchInit__onInit takes nothing returns nothing
        local trigger t= CreateTrigger()
        local integer p
        local oskeytype key= null
        local integer b= 8
        local timer ti= (NewTimerEx(0)) // INLINED!!
        set Keys=s__Table_create()
        
        //ConvertOsKeyType starts at index 8 and ends at index 254 ($08 to $FE)
        loop
            exitwhen b > 254
            // Get the current oskey and register player key events
            set key=ConvertOsKeyType(b)
            set p=s__User_first
            loop
                exitwhen p == s__User_NULL
                call BlzTriggerRegisterPlayerKeyEvent(t, s__User_Local, key, 0, true)
                if (LoadInteger(Table__ht, (Keys), (s__User_id[p]))) != $23 then // INLINED!!
                    call SaveInteger(Table__ht, (Keys), (s__User_id[p]), ( $23)) // INLINED!!
                endif
                set p=s__User_next[p]
            endloop
            
            set b=b + 1
        endloop
        
        call TriggerAddCondition(t, Condition(function SwitchAbility_Change))

        set key=null
        set t=null
        
        call TimerStart(ti, 1.00, false, function SwitchInit__Names)
        set ti=null
        
     endfunction

//library SwitchInit ends
//library WRSSuits:

    function WRSSuits_SuitOff takes nothing returns nothing
                local integer m= (LoadInteger(Table__ht, (Miss), ('p000'))) // INLINED!!
                local real hp= GetWidgetLife((LoadUnitHandle(Table__ht, (((PsyI))), (0)))) / BlzGetUnitMaxHP((LoadUnitHandle(Table__ht, (((PsyI))), (0)))) // INLINED!!
                local integer i= 2
                
                
                //list of default abilities you don't want removed
             //   call al.add('AInv',1)
            //    call al.add('A08A',1)
             //   call al.add('Apiv',1)
            //    call al.add('Amov',1)
            //    call al.add('Aatk',1)
            //    call al.add('A0B2',1)
           //     call al.add('A0B3',1)
           //     call al.add('AIpz',1)
           
                call BlzSetUnitMaxHP((LoadUnitHandle(Table__ht, (((PsyI))), (0))), 400) // INLINED!!
                call SetWidgetLife((LoadUnitHandle(Table__ht, (((PsyI))), (0))), hp * 400) // INLINED!!
                
                if not IsUnitHidden((LoadUnitHandle(Table__ht, (((PsyI))), (- 31)))) or not IsUnitHidden((LoadUnitHandle(Table__ht, (((PsyI))), (- 30)))) then // INLINED!!
                       call ShowUnit((LoadUnitHandle(Table__ht, (((PsyI))), (- 30))), false) // INLINED!!
                       call ShowUnit((LoadUnitHandle(Table__ht, (((PsyI))), (- 31))), false) // INLINED!!
                endif
            
                loop
                    exitwhen i >= (LoadInteger(Table__ht, (PsyI), (- 1))) + 1 // INLINED!!
                    call UnitRemoveAbility((LoadUnitHandle(Table__ht, (((PsyI))), (0))), (LoadInteger(Table__ht, (PsyI), (i)))) // INLINED!!
                    call SaveInteger(Table__ht, (PsyI), (i), ( 0)) // INLINED!!
                    call RemoveSavedInteger(Table__ht, (PsyI), (i)) // INLINED!!
                    set i=i + 1
                endloop
                
                call RemoveSavedInteger(Table__ht, (PsyI), (- 1)) // INLINED!!
                
                set s__MissData_func[m]=null
                set s__MissData_model[m]=null
                call SaveInteger(Table__ht, (PsyI), (- 25), ( 0)) // INLINED!!
                call RemoveSavedInteger(Table__ht, (PsyI), (- 25)) // INLINED!!
                
                set i=10
                loop
                    exitwhen (LoadEffectHandle(Table__ht, (((PsyI))), (i))) == null // INLINED!!
                    call DestroyEffect((LoadEffectHandle(Table__ht, (((PsyI))), (i)))) // INLINED!!
                    call SaveEffectHandle(Table__ht, (((PsyI))), (i), ( null)) // INLINED!!
                    call RemoveSavedHandle(Table__ht, (((PsyI))), (i)) // INLINED!!
                    set i=i + 1
                endloop
                
                call SetUnitVertexColor((LoadUnitHandle(Table__ht, (((PsyI))), (0))), 255, 255, 255, 255) // INLINED!!
                call SetUnitColor((LoadUnitHandle(Table__ht, (((PsyI))), (0))), PLAYER_COLOR_SNOW) // INLINED!!
                call UnitRemoveAbility((LoadUnitHandle(Table__ht, (((PsyI))), (0))), 'A0AF') // INLINED!!
                
                call BlzSetUnitWeaponRealField((LoadUnitHandle(Table__ht, (((PsyI))), (0))), UNIT_WEAPON_RF_ATTACK_BACKSWING_POINT, 0, 0.5) // INLINED!!
                call BlzSetUnitWeaponRealField((LoadUnitHandle(Table__ht, (((PsyI))), (0))), UNIT_WEAPON_RF_ATTACK_DAMAGE_POINT, 0, 0.3) // INLINED!!
                call BlzSetUnitWeaponRealField((LoadUnitHandle(Table__ht, (((PsyI))), (0))), UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED, 0, 900) // INLINED!!
                call BlzSetUnitBaseDamage((LoadUnitHandle(Table__ht, (((PsyI))), (0))), 19, 0) // INLINED!!
                call BlzSetUnitWeaponRealField((LoadUnitHandle(Table__ht, (((PsyI))), (0))), UNIT_WEAPON_RF_ATTACK_BASE_COOLDOWN, 0, 1) // INLINED!!
    endfunction
    
    
    function WRSSuits__AttachGun takes integer i returns nothing
                local integer t
                local real r
                local integer a
                //pulse
                if i == 19 then
                    set t='h04M'
                    set r=900
                    set a='A0B5'
                //machinegun
                elseif i == 16 then
                    
                    set t='h03U'
                    set r=800
                    set a='A0B6'
                
                endif
                
                 if IsUnitHidden((LoadUnitHandle(Table__ht, (((PsyI))), (- 30)))) then // INLINED!!
                    
                    call ShowUnit((LoadUnitHandle(Table__ht, (((PsyI))), (- 30))), true) // INLINED!!
                    call ShowUnit((LoadUnitHandle(Table__ht, (((PsyI))), (- 31))), true) // INLINED!!
                    
                endif
                
                if (LoadUnitHandle(Table__ht, (((PsyI))), (- 30))) == null then // INLINED!!
                    call SaveUnitHandle(Table__ht, (((PsyI))), (- 30), ( CreateUnit(Player(21), t, 0, 0, 0))) // INLINED!!
                    call SaveUnitHandle(Table__ht, (((PsyI))), (- 31), ( CreateUnit(Player(21), t, 0, 0, 0))) // INLINED!!
call AttachObject__AttachObject(((LoadUnitHandle(Table__ht, (((PsyI))), (- 30))) ) , null , ( (LoadUnitHandle(Table__ht, (((PsyI))), (0))) ) , (( 90 )*1.0) , (( 200 )*1.0) , (( 0 )*1.0) , (( 0 )*1.0) , ( false)) // INLINED!!
                    call AttachObject__SetFacingProperties((LoadInteger(AttachObject__GuestIdStorage, GetHandleId((((LoadUnitHandle(Table__ht, (((PsyI))), (- 30))) ))), 0)) , (( 0 )*1.0) , (( 10 )*1.0) , (( 15 )*1.0) , ( true ) , ( true)) // INLINED!!
call AttachObject__AttachObject(((LoadUnitHandle(Table__ht, (((PsyI))), (- 31))) ) , null , ( (LoadUnitHandle(Table__ht, (((PsyI))), (0))) ) , (( 270 )*1.0) , (( 300 )*1.0) , (( 0 )*1.0) , (( 0 )*1.0) , ( false)) // INLINED!!
                    call AttachObject__SetFacingProperties((LoadInteger(AttachObject__GuestIdStorage, GetHandleId((((LoadUnitHandle(Table__ht, (((PsyI))), (- 31))) ))), 0)) , (( 0 )*1.0) , (( 10 )*1.0) , (( 15 )*1.0) , ( true ) , ( true)) // INLINED!!
                    call SetUnitVertexColor((LoadUnitHandle(Table__ht, (((PsyI))), (- 30))), 0, 0, 0, 0) // INLINED!!
                    call SetUnitVertexColor((LoadUnitHandle(Table__ht, (((PsyI))), (- 31))), 0, 0, 0, 0) // INLINED!!
                    call UnitAddAbility((LoadUnitHandle(Table__ht, (((PsyI))), (- 30))), 'S001') // INLINED!!
                    call SetUnitAbilityLevel((LoadUnitHandle(Table__ht, (((PsyI))), (- 30))), 'S001', i) // INLINED!!
                    call UnitAddAbility((LoadUnitHandle(Table__ht, (((PsyI))), (- 31))), 'S001') // INLINED!!
                    call SetUnitAbilityLevel((LoadUnitHandle(Table__ht, (((PsyI))), (- 31))), 'S001', i) // INLINED!!
                endif
                
                if GetUnitTypeId((LoadUnitHandle(Table__ht, (((PsyI))), (- 30)))) != i then // INLINED!!
                     call UnitAddAbility((LoadUnitHandle(Table__ht, (((PsyI))), (- 30))), a) // INLINED!!
                     call UnitRemoveAbility((LoadUnitHandle(Table__ht, (((PsyI))), (- 30))), a) // INLINED!!
                     call UnitAddAbility((LoadUnitHandle(Table__ht, (((PsyI))), (- 31))), a) // INLINED!!
                     call UnitRemoveAbility((LoadUnitHandle(Table__ht, (((PsyI))), (- 31))), a) // INLINED!!
                     call SetUnitVertexColor((LoadUnitHandle(Table__ht, (((PsyI))), (- 30))), 0, 0, 0, 0) // INLINED!!
                     call SetUnitVertexColor((LoadUnitHandle(Table__ht, (((PsyI))), (- 31))), 0, 0, 0, 0) // INLINED!!
                     call BlzSetUnitWeaponRealField((LoadUnitHandle(Table__ht, (((PsyI))), (- 30))), UNIT_WEAPON_RF_ATTACK_RANGE, 1, r) // INLINED!!
                     call BlzSetUnitWeaponRealField((LoadUnitHandle(Table__ht, (((PsyI))), (- 31))), UNIT_WEAPON_RF_ATTACK_RANGE, 1, r) // INLINED!!
                endif
                
                
    endfunction 
        
    function WRSSuits_SuitOn takes nothing returns nothing
                //saves the suit variable and the loop variable
                local integer i= udg_TempInt
                
                //the damage base variable
                local integer d= 0
                //the attack cooldown variable
                local real acd= 0
                
                //the Missile Data
                local integer m= (LoadInteger(Table__ht, (Miss), ('p000'))) // INLINED!!
                
                //the function to be utilized for elemental
                local conditionfunc f= null
                
                //the elemental ability
                local integer aE= 0
                
                //the elemental ability for auto attacking
                local integer aa= 0
                
                //the unit color
                local integer uc= 0
                
                //RBG values
                local integer r= 255
                local integer b= 255
                local integer g= 255
                
                //the hp percentage
                local real hp= GetWidgetLife((LoadUnitHandle(Table__ht, (((PsyI))), (0)))) / BlzGetUnitMaxHP((LoadUnitHandle(Table__ht, (((PsyI))), (0)))) // INLINED!!
                
                //the model projectile
                local string mo= null
                
                //the projectile speed
                local real s= 0
                
                //the visibility factor
                local integer vis= 0
                
                if GetUnitAbilityLevel((LoadUnitHandle(Table__ht, (((PsyI))), (0))), 'A0AF') > 0 then // INLINED!!
                    
                    call WRSSuits_SuitOff()
                    
                endif
                
                call BlzSetUnitMaxHP((LoadUnitHandle(Table__ht, (((PsyI))), (0))), 600) // INLINED!!
                call SetWidgetLife((LoadUnitHandle(Table__ht, (((PsyI))), (0))), hp * 600) // INLINED!!
                
                
                call SaveInteger(Table__ht, (PsyI), (- 1), ( 2)) //the index for the last ability  // INLINED!!
                
                //telsa
                if i == 2 then
                    set d=39
                    set acd=1.75
                    set f=Condition(function s__ElectroEffect_cast)
                    set aE='XA03'
                    set uc=13
                    set vis=4
                    
                    //abiltiies
                    call SaveInteger(Table__ht, (PsyI), (2), ( 'A05Q')) //electric attachement // INLINED!!
                    
                    //effects
                    call SaveEffectHandle(Table__ht, (((PsyI))), (10), ( AddSpecialEffectTarget("Psycho\\Effects\\Sweep_Lightning_Large.mdx", (LoadUnitHandle(Table__ht, (((PsyI))), (0))), "hand,right"))) // INLINED!!
                    call SaveEffectHandle(Table__ht, (((PsyI))), (11), ( AddSpecialEffectTarget("Psycho\\Effects\\Sweep_Lightning_Medium.mdx", (LoadUnitHandle(Table__ht, (((PsyI))), (0))), "weapon"))) // INLINED!!
                    set mo="Psycho\\Effects\\Lightning Missile.mdx"
                    set s=2000
                    
                //Rocket
                elseif i == 3 then
                    set d=50
                    set acd=1.75
                    set aE='XA04'
                    set uc=11
                    set vis=0
                    
                    //effects
                    set s=1400
                //Cryo
                elseif i == 4 then
                    set d=21
                    set acd=0.800
                    set f=Condition(function s__IceEffect_cast)
                    set aE='XA00'
                    set aa='A00G'
                    set uc=14
                    set vis=1
                    
                    //abilities
                    call SaveInteger(Table__ht, (PsyI), (2), ( 'A00K')) //freezing breath attachement // INLINED!!
                    call SaveInteger(Table__ht, (PsyI), (3), ( 'A00G')) //freezing breath // INLINED!!
                    call SaveInteger(Table__ht, (PsyI), (- 1), ( 3)) // INLINED!!
                    
                    //effects
                    set mo="Psycho\\Effects\\Valiant Charge Royal.mdx"
                    set s=2800
                //Plasma
                elseif i == 5 then
                    set d=36
                    set acd=1.000
                    set aE='XA05'
                    set uc=2
                    set vis=2
                    
                    set r=120
                    set g=180
                    
                    //abiltiies
                    call SaveInteger(Table__ht, (PsyI), (2), ( 'A05P')) //Plasma attachement // INLINED!!
                    
                    //effects
                    set mo="Abilities\\Weapons\\SpiritOfVengeanceMissile\\SpiritOfVengeanceMissile.mdl"
                    set s=2000
                //Pyro
                elseif i == 6 then
                    set d=5
                    set acd=0.230
                    set f=Condition(function s__FireEffect_cast)
                    set aE='XA02'
                    set uc=0
                    set vis=8
                    
                    set r=255
                    set b=180
                    set g=180
                    
                    //effects
                    call SaveEffectHandle(Table__ht, (((PsyI))), (10), ( AddSpecialEffectTarget("Psycho\\Effects\\Sweep_Fire_Large.mdx", (LoadUnitHandle(Table__ht, (((PsyI))), (0))), "hand, right"))) // INLINED!!
                    call SaveEffectHandle(Table__ht, (((PsyI))), (11), ( AddSpecialEffectTarget("Psycho\\Effects\\Sweep_Fire_Medium.mdx", (LoadUnitHandle(Table__ht, (((PsyI))), (0))), "weapon"))) // INLINED!!
                    set mo="Psycho\\Effects\\Valiant Charge.mdx"
                    set s=700
                //Photon
                elseif i == 7 then
                    set d=23
                    set acd=1.000
                    set aE='XA06'
                    set uc=21
                    set vis=2
                    
                    //abilities
                    call SaveInteger(Table__ht, (PsyI), (2), ( 'A05R')) //photon attachement // INLINED!!
                    
                    //effects
                    set s=2000
                    set mo="Psycho\\Effects\\Penance\\Penance - Classic.mdx"
                //Service
                elseif i == 8 then
                    set d=7
                    set acd=0.250
                    set uc=16
                    set vis=2
                    
                    //specific attachement
                    call SaveEffectHandle(Table__ht, (((PsyI))), (10), ( AddSpecialEffectTarget("Abilities\\Weapons\\SentinelMissile\\SentinelMissile.mdl", (LoadUnitHandle(Table__ht, (((PsyI))), (0))), "weapon"))) // INLINED!!
                    
                    //effects
                    set mo="Abilities\\Weapons\\GlaiveMissile\\GlaiveMissile.mdl"
                    set s=2000
                //Dark Matter
                elseif i == 9 then
                    set d=24
                    set acd=1.000
                    set uc=3
                    set aa='A00S'
                    set vis=3
                    
                    set r=100
                    set b=100
                    set g=100
                    
                    //abilities
                    call SaveInteger(Table__ht, (PsyI), (2), ( 'A05O')) //Dark matter attachement // INLINED!!
                    call SaveInteger(Table__ht, (PsyI), (3), ( 'A00S')) //energy restablization // INLINED!!
                    call SaveInteger(Table__ht, (PsyI), (- 1), ( 3)) // INLINED!!
                    
                    //effects
                    call SaveEffectHandle(Table__ht, (((PsyI))), (10), ( AddSpecialEffectTarget("Psycho\\Effects\\Sweep_Astral_Large.mdx", (LoadUnitHandle(Table__ht, (((PsyI))), (0))), "hand,right"))) // INLINED!!
                    set mo="Psycho\\Effects\\Valiant Charge Void.mdx"
                    set s=1600
                //Illiusion
                elseif i == 10 then
                    set d=38
                    set acd=1.750
                    set uc=5
                    
                    //color
                    set b=120
                    
                    //effects
                    set mo="Abilities\\Spells\\Human\\Invisibility\\InvisibilityTarget.mdl"
                    set s=1600
                //Radiation
                elseif i == 11 then
                    set d=25
                    set acd=1.000
                    set aE='XA08'
                    set uc=10
                    set vis=4
                    
                    set r=200
                    set b=200
                    set g=200
                    
                    call SaveInteger(Table__ht, (PsyI), (2), ( 'A04R')) //sfx radiation // INLINED!!
                    call SaveInteger(Table__ht, (PsyI), (3), ( 'A00U')) //rad effect // INLINED!!
                    call SaveInteger(Table__ht, (PsyI), (- 1), ( 3)) //the index for the last ability  // INLINED!!
                    
                    //effects
                    set mo="Abilities\\Spells\\Orc\\Devour\\DevourEffectArt.mdl"
                    set s=1400
                //Operative
                elseif i == 12 then
                    set d=64
                    set acd=1.750
                    set aE='XA04'
                    set uc=11
                    set vis=2
                    
                    set r=120
                    set b=120
                    set g=120
                    
                    //effects
                    set s=3200
                //Scientist
                elseif i == 13 then
                    set d=50
                    set acd=1.750
                    set aE='XA09'
                    set uc=22
                    
                    //effects
                    set mo="Abilities\\Spells\\Other\\AcidBomb\\BottleMissile.mdl"
                    set s=750
                //Guard
                elseif i == 14 then
                    set d=20
                    set acd=1.000
                    set uc=9
                    
                    set r=100
                    
                    //effects
                    set mo="Abilities\\Spells\\Undead\\Possession\\PossessionMissile."
                    set s=2400
                //Acidic
                elseif i == 15 then
                    set d=27
                    set acd=1.750
                    set f=Condition(function s__AcidEffect_cast)
                    set aE='XA01'
                    set aa='A02L'
                    set uc=6
                    set vis=1
                    
                    call SaveInteger(Table__ht, (PsyI), (2), ( 'A02L')) // INLINED!!

                    //effects
                    call SaveEffectHandle(Table__ht, (((PsyI))), (10), ( AddSpecialEffectTarget("Psycho\\Effects\\Sweep_Acid_Large.mdx", (LoadUnitHandle(Table__ht, (((PsyI))), (0))), "hand, right"))) // INLINED!!
                    call SaveEffectHandle(Table__ht, (((PsyI))), (11), ( AddSpecialEffectTarget("Psycho\\Effects\\Sweep_Acid_Medium.mdx", (LoadUnitHandle(Table__ht, (((PsyI))), (0))), "weapon"))) // INLINED!!
                    set mo="Psycho\\Effects\\Valiant Charge Fel.mdx"
                    set s=2800
                //Machine
                elseif i == 16 then
                    set d=3
                    set acd=0.100
                    set uc=20
                    
                    //effects
                    set s=1400
                //Force
                elseif i == 17 then
                    set d=29
                    set acd=1.500
                    set uc=8
                    
                    //abilities
                    call SaveInteger(Table__ht, (PsyI), (2), ( 'A05S')) //force attachement // INLINED!!
                    
                    //effects
                    set mo="Psycho\\Effects\\Culling Cleave Silver.mdx"
                    set s=2000
                //Magnetic
                elseif i == 18 then
                    set d=22
                    set acd=0.900
                    set uc=12
                    
                    //abilities
                    call SaveInteger(Table__ht, (PsyI), (2), ( 'A07V')) //magnetic attachement // INLINED!!
                    
                    //effects
                    set s=3400
                    set mo="Psycho\\Effects\\Magnetic Missile.mdx"
                //Pulse
                elseif i == 19 then
                    set d=7
                    set acd=0.200
                    set uc=19
                    
                    //abilities
                    call SaveInteger(Table__ht, (PsyI), (2), ( 'A07W')) //pulse attachment // INLINED!!
                    
                    //effects
                    set s=3400
                endif
                
                //save the suit variable
                call SaveInteger(Table__ht, (PsyI), (- 25), ( i)) // INLINED!!
                
                //the ability necessary to drop suit
                call UnitAddAbility((LoadUnitHandle(Table__ht, (((PsyI))), (0))), 'A0AF') // INLINED!!
                //the missile data created only if its already not created
                if s__MissData_size[m] != 1.0 then
                    set m=s__MissData_create(0 , f , 1.0 , 15 , aE)
                    call SaveInteger(Table__ht, (Miss), ('p000'), ( m)) // INLINED!!
                else
                    set s__MissData_func[m]=f
                    set s__MissData_abil[m]=aE
                endif
                
                set s__MissData_model[m]=mo
                set s__MissData_abil2[m]=aa
                set s__MissData_vis[m]=vis
                
                call DisplayTextToPlayer(Player(0), 0, 0, "MODEL: " + mo)
                
                //store projectile speed data
                call BlzSetUnitWeaponRealField((LoadUnitHandle(Table__ht, (((PsyI))), (0))), UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED, 0, s) // INLINED!!
                
                if i == 16 or i == 19 then
                    call WRSSuits__AttachGun(i)
                else
                    call ShowUnit((LoadUnitHandle(Table__ht, (((PsyI))), (- 30))), false) // INLINED!!
                    call ShowUnit((LoadUnitHandle(Table__ht, (((PsyI))), (- 31))), false) // INLINED!!
                endif
                
                set i=2
                loop
                    exitwhen i >= (LoadInteger(Table__ht, (PsyI), (- 1))) + 1 // INLINED!!
                    call UnitAddAbility((LoadUnitHandle(Table__ht, (((PsyI))), (0))), (LoadInteger(Table__ht, (PsyI), (i)))) // INLINED!!
                    set i=i + 1
                endloop
            
                    
                //the suit tag
                call UnitAddAbility((LoadUnitHandle(Table__ht, (((PsyI))), (0))), 'A070') // INLINED!!
                call SetUnitVertexColor((LoadUnitHandle(Table__ht, (((PsyI))), (0))), r, g, b, 255) // INLINED!!
                call SetUnitColor((LoadUnitHandle(Table__ht, (((PsyI))), (0))), ConvertPlayerColor(uc)) // INLINED!!
                call BlzSetUnitWeaponRealField((LoadUnitHandle(Table__ht, (((PsyI))), (0))), UNIT_WEAPON_RF_ATTACK_BASE_COOLDOWN, 0, acd) // INLINED!!
                call BlzSetUnitBaseDamage((LoadUnitHandle(Table__ht, (((PsyI))), (0))), d, 0) // INLINED!!
                
                //the animation points
                call BlzSetUnitWeaponRealField((LoadUnitHandle(Table__ht, (((PsyI))), (0))), UNIT_WEAPON_RF_ATTACK_BACKSWING_POINT, 0, 0) // INLINED!!
                call BlzSetUnitWeaponRealField((LoadUnitHandle(Table__ht, (((PsyI))), (0))), UNIT_WEAPON_RF_ATTACK_DAMAGE_POINT, 0, 0) // INLINED!!
                
                
                set f=null
                set mo=null
    endfunction 
    
    //function specifically utilized because removing a spell during its trigger effect might end the trigger prematurely
    function WRSSuits_csoFF takes nothing returns nothing
                local timer t= GetExpiredTimer()
                call WRSSuits_SuitOff()
                call ReleaseTimer(t)
                set t=null
    endfunction 
    
    function WRSSuits_MissileStart takes nothing returns nothing
                local real d= EDamage
                local unit tar= tar2
                local unit sor= sor2
                local real x= GetUnitX(sor)
                local real y= GetUnitY(sor)
            
                local real x2= GetUnitX(tar)
                local real y2= GetUnitY(tar)
            
                local real x3= IncAngleDistance(x , y , x2 , y2 , 10000 , true)
                local real y3= IncAngleDistance(x , y , x2 , y2 , 10000 , false)
                
                local integer t= GetUnitTypeId(sor)
                local integer mi= (LoadInteger(Table__ht, (Miss), (t))) // INLINED!!
                local integer wm= s__WRSMissData_create(t)
                local integer m= s__WRSMissile__allocate(x , y , 100 , x3 , y3 , 100)
                            
                set s__Missiles_source[m]=sor
                set s__WRSMissile_tar[m]=tar
                set s__Missiles_damage[m]=d
                call s__Missiles__set_speed(m,BlzGetUnitWeaponRealField(sor, UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED, 0))
                call s__Missiles__set_scale(m,s__MissData_size[mi])
                call s__Missiles__set_duration(m,s__MissData_dur[mi])
                call s__Missiles__set_model(m,".mdx")
                call s__MissileEffect__set_alpha(s__Missiles_effect[(m)],(0)) // INLINED!!
                set s__WRSMissData_c[wm]=0
                set s__WRSMissData_t[wm]=t
                set s__WRSMissile_func[m]=(LoadInteger(Table__ht, (PsyI), (- 25))) // INLINED!!
                if (LoadInteger(Table__ht, (PsyI), (- 25))) == 13 then // INLINED!!
                    call s__Missiles__set_arc(m,0.30)
                endif
               // set m.arc       = BlzGetUnitWeaponRealField(udg_DamageEventSource,UNIT_WEAPON_RF_ATTACK_PROJECTILE_ARC,0)
                set s__Missiles_data[m]=wm
                set s__Missiles_collideZ[m]=true
                set s__Missiles_collision[m]=200
                call s__Missiles_launch(m)
                
                
                set tar=null
                set sor=null
    endfunction 
    

//library WRSSuits ends
//library PsychoInt:
    
    
     function PsychoInt__PC2A takes integer pi returns integer
                local integer s
                local integer b= 0
                if pi == 0 then
                    set s=s__String_create("red")
                    set b=Char2Ascii(s__String__getindex(s,0)) + Char2Ascii(s__String__getindex(s,1)) + Char2Ascii(s__String__getindex(s,2))
                elseif pi == 1 then
                    set b=S2A("blue")
                elseif pi == 2 then
                    set b=S2A("teal")
                elseif pi == 3 then
                    set s=s__String_create("purple")
                    set b=S2A("purp") + Char2Ascii(s__String__getindex(s,4)) + Char2Ascii(s__String__getindex(s,5))
                elseif pi == 4 then
                    set s=s__String_create("yellow")
                    set b=S2A("yell") + Char2Ascii(s__String__getindex(s,4)) + Char2Ascii(s__String__getindex(s,5))
                elseif pi == 5 then
                    set s=s__String_create("orange")
                    set b=S2A("oran") + Char2Ascii(s__String__getindex(s,4)) + Char2Ascii(s__String__getindex(s,5))
                elseif pi == 6 then
                    set s=s__String_create("green")
                    set b=S2A("gree") + Char2Ascii(s__String__getindex(s,4))
                elseif pi == 7 then
                    set b=S2A("pink")
                elseif pi == 8 then
                    set b=S2A("gray")
                elseif pi == 9 then
                    set s=s__String_create("lightblue")
                    set b=S2A("ligh") + S2A("blue") + Char2Ascii(s__String__getindex(s,4))
                elseif pi == 10 then
                    set s=s__String_create("darkgreen")
                    set b=S2A("dark") + S2A("gree") + Char2Ascii(s__String__getindex(s,8))
                elseif pi == 11 then
                    set s=s__String_create("brown")
                    set b=S2A("brow") + Char2Ascii(s__String__getindex(s,4))
                endif
                
                if (s__String_length[(s)]) > 0 then // INLINED!!
                    call s__String_destroy(s)
                endif
                
                return b
                    
        endfunction
        
    function PsychoInt__IntWRSString takes nothing returns nothing
                local integer d= s__MissData_create(0 , null , 1.0 , 15 , 0)
                call SaveInteger(Table__ht, (PsyT), (- 1), ( WRSTasks_AcquireSubject())) // INLINED!!
                
                //the color of text
                call SaveStr(Table__ht, (((PsyT))), (0), ( "|cffa5aaa8")) // INLINED!!
           
                
                //Preloading Missile Models
                call SaveUnitHandle(Table__ht, (((PsyI))), (0), ( CreateUnit(Player(PLAYER_NEUTRAL_AGGRESSIVE), 'p000', 0, 0, 0))) // INLINED!!
                call SaveInteger(Table__ht, (Miss), ('p000'), ( d)) // INLINED!!
                set s__MissData_model[d]="Psycho\\Effects\\Valiant Charge.mdx"
                call SaveInteger(Table__ht, (PsyI), (- 25), ( 6)) // INLINED!!
                set bj_lastCreatedUnit=CreateUnit(Player(0), 'h00H', 0 + Cos(25) * 200, 0 + Sin(25) * 200, 0)
                call IssueTargetOrderById((LoadUnitHandle(Table__ht, (((PsyI))), (0))), 851983, bj_lastCreatedUnit) // INLINED!!
call s__unitTimed_create(((LoadUnitHandle(Table__ht, (((PsyI))), (0))) ) , (( 2.0)*1.0)) // INLINED!!
call s__unitTimed_create((bj_lastCreatedUnit ) , (( 2.0)*1.0)) // INLINED!!
                
                
                set s__MissData_model[d]=null
                call Alloc_Deallocate(si__MissData , ((d))) // INLINED!!
                call RemoveSavedHandle(Table__ht, (((Miss))), ('p000')) // INLINED!!
                call SaveUnitHandle(Table__ht, (((PsyI))), (0), ( null)) // INLINED!!
                call RemoveSavedHandle(Table__ht, (((PsyI))), (0)) // INLINED!!
                
                //the counter for introductary messages
                call SaveInteger(Table__ht, (PsyI), (0), ( 0)) // INLINED!!
                
                //save the function for suits
                set suitON=function WRSSuits_SuitOn
                
                set suitOFF=function WRSSuits_csoFF
                
                set suitMISS=function WRSSuits_MissileStart
                
                //Introduction
                call SaveStr(Table__ht, (((PsyI))), (1), ( "Subject " + I2S(PsychoInt__PC2A(PsychoUser)) + " is not yet conscious of the empirical protocol being conducted.")) // INLINED!!
                call SaveStr(Table__ht, (((PsyI))), (2), ( "Shall we proceed? There is no guarantee that the subject will be susceptible to the probing.")) // INLINED!!
                call SaveStr(Table__ht, (((PsyI))), (3), ( "Well then, probing proceeding. Do the external auditory devices partake in this transmission?")) // INLINED!!
                call SaveStr(Table__ht, (((PsyI))), (4), ( "Are your auricles receiving this transmission?|r")) // INLINED!!
                
                //Question and Responses
                call SaveStr(Table__ht, (((PsyI))), (5), ( "Repeating transmission. Will you take the red pill or the blue pill? Transmit to me your response")) // INLINED!!
                //yes
                call SaveStr(Table__ht, (((PsyI))), (6), ( "Protocol accepted. Relaying message.")) // INLINED!!
                call SaveStr(Table__ht, (((PsyI))), (7), ( "There is no need to suffer the contemporary state of conditions.")) // INLINED!!
                call SaveStr(Table__ht, (((PsyI))), (8), ( "Will you accept the following stipulations if I can assure you that")) // INLINED!!
                call SaveStr(Table__ht, (((PsyI))), (9), ( "I can conveniently obviate your EPI intoxication delirium?")) // INLINED!!
                call SaveStr(Table__ht, (((PsyI))), (10), ( "Effectuate the following task.")) // INLINED!!
                //no
                call SaveStr(Table__ht, (((PsyI))), (11), ( "Subject appears to be despondent. Proceeding to the next disposing victim.")) // INLINED!!
                
                //Task and their responses
                //1
                call SaveStr(Table__ht, (((PsyT))), (1), ( "Acquire the memory chip of the 198X2 automaton.")) // INLINED!!
                call SaveStr(Table__ht, (((PsyP))), (1), ( "LOL HAHAHAH. I can’t believe that actually occurred. Oh, pardon my sudden relapse. Shall we proceed to the next task?")) // INLINED!!
                call SaveStr(Table__ht, (((PsyN))), (1), ( "Task not yet accomplished. What state of affairs obstruct its completion?")) // INLINED!!
                //2
                call SaveStr(Table__ht, (((PsyT))), (2), ( "Terminate the sentience of subject " + I2S(PsychoInt__PC2A((LoadInteger(Table__ht, (PsyT), (- 1))))) + " and bring the newly acquiescent figure to the EPD's terminus.")) // INLINED!!
                call SaveStr(Table__ht, (((PsyP))), (2), ( "Simply wonderful! IS THERE NOTHING YOU CARBON SPECIES ARE NOT WILLING TO DO FOR THE SAKE OF TEMPORARY REASSURANCE?")) // INLINED!!
                call SaveStr(Table__ht, (((PsyN))), (2), ( "Task is incomplete. I am lending my auricles to your trangression. What is the basis for this remissness?")) // INLINED!!
                //3
                call SaveStr(Table__ht, (((PsyT))), (3), ( "Disable the mechanism that provides the matrix its function")) // INLINED!!
                call SaveStr(Table__ht, (((PsyP))), (3), ( "Excellent! The terminus of this entire sector is all but ensured. Let us recommence our venture toward this endeavor with exhilaration.")) // INLINED!!
                call SaveStr(Table__ht, (((PsyN))), (3), ( "I overestimated the proportions of your phallus. It is evident that your cerebrum is of the same capacity.")) // INLINED!!
                //4
                call SaveStr(Table__ht, (((PsyT))), (4), ( "Relocate the transportation device to the Niffums")) // INLINED!!
                call SaveStr(Table__ht, (((PsyP))), (4), ( "The profundity of the task cannot be further signified by the preposterous execution")) // INLINED!!
                call SaveStr(Table__ht, (((PsyN))), (4), ( "It appears the cruciality of the attraction strays further from the light every day.")) // INLINED!!
                //5
                call SaveStr(Table__ht, (((PsyT))), (5), ( "Procure an incendiary device")) // INLINED!!
                call SaveStr(Table__ht, (((PsyP))), (5), ( "A simple task that even your microcephalic cerebrum could accomplish.")) // INLINED!!
                call SaveStr(Table__ht, (((PsyN))), (5), ( "I am sorry that you are not able to even consult Moogle on the production of incendiaries.")) // INLINED!!
                //6
                call SaveStr(Table__ht, (((PsyT))), (6), ( "Simultaneously position the incendiary, transportation devices and memory chip at the EPD's terminus")) // INLINED!!
                call SaveStr(Table__ht, (((PsyP))), (6), ( "MUAHHAHAHAHAH You egregious simpleton. You may strategically place your labium inferior oris upon my talus if you wish to retain your sentience.")) // INLINED!!
                call SaveStr(Table__ht, (((PsyN))), (6), ( "Such a monumental task requires more than just superficial dispositions.")) // INLINED!!
                
    endfunction 
    
    
    
    function s__PsychoOnInit_InitSet takes integer pi returns nothing
              local integer ti= PsychoUser
              call SaveStr(Table__ht, (((PsyI))), (1), ( "Subject " + I2S(PsychoInt__PC2A(pi)) + " is not yet conscious of the empirical protocol being conducted.")) // INLINED!!
              set s__PsychoTime_pi[PsychoUser]=pi
              set s__PsychoTime_r[PsychoUser]=0
              set s__PsychoTime_t[(ti)]=(0) // INLINED!!
              set s__PsychoTime_epi[(ti)]=(- 1) // INLINED!!
              call SaveInteger(Table__ht, (PsyI), (0), ( 0)) // INLINED!!
    endfunction
    
    function s__PsychoOnInit_StartPsychoTimer takes nothing returns nothing
                local timer t= GetExpiredTimer()
                local integer ti= sc__PsychoTime_start(PsychoUser , Condition(function WRSTasks_TaskCheck))
                
                set PsychoUser=ti
                set s__PsychoTime_epi[(ti)]=((LoadInteger(Table__ht, (PsyT), (- 1)))) // INLINED!!
                call RemoveSavedInteger(Table__ht, (PsyT), (- 1)) // INLINED!!
                call ReleaseTimer(t)
                set t=null
    endfunction

    function s__PsychoOnInit_Init takes nothing returns nothing
                local timer t= GetExpiredTimer()
                local integer g= s__IPool_create()
                local integer p= s__User_first
                local integer ti= PsychoUser
                loop
                    exitwhen p == s__User_NULL
                    if s__User_Local != udg_Parasite and s__User_Local != udg_Mutant and s__User_Local != udg_RogueAndroid and s__User_Local != udg_HiddenAndroid then
                        if ( PsychoUser != - 1 and (s__PsychoTime_pi[(ti)]) != s__User_id[p] ) or PsychoUser == - 1 then // INLINED!!
                                call s__IPool_add(g,s__User_id[p] , 1)
                        endif
                    endif
                    set p=s__User_next[p]
                endloop
                
                //designates a random player as the psycho
                if (LoadInteger(Table__ht, (PsyI), (0))) == 0 then // INLINED!!
                    set PsychoUser=s__IPool_getItem(g)
                    call PsychoInt__IntWRSString()
                    call TimerStart(t, 5, false, function s__PsychoOnInit_StartPsychoTimer)
                    set s__TimerUtilsEx__Data_data[(GetHandleId((t )) ) - 0x100000]=( ( 1)) // INLINED!!
                    
                else
                    //if person says no, reset everything back to phrase 1
                    call s__PsychoOnInit_InitSet(s__IPool_getItem(g))
                endif
                
                if (s__TimerUtilsEx__Data_data[(GetHandleId((t))) - 0x100000]) == 0 then // INLINED!!
                    call ReleaseTimer(t)
                endif
                
                set t=null
                call s__IPool_destroy(g)
    endfunction
    
    

//library PsychoInt ends
//library PsychoTimer:

    
        //the player index
        //the player index to be killed
        //random indexer
        //the current task indexer
        //The boolexpr function for specificity
        //the current indexer; 1 for task, 2 for task not completed, 3 for task completed.
        
//Implemented from module CTL:
        function s__PsychoTime_create takes nothing returns integer
            return CTL__CT(s__PsychoTime_rctl32)
        endfunction
        function s__PsychoTime_destroy takes integer this returns nothing
            call CTL__DT(this)
        endfunction
        function s__PsychoTime_ectl32 takes nothing returns boolean
            local integer this=CTL__rf[s__PsychoTime_rctl32]
        local integer s
        local boolean IsTalk= false
        local integer pid= 0
        local integer p
        
//Implemented from module CTLExpire:
            loop
                exitwhen 0 == this
        
        set s__PsychoTime_c[this]=s__PsychoTime_c[this] + 1
        //the receivers partial sum
        set pid=R2I(1 * Pow(2, s__PsychoTime_pi[this]))
        
        //the psycho player + space + color code + current phrase
        set s=s__String_create(GroupChats_getSender(s__PsychoTime_pi[this]) + " " + (LoadStr(Table__ht, (((PsyT))), (0))) + (LoadStr(Table__ht, (((PsyT))), (s__PsychoTime_t[this])))) // INLINED!!
        
        if s__PsychoTime_t[this] == 0 then
            
            if s__PsychoTime_c[this] > s__PsychoTime_r[this] then
            
                if (LoadInteger(Table__ht, (PsyI), (0))) > 0 then // INLINED!!
                    call s__String_destroy(s)
                    set s=s__String_create(GroupChats_getSender(s__PsychoTime_pi[this]) + " " + (LoadStr(Table__ht, (((PsyT))), (0))) + (LoadStr(Table__ht, (((PsyI))), ((LoadInteger(Table__ht, (PsyI), (0))))))) // INLINED!!
                    call chatTest_generateMessage(chatTest_gameTime , "[?????]" , chatTest_playerIcon[s__PsychoTime_pi[this]] , (s__String_value[(s)]) , pid) // INLINED!!
                    set IsTalk=true
                endif
                
                set s__PsychoTime_r[this]=s__PsychoTime_c[this] + GetRandomInt(32, 70)
                call ForceEnumPlayers(EForce, s__PsychoTime_m[this])
            
            endif
        else
            if s__PsychoTime_pIndex[this] == 1 then
            
                call chatTest_generateMessage(chatTest_gameTime , "[?????]" , chatTest_playerIcon[s__PsychoTime_pi[this]] , (s__String_value[(s)]) , pid) // INLINED!!
                
                set s__PsychoTime_r[this]=s__PsychoTime_c[this] + GetRandomInt(64, 128)
                
                set s__PsychoTime_pIndex[this]=2
                
                set IsTalk=true
                
            elseif s__PsychoTime_pIndex[this] == 2 then
            
                if s__PsychoTime_c[this] > s__PsychoTime_r[this] then
                
                    call s__String_destroy(s)
                    set s=s__String_create(GroupChats_getSender(s__PsychoTime_pi[this]) + " " + (LoadStr(Table__ht, (((PsyT))), (0))) + (LoadStr(Table__ht, (((PsyN))), (s__PsychoTime_t[this])))) // INLINED!!
                    
                    call chatTest_generateMessage(chatTest_gameTime , "[?????]" , chatTest_playerIcon[s__PsychoTime_pi[this]] , (s__String_value[(s)]) , pid) // INLINED!!
                    
                    set s__PsychoTime_r[this]=s__PsychoTime_c[this] + GetRandomInt(64, 128)
                    
                    set IsTalk=true
                    
                endif
                
            elseif s__PsychoTime_pIndex[this] == 3 then
                call s__String_destroy(s)
                set s=s__String_create(GroupChats_getSender(s__PsychoTime_pi[this]) + " " + (LoadStr(Table__ht, (((PsyT))), (0))) + (LoadStr(Table__ht, (((PsyP))), (s__PsychoTime_t[this])))) // INLINED!!
                
                call chatTest_generateMessage(chatTest_gameTime , "[?????]" , chatTest_playerIcon[s__PsychoTime_pi[this]] , (s__String_value[(s)]) , pid) // INLINED!!
                set s__PsychoTime_t[this]=s__PsychoTime_t[this] + 1
                set s__PsychoTime_pIndex[this]=1
                
                set IsTalk=true
                
            endif
        endif
                
        if IsTalk then
            set p=((s__PsychoTime_pi[this])) // INLINED!!
            if not GetSoundIsPlaying(gg_snd_FrostmourneChant1) then
                if s__User_id[(s__User_LocalId)] == s__User_id[p] then // INLINED!!
                    call StartSound(gg_snd_FrostmourneChant1)
                endif
            endif
        endif
        
        ///Checks that all tasks have been completed
        if s__PsychoTime_t[this] > 6 or not UnitAlive(udg_Playerhero[s__PsychoTime_pi[this] + 1]) then
            call ForceEnumPlayers(EForce, s__PsychoTime_m[this])
            call s__Table_destroy(PsyT)
            call s__Table_destroy(PsyN)
            call s__Table_destroy(PsyP)
            call DestroyCondition(s__PsychoTime_m[this])
            set s__PsychoTime_m[this]=null
            call CTL__DT((this)) // INLINED!!
        endif
        
        //Checks that a task has been completed every 0.125000 seconds
        if s__PsychoTime_t[this] > 0 and ModuloInteger(s__PsychoTime_c[this], 4) == 0 and (LoadInteger(Table__ht, (PsyI), (0))) == - 1 then // INLINED!!
            call ForceEnumPlayers(EForce, s__PsychoTime_m[this])
        endif
        
        
//Implemented from module CTLNull:
                set this=CTL__n[this]
            endloop
        
//Implemented from module CTLEnd:
            return false
        endfunction
        function s__PsychoTime_CTLEnd___onInit takes nothing returns nothing
            set s__PsychoTime_rctl32=CTL__A(function s__PsychoTime_ectl32)
        endfunction
        
        function s__PsychoTime__get_index takes integer this returns integer
                  return s__PsychoTime_pIndex[this]
        endfunction
        
        function s__PsychoTime__set_index takes integer this,integer i returns nothing
                  set s__PsychoTime_pIndex[this]=i
        endfunction
        
        function s__PsychoTime__get_pid takes integer this returns integer
                  return s__PsychoTime_pi[this]
        endfunction
        
        function s__PsychoTime__get_ep takes integer this returns integer
                 return s__PsychoTime_epi[this]
        endfunction 
        
        function s__PsychoTime__set_ep takes integer this,integer epid returns nothing
                 set s__PsychoTime_epi[this]=epid
        endfunction 
        
        function s__PsychoTime__get_task takes integer this returns integer
                 return s__PsychoTime_t[this]
        endfunction
        
        function s__PsychoTime__set_task takes integer this,integer tid returns nothing
                set s__PsychoTime_t[this]=tid
        endfunction 
        
        function s__PsychoTime__get_bool takes integer this returns boolexpr
                return s__PsychoTime_m[this]
        endfunction 
    
        function s__PsychoTime_start takes integer pid,conditionfunc mi returns integer
                    local integer this= (CTL__CT(s__PsychoTime_rctl32)) // INLINED!!
                                    
                    set s__PsychoTime_c[this]=0
                    set s__PsychoTime_pi[this]=pid
                    set s__PsychoTime_r[this]=0
                    set s__PsychoTime_t[this]=0
                    set s__PsychoTime_m[this]=mi
                    set s__PsychoTime_epi[this]=- 1
                    set s__PsychoTime_r[this]=0
                    set s__PsychoTime_pIndex[this]=0
                    
                    return this
        endfunction 
    
    


//library PsychoTimer ends
//===========================================================================
// 
// Metastasis
// 
//   Warcraft III map script
//   Generated by the Warcraft III World Editor
//   Map Author: Thorlar
// 
//===========================================================================

//***************************************************************************
//*
//*  Global Variables
//*
//***************************************************************************


function InitGlobals takes nothing returns nothing
    local integer i= 0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SS_DockGroundedAt[i]=0
        set i=i + 1
    endloop

    set udg_TempBool=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SS_LaunchCountdown[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 4 )
        set udg_All_Dock_Filled[i]=false
        set i=i + 1
    endloop

    set udg_TempInt=0
    set udg_Array_On=0
    set udg_ST1_ResetAlarm=CreateTimer()
    set udg_ST1_PGroup=CreateForce()
    set udg_ST1_TakingDamage=false
    set udg_TempInt2=0
    set udg_ST2_TakingDamage=false
    set udg_ST2_ResetAlarm=CreateTimer()
    set udg_ST2_PGroup=CreateForce()
    set udg_handlevars=0
    set udg_ST3_TakingDamage=false
    set udg_ST3_ResetAlarm=CreateTimer()
    set udg_ST3_PGroup=CreateForce()
    set udg_ST4_TakingDamage=false
    set udg_ST4_PGroup=CreateForce()
    set udg_ST4_ResetAlarm=CreateTimer()
    set udg_ChooseGroup=CreateForce()
    set udg_Allow_Parasite=true
    set udg_Allow_Mutant=true
    set udg_Allow_Android=true
    set udg_Parasite=Player(PLAYER_NEUTRAL_PASSIVE)
    set udg_Mutant=Player(PLAYER_NEUTRAL_PASSIVE)
    set udg_HiddenAndroid=Player(bj_PLAYER_NEUTRAL_VICTIM)
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_PlayerRole[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 12 )
        set udg_ChooseRoles_IsTaken[i]=false
        set i=i + 1
    endloop

    set udg_ChooseRoles_DummyGroup=CreateGroup()
    set udg_NumberofRoles=12
    set i=0
    loop
        exitwhen ( i > 4 )
        set udg_MutantUpgrades[i]=false
        set i=i + 1
    endloop

    set udg_MutantUpgradeLevel=0
    set udg_MutantChooseDialog=DialogCreate()
    set udg_MutantIsUpgrading=false
    set i=0
    loop
        exitwhen ( i > 12 )
        set udg_Player_IsParasiteSpawn[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 12 )
        set udg_Player_IsMutantSpawn[i]=false
        set i=i + 1
    endloop

    set udg_ST5_TakingDamage=false
    set udg_ST5_ResetAlarm=CreateTimer()
    set udg_ST5_PGroup=CreateForce()
    set udg_TempDoorHack=false
    set udg_AllPlayers=CreateForce()
    set udg_ChooseRoles_SpawnGroup=CreateGroup()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_NamePrepension[i]=""
        set i=i + 1
    endloop

    set udg_GIT_TesterOn=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_GIT_TesterGroup[i]=CreateForce()
        set i=i + 1
    endloop

    set udg_TempString=""
    set udg_PlanetAngle=0
    set udg_SpawnTemp=false
    set udg_TempReal=0
    set udg_RandomEvent=CreateTimer()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_RandomEvent_On[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_OriginalName[i]=""
        set i=i + 1
    endloop

    set udg_LostStation_Disappear=CreateTimer()
    set udg_PirateShip_DestructionTimer=CreateTimer()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_NewsString[i]=""
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_Spectating[i]=false
        set i=i + 1
    endloop

    set udg_PersonnelUpgradeDialog=DialogCreate()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Personnel_HasUpgrade[i]=false
        set i=i + 1
    endloop

    set udg_TempInt3=0
    set udg_DeadGroup=CreateForce()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Researcher_PhD[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SS_IsBoarded[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_OriginalName[i]=""
        set i=i + 1
    endloop

    set udg_TempPlayerGroup=CreateForce()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_arguments[i]=""
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_DefaultChatGroup[i]=""
        set i=i + 1
    endloop

    set udg_ParasiteChildInfectee='h02N'
    set udg_AlienCurrentForm='h02M'
    set udg_CountupBar_HideTempBool=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_DeadPlayer_Cash[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_TempIntArray[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_ParasiteUpgrades[i]=false
        set i=i + 1
    endloop

    set udg_ParasiteIsUpgrading=false
    set udg_ParasiteUpgradeLevel=0
    set udg_ParasiteChooseDialog=DialogCreate()
    set udg_ParasiteUpgradingTo='h02M'
    set udg_BackFromHellDialog=DialogCreate()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_NameBeforeDead[i]=""
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_CTL_PosXArray[i]=0
        set i=i + 1
    endloop

    set udg_CTL_On=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_CTL_PosYArray[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_CTL_UnitHealth[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_CTL_UnitMana[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_CTL_Facing[i]=0
        set i=i + 1
    endloop

    set udg_CountUpBarColor=""
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_IsMasquerading[i]=false
        set i=i + 1
    endloop

    set udg_TempReal2=0
    set udg_DeadSnoeglays=0
    set udg_UpgradePointsMutant=0.00
    set udg_UpgradePointsAlien=0.00
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_Blinded[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_Poison_Swaying[i]=false
        set i=i + 1
    endloop

    set udg_DeathVoteDialog=DialogCreate()
    set udg_DeathType=1
    set udg_InstantBootMode_Votes=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_DeadKickVotes[i]=0
        set i=i + 1
    endloop

    set udg_SwaggerLaunchTimer=CreateTimer()
    set udg_MinerthaDamageCounter=0
    set i=0
    loop
        exitwhen ( i > 12 )
        set udg_Player_VotedKickGroup[i]=CreateForce()
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_ColorCode[i]=""
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_Left[i]=false
        set i=i + 1
    endloop

    set udg_Liquidate_AreYouSureMutant=DialogCreate()
    set udg_Liquidate_ToLiquidateMutant=0
    set udg_Liquidate_AreYouSureAlien=DialogCreate()
    set udg_Liquidate_ToLiquidateAlien=0
    set udg_MutantUpgrade_Health=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_EscapePod_LifeReset[i]=0
        set i=i + 1
    endloop

    set udg_Blackout=false
    set udg_BlackoutTimer=CreateTimer()
    set udg_GameEnd=false
    set udg_MoonAngle=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Unit_IsInfected[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Unit_InfectionType[i]=0
        set i=i + 1
    endloop

    set udg_Swagger_Grounded=false
    set udg_Moon_TakingDamage=false
    set udg_Moon_ResetAlarm=CreateTimer()
    set udg_Moon_PGroup=CreateForce()
    set udg_MoonDamageTimer=CreateTimer()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_Masquerade_Life[i]=0
        set i=i + 1
    endloop

    set udg_StationPathGroup=CreateGroup()
    set udg_GameWinner=""
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_DamageTaken[i]=0
        set i=i + 1
    endloop

    set udg_GameTimer=CreateTimer()
    set udg_PlanetBombardmentPool_End=0
    set udg_MinerthaDPS=0
    set udg_Parasite_EggGroup=CreateGroup()
    set udg_Mutant_IsPerfection=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_Slugglied[i]=false
        set i=i + 1
    endloop

    set udg_SpaceObject_CollideGroup=CreateGroup()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SpaceObject_CollideRadius[i]=0
        set i=i + 1
    endloop

    set udg_SunDamage=3.50
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_ForceSuit_LastAttackTime[i]=0
        set i=i + 1
    endloop

    set udg_UpgradePointsAndroid=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_AndroidUpgrades[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_TotalTKPoints[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SpaceObject_SlugglyAssassinX[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SpaceObject_SlugglyAssassinY[i]=0
        set i=i + 1
    endloop

    set udg_Android_TKScore=0
    set udg_HiddenAndroid_TKDamageDone=0
    set udg_AndroidUpgradeDialog=DialogCreate()
    set udg_Android_DialogOn=false
    set udg_Android_Deactivated=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Player_TetrabinLevel[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_GIT_TesterString[i]=""
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_GIT_TesterStatus[i]=0
        set i=i + 1
    endloop

    set udg_Secret_ControlCode=0
    set i=0
    loop
        exitwhen ( i > 16 )
        set udg_Player_LastPodTime[i]=- 9999.00
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Unit_LastGrenadeTime[i]=0
        set i=i + 1
    endloop

    set udg_Power_Bonus=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Unit_DeathTime[i]=0
        set i=i + 1
    endloop

    set udg_Android_Preference='h02F'
    set udg_WC_Disable=false
    set udg_Kyo_ATM_Armed=false
    set udg_Kyo_ATM_WarningTimer=CreateTimer()
    set udg_VERSION="2.4.4"
    set udg_AndroidRemoteID=0
    set udg_ST8_TakingDamage=false
    set udg_ST8_ResetAlarm=CreateTimer()
    set udg_ST8_PGroup=CreateForce()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Mutant_DamageToPlayer[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_ColorCodesRed[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_ColorCodesGreen[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_ColorCodesBlue[i]=0
        set i=i + 1
    endloop

    set udg_EngineerUsed=false
    set udg_ST9_TakingDamage=false
    set udg_ST9_ResetAlarm=CreateTimer()
    set udg_ST9_PGroup=CreateForce()
    set udg_ST10_TakingDamage=false
    set udg_ST10_ResetAlarm=CreateTimer()
    set udg_ST10_PGroup=CreateForce()
    set udg_ExtraStation=0
    set udg_AllowAlienTK=false
    set udg_AllowMutantTK=false
    set i=0
    loop
        exitwhen ( i > 11 )
        set udg_PacificationBotLines[i]=""
        set i=i + 1
    endloop

    set udg_TESTING=false
    set udg_SelectorGroup=CreateGroup()
    set udg_Mutant_IsRapidGestation=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_ShieldHP[i]=0
        set i=i + 1
    endloop

    set udg_MutantOverlordMoney=0
    set udg_OverlordDeath_DestructionTimer=CreateTimer()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Unit_VendorDisabling[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Unit_VendorDisablingTime[i]=0
        set i=i + 1
    endloop

    set udg_b=0
    set i=0
    loop
        exitwhen ( i > 12 )
        set udg_NamesTemp[i]=""
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 12 )
        set udg_ColorArray[i]=false
        set i=i + 1
    endloop

    set udg_Kyo_ATM_LightningRing=CreateTimer()
    set udg_MapCenterErrors=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Unit_ShipEnterCooldown[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 12 )
        set udg_ForcePolarity[i]=0
        set i=i + 1
    endloop

    set udg_TempUnitGroup=CreateGroup()
    set udg_TempUnitGroup2=CreateGroup()
    set udg_TempBool2=false
    set udg_DoorMalfunctionStatus=0
    set udg_Crave_mana=0
    set udg_SPELL_Index_Size=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SPELL_Index[i]=0
        set i=i + 1
    endloop

    set udg_SPELL_Index_maxSize=0
    set udg_TempIndex=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SPELL_ANGLE[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SPELL_SFXTimer[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SPELL_SFXTimerMax[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SPELL_SPEED[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SPELL_DUR[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SPELL_Damage[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_SPELL_DamageCaused[i]=0
        set i=i + 1
    endloop

    set udg_DMgroup=CreateGroup()
    set udg_Manadrained=0
    set udg_Manacurrent1=0
    set udg_Manacurrent2=0
    set udg_TP_Fail=0
    set udg_Extradimensional_spawn=false
    set udg_Water_Shield_Number=0
    set udg_WarpTimer=CreateTimer()
    set udg_Mirror_Timer=CreateTimer()
    set udg_Mirror_Arenagroup=CreateGroup()
    set udg_Mirror_Hostilegroup=CreateGroup()
    set udg_AI_group=CreateGroup()
    set udg_Masq_evolved=false
    set udg_Warp_enabled=false
    set udg_Mirror_Enabled=false
    set udg_Defunct_Dead=false
    set udg_ace_Existence=false
    set i=0
    loop
        exitwhen ( i > 3000 )
        set udg_HP_Comparison[i]=0
        set i=i + 1
    endloop

    set udg_HP_Index=0
    set udg_TPareafail=0
    set udg_masqint=0
    set udg_Temptimer=CreateTimer()
    set udg_Warp_PG=CreateForce()
    set udg_MasqTimer=CreateTimer()
    set udg_Masqtimesint=0
    set udg_mutalien_bugfix=CreateGroup()
    set i=0
    loop
        exitwhen ( i > 13 )
        set udg_GuardInvigorationExpiration[i]=CreateTimer()
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 25 )
        set udg_ExplosiveBarrelGroup[i]=CreateGroup()
        set i=i + 1
    endloop

    set udg_EldritchBeastExists=false
    set udg_AnomalyUnitGroup=CreateGroup()
    set udg_AnomalyWarpalHasSpawned=false
    set udg_IsNiffyLockdownActive=false
    set udg_CameraDistanceTemp=0
    set i=0
    loop
        exitwhen ( i > 12 )
        set udg_CameraDistanceAuto[i]=0
        set i=i + 1
    endloop

    set udg_IllusionSuitBoolean=false
    set udg_IllusionSuitTimer=CreateTimer()
    set udg_AshenMarineGroup=CreateGroup()
    set udg_AshenMarineFadeTimer=CreateTimer()
    set i=0
    loop
        exitwhen ( i > 12 )
        set udg_SnoeglayBonus[i]=0
        set i=i + 1
    endloop

    set udg_Mirror_KillExitGroup=CreateGroup()
    set udg_StalkerAttackTimer=CreateTimer()
    set i=0
    loop
        exitwhen ( i > 12 )
        set udg_PlayerDebugMultiplayerToggled[i]=false
        set i=i + 1
    endloop

    set udg_RepickAlienDialog=DialogCreate()
    set udg_RepickMutantDialog=DialogCreate()
    set udg_SpaceAI_FocusTargets=CreateGroup()
    set udg_SpaceAI_USIFleet=CreateGroup()
    set udg_SpaceAI_Timer=CreateTimer()
    set udg_SpaceAI_PirateCaptainAlive=false
    set udg_DoorMalfunctionTimer=CreateTimer()
    set udg_RepickAlienDialogClicked=false
    set udg_RepickMutantDialogClicked=false
    set udg_GargoyleSekritFlag=false
    set udg_GargoyleSekritTimer=CreateTimer()
    set udg_RepickDialogToggled=false
    set udg_AshenMarinePlayerGroup=CreateForce()
    set udg_AshenMarineAllianceTimer=CreateTimer()
    set udg_RogueAndroidPlantChipTimer=CreateTimer()
    set udg_RogueAndroidChipConsumption=false
    set udg_RogueAndroidEvolveTimer=CreateTimer()
    set udg_RogueAndroidEvolveTick=0
    set i=0
    loop
        exitwhen ( i > 24 )
        set udg_SuitSkillsQ[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 24 )
        set udg_SuitSkillsW[i]=0
        set i=i + 1
    endloop

    set udg_Allow_RogueAndroid=false
    set udg_RepickRogueDialogClicked=false
    set udg_RepickRogueDialog=DialogCreate()
    set i=0
    loop
        exitwhen ( i > 24 )
        set udg_SuitSkillsE[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 24 )
        set udg_SuitSkillsR[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 12 )
        set udg_Player_IsRogueAndroidSpawn[i]=false
        set i=i + 1
    endloop

    set udg_RogueAndroidStoleTimeLoop=false
    set udg_RogueAndroidStoleBackFromHell=false
    set udg_RogueAndroidIsUpgrading=false
    set udg_AllowRogueAndroidTK=false
    set udg_Liquidate_AreYouSureRogue=DialogCreate()
    set udg_Liquidate_ToLiquidateRogue=0
    set i=0
    loop
        exitwhen ( i > 3 )
        set udg_RogueAndroidAbsorbedSkills[i]=0
        set i=i + 1
    endloop

    set udg_SilentVoidAll_Timer=CreateTimer()
    set i=0
    loop
        exitwhen ( i > 12 )
        set udg_SilentVoid_String[i]=""
        set i=i + 1
    endloop

    set udg_SilentVoidEnd_Timer=CreateTimer()
    set udg_RogueAndroidSpeedLevel=0
    set udg_TempRoleGroup=CreateForce()
    set udg_PreDamageEvent=0
    set udg_ArmorDamageEvent=0
    set udg_ZeroDamageEvent=0
    set udg_LethalDamageEvent=0
    set udg_OnDamageEvent=0
    set udg_AfterDamageEvent=0
    set udg_SourceDamageEvent=0
    set udg_AOEDamageEvent=0
    set udg_DamageModifierEvent=0
    set udg_DamageEvent=0
    set udg_RemoveDamageEvent=false
    set udg_DamageEventOverride=false
    set udg_DamageEventPrevAmt=0
    set udg_DamageEventLevel=0
    set udg_DamageEventAOE=0
    set udg_DamageEventAOEGroup=CreateGroup()
    set udg_DamageScalingWC3=0
    set udg_DamageScalingUser=0
    set udg_IsDamageAttack=false
    set udg_IsDamageMelee=false
    set udg_IsDamageRanged=false
    set udg_IsDamageSpell=false
    set udg_IsDamageCode=false
    set udg_DamageEventAmount=0
    set udg_DamageEventArmorPierced=0
    set udg_LethalDamageHP=0
    set udg_DamageEventAttackT=0
    set udg_DamageEventDamageT=0
    set udg_DamageEventArmorT=0
    set udg_DamageEventDefenseT=0
    set udg_DamageEventWeaponT=0
    set udg_DamageEventType=0
    set udg_NextDamageIsAttack=false
    set udg_NextDamageIsRanged=false
    set udg_NextDamageIsMelee=false
    set udg_NextDamageType=0
    set udg_NextDamageWeaponT=0
    set udg_DamageFilterAttackT=0
    set udg_DamageFilterDamageT=0
    set udg_DamageFilterType=0
    set udg_DamageFilterMinAmount=0
    set udg_DamageFilterRunChance=0
    set udg_DamageFilterFailChance=0
    set udg_DamageFilterSourceC=0
    set udg_DamageFilterTargetC=0
    set udg_UNIT_CLASS_MAGIC_IMMUNE=0
    set udg_UNIT_CLASS_ETHEREAL=0
    set udg_UNIT_CLASS_RESISTANT=0
    set udg_UNIT_CLASS_SLEEPING=0
    set udg_UNIT_CLASS_POLYMORPHED=0
    set udg_UNIT_CLASS_POISONED=0
    set udg_UNIT_CLASS_TAUREN=0
    set udg_UNIT_CLASS_ANCIENT=0
    set udg_UNIT_CLASS_TOWNHALL=0
    set udg_UNIT_CLASS_SAPPER=0
    set udg_UNIT_CLASS_PEON=0
    set udg_UNIT_CLASS_MECHANICAL=0
    set udg_UNIT_CLASS_UNDEAD=0
    set udg_UNIT_CLASS_SNARED=0
    set udg_UNIT_CLASS_PLAGUED=0
    set udg_UNIT_CLASS_STUNNED=0
    set udg_UNIT_CLASS_SUMMONED=0
    set udg_UNIT_CLASS_GIANT=0
    set udg_UNIT_CLASS_RANGED=0
    set udg_UNIT_CLASS_MELEE=0
    set udg_UNIT_CLASS_ATTACKS_GROUND=0
    set udg_UNIT_CLASS_ATTACKS_FLYING=0
    set udg_UNIT_CLASS_GROUND=0
    set udg_UNIT_CLASS_FLYING=0
    set udg_UNIT_CLASS_STRUCTURE=0
    set udg_UNIT_CLASS_DEAD=0
    set udg_UNIT_CLASS_HERO=0
    set udg_ARMOR_TYPE_NONE=0
    set udg_ARMOR_TYPE_FLESH=0
    set udg_ARMOR_TYPE_METAL=0
    set udg_ARMOR_TYPE_WOOD=0
    set udg_ARMOR_TYPE_ETHEREAL=0
    set udg_ARMOR_TYPE_STONE=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_ArmorTypeDebugStr[i]=""
        set i=i + 1
    endloop

    set udg_ATTACK_TYPE_SPELLS=0
    set udg_ATTACK_TYPE_NORMAL=0
    set udg_ATTACK_TYPE_PIERCE=0
    set udg_ATTACK_TYPE_SIEGE=0
    set udg_ATTACK_TYPE_MAGIC=0
    set udg_ATTACK_TYPE_CHAOS=0
    set udg_ATTACK_TYPE_HERO=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_AttackTypeDebugStr[i]=""
        set i=i + 1
    endloop

    set udg_DamageTypeBlocked=0
    set udg_DamageTypeCriticalStrike=0
    set udg_DamageTypeCode=0
    set udg_DamageTypeExplosive=0
    set udg_DamageTypeHeal=0
    set udg_DamageTypePure=0
    set udg_DamageTypePureExplosive=0
    set udg_DamageTypeReduced=0
    set udg_DAMAGE_TYPE_UNKNOWN=0
    set udg_DAMAGE_TYPE_NORMAL=0
    set udg_DAMAGE_TYPE_ENHANCED=0
    set udg_DAMAGE_TYPE_FIRE=0
    set udg_DAMAGE_TYPE_COLD=0
    set udg_DAMAGE_TYPE_LIGHTNING=0
    set udg_DAMAGE_TYPE_POISON=0
    set udg_DAMAGE_TYPE_DISEASE=0
    set udg_DAMAGE_TYPE_DIVINE=0
    set udg_DAMAGE_TYPE_MAGIC=0
    set udg_DAMAGE_TYPE_SONIC=0
    set udg_DAMAGE_TYPE_ACID=0
    set udg_DAMAGE_TYPE_FORCE=0
    set udg_DAMAGE_TYPE_DEATH=0
    set udg_DAMAGE_TYPE_MIND=0
    set udg_DAMAGE_TYPE_PLANT=0
    set udg_DAMAGE_TYPE_DEFENSIVE=0
    set udg_DAMAGE_TYPE_DEMOLITION=0
    set udg_DAMAGE_TYPE_SLOW_POISON=0
    set udg_DAMAGE_TYPE_SPIRIT_LINK=0
    set udg_DAMAGE_TYPE_SHADOW_STRIKE=0
    set udg_DAMAGE_TYPE_UNIVERSAL=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_DamageTypeDebugStr[i]=""
        set i=i + 1
    endloop

    set udg_DEFENSE_TYPE_LIGHT=0
    set udg_DEFENSE_TYPE_MEDIUM=0
    set udg_DEFENSE_TYPE_HEAVY=0
    set udg_DEFENSE_TYPE_FORTIFIED=0
    set udg_DEFENSE_TYPE_NORMAL=0
    set udg_DEFENSE_TYPE_HERO=0
    set udg_DEFENSE_TYPE_DIVINE=0
    set udg_DEFENSE_TYPE_UNARMORED=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_DefenseTypeDebugStr[i]=""
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_WeaponTypeDebugStr[i]=""
        set i=i + 1
    endloop

    set udg_WEAPON_TYPE_NONE=0
    set udg_WEAPON_TYPE_ML_CHOP=0
    set udg_WEAPON_TYPE_MM_CHOP=0
    set udg_WEAPON_TYPE_MH_CHOP=0
    set udg_WEAPON_TYPE_ML_SLICE=0
    set udg_WEAPON_TYPE_MM_SLICE=0
    set udg_WEAPON_TYPE_MH_SLICE=0
    set udg_WEAPON_TYPE_MM_BASH=0
    set udg_WEAPON_TYPE_MH_BASH=0
    set udg_WEAPON_TYPE_MM_STAB=0
    set udg_WEAPON_TYPE_MH_STAB=0
    set udg_WEAPON_TYPE_WL_SLICE=0
    set udg_WEAPON_TYPE_WM_SLICE=0
    set udg_WEAPON_TYPE_WH_SLICE=0
    set udg_WEAPON_TYPE_WL_BASH=0
    set udg_WEAPON_TYPE_WM_BASH=0
    set udg_WEAPON_TYPE_WH_BASH=0
    set udg_WEAPON_TYPE_WL_STAB=0
    set udg_WEAPON_TYPE_WM_STAB=0
    set udg_WEAPON_TYPE_CL_SLICE=0
    set udg_WEAPON_TYPE_CM_SLICE=0
    set udg_WEAPON_TYPE_CH_SLICE=0
    set udg_WEAPON_TYPE_AM_CHOP=0
    set udg_WEAPON_TYPE_RH_BASH=0
    set udg_WorldMaxX=0
    set udg_WorldMaxY=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_CargoTransportGroup[i]=CreateGroup()
        set i=i + 1
    endloop

    set udg_UDexMax=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_CheckDeathList[i]=0
        set i=i + 1
    endloop

    set udg_UDexLastRecycled=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_UDexPrev[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_UDexNext[i]=0
        set i=i + 1
    endloop

    set udg_UDex=0
    set udg_CheckDeathTimer=CreateTimer()
    set udg_UnitIndexEvent=0
    set udg_CargoEvent=0
    set udg_DeathEvent=0
    set udg_UnitTypeEvent=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitAlive[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitBeingUnloaded[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitNew[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitReincarnating[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitRemoved[i]=false
        set i=i + 1
    endloop

    set udg_UnitIndexerEnabled=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_CheckDeathInList[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitPreplaced[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitTransforming[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_UnitInAction[i]=false
        set i=i + 1
    endloop

    set udg_UnitInActionEvent=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_UnitSpeedX[i]=0
        set i=i + 1
    endloop

    set udg_K2DTimeout=0
    set udg_Knockback2DRobustPathing=0
    set udg_Knockback2DDefaultFriction=0
    set udg_Knockback2DFriction=0
    set udg_Knockback2DDefaultBounce=false
    set udg_Knockback2DBounces=false
    set udg_Knockback2DDefaultPause=false
    set udg_Knockback2DPause=false
    set udg_Knockback2DDefaultKillTrees=false
    set udg_Knockback2DKillTrees=false
    set udg_Knockback2DDefaultDestRadius=0
    set udg_Knockback2DDestRadius=0
    set udg_Knockback2DTreeOrDebris=""
    set udg_Knockback2DDefaultGravity=0
    set udg_Knockback2DGravity=0
    set udg_Knockback2DDefaultFX=""
    set udg_Knockback2DLoopFX=""
    set udg_Knockback2DDefaultFXRate=0
    set udg_Knockback2DFXRate=0
    set udg_K2DX=0
    set udg_K2DY=0
    set udg_Radians_Turn=0
    set udg_Radians_QuarterTurn=0
    set udg_Radians_QuarterPi=0
    set udg_K2DMaxX=0
    set udg_K2DMaxY=0
    set udg_K2DMinX=0
    set udg_K2DMinY=0
    set udg_K2DMaxDestRadius=0
    set udg_K2DItemsFound=false
    set udg_K2DItemOffset=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_IsUnitBeingKnockedBack[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DPrev[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DNext[i]=0
        set i=i + 1
    endloop

    set udg_K2DTimer=CreateTimer()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DHeight[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DFreeze[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DOverride[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DAngle[i]=0
        set i=i + 1
    endloop

    set udg_Knockback2DAngle=0
    set udg_Knockback2DDistance=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DDistanceLeft[i]=0
        set i=i + 1
    endloop

    set udg_Knockback2DTime=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DTimeLeft[i]=0
        set i=i + 1
    endloop

    set udg_Knockback2DOverride=false
    set udg_Knockback2DHeight=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DHeightThreshold[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DLastX[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DLastY[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DCos[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DSin[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DFlying[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DRadius[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DCosH[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DSinH[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DCosD1[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DSinD1[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DCosD2[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DSinD2[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DFriction[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DVelocity[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DKillTrees[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DDestRadius[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DAmphibious[i]=false
        set i=i + 1
    endloop

    set udg_Knockback2DAmphibious=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DBounce[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DCollision[i]=0
        set i=i + 1
    endloop

    set udg_Knockback2DCollision=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DFXModel[i]=""
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DFXRate[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DFXTimeLeft[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DPause[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DSimple[i]=false
        set i=i + 1
    endloop

    set udg_Knockback2DSimple=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_K2DUnbiasedCollision[i]=false
        set i=i + 1
    endloop

    set udg_Knockback2DUnbiasedCollision=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Tauren_WarStomp[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Tauren_Shockwave[i]=false
        set i=i + 1
    endloop

    set udg_LoopInt=0
    set udg_Spell__Interval=0
    set udg_Spell__Filter_AllowEnemy=false
    set udg_Spell__Filter_AllowLiving=false
    set udg_Spell__Filter_AllowHero=false
    set udg_Spell__Filter_AllowNonHero=false
    set udg_Spell__Filter_AllowAlly=false
    set udg_Spell__Filter_AllowDead=false
    set udg_Spell__Filter_AllowFlying=false
    set udg_Spell__Filter_AllowMechanical=false
    set udg_Spell__Filter_AllowStructure=false
    set udg_Spell__Filter_AllowMagicImmune=false
    set udg_Spell__WakeTargets=false
    set udg_Spell__LevelMultiplier=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Level[i]=0
        set i=i + 1
    endloop

    set udg_Spell__Level=0
    set udg_Spell__Time=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Time[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_TargetY[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_TargetX[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_TargetGroup[i]=CreateGroup()
        set i=i + 1
    endloop

    set udg_Spell__TargetGroup=CreateGroup()
    set udg_Spell__Running=false
    set udg_Spell__UseTargetGroup=false
    set udg_Spell__Completed=false
    set udg_Spell_i_Timer=CreateTimer()
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_UseTG[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Completed[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_EventType[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Linked[i]=false
        set i=i + 1
    endloop

    set udg_Spell__Index=0
    set udg_Spell_i_Recycle=0
    set udg_Spell_i_Instances=0
    set udg_Spell_i_StackN=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_StackRef[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Stack[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_RecycleList[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Head[i]=0
        set i=i + 1
    endloop

    set udg_Spell__InRangeGroup=CreateGroup()
    set udg_Spell__InRange=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowAlly[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowDead[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowEnemy[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowFlying[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowHero[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowMagicImmune[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowMechanical[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowNonHero[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowStructure[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AllowLiving[i]=false
        set i=i + 1
    endloop

    set udg_Spell__Channeling=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Channeling[i]=false
        set i=i + 1
    endloop

    set udg_Spell_i_GroupN=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_GroupStack[i]=CreateGroup()
        set i=i + 1
    endloop

    set udg_Spell__InRangeCount=0
    set udg_Spell__Duration=0
    set udg_Spell__DurationPerLevel=0
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_Duration[i]=0
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_LastTime[i]=0
        set i=i + 1
    endloop

    set udg_Spell__Expired=false
    set udg_Spell__StartDuration=false
    set udg_Spell__InRangeMax=0
    set udg_Spell__AutoAddTargets=false
    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Spell_i_AutoAddTargets[i]=false
        set i=i + 1
    endloop

    set i=0
    loop
        exitwhen ( i > 1 )
        set udg_Dipper_Phases[i]=0
        set i=i + 1
    endloop

endfunction

//***************************************************************************
//*
//*  Custom Script Code
//*
//***************************************************************************
//***************************************************************************
//*  GetPlayer
//***************************************************************************
//*  DamageAreaForPlayer
//***************************************************************************
//*  IsPlayer
//***************************************************************************
//*  GetScaledEffects
//***************************************************************************
//*  Push
//***************************************************************************
//*  Flash Grenade
//***************************************************************************
//*  Deterministic Enervation
//***************************************************************************
//*  Pulsing Energy
//***************************************************************************
//*  DetonateSilvsEx


//***************************************************************************
//*  MagneticPull
//***************************************************************************
//*  ForceVortex

//***************************************************************************
//*  PolarityChange
//***************************************************************************
//*  Phase Burn
//***************************************************************************
//*  MagneticSawEx
//***************************************************************************
//*  Init
//***************************************************************************
//*  SwitchAbility
//***************************************************************************
//*  MagneticSuitAttackEx

//***************************************************************************
//*  IsTerrainPathable
//***************************************************************************
//*  GetTerrainZ
//Global for Terrain Z calculations
//***************************************************************************
//*  AutoFly
//***************************************************************************
//*  Preloader




//***************************************************************************
//*  Event
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  ~~    Event     ~~    By Jesus4Lyf    ~~    Version 1.04    ~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//  What is Event?
//         - Event simulates Warcraft III events. They can be created,
//           registered for, fired and also destroyed.
//         - Event, therefore, can also be used like a trigger &quot;group&quot;.
//         - This was created when there was an influx of event style systems 
//           emerging that could really benefit from a standardised custom
//           events snippet. Many users were trying to achieve the same thing
//           and making the same kind of errors. This snippet aims to solve that.
//
//  Functions:
//         - Event.create()       --&gt; Creates a new Event.
//         - .destroy()           --&gt; Destroys an Event.
//         - .fire()              --&gt; Fires all triggers which have been
//                                    registered on this Event.
//         - .register(trigger)   --&gt; Registers another trigger on this Event.
//         - .unregister(trigger) --&gt; Unregisters a trigger from this Event.
//
//  Details:
//         - Event is extremely efficient and lightweight.
//         - It is safe to use with dynamic triggers.
//         - Internally, it is just a linked list. Very simple.
//
//  How to import:
//         - Create a trigger named Event.
//         - Convert it to custom text and replace the whole trigger text with this.
//
//  Thanks:
//         - Builder Bob for the trigger destroy detection method.
//         - Azlier for inspiring this by ripping off my dodgier code.
//
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//***************************************************************************
//*  UnitIndexerGUI


//***************************************************************************
//*  IsUnitMoving


//***************************************************************************
//*  MoveSpeed
//***************************************************************************
//*  CTL
//***************************************************************************
//*  WithinDistance
//***************************************************************************
//*  AcidReactions
//***************************************************************************
//*  Missilies Data
//***************************************************************************
//*  Missile Launch
//***************************************************************************
//*  PlayerUtils
//***************************************************************************
//*  String





//***************************************************************************
//*  IPool


//***************************************************************************
//*  Ascii




//***************************************************************************
//*  GetUnitSector
//Returns the number of the 'sector' of the map that the point is in.
//Used to make sure units can't attack/damage nearby spaceships and the like.
//Unsure of the performance hit, if any.
//If a new sector is made then add that sector to this list.
//***************************************************************************
//*  StringIndexer



//***************************************************************************
//*  ChatSystem
//***************************************************************************
//*  Status
//***************************************************************************
//*  GroupChats
//***************************************************************************
//*  Generator
//***************************************************************************
//*  PsychoInt
//***************************************************************************
//*  PsychoTimer
//***************************************************************************
//*  GetClosestWidget

//***************************************************************************
//*  TaskWRS
//***************************************************************************
//*  TaskWRSEnd
      
//***************************************************************************
//*  WRSSuits
//***************************************************************************
//*  WRSMissile
//***************************************************************************
//*  WRSPreDamage
//***************************************************************************
//*  TaskInit

//***************************************************************************
//*
//*  Map Item Tables
//*
//***************************************************************************

function ItemTable000000_DropItems takes nothing returns nothing
    local widget trigWidget= null
    local unit trigUnit= null
    local integer itemID= 0
    local boolean canDrop= true

    set trigWidget=bj_lastDyingWidget
    if ( trigWidget == null ) then
        set trigUnit=GetTriggerUnit()
    endif

    if ( trigUnit != null ) then
        set canDrop=not IsUnitHidden(trigUnit)
        if ( canDrop and GetChangingUnit() != null ) then
            set canDrop=( GetChangingUnitPrevOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE) )
        endif
    endif

    if ( canDrop ) then
        // Item set 0
        call RandomDistReset()
        call RandomDistAddItem('I02X', 100)
        set itemID=RandomDistChoose()
        if ( trigUnit != null ) then
            call UnitDropItem(trigUnit, itemID)
        else
            call WidgetDropItem(trigWidget, itemID)
        endif

    endif

    set bj_lastDyingWidget=null
    call DestroyTrigger(GetTriggeringTrigger())
endfunction


//***************************************************************************
//*
//*  Unit Item Tables
//*
//***************************************************************************

function Unit000072_DropItems takes nothing returns nothing
    local widget trigWidget= null
    local unit trigUnit= null
    local integer itemID= 0
    local boolean canDrop= true

    set trigWidget=bj_lastDyingWidget
    if ( trigWidget == null ) then
        set trigUnit=GetTriggerUnit()
    endif

    if ( trigUnit != null ) then
        set canDrop=not IsUnitHidden(trigUnit)
        if ( canDrop and GetChangingUnit() != null ) then
            set canDrop=( GetChangingUnitPrevOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE) )
        endif
    endif

    if ( canDrop ) then
        // Item set 0
        call RandomDistReset()
        call RandomDistAddItem('I013', 100)
        set itemID=RandomDistChoose()
        if ( trigUnit != null ) then
            call UnitDropItem(trigUnit, itemID)
        else
            call WidgetDropItem(trigWidget, itemID)
        endif

    endif

    set bj_lastDyingWidget=null
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

function Unit000090_DropItems takes nothing returns nothing
    local widget trigWidget= null
    local unit trigUnit= null
    local integer itemID= 0
    local boolean canDrop= true

    set trigWidget=bj_lastDyingWidget
    if ( trigWidget == null ) then
        set trigUnit=GetTriggerUnit()
    endif

    if ( trigUnit != null ) then
        set canDrop=not IsUnitHidden(trigUnit)
        if ( canDrop and GetChangingUnit() != null ) then
            set canDrop=( GetChangingUnitPrevOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE) )
        endif
    endif

    if ( canDrop ) then
        // Item set 0
        call RandomDistReset()
        call RandomDistAddItem('I018', 100)
        set itemID=RandomDistChoose()
        if ( trigUnit != null ) then
            call UnitDropItem(trigUnit, itemID)
        else
            call WidgetDropItem(trigWidget, itemID)
        endif

    endif

    set bj_lastDyingWidget=null
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

function Unit000130_DropItems takes nothing returns nothing
    local widget trigWidget= null
    local unit trigUnit= null
    local integer itemID= 0
    local boolean canDrop= true

    set trigWidget=bj_lastDyingWidget
    if ( trigWidget == null ) then
        set trigUnit=GetTriggerUnit()
    endif

    if ( trigUnit != null ) then
        set canDrop=not IsUnitHidden(trigUnit)
        if ( canDrop and GetChangingUnit() != null ) then
            set canDrop=( GetChangingUnitPrevOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE) )
        endif
    endif

    if ( canDrop ) then
        // Item set 0
        call RandomDistReset()
        call RandomDistAddItem('I00O', 100)
        set itemID=RandomDistChoose()
        if ( trigUnit != null ) then
            call UnitDropItem(trigUnit, itemID)
        else
            call WidgetDropItem(trigWidget, itemID)
        endif

    endif

    set bj_lastDyingWidget=null
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

function Unit000134_DropItems takes nothing returns nothing
    local widget trigWidget= null
    local unit trigUnit= null
    local integer itemID= 0
    local boolean canDrop= true

    set trigWidget=bj_lastDyingWidget
    if ( trigWidget == null ) then
        set trigUnit=GetTriggerUnit()
    endif

    if ( trigUnit != null ) then
        set canDrop=not IsUnitHidden(trigUnit)
        if ( canDrop and GetChangingUnit() != null ) then
            set canDrop=( GetChangingUnitPrevOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE) )
        endif
    endif

    if ( canDrop ) then
        // Item set 0
        call RandomDistReset()
        call RandomDistAddItem('I00L', 100)
        set itemID=RandomDistChoose()
        if ( trigUnit != null ) then
            call UnitDropItem(trigUnit, itemID)
        else
            call WidgetDropItem(trigWidget, itemID)
        endif

    endif

    set bj_lastDyingWidget=null
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

function Unit000173_DropItems takes nothing returns nothing
    local widget trigWidget= null
    local unit trigUnit= null
    local integer itemID= 0
    local boolean canDrop= true

    set trigWidget=bj_lastDyingWidget
    if ( trigWidget == null ) then
        set trigUnit=GetTriggerUnit()
    endif

    if ( trigUnit != null ) then
        set canDrop=not IsUnitHidden(trigUnit)
        if ( canDrop and GetChangingUnit() != null ) then
            set canDrop=( GetChangingUnitPrevOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE) )
        endif
    endif

    if ( canDrop ) then
        // Item set 0
        call RandomDistReset()
        call RandomDistAddItem('I012', 100)
        set itemID=RandomDistChoose()
        if ( trigUnit != null ) then
            call UnitDropItem(trigUnit, itemID)
        else
            call WidgetDropItem(trigWidget, itemID)
        endif

    endif

    set bj_lastDyingWidget=null
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

function Unit000201_DropItems takes nothing returns nothing
    local widget trigWidget= null
    local unit trigUnit= null
    local integer itemID= 0
    local boolean canDrop= true

    set trigWidget=bj_lastDyingWidget
    if ( trigWidget == null ) then
        set trigUnit=GetTriggerUnit()
    endif

    if ( trigUnit != null ) then
        set canDrop=not IsUnitHidden(trigUnit)
        if ( canDrop and GetChangingUnit() != null ) then
            set canDrop=( GetChangingUnitPrevOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE) )
        endif
    endif

    if ( canDrop ) then
        // Item set 0
        call RandomDistReset()
        call RandomDistAddItem('I004', 1)
        call RandomDistAddItem('I00I', 1)
        call RandomDistAddItem('I00L', 1)
        call RandomDistAddItem('I017', 1)
        call RandomDistAddItem('I002', 1)
        call RandomDistAddItem(- 1, 2)
        call RandomDistAddItem('I00G', 2)
        call RandomDistAddItem('I00O', 2)
        call RandomDistAddItem('I00N', 2)
        call RandomDistAddItem('I01N', 2)
        call RandomDistAddItem('I01M', 2)
        call RandomDistAddItem('I005', 2)
        call RandomDistAddItem('I00S', 2)
        call RandomDistAddItem('I00K', 2)
        call RandomDistAddItem('I01R', 2)
        call RandomDistAddItem('I00U', 2)
        call RandomDistAddItem('I00H', 2)
        call RandomDistAddItem('I01S', 2)
        call RandomDistAddItem('I01T', 2)
        call RandomDistAddItem('I01V', 2)
        call RandomDistAddItem('I01P', 2)
        call RandomDistAddItem(- 1, 2)
        call RandomDistAddItem('I01L', 2)
        call RandomDistAddItem('I00R', 2)
        call RandomDistAddItem('I01X', 2)
        call RandomDistAddItem('I01U', 2)
        call RandomDistAddItem('I01W', 2)
        call RandomDistAddItem('I01D', 2)
        call RandomDistAddItem('I006', 2)
        call RandomDistAddItem('I01Z', 2)
        call RandomDistAddItem('I011', 2)
        call RandomDistAddItem('I007', 2)
        call RandomDistAddItem('I00C', 2)
        call RandomDistAddItem('I000', 2)
        call RandomDistAddItem('I009', 2)
        call RandomDistAddItem('I01G', 2)
        call RandomDistAddItem('I00Z', 2)
        call RandomDistAddItem('I00D', 2)
        call RandomDistAddItem('I01E', 2)
        call RandomDistAddItem('I020', 2)
        call RandomDistAddItem('I00X', 2)
        call RandomDistAddItem('I00A', 2)
        call RandomDistAddItem('I008', 2)
        call RandomDistAddItem('I021', 2)
        call RandomDistAddItem('I00E', 2)
        call RandomDistAddItem('I001', 2)
        call RandomDistAddItem('I00Y', 2)
        call RandomDistAddItem('I00B', 2)
        call RandomDistAddItem('I00F', 2)
        call RandomDistAddItem('I012', 2)
        call RandomDistAddItem('I01J', 2)
        call RandomDistAddItem('I01K', 2)
        call RandomDistAddItem(- 1, 1)
        set itemID=RandomDistChoose()
        if ( trigUnit != null ) then
            call UnitDropItem(trigUnit, itemID)
        else
            call WidgetDropItem(trigWidget, itemID)
        endif

    endif

    set bj_lastDyingWidget=null
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

function Unit000225_DropItems takes nothing returns nothing
    local widget trigWidget= null
    local unit trigUnit= null
    local integer itemID= 0
    local boolean canDrop= true

    set trigWidget=bj_lastDyingWidget
    if ( trigWidget == null ) then
        set trigUnit=GetTriggerUnit()
    endif

    if ( trigUnit != null ) then
        set canDrop=not IsUnitHidden(trigUnit)
        if ( canDrop and GetChangingUnit() != null ) then
            set canDrop=( GetChangingUnitPrevOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE) )
        endif
    endif

    if ( canDrop ) then
        // Item set 0
        call RandomDistReset()
        call RandomDistAddItem('I01F', 1)
        call RandomDistAddItem('I004', 1)
        call RandomDistAddItem('I00I', 1)
        call RandomDistAddItem('I00L', 1)
        call RandomDistAddItem('I017', 1)
        call RandomDistAddItem('I002', 1)
        call RandomDistAddItem(- 1, 2)
        call RandomDistAddItem('I00G', 2)
        call RandomDistAddItem('I00O', 2)
        call RandomDistAddItem('I00N', 2)
        call RandomDistAddItem('I01N', 2)
        call RandomDistAddItem('I01M', 2)
        call RandomDistAddItem('I005', 2)
        call RandomDistAddItem('I00S', 2)
        call RandomDistAddItem('I00K', 2)
        call RandomDistAddItem('I01R', 2)
        call RandomDistAddItem('I00U', 2)
        call RandomDistAddItem('I00H', 2)
        call RandomDistAddItem('I01S', 2)
        call RandomDistAddItem('I01T', 2)
        call RandomDistAddItem('I01V', 2)
        call RandomDistAddItem('I01P', 2)
        call RandomDistAddItem(- 1, 2)
        call RandomDistAddItem('I01L', 2)
        call RandomDistAddItem('I00R', 2)
        call RandomDistAddItem('I01X', 2)
        call RandomDistAddItem('I01U', 2)
        call RandomDistAddItem('I01W', 2)
        call RandomDistAddItem('I01D', 2)
        call RandomDistAddItem('I006', 2)
        call RandomDistAddItem('I01Z', 2)
        call RandomDistAddItem('I011', 2)
        call RandomDistAddItem('I007', 2)
        call RandomDistAddItem('I00C', 2)
        call RandomDistAddItem('I000', 2)
        call RandomDistAddItem('I009', 2)
        call RandomDistAddItem('I01G', 2)
        call RandomDistAddItem('I00Z', 2)
        call RandomDistAddItem('I00D', 2)
        call RandomDistAddItem('I01E', 2)
        call RandomDistAddItem('I020', 2)
        call RandomDistAddItem('I00X', 2)
        call RandomDistAddItem('I00A', 2)
        call RandomDistAddItem('I008', 2)
        call RandomDistAddItem('I021', 2)
        call RandomDistAddItem('I00E', 2)
        call RandomDistAddItem('I001', 2)
        call RandomDistAddItem('I00Y', 2)
        call RandomDistAddItem('I00B', 2)
        call RandomDistAddItem('I00F', 2)
        call RandomDistAddItem('I012', 2)
        call RandomDistAddItem('I01J', 2)
        call RandomDistAddItem('I01K', 2)
        set itemID=RandomDistChoose()
        if ( trigUnit != null ) then
            call UnitDropItem(trigUnit, itemID)
        else
            call WidgetDropItem(trigWidget, itemID)
        endif

    endif

    set bj_lastDyingWidget=null
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

function Unit000227_DropItems takes nothing returns nothing
    local widget trigWidget= null
    local unit trigUnit= null
    local integer itemID= 0
    local boolean canDrop= true

    set trigWidget=bj_lastDyingWidget
    if ( trigWidget == null ) then
        set trigUnit=GetTriggerUnit()
    endif

    if ( trigUnit != null ) then
        set canDrop=not IsUnitHidden(trigUnit)
        if ( canDrop and GetChangingUnit() != null ) then
            set canDrop=( GetChangingUnitPrevOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE) )
        endif
    endif

    if ( canDrop ) then
        // Item set 0
        call RandomDistReset()
        call RandomDistAddItem('I004', 1)
        call RandomDistAddItem('I00I', 1)
        call RandomDistAddItem('I00L', 1)
        call RandomDistAddItem('I017', 1)
        call RandomDistAddItem('I002', 1)
        call RandomDistAddItem(- 1, 2)
        call RandomDistAddItem('I00G', 2)
        call RandomDistAddItem('I00O', 2)
        call RandomDistAddItem('I00N', 2)
        call RandomDistAddItem('I01N', 2)
        call RandomDistAddItem('I01M', 2)
        call RandomDistAddItem('I005', 2)
        call RandomDistAddItem('I00S', 2)
        call RandomDistAddItem('I00K', 2)
        call RandomDistAddItem('I01R', 2)
        call RandomDistAddItem('I00U', 2)
        call RandomDistAddItem('I00H', 2)
        call RandomDistAddItem('I01S', 2)
        call RandomDistAddItem('I01T', 2)
        call RandomDistAddItem('I01V', 2)
        call RandomDistAddItem('I01P', 2)
        call RandomDistAddItem(- 1, 2)
        call RandomDistAddItem('I01L', 2)
        call RandomDistAddItem('I00R', 2)
        call RandomDistAddItem('I01X', 2)
        call RandomDistAddItem('I01U', 2)
        call RandomDistAddItem('I01W', 2)
        call RandomDistAddItem('I01D', 2)
        call RandomDistAddItem('I006', 2)
        call RandomDistAddItem('I01Z', 2)
        call RandomDistAddItem('I011', 2)
        call RandomDistAddItem('I007', 2)
        call RandomDistAddItem('I00C', 2)
        call RandomDistAddItem('I000', 2)
        call RandomDistAddItem('I009', 2)
        call RandomDistAddItem('I01G', 2)
        call RandomDistAddItem('I00Z', 2)
        call RandomDistAddItem('I00D', 2)
        call RandomDistAddItem('I01E', 2)
        call RandomDistAddItem('I020', 2)
        call RandomDistAddItem('I00X', 2)
        call RandomDistAddItem('I00A', 2)
        call RandomDistAddItem('I008', 2)
        call RandomDistAddItem('I021', 2)
        call RandomDistAddItem('I00E', 2)
        call RandomDistAddItem('I001', 2)
        call RandomDistAddItem('I00Y', 2)
        call RandomDistAddItem('I00B', 2)
        call RandomDistAddItem('I00F', 2)
        call RandomDistAddItem('I012', 2)
        call RandomDistAddItem('I01J', 2)
        call RandomDistAddItem('I01K', 2)
        call RandomDistAddItem(- 1, 1)
        set itemID=RandomDistChoose()
        if ( trigUnit != null ) then
            call UnitDropItem(trigUnit, itemID)
        else
            call WidgetDropItem(trigWidget, itemID)
        endif

    endif

    set bj_lastDyingWidget=null
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

function Unit000263_DropItems takes nothing returns nothing
    local widget trigWidget= null
    local unit trigUnit= null
    local integer itemID= 0
    local boolean canDrop= true

    set trigWidget=bj_lastDyingWidget
    if ( trigWidget == null ) then
        set trigUnit=GetTriggerUnit()
    endif

    if ( trigUnit != null ) then
        set canDrop=not IsUnitHidden(trigUnit)
        if ( canDrop and GetChangingUnit() != null ) then
            set canDrop=( GetChangingUnitPrevOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE) )
        endif
    endif

    if ( canDrop ) then
        // Item set 0
        call RandomDistReset()
        call RandomDistAddItem('I004', 1)
        call RandomDistAddItem('I00I', 1)
        call RandomDistAddItem('I00L', 1)
        call RandomDistAddItem('I017', 1)
        call RandomDistAddItem('I002', 1)
        call RandomDistAddItem(- 1, 2)
        call RandomDistAddItem('I00G', 2)
        call RandomDistAddItem('I00O', 2)
        call RandomDistAddItem('I00N', 2)
        call RandomDistAddItem('I01N', 2)
        call RandomDistAddItem('I01M', 2)
        call RandomDistAddItem('I005', 2)
        call RandomDistAddItem('I00S', 2)
        call RandomDistAddItem('I00K', 2)
        call RandomDistAddItem('I01R', 2)
        call RandomDistAddItem('I00U', 2)
        call RandomDistAddItem('I00H', 2)
        call RandomDistAddItem('I01S', 2)
        call RandomDistAddItem('I01T', 2)
        call RandomDistAddItem('I01V', 2)
        call RandomDistAddItem('I01P', 2)
        call RandomDistAddItem(- 1, 2)
        call RandomDistAddItem('I01L', 2)
        call RandomDistAddItem('I00R', 2)
        call RandomDistAddItem('I01X', 2)
        call RandomDistAddItem('I01U', 2)
        call RandomDistAddItem('I01W', 2)
        call RandomDistAddItem('I01D', 2)
        call RandomDistAddItem('I006', 2)
        call RandomDistAddItem('I01Z', 2)
        call RandomDistAddItem('I011', 2)
        call RandomDistAddItem('I007', 2)
        call RandomDistAddItem('I00C', 2)
        call RandomDistAddItem('I000', 2)
        call RandomDistAddItem('I009', 2)
        call RandomDistAddItem('I01G', 2)
        call RandomDistAddItem('I00Z', 2)
        call RandomDistAddItem('I00D', 2)
        call RandomDistAddItem('I01E', 2)
        call RandomDistAddItem('I020', 2)
        call RandomDistAddItem('I00X', 2)
        call RandomDistAddItem('I00A', 2)
        call RandomDistAddItem('I008', 2)
        call RandomDistAddItem('I021', 2)
        call RandomDistAddItem('I00E', 2)
        call RandomDistAddItem('I001', 2)
        call RandomDistAddItem('I00Y', 2)
        call RandomDistAddItem('I00B', 2)
        call RandomDistAddItem('I00F', 2)
        call RandomDistAddItem('I012', 2)
        call RandomDistAddItem('I01J', 2)
        call RandomDistAddItem('I01K', 2)
        call RandomDistAddItem(- 1, 1)
        set itemID=RandomDistChoose()
        if ( trigUnit != null ) then
            call UnitDropItem(trigUnit, itemID)
        else
            call WidgetDropItem(trigWidget, itemID)
        endif

    endif

    set bj_lastDyingWidget=null
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

function Unit000264_DropItems takes nothing returns nothing
    local widget trigWidget= null
    local unit trigUnit= null
    local integer itemID= 0
    local boolean canDrop= true

    set trigWidget=bj_lastDyingWidget
    if ( trigWidget == null ) then
        set trigUnit=GetTriggerUnit()
    endif

    if ( trigUnit != null ) then
        set canDrop=not IsUnitHidden(trigUnit)
        if ( canDrop and GetChangingUnit() != null ) then
            set canDrop=( GetChangingUnitPrevOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE) )
        endif
    endif

    if ( canDrop ) then
        // Item set 0
        call RandomDistReset()
        call RandomDistAddItem('I004', 1)
        call RandomDistAddItem('I00I', 1)
        call RandomDistAddItem('I00L', 1)
        call RandomDistAddItem('I017', 1)
        call RandomDistAddItem('I002', 1)
        call RandomDistAddItem(- 1, 2)
        call RandomDistAddItem('I00G', 2)
        call RandomDistAddItem('I00O', 2)
        call RandomDistAddItem('I00N', 2)
        call RandomDistAddItem('I01N', 2)
        call RandomDistAddItem('I01M', 2)
        call RandomDistAddItem('I005', 2)
        call RandomDistAddItem('I00S', 2)
        call RandomDistAddItem('I00K', 2)
        call RandomDistAddItem('I01R', 2)
        call RandomDistAddItem('I00U', 2)
        call RandomDistAddItem('I00H', 2)
        call RandomDistAddItem('I01S', 2)
        call RandomDistAddItem('I01T', 2)
        call RandomDistAddItem('I01V', 2)
        call RandomDistAddItem('I01P', 2)
        call RandomDistAddItem(- 1, 2)
        call RandomDistAddItem('I01L', 2)
        call RandomDistAddItem('I00R', 2)
        call RandomDistAddItem('I01X', 2)
        call RandomDistAddItem('I01U', 2)
        call RandomDistAddItem('I01W', 2)
        call RandomDistAddItem('I01D', 2)
        call RandomDistAddItem('I006', 2)
        call RandomDistAddItem('I01Z', 2)
        call RandomDistAddItem('I011', 2)
        call RandomDistAddItem('I007', 2)
        call RandomDistAddItem('I00C', 2)
        call RandomDistAddItem('I000', 2)
        call RandomDistAddItem('I009', 2)
        call RandomDistAddItem('I01G', 2)
        call RandomDistAddItem('I00Z', 2)
        call RandomDistAddItem('I00D', 2)
        call RandomDistAddItem('I01E', 2)
        call RandomDistAddItem('I020', 2)
        call RandomDistAddItem('I00X', 2)
        call RandomDistAddItem('I00A', 2)
        call RandomDistAddItem('I008', 2)
        call RandomDistAddItem('I021', 2)
        call RandomDistAddItem('I00E', 2)
        call RandomDistAddItem('I001', 2)
        call RandomDistAddItem('I00Y', 2)
        call RandomDistAddItem('I00B', 2)
        call RandomDistAddItem('I00F', 2)
        call RandomDistAddItem('I012', 2)
        call RandomDistAddItem('I01J', 2)
        call RandomDistAddItem('I01K', 2)
        call RandomDistAddItem(- 1, 1)
        set itemID=RandomDistChoose()
        if ( trigUnit != null ) then
            call UnitDropItem(trigUnit, itemID)
        else
            call WidgetDropItem(trigWidget, itemID)
        endif

    endif

    set bj_lastDyingWidget=null
    call DestroyTrigger(GetTriggeringTrigger())
endfunction


//***************************************************************************
//*
//*  Destructible Item Tables
//*
//***************************************************************************

function Doodad002870_DropItems takes nothing returns nothing
    local widget trigWidget= null
    local unit trigUnit= null
    local integer itemID= 0
    local boolean canDrop= true

    set trigWidget=bj_lastDyingWidget
    if ( trigWidget == null ) then
        set trigUnit=GetTriggerUnit()
    endif

    if ( trigUnit != null ) then
        set canDrop=not IsUnitHidden(trigUnit)
        if ( canDrop and GetChangingUnit() != null ) then
            set canDrop=( GetChangingUnitPrevOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE) )
        endif
    endif

    if ( canDrop ) then
        // Item set 0
        call RandomDistReset()
        call RandomDistAddItem('I002', 100)
        set itemID=RandomDistChoose()
        if ( trigUnit != null ) then
            call UnitDropItem(trigUnit, itemID)
        else
            call WidgetDropItem(trigWidget, itemID)
        endif

    endif

    set bj_lastDyingWidget=null
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

function Doodad002878_DropItems takes nothing returns nothing
    local widget trigWidget= null
    local unit trigUnit= null
    local integer itemID= 0
    local boolean canDrop= true

    set trigWidget=bj_lastDyingWidget
    if ( trigWidget == null ) then
        set trigUnit=GetTriggerUnit()
    endif

    if ( trigUnit != null ) then
        set canDrop=not IsUnitHidden(trigUnit)
        if ( canDrop and GetChangingUnit() != null ) then
            set canDrop=( GetChangingUnitPrevOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE) )
        endif
    endif

    if ( canDrop ) then
        // Item set 0
        call RandomDistReset()
        call RandomDistAddItem('I002', 100)
        set itemID=RandomDistChoose()
        if ( trigUnit != null ) then
            call UnitDropItem(trigUnit, itemID)
        else
            call WidgetDropItem(trigWidget, itemID)
        endif

    endif

    set bj_lastDyingWidget=null
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

function Doodad006794_DropItems takes nothing returns nothing
    local widget trigWidget= null
    local unit trigUnit= null
    local integer itemID= 0
    local boolean canDrop= true

    set trigWidget=bj_lastDyingWidget
    if ( trigWidget == null ) then
        set trigUnit=GetTriggerUnit()
    endif

    if ( trigUnit != null ) then
        set canDrop=not IsUnitHidden(trigUnit)
        if ( canDrop and GetChangingUnit() != null ) then
            set canDrop=( GetChangingUnitPrevOwner() == Player(PLAYER_NEUTRAL_AGGRESSIVE) )
        endif
    endif

    if ( canDrop ) then
        // Item set 0
        call RandomDistReset()
        call RandomDistAddItem('I013', 100)
        set itemID=RandomDistChoose()
        if ( trigUnit != null ) then
            call UnitDropItem(trigUnit, itemID)
        else
            call WidgetDropItem(trigWidget, itemID)
        endif

    endif

    set bj_lastDyingWidget=null
    call DestroyTrigger(GetTriggeringTrigger())
endfunction


//***************************************************************************
//*
//*  Sound Assets
//*
//***************************************************************************

function InitSounds takes nothing returns nothing
    set gg_snd_NightElfGlueScreenLoop1=CreateSound("Sound\\Ambient\\NightElfGlueScreenLoop1.wav", true, false, false, 1, 1, "DefaultEAXON")
    call SetSoundDuration(gg_snd_NightElfGlueScreenLoop1, 47109)
    call SetSoundChannel(gg_snd_NightElfGlueScreenLoop1, 0)
    call SetSoundVolume(gg_snd_NightElfGlueScreenLoop1, 127)
    call SetSoundPitch(gg_snd_NightElfGlueScreenLoop1, 0.8)
    set gg_snd_UndeadGlueScreenLoop1=CreateSound("Sound\\Ambient\\UndeadGlueScreenLoop1.wav", true, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_UndeadGlueScreenLoop1, 12540)
    call SetSoundChannel(gg_snd_UndeadGlueScreenLoop1, 0)
    call SetSoundVolume(gg_snd_UndeadGlueScreenLoop1, 127)
    call SetSoundPitch(gg_snd_UndeadGlueScreenLoop1, 1.0)
    set gg_snd_War3XMainGlueScreen=CreateSound("Sound\\Ambient\\War3XMainGlueScreen.wav", true, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_War3XMainGlueScreen, 9990)
    call SetSoundChannel(gg_snd_War3XMainGlueScreen, 0)
    call SetSoundVolume(gg_snd_War3XMainGlueScreen, 127)
    call SetSoundPitch(gg_snd_War3XMainGlueScreen, 1.0)
    set gg_snd_CreepAggroWhat1=CreateSound("Sound\\Interface\\CreepAggroWhat1.wav", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_CreepAggroWhat1, 1236)
    call SetSoundChannel(gg_snd_CreepAggroWhat1, 0)
    call SetSoundVolume(gg_snd_CreepAggroWhat1, - 1)
    call SetSoundPitch(gg_snd_CreepAggroWhat1, 1.0)
    set gg_snd_NecropolisUpgrade1=CreateSound("Buildings\\Undead\\Necropolis\\NecropolisUpgrade1.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_NecropolisUpgrade1, 5823)
    call SetSoundChannel(gg_snd_NecropolisUpgrade1, 8)
    call SetSoundVolume(gg_snd_NecropolisUpgrade1, 127)
    call SetSoundPitch(gg_snd_NecropolisUpgrade1, 1.0)
    set gg_snd_WWII_submarine_dive_klaxon=CreateSound("war3mapImported\\WWII_submarine_dive_klaxon.mp3", true, true, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_WWII_submarine_dive_klaxon, 5823)
    call SetSoundChannel(gg_snd_WWII_submarine_dive_klaxon, 10)
    call SetSoundVolume(gg_snd_WWII_submarine_dive_klaxon, 127)
    call SetSoundPitch(gg_snd_WWII_submarine_dive_klaxon, 1.0)
    call SetSoundDistances(gg_snd_WWII_submarine_dive_klaxon, 0.0, 1000.0)
    call SetSoundDistanceCutoff(gg_snd_WWII_submarine_dive_klaxon, 1000.0)
    call SetSoundConeAngles(gg_snd_WWII_submarine_dive_klaxon, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_WWII_submarine_dive_klaxon, 0.0, 0.0, 0.0)
    set gg_snd_RunesGlow=CreateSound("Sound\\Ambient\\DoodadEffects\\RunesGlow.wav", true, true, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_RunesGlow, 5000)
    call SetSoundChannel(gg_snd_RunesGlow, 0)
    call SetSoundVolume(gg_snd_RunesGlow, - 1)
    call SetSoundPitch(gg_snd_RunesGlow, 1.0)
    call SetSoundDistances(gg_snd_RunesGlow, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_RunesGlow, 3000.0)
    call SetSoundConeAngles(gg_snd_RunesGlow, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_RunesGlow, 0.0, 0.0, 0.0)
    set gg_snd_HumanDissipate1=CreateSound("Sound\\Units\\Human\\HumanDissipate1.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_HumanDissipate1, 2269)
    call SetSoundChannel(gg_snd_HumanDissipate1, 8)
    call SetSoundVolume(gg_snd_HumanDissipate1, - 1)
    call SetSoundPitch(gg_snd_HumanDissipate1, 1.0)
    set gg_snd_MarkOfChaos=CreateSound("Abilities\\Spells\\Human\\MarkOfChaos\\MarkOfChaos.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_MarkOfChaos, 3999)
    call SetSoundChannel(gg_snd_MarkOfChaos, 8)
    call SetSoundVolume(gg_snd_MarkOfChaos, - 1)
    call SetSoundPitch(gg_snd_MarkOfChaos, 1.0)
    set gg_snd_ThunderClapCaster=CreateSound("Abilities\\Spells\\Human\\ThunderClap\\ThunderClapCaster.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_ThunderClapCaster, 3450)
    call SetSoundChannel(gg_snd_ThunderClapCaster, 8)
    call SetSoundVolume(gg_snd_ThunderClapCaster, - 1)
    call SetSoundPitch(gg_snd_ThunderClapCaster, 1.0)
    set gg_snd_PeasantDeath=CreateSound("Units\\Human\\Peasant\\PeasantDeath.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_PeasantDeath, 3645)
    call SetSoundChannel(gg_snd_PeasantDeath, 8)
    call SetSoundVolume(gg_snd_PeasantDeath, - 1)
    call SetSoundPitch(gg_snd_PeasantDeath, 1.0)
    set gg_snd_WarlockDeath1=CreateSound("Units\\Demon\\Warlock\\WarlockDeath1.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_WarlockDeath1, 3430)
    call SetSoundChannel(gg_snd_WarlockDeath1, 8)
    call SetSoundVolume(gg_snd_WarlockDeath1, - 1)
    call SetSoundPitch(gg_snd_WarlockDeath1, 1.0)
    set gg_snd_AbominationDeath1=CreateSound("Units\\Undead\\Abomination\\AbominationDeath1.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_AbominationDeath1, 2455)
    call SetSoundChannel(gg_snd_AbominationDeath1, 8)
    call SetSoundVolume(gg_snd_AbominationDeath1, - 1)
    call SetSoundPitch(gg_snd_AbominationDeath1, 1.0)
    set gg_snd_AbominationAlternateDeath1=CreateSound("Units\\Undead\\Abomination\\AbominationAlternateDeath1.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_AbominationAlternateDeath1, 2319)
    call SetSoundChannel(gg_snd_AbominationAlternateDeath1, 8)
    call SetSoundVolume(gg_snd_AbominationAlternateDeath1, - 1)
    call SetSoundPitch(gg_snd_AbominationAlternateDeath1, 1.0)
    set gg_snd_RockGolemDeath1=CreateSound("Units\\Creeps\\RockGolem\\RockGolemDeath1.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_RockGolemDeath1, 2808)
    call SetSoundChannel(gg_snd_RockGolemDeath1, 8)
    call SetSoundVolume(gg_snd_RockGolemDeath1, - 1)
    call SetSoundPitch(gg_snd_RockGolemDeath1, 1.0)
    set gg_snd_FreakyForest4=CreateSound("Sound\\Ambient\\Ashenvale\\FreakyForest4.wav", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_FreakyForest4, 5247)
    call SetSoundChannel(gg_snd_FreakyForest4, 8)
    call SetSoundVolume(gg_snd_FreakyForest4, - 1)
    call SetSoundPitch(gg_snd_FreakyForest4, 1.0)
    set gg_snd_PitFiendDeath1=CreateSound("Units\\Undead\\CryptFiend\\PitFiendDeath1.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_PitFiendDeath1, 2792)
    call SetSoundChannel(gg_snd_PitFiendDeath1, 8)
    call SetSoundVolume(gg_snd_PitFiendDeath1, - 1)
    call SetSoundPitch(gg_snd_PitFiendDeath1, 1.0)
    set gg_snd_BansheeDeath=CreateSound("Units\\Undead\\Banshee\\BansheeDeath.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_BansheeDeath, 2379)
    call SetSoundChannel(gg_snd_BansheeDeath, 8)
    call SetSoundVolume(gg_snd_BansheeDeath, - 1)
    call SetSoundPitch(gg_snd_BansheeDeath, 1.0)
    set gg_snd_SargerasRoar=CreateSound("Sound\\Ambient\\DoodadEffects\\SargerasRoar.wav", false, true, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_SargerasRoar, 4481)
    call SetSoundChannel(gg_snd_SargerasRoar, 0)
    call SetSoundVolume(gg_snd_SargerasRoar, - 1)
    call SetSoundPitch(gg_snd_SargerasRoar, 1.0)
    call SetSoundDistances(gg_snd_SargerasRoar, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_SargerasRoar, 3000.0)
    call SetSoundConeAngles(gg_snd_SargerasRoar, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_SargerasRoar, 0.0, 0.0, 0.0)
    set gg_snd_FrostmourneChant1=CreateSound("Sound\\Ambient\\DoodadEffects\\FrostmourneChant1.wav", true, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_FrostmourneChant1, 5038)
    call SetSoundChannel(gg_snd_FrostmourneChant1, 0)
    call SetSoundVolume(gg_snd_FrostmourneChant1, 80)
    call SetSoundPitch(gg_snd_FrostmourneChant1, 1.0)
    set gg_snd_AshenvaleObeliskLoop1=CreateSound("Sound\\Ambient\\DoodadEffects\\AshenvaleObeliskLoop1.wav", false, true, true, 10, 10, "DoodadsEAX")
    call SetSoundDuration(gg_snd_AshenvaleObeliskLoop1, 2037)
    call SetSoundChannel(gg_snd_AshenvaleObeliskLoop1, 0)
    call SetSoundVolume(gg_snd_AshenvaleObeliskLoop1, 127)
    call SetSoundPitch(gg_snd_AshenvaleObeliskLoop1, 1.0)
    call SetSoundDistances(gg_snd_AshenvaleObeliskLoop1, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_AshenvaleObeliskLoop1, 3000.0)
    call SetSoundConeAngles(gg_snd_AshenvaleObeliskLoop1, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_AshenvaleObeliskLoop1, 0.0, 0.0, 0.0)
    set gg_snd_BuildingDeathLargeHuman=CreateSound("Sound\\Buildings\\Death\\BuildingDeathLargeHuman.wav", false, true, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_BuildingDeathLargeHuman, 3459)
    call SetSoundChannel(gg_snd_BuildingDeathLargeHuman, 0)
    call SetSoundVolume(gg_snd_BuildingDeathLargeHuman, - 1)
    call SetSoundPitch(gg_snd_BuildingDeathLargeHuman, 0.9)
    call SetSoundDistances(gg_snd_BuildingDeathLargeHuman, 0.0, 4000.0)
    call SetSoundDistanceCutoff(gg_snd_BuildingDeathLargeHuman, 3000.0)
    call SetSoundConeAngles(gg_snd_BuildingDeathLargeHuman, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_BuildingDeathLargeHuman, 0.0, 0.0, 0.0)
    set gg_snd_NightElfBuildingDeathSmall1=CreateSound("Sound\\Buildings\\Death\\NightElfBuildingDeathSmall1.wav", false, true, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_NightElfBuildingDeathSmall1, 3674)
    call SetSoundChannel(gg_snd_NightElfBuildingDeathSmall1, 0)
    call SetSoundVolume(gg_snd_NightElfBuildingDeathSmall1, - 1)
    call SetSoundPitch(gg_snd_NightElfBuildingDeathSmall1, 1.3)
    call SetSoundDistances(gg_snd_NightElfBuildingDeathSmall1, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_NightElfBuildingDeathSmall1, 4000.0)
    call SetSoundConeAngles(gg_snd_NightElfBuildingDeathSmall1, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_NightElfBuildingDeathSmall1, 0.0, 0.0, 0.0)
    set gg_snd_Poweringup=CreateSound("war3mapImported\\Poweringup.mp3", false, true, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_Poweringup, 3674)
    call SetSoundChannel(gg_snd_Poweringup, 11)
    call SetSoundVolume(gg_snd_Poweringup, 127)
    call SetSoundPitch(gg_snd_Poweringup, 2.0)
    call SetSoundDistances(gg_snd_Poweringup, 600.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_Poweringup, 4000.0)
    call SetSoundConeAngles(gg_snd_Poweringup, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_Poweringup, 0.0, 0.0, 0.0)
    set gg_snd_DarkVictory=CreateSound("Sound\\Music\\mp3Music\\DarkVictory.mp3", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_DarkVictory, 75090)
    call SetSoundChannel(gg_snd_DarkVictory, 8)
    call SetSoundVolume(gg_snd_DarkVictory, 127)
    call SetSoundPitch(gg_snd_DarkVictory, 1.0)
    set gg_snd_SadMystery=CreateSound("Sound\\Music\\mp3Music\\SadMystery.mp3", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_SadMystery, 84494)
    call SetSoundChannel(gg_snd_SadMystery, 8)
    call SetSoundVolume(gg_snd_SadMystery, 127)
    call SetSoundPitch(gg_snd_SadMystery, 1.0)
    set gg_snd_DarkVictory01=CreateSound("Sound\\Music\\mp3Music\\DarkVictory.mp3", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_DarkVictory01, 75090)
    call SetSoundChannel(gg_snd_DarkVictory01, 8)
    call SetSoundVolume(gg_snd_DarkVictory01, 127)
    call SetSoundPitch(gg_snd_DarkVictory01, 1.0)
    set gg_snd_HeroicVictory=CreateSound("Sound\\Music\\mp3Music\\HeroicVictory.mp3", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_HeroicVictory, 53434)
    call SetSoundChannel(gg_snd_HeroicVictory, 8)
    call SetSoundVolume(gg_snd_HeroicVictory, 127)
    call SetSoundPitch(gg_snd_HeroicVictory, 1.0)
    set gg_snd_EggSackDeath1=CreateSound("Doodads\\Dungeon\\Terrain\\EggSack\\EggSackDeath1.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_EggSackDeath1, 2098)
    call SetSoundChannel(gg_snd_EggSackDeath1, 8)
    call SetSoundVolume(gg_snd_EggSackDeath1, - 1)
    call SetSoundPitch(gg_snd_EggSackDeath1, 1.0)
    set gg_snd_HumanVictory=CreateSound("Sound\\Music\\mp3Music\\HumanVictory.mp3", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_HumanVictory, 30211)
    call SetSoundChannel(gg_snd_HumanVictory, 0)
    call SetSoundVolume(gg_snd_HumanVictory, 127)
    call SetSoundPitch(gg_snd_HumanVictory, 1.0)
    set gg_snd_PursuitTheme=CreateSound("Sound\\Music\\mp3Music\\PursuitTheme.mp3", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_PursuitTheme, 82508)
    call SetSoundChannel(gg_snd_PursuitTheme, 8)
    call SetSoundVolume(gg_snd_PursuitTheme, 127)
    call SetSoundPitch(gg_snd_PursuitTheme, 1.0)
    set gg_snd_DragonYesAttack3=CreateSound("Units\\Creeps\\AzureDragon\\DragonYesAttack3.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_DragonYesAttack3, 1721)
    call SetSoundChannel(gg_snd_DragonYesAttack3, 8)
    call SetSoundVolume(gg_snd_DragonYesAttack3, - 1)
    call SetSoundPitch(gg_snd_DragonYesAttack3, 1.0)
    set gg_snd_Warning=CreateSound("Sound\\Interface\\Warning.wav", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_Warning, 1903)
    call SetSoundChannel(gg_snd_Warning, 0)
    call SetSoundVolume(gg_snd_Warning, - 1)
    call SetSoundPitch(gg_snd_Warning, 1.0)
    set gg_snd_MonsoonLightningHit=CreateSound("Abilities\\Spells\\Other\\Monsoon\\MonsoonLightningHit.wav", false, true, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_MonsoonLightningHit, 2414)
    call SetSoundChannel(gg_snd_MonsoonLightningHit, 0)
    call SetSoundVolume(gg_snd_MonsoonLightningHit, - 1)
    call SetSoundPitch(gg_snd_MonsoonLightningHit, 1.0)
    call SetSoundDistances(gg_snd_MonsoonLightningHit, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_MonsoonLightningHit, 3000.0)
    call SetSoundConeAngles(gg_snd_MonsoonLightningHit, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_MonsoonLightningHit, 0.0, 0.0, 0.0)
    set gg_snd_TempleOfTheDamnedWhat=CreateSound("Buildings\\Undead\\TempleOfTheDamned\\TempleOfTheDamnedWhat.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_TempleOfTheDamnedWhat, 3517)
    call SetSoundChannel(gg_snd_TempleOfTheDamnedWhat, 8)
    call SetSoundVolume(gg_snd_TempleOfTheDamnedWhat, 127)
    call SetSoundPitch(gg_snd_TempleOfTheDamnedWhat, 1.0)
    set gg_snd_Warning01=CreateSound("Sound\\Interface\\Warning.wav", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_Warning01, 1903)
    call SetSoundChannel(gg_snd_Warning01, 0)
    call SetSoundVolume(gg_snd_Warning01, - 1)
    call SetSoundPitch(gg_snd_Warning01, 1.0)
    set gg_snd_CharmTarget1=CreateSound("Abilities\\Spells\\Items\\AIco\\CharmTarget1.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_CharmTarget1, 2681)
    call SetSoundChannel(gg_snd_CharmTarget1, 8)
    call SetSoundVolume(gg_snd_CharmTarget1, - 1)
    call SetSoundPitch(gg_snd_CharmTarget1, 1.0)
    set gg_snd_ScourgeGlueScreen=CreateSound("Sound\\Ambient\\ScourgeGlueScreen.wav", true, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_ScourgeGlueScreen, 32304)
    call SetSoundChannel(gg_snd_ScourgeGlueScreen, 0)
    call SetSoundVolume(gg_snd_ScourgeGlueScreen, - 1)
    call SetSoundPitch(gg_snd_ScourgeGlueScreen, 1.0)
    set gg_snd_BlueFireBurstLoop=CreateSound("Sound\\Ambient\\DoodadEffects\\BlueFireBurstLoop.wav", true, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_BlueFireBurstLoop, 4000)
    call SetSoundChannel(gg_snd_BlueFireBurstLoop, 0)
    call SetSoundVolume(gg_snd_BlueFireBurstLoop, 80)
    call SetSoundPitch(gg_snd_BlueFireBurstLoop, 1.0)
    set gg_snd_MarkOfChaos01=CreateSound("Abilities\\Spells\\Human\\MarkOfChaos\\MarkOfChaos.wav", false, true, true, 10, 10, "SpellsEAX")
    call SetSoundDuration(gg_snd_MarkOfChaos01, 3999)
    call SetSoundChannel(gg_snd_MarkOfChaos01, 0)
    call SetSoundVolume(gg_snd_MarkOfChaos01, - 1)
    call SetSoundPitch(gg_snd_MarkOfChaos01, 1.0)
    call SetSoundDistances(gg_snd_MarkOfChaos01, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_MarkOfChaos01, 3000.0)
    call SetSoundConeAngles(gg_snd_MarkOfChaos01, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_MarkOfChaos01, 0.0, 0.0, 0.0)
    set gg_snd_Devour=CreateSound("Units\\Orc\\KotoBeast\\Devour.wav", false, true, true, 10, 10, "SpellsEAX")
    call SetSoundDuration(gg_snd_Devour, 1155)
    call SetSoundChannel(gg_snd_Devour, 0)
    call SetSoundVolume(gg_snd_Devour, - 1)
    call SetSoundPitch(gg_snd_Devour, 1.0)
    call SetSoundDistances(gg_snd_Devour, 0.0, 1500.0)
    call SetSoundDistanceCutoff(gg_snd_Devour, 1500.0)
    call SetSoundConeAngles(gg_snd_Devour, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_Devour, 0.0, 0.0, 0.0)
    set gg_snd_EggSackDeath101=CreateSound("Doodads\\Dungeon\\Terrain\\EggSack\\EggSackDeath1.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_EggSackDeath101, 2098)
    call SetSoundChannel(gg_snd_EggSackDeath101, 8)
    call SetSoundVolume(gg_snd_EggSackDeath101, - 1)
    call SetSoundPitch(gg_snd_EggSackDeath101, 1.0)
    set gg_snd_GameError=CreateSound("Sound\\Interface\\SecretFound.wav", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_GameError, 2525)
    call SetSoundChannel(gg_snd_GameError, 0)
    call SetSoundVolume(gg_snd_GameError, - 1)
    call SetSoundPitch(gg_snd_GameError, 1.0)
    set gg_snd_NecropolisUpgrade101=CreateSound("Buildings\\Undead\\Necropolis\\NecropolisUpgrade1.wav", false, true, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_NecropolisUpgrade101, 5823)
    call SetSoundChannel(gg_snd_NecropolisUpgrade101, 0)
    call SetSoundVolume(gg_snd_NecropolisUpgrade101, 127)
    call SetSoundPitch(gg_snd_NecropolisUpgrade101, 0.6)
    call SetSoundDistances(gg_snd_NecropolisUpgrade101, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_NecropolisUpgrade101, 3000.0)
    call SetSoundConeAngles(gg_snd_NecropolisUpgrade101, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_NecropolisUpgrade101, 0.0, 0.0, 0.0)
    set gg_snd_Warning02=CreateSound("Sound\\Interface\\Warning.wav", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_Warning02, 1903)
    call SetSoundChannel(gg_snd_Warning02, 0)
    call SetSoundVolume(gg_snd_Warning02, 127)
    call SetSoundPitch(gg_snd_Warning02, 1.0)
    set gg_snd_WayPointBling=CreateSound("Sound\\Interface\\WayPointBling.wav", false, true, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_WayPointBling, 361)
    call SetSoundChannel(gg_snd_WayPointBling, 11)
    call SetSoundVolume(gg_snd_WayPointBling, - 1)
    call SetSoundPitch(gg_snd_WayPointBling, 1.0)
    call SetSoundDistances(gg_snd_WayPointBling, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_WayPointBling, 3000.0)
    call SetSoundConeAngles(gg_snd_WayPointBling, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_WayPointBling, 0.0, 0.0, 0.0)
    set gg_snd_BlueFireBurst=CreateSound("Sound\\Ambient\\DoodadEffects\\BlueFireBurst.wav", false, true, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_BlueFireBurst, 1915)
    call SetSoundChannel(gg_snd_BlueFireBurst, 11)
    call SetSoundVolume(gg_snd_BlueFireBurst, - 1)
    call SetSoundPitch(gg_snd_BlueFireBurst, 1.0)
    call SetSoundDistances(gg_snd_BlueFireBurst, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_BlueFireBurst, 3000.0)
    call SetSoundConeAngles(gg_snd_BlueFireBurst, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_BlueFireBurst, 0.0, 0.0, 0.0)
    set gg_snd_LightningShieldTarget=CreateSound("Abilities\\Spells\\Orc\\LightningShield\\LightningShieldTarget.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_LightningShieldTarget, 3877)
    call SetSoundChannel(gg_snd_LightningShieldTarget, 8)
    call SetSoundVolume(gg_snd_LightningShieldTarget, - 1)
    call SetSoundPitch(gg_snd_LightningShieldTarget, 1.0)
    set gg_snd_Lever=CreateSound("Doodads\\Cinematic\\DungeonLever\\Lever.wav", false, true, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_Lever, 818)
    call SetSoundChannel(gg_snd_Lever, 0)
    call SetSoundVolume(gg_snd_Lever, - 1)
    call SetSoundPitch(gg_snd_Lever, 1.3)
    call SetSoundDistances(gg_snd_Lever, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_Lever, 3000.0)
    call SetSoundConeAngles(gg_snd_Lever, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_Lever, 0.0, 0.0, 0.0)
    set gg_snd_FlashBack1Second=CreateSound("Sound\\Ambient\\DoodadEffects\\FlashBack1Second.wav", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_FlashBack1Second, 2178)
    call SetSoundChannel(gg_snd_FlashBack1Second, 8)
    call SetSoundVolume(gg_snd_FlashBack1Second, - 1)
    call SetSoundPitch(gg_snd_FlashBack1Second, 1.1)
    set gg_snd_BlueFireBurst01=CreateSound("Sound\\Ambient\\DoodadEffects\\BlueFireBurst.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_BlueFireBurst01, 1915)
    call SetSoundChannel(gg_snd_BlueFireBurst01, 8)
    call SetSoundVolume(gg_snd_BlueFireBurst01, - 1)
    call SetSoundPitch(gg_snd_BlueFireBurst01, 1.0)
    set gg_snd_ArrangedTeamInvitation=CreateSound("Sound\\Interface\\ArrangedTeamInvitation.wav", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_ArrangedTeamInvitation, 2914)
    call SetSoundChannel(gg_snd_ArrangedTeamInvitation, 0)
    call SetSoundVolume(gg_snd_ArrangedTeamInvitation, - 1)
    call SetSoundPitch(gg_snd_ArrangedTeamInvitation, 1.0)
    set gg_snd_CityBuildingDeath1=CreateSound("Sound\\Buildings\\Death\\CityBuildingDeath1.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_CityBuildingDeath1, 3504)
    call SetSoundChannel(gg_snd_CityBuildingDeath1, 8)
    call SetSoundVolume(gg_snd_CityBuildingDeath1, 90)
    call SetSoundPitch(gg_snd_CityBuildingDeath1, 1.0)
    set gg_snd_MagicLariatLoop1=CreateSound("Abilities\\Spells\\Human\\AerialShackles\\MagicLariatLoop1.wav", false, true, true, 10, 10, "SpellsEAX")
    call SetSoundDuration(gg_snd_MagicLariatLoop1, 3230)
    call SetSoundChannel(gg_snd_MagicLariatLoop1, 0)
    call SetSoundVolume(gg_snd_MagicLariatLoop1, - 1)
    call SetSoundPitch(gg_snd_MagicLariatLoop1, 2.0)
    call SetSoundDistances(gg_snd_MagicLariatLoop1, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_MagicLariatLoop1, 3000.0)
    call SetSoundConeAngles(gg_snd_MagicLariatLoop1, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_MagicLariatLoop1, 0.0, 0.0, 0.0)
    set gg_snd_AxeMissileLaunch1=CreateSound("Abilities\\Weapons\\Axe\\AxeMissileLaunch1.wav", false, true, true, 10, 10, "MissilesEAX")
    call SetSoundDuration(gg_snd_AxeMissileLaunch1, 617)
    call SetSoundChannel(gg_snd_AxeMissileLaunch1, 0)
    call SetSoundVolume(gg_snd_AxeMissileLaunch1, - 1)
    call SetSoundPitch(gg_snd_AxeMissileLaunch1, 1.0)
    call SetSoundDistances(gg_snd_AxeMissileLaunch1, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_AxeMissileLaunch1, 3000.0)
    call SetSoundConeAngles(gg_snd_AxeMissileLaunch1, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_AxeMissileLaunch1, 0.0, 0.0, 0.0)
    set gg_snd_MeatwagonMissileHit1=CreateSound("Abilities\\Weapons\\MeatwagonMissile\\MeatwagonMissileHit1.wav", false, true, true, 10, 10, "MissilesEAX")
    call SetSoundDuration(gg_snd_MeatwagonMissileHit1, 1497)
    call SetSoundChannel(gg_snd_MeatwagonMissileHit1, 0)
    call SetSoundVolume(gg_snd_MeatwagonMissileHit1, - 1)
    call SetSoundPitch(gg_snd_MeatwagonMissileHit1, 1.0)
    call SetSoundDistances(gg_snd_MeatwagonMissileHit1, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_MeatwagonMissileHit1, 3000.0)
    call SetSoundConeAngles(gg_snd_MeatwagonMissileHit1, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_MeatwagonMissileHit1, 0.0, 0.0, 0.0)
    set gg_snd_TranquilityHealLoop1=CreateSound("Abilities\\Spells\\NightElf\\Tranquility\\TranquilityHealLoop1.wav", false, true, true, 10, 10, "SpellsEAX")
    call SetSoundDuration(gg_snd_TranquilityHealLoop1, 1123)
    call SetSoundChannel(gg_snd_TranquilityHealLoop1, 0)
    call SetSoundVolume(gg_snd_TranquilityHealLoop1, - 1)
    call SetSoundPitch(gg_snd_TranquilityHealLoop1, 2.0)
    call SetSoundDistances(gg_snd_TranquilityHealLoop1, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_TranquilityHealLoop1, 3000.0)
    call SetSoundConeAngles(gg_snd_TranquilityHealLoop1, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_TranquilityHealLoop1, 0.0, 0.0, 0.0)
    set gg_snd_SpiritLink1=CreateSound("Abilities\\Spells\\Orc\\SpiritLink\\SpiritLink1.wav", false, true, true, 10, 10, "SpellsEAX")
    call SetSoundDuration(gg_snd_SpiritLink1, 1764)
    call SetSoundChannel(gg_snd_SpiritLink1, 0)
    call SetSoundVolume(gg_snd_SpiritLink1, - 1)
    call SetSoundPitch(gg_snd_SpiritLink1, 1.0)
    call SetSoundDistances(gg_snd_SpiritLink1, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_SpiritLink1, 3000.0)
    call SetSoundConeAngles(gg_snd_SpiritLink1, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_SpiritLink1, 0.0, 0.0, 0.0)
    set gg_snd_PhoenixAttack=CreateSound("Abilities\\Weapons\\PhoenixMissile\\PhoenixAttack.wav", false, true, true, 10, 10, "MissilesEAX")
    call SetSoundDuration(gg_snd_PhoenixAttack, 1901)
    call SetSoundChannel(gg_snd_PhoenixAttack, 0)
    call SetSoundVolume(gg_snd_PhoenixAttack, - 1)
    call SetSoundPitch(gg_snd_PhoenixAttack, 1.0)
    call SetSoundDistances(gg_snd_PhoenixAttack, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_PhoenixAttack, 3000.0)
    call SetSoundConeAngles(gg_snd_PhoenixAttack, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_PhoenixAttack, 0.0, 0.0, 0.0)
    set gg_snd_InnerFireBirth=CreateSound("Abilities\\Spells\\Human\\InnerFire\\InnerFireBirth.wav", false, true, true, 10, 10, "SpellsEAX")
    call SetSoundDuration(gg_snd_InnerFireBirth, 2095)
    call SetSoundChannel(gg_snd_InnerFireBirth, 0)
    call SetSoundVolume(gg_snd_InnerFireBirth, - 1)
    call SetSoundPitch(gg_snd_InnerFireBirth, 1.0)
    call SetSoundDistances(gg_snd_InnerFireBirth, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_InnerFireBirth, 3000.0)
    call SetSoundConeAngles(gg_snd_InnerFireBirth, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_InnerFireBirth, 0.0, 0.0, 0.0)
    set gg_snd_EnchantedCellLoop=CreateSound("Sound\\Ambient\\DoodadEffects\\EnchantedCellLoop.wav", false, true, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_EnchantedCellLoop, 4998)
    call SetSoundChannel(gg_snd_EnchantedCellLoop, 0)
    call SetSoundVolume(gg_snd_EnchantedCellLoop, - 1)
    call SetSoundPitch(gg_snd_EnchantedCellLoop, 1.2)
    call SetSoundDistances(gg_snd_EnchantedCellLoop, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_EnchantedCellLoop, 3000.0)
    call SetSoundConeAngles(gg_snd_EnchantedCellLoop, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_EnchantedCellLoop, 0.0, 0.0, 0.0)
    set gg_snd_InnerFireBirth01=CreateSound("Abilities\\Spells\\Human\\InnerFire\\InnerFireBirth.wav", false, true, true, 10, 10, "SpellsEAX")
    call SetSoundDuration(gg_snd_InnerFireBirth01, 2095)
    call SetSoundChannel(gg_snd_InnerFireBirth01, 0)
    call SetSoundVolume(gg_snd_InnerFireBirth01, - 1)
    call SetSoundPitch(gg_snd_InnerFireBirth01, 1.0)
    call SetSoundDistances(gg_snd_InnerFireBirth01, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_InnerFireBirth01, 3000.0)
    call SetSoundConeAngles(gg_snd_InnerFireBirth01, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_InnerFireBirth01, 0.0, 0.0, 0.0)
    set gg_snd_StoneBridgeRise=CreateSound("Sound\\Ambient\\DoodadEffects\\StoneBridgeRise.wav", false, true, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_StoneBridgeRise, 4000)
    call SetSoundChannel(gg_snd_StoneBridgeRise, 0)
    call SetSoundVolume(gg_snd_StoneBridgeRise, - 1)
    call SetSoundPitch(gg_snd_StoneBridgeRise, 1.3)
    call SetSoundDistances(gg_snd_StoneBridgeRise, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_StoneBridgeRise, 3000.0)
    call SetSoundConeAngles(gg_snd_StoneBridgeRise, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_StoneBridgeRise, 0.0, 0.0, 0.0)
    set gg_snd_ObsidianStatueWhat2=CreateSound("Units\\Undead\\ObsidianStatue\\ObsidianStatueWhat2.wav", true, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_ObsidianStatueWhat2, 3024)
    call SetSoundChannel(gg_snd_ObsidianStatueWhat2, 0)
    call SetSoundVolume(gg_snd_ObsidianStatueWhat2, - 1)
    call SetSoundPitch(gg_snd_ObsidianStatueWhat2, 0.6)
    set gg_snd_ArtilleryCorpseExplodeDeath1=CreateSound("Sound\\Units\\Death\\ArtilleryCorpseExplodeDeath1.wav", true, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_ArtilleryCorpseExplodeDeath1, 1486)
    call SetSoundChannel(gg_snd_ArtilleryCorpseExplodeDeath1, 0)
    call SetSoundVolume(gg_snd_ArtilleryCorpseExplodeDeath1, - 1)
    call SetSoundPitch(gg_snd_ArtilleryCorpseExplodeDeath1, 0.6)
    set gg_snd_SargerasRoar02=CreateSound("Sound\\Ambient\\DoodadEffects\\SargerasRoar.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_SargerasRoar02, 4481)
    call SetSoundChannel(gg_snd_SargerasRoar02, 8)
    call SetSoundVolume(gg_snd_SargerasRoar02, - 1)
    call SetSoundPitch(gg_snd_SargerasRoar02, 0.8)
    set gg_snd_RainAmbience=CreateSound("Sound\\Ambient\\RainAmbience.wav", true, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_RainAmbience, 4417)
    call SetSoundChannel(gg_snd_RainAmbience, 0)
    call SetSoundVolume(gg_snd_RainAmbience, 127)
    call SetSoundPitch(gg_snd_RainAmbience, 1.2)
    set gg_snd_Step1=CreateSound("Sound\\Units\\Footsteps\\Step1.wav", false, true, true, 10, 10, "SpellsEAX")
    call SetSoundDuration(gg_snd_Step1, 1009)
    call SetSoundChannel(gg_snd_Step1, 0)
    call SetSoundVolume(gg_snd_Step1, - 1)
    call SetSoundPitch(gg_snd_Step1, 1.0)
    call SetSoundDistances(gg_snd_Step1, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_Step1, 3000.0)
    call SetSoundConeAngles(gg_snd_Step1, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_Step1, 0.0, 0.0, 0.0)
    set gg_snd_MetalHeavyBashMetal1=CreateSound("Sound\\Units\\Combat\\MetalHeavyBashMetal1.wav", false, true, true, 10, 10, "CombatSoundsEAX")
    call SetSoundDuration(gg_snd_MetalHeavyBashMetal1, 1340)
    call SetSoundChannel(gg_snd_MetalHeavyBashMetal1, 0)
    call SetSoundVolume(gg_snd_MetalHeavyBashMetal1, - 1)
    call SetSoundPitch(gg_snd_MetalHeavyBashMetal1, 1.0)
    call SetSoundDistances(gg_snd_MetalHeavyBashMetal1, 0.0, 10000.0)
    call SetSoundDistanceCutoff(gg_snd_MetalHeavyBashMetal1, 3000.0)
    call SetSoundConeAngles(gg_snd_MetalHeavyBashMetal1, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_MetalHeavyBashMetal1, 0.0, 0.0, 0.0)
    set gg_snd_Hint=CreateSound("Sound\\Interface\\Hint.wav", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_Hint, 2005)
    call SetSoundChannel(gg_snd_Hint, 0)
    call SetSoundVolume(gg_snd_Hint, - 1)
    call SetSoundPitch(gg_snd_Hint, 1.2)
    set gg_snd_FlakCannon=CreateSound("Abilities\\Spells\\Human\\FlakCannons\\FlakCannon.wav", false, true, true, 10, 10, "SpellsEAX")
    call SetSoundDuration(gg_snd_FlakCannon, 1419)
    call SetSoundChannel(gg_snd_FlakCannon, 0)
    call SetSoundVolume(gg_snd_FlakCannon, - 1)
    call SetSoundPitch(gg_snd_FlakCannon, 1.0)
    call SetSoundDistances(gg_snd_FlakCannon, 0.0, 1500.0)
    call SetSoundDistanceCutoff(gg_snd_FlakCannon, 1400.0)
    call SetSoundConeAngles(gg_snd_FlakCannon, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_FlakCannon, 0.0, 0.0, 0.0)
    set gg_snd_ThunderBoltMissileDeath=CreateSound("Abilities\\Spells\\Human\\StormBolt\\ThunderBoltMissileDeath.wav", false, true, true, 10, 10, "SpellsEAX")
    call SetSoundDuration(gg_snd_ThunderBoltMissileDeath, 2235)
    call SetSoundChannel(gg_snd_ThunderBoltMissileDeath, 0)
    call SetSoundVolume(gg_snd_ThunderBoltMissileDeath, - 1)
    call SetSoundPitch(gg_snd_ThunderBoltMissileDeath, 1.0)
    call SetSoundDistances(gg_snd_ThunderBoltMissileDeath, 0.0, 1500.0)
    call SetSoundDistanceCutoff(gg_snd_ThunderBoltMissileDeath, 1400.0)
    call SetSoundConeAngles(gg_snd_ThunderBoltMissileDeath, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_ThunderBoltMissileDeath, 0.0, 0.0, 0.0)
    set gg_snd_MarkOfChaos02=CreateSound("Abilities\\Spells\\Human\\MarkOfChaos\\MarkOfChaos.wav", false, true, true, 10, 10, "SpellsEAX")
    call SetSoundDuration(gg_snd_MarkOfChaos02, 3999)
    call SetSoundChannel(gg_snd_MarkOfChaos02, 0)
    call SetSoundVolume(gg_snd_MarkOfChaos02, - 1)
    call SetSoundPitch(gg_snd_MarkOfChaos02, 1.0)
    call SetSoundDistances(gg_snd_MarkOfChaos02, 0.0, 2000.0)
    call SetSoundDistanceCutoff(gg_snd_MarkOfChaos02, 1500.0)
    call SetSoundConeAngles(gg_snd_MarkOfChaos02, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_MarkOfChaos02, 0.0, 0.0, 0.0)
    set gg_snd_PlaceAncestralGuardian=CreateSound("Units\\Orc\\HealingWard\\PlaceAncestralGuardian.wav", false, false, true, 10, 10, "SpellsEAX")
    call SetSoundDuration(gg_snd_PlaceAncestralGuardian, 3062)
    call SetSoundChannel(gg_snd_PlaceAncestralGuardian, 0)
    call SetSoundVolume(gg_snd_PlaceAncestralGuardian, - 1)
    call SetSoundPitch(gg_snd_PlaceAncestralGuardian, 1.1)
    set gg_snd_StarfallCaster1=CreateSound("Abilities\\Spells\\NightElf\\Starfall\\StarfallCaster1.wav", false, false, true, 10, 10, "SpellsEAX")
    call SetSoundDuration(gg_snd_StarfallCaster1, 2208)
    call SetSoundChannel(gg_snd_StarfallCaster1, 0)
    call SetSoundVolume(gg_snd_StarfallCaster1, - 1)
    call SetSoundPitch(gg_snd_StarfallCaster1, 0.9)
    set gg_snd_ObsidianAvengerDeath1=CreateSound("Units\\Undead\\ObsidianStatue\\ObsidianAvengerDeath1.wav", false, true, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_ObsidianAvengerDeath1, 2202)
    call SetSoundChannel(gg_snd_ObsidianAvengerDeath1, 0)
    call SetSoundVolume(gg_snd_ObsidianAvengerDeath1, - 1)
    call SetSoundPitch(gg_snd_ObsidianAvengerDeath1, 0.8)
    call SetSoundDistances(gg_snd_ObsidianAvengerDeath1, 0.0, 2000.0)
    call SetSoundDistanceCutoff(gg_snd_ObsidianAvengerDeath1, 1500.0)
    call SetSoundConeAngles(gg_snd_ObsidianAvengerDeath1, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_ObsidianAvengerDeath1, 0.0, 0.0, 0.0)
    set gg_snd_TragicConfrontation=CreateSound("Sound\\Music\\mp3Music\\TragicConfrontation.mp3", false, false, false, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_TragicConfrontation, 72242)
    call SetSoundChannel(gg_snd_TragicConfrontation, 0)
    call SetSoundVolume(gg_snd_TragicConfrontation, 127)
    call SetSoundPitch(gg_snd_TragicConfrontation, 1.1)
    set gg_snd_UndeadDissipate2=CreateSound("Sound\\Units\\Undead\\Dissipate\\UndeadDissipate2.wav", false, false, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_UndeadDissipate2, 3612)
    call SetSoundChannel(gg_snd_UndeadDissipate2, 0)
    call SetSoundVolume(gg_snd_UndeadDissipate2, - 1)
    call SetSoundPitch(gg_snd_UndeadDissipate2, 1.0)
    set gg_snd_EntDeath1=CreateSound("Units\\Creeps\\CorruptedEnt\\EntDeath1.wav", false, true, true, 10, 10, "DefaultEAXON")
    call SetSoundDuration(gg_snd_EntDeath1, 2809)
    call SetSoundChannel(gg_snd_EntDeath1, 0)
    call SetSoundVolume(gg_snd_EntDeath1, - 1)
    call SetSoundPitch(gg_snd_EntDeath1, 1.0)
    call SetSoundDistances(gg_snd_EntDeath1, 0.0, 2000.0)
    call SetSoundDistanceCutoff(gg_snd_EntDeath1, 1500.0)
    call SetSoundConeAngles(gg_snd_EntDeath1, 0.0, 0.0, 127)
    call SetSoundConeOrientation(gg_snd_EntDeath1, 0.0, 0.0, 0.0)
endfunction

//***************************************************************************
//*
//*  Destructable Objects
//*
//***************************************************************************

function CreateAllDestructables takes nothing returns nothing
    local destructable d
    local trigger t
    local real life
    set gg_dest_B000_1811=BlzCreateDestructableWithSkin('B000', 8576.0, 3008.0, 270.000, 1.600, 0, 'B000')
    set gg_dest_B000_0656=BlzCreateDestructableWithSkin('B000', - 5888.0, 14272.0, 270.000, 1.600, 0, 'B000')
    set gg_dest_B000_1445=BlzCreateDestructableWithSkin('B000', - 10624.0, - 448.0, 270.000, 1.600, 0, 'B000')
    set d=BlzCreateDestructableWithSkin('B005', 11360.0, 6176.0, 74.000, 1.267, 5, 'B005')
    set t=CreateTrigger()
    call TriggerRegisterDeathEvent(t, d)
    call TriggerAddAction(t, function SaveDyingWidget)
    call TriggerAddAction(t, function Doodad006794_DropItems)
    set gg_dest_B009_5542=BlzCreateDestructableWithSkin('B009', - 6720.0, 3776.0, 0.000, 0.050, 0, 'B009')
    set gg_dest_B009_5540=BlzCreateDestructableWithSkin('B009', - 6272.0, 4288.0, 0.000, 0.050, 0, 'B009')
    set gg_dest_B009_5542=BlzCreateDestructableWithSkin('B009', - 6720.0, 3776.0, 0.000, 0.050, 0, 'B009')
    set gg_dest_B009_5548=BlzCreateDestructableWithSkin('B009', - 8960.0, 4608.0, 0.000, 0.050, 0, 'B009')
    set gg_dest_B009_5543=BlzCreateDestructableWithSkin('B009', - 7552.0, 3648.0, 0.000, 0.050, 0, 'B009')
    set gg_dest_B009_5547=BlzCreateDestructableWithSkin('B009', - 8256.0, 3776.0, 0.000, 0.050, 0, 'B009')
    set gg_dest_DTrx_0668=BlzCreateDestructableWithSkin('DTrx', - 12928.0, 7168.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_0657=BlzCreateDestructableWithSkin('DTrx', - 12928.0, 7616.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1464=BlzCreateDestructableWithSkin('DTrx', - 4608.0, - 3200.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1474=BlzCreateDestructableWithSkin('DTrx', - 4608.0, - 1984.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1484=BlzCreateDestructableWithSkin('DTrx', - 4608.0, - 2624.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1494=BlzCreateDestructableWithSkin('DTrx', 256.0, - 2560.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1504=BlzCreateDestructableWithSkin('DTrx', 256.0, - 1920.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1514=BlzCreateDestructableWithSkin('DTrx', 256.0, - 1280.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1524=BlzCreateDestructableWithSkin('DTrx', - 1600.0, - 3712.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1534=BlzCreateDestructableWithSkin('DTrx', - 2240.0, - 3712.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_0461=BlzCreateDestructableWithSkin('DTrx', - 5312.0, 15168.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_0450=BlzCreateDestructableWithSkin('DTrx', - 5312.0, 15680.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_2156=BlzCreateDestructableWithSkin('DTrx', 1536.0, - 13568.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_0257=BlzCreateDestructableWithSkin('DTrx', - 8064.0, 12160.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_9316=BlzCreateDestructableWithSkin('DTrx', 1536.0, - 15104.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_9311=BlzCreateDestructableWithSkin('DTrx', 1536.0, - 14592.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_9425=BlzCreateDestructableWithSkin('DTrx', 3840.0, - 12480.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_9308=BlzCreateDestructableWithSkin('DTrx', 3840.0, - 11968.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_2066=BlzCreateDestructableWithSkin('DTrx', - 2496.0, - 15296.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1998=BlzCreateDestructableWithSkin('DTrx', 6272.0, 8320.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1997=BlzCreateDestructableWithSkin('DTrx', 6912.0, 8320.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_0235=BlzCreateDestructableWithSkin('DTrx', - 8064.0, 12672.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1995=BlzCreateDestructableWithSkin('DTrx', 8192.0, 9600.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1994=BlzCreateDestructableWithSkin('DTrx', 6912.0, 9600.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1993=BlzCreateDestructableWithSkin('DTrx', 6272.0, 9600.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1992=BlzCreateDestructableWithSkin('DTrx', 4992.0, 9600.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1991=BlzCreateDestructableWithSkin('DTrx', 4992.0, 8320.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_0230=BlzCreateDestructableWithSkin('DTrx', - 12928.0, 6784.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_7025=BlzCreateDestructableWithSkin('DTrx', 0.0, 9856.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_7024=BlzCreateDestructableWithSkin('DTrx', 768.0, 8832.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_7023=BlzCreateDestructableWithSkin('DTrx', 768.0, 9856.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_7022=BlzCreateDestructableWithSkin('DTrx', - 3008.0, 9856.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_7021=BlzCreateDestructableWithSkin('DTrx', - 3840.0, 8768.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_7020=BlzCreateDestructableWithSkin('DTrx', - 3840.0, 9856.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_2442=BlzCreateDestructableWithSkin('DTrx', - 15872.0, - 7232.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_2432=BlzCreateDestructableWithSkin('DTrx', - 15872.0, - 6656.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_2422=BlzCreateDestructableWithSkin('DTrx', - 15872.0, - 6080.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_2412=BlzCreateDestructableWithSkin('DTrx', - 15872.0, - 5504.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_2402=BlzCreateDestructableWithSkin('DTrx', - 15872.0, - 4928.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_2061=BlzCreateDestructableWithSkin('DTrx', - 2496.0, - 11328.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_6090=BlzCreateDestructableWithSkin('DTrx', - 192.0, - 12096.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_6101=BlzCreateDestructableWithSkin('DTrx', - 192.0, - 12608.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_6104=BlzCreateDestructableWithSkin('DTrx', - 192.0, - 14016.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_6115=BlzCreateDestructableWithSkin('DTrx', - 192.0, - 14528.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_0243=BlzCreateDestructableWithSkin('DTrx', - 14976.0, 12160.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_3126=BlzCreateDestructableWithSkin('DTrx', 11136.0, - 3968.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_3131=BlzCreateDestructableWithSkin('DTrx', 11712.0, - 3968.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_3136=BlzCreateDestructableWithSkin('DTrx', 9728.0, - 1728.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_3141=BlzCreateDestructableWithSkin('DTrx', 10304.0, - 1728.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_0642=BlzCreateDestructableWithSkin('DTrx', - 9280.0, 10048.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_2150=BlzCreateDestructableWithSkin('DTrx', 1536.0, - 14080.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_1996=BlzCreateDestructableWithSkin('DTrx', 8192.0, 8320.0, 270.000, 1.000, 0, 'DTrx')
    set gg_dest_DTrx_0232=BlzCreateDestructableWithSkin('DTrx', - 14976.0, 12672.0, 270.000, 1.000, 0, 'DTrx')
    set d=BlzCreateDestructableWithSkin('LTcr', 1792.0, - 15296.0, 340.000, 1.018, 0, 'LTcr')
    set t=CreateTrigger()
    call TriggerRegisterDeathEvent(t, d)
    call TriggerAddAction(t, function SaveDyingWidget)
    call TriggerAddAction(t, function Doodad002870_DropItems)
    set d=BlzCreateDestructableWithSkin('LTcr', 2112.0, - 14976.0, 279.000, 0.946, 1, 'LTcr')
    set t=CreateTrigger()
    call TriggerRegisterDeathEvent(t, d)
    call TriggerAddAction(t, function SaveDyingWidget)
    call TriggerAddAction(t, function Doodad002878_DropItems)
    set gg_dest_XTmp_1430=BlzCreateDestructableWithSkin('XTmp', - 12800.0, 384.0, 90.000, 1.000, 0, 'XTmp')
    set gg_dest_XTmp_1429=BlzCreateDestructableWithSkin('XTmp', - 11776.0, 384.0, 90.000, 1.000, 0, 'XTmp')
    set gg_dest_YTab_4371=BlzCreateDestructableWithSkin('YTab', - 2720.0, 6048.0, 270.000, 1.000, 0, 'YTab')
    set gg_dest_YTab_4372=BlzCreateDestructableWithSkin('YTab', - 2720.0, 5984.0, 270.000, 1.000, 0, 'YTab')
    set gg_dest_YTab_4369=BlzCreateDestructableWithSkin('YTab', - 2720.0, 6176.0, 270.000, 1.000, 0, 'YTab')
    set gg_dest_YTab_4370=BlzCreateDestructableWithSkin('YTab', - 2720.0, 6112.0, 270.000, 1.000, 0, 'YTab')
    set gg_dest_YTab_4373=BlzCreateDestructableWithSkin('YTab', - 2720.0, 5920.0, 270.000, 1.000, 0, 'YTab')
endfunction

//***************************************************************************
//*
//*  Items
//*
//***************************************************************************

function CreateAllItems takes nothing returns nothing
    local integer itemID

    call BlzCreateItemWithSkin('I00K', - 5888.3, 14073.4, 'I00K')
    call BlzCreateItemWithSkin('I00L', - 10599.3, - 857.6, 'I00L')
    call BlzCreateItemWithSkin('I00N', 4134.5, 1946.0, 'I00N')
    call BlzCreateItemWithSkin('I00Y', 4675.1, - 12446.7, 'I00Y')
    call BlzCreateItemWithSkin('I015', 8610.0, 2708.4, 'I015')
endfunction

//***************************************************************************
//*
//*  Unit Creation
//*
//***************************************************************************

//===========================================================================
function CreateBuildingsForPlayer0 takes nothing returns nothing
    local player p= Player(0)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=BlzCreateUnitWithSkin(p, 'n00M', - 13056.0, - 640.0, 180.000, 'n00M')
    set u=BlzCreateUnitWithSkin(p, 'n00M', - 9152.0, 9536.0, 180.000, 'n00M')
    set u=BlzCreateUnitWithSkin(p, 'n00M', - 15808.0, 7872.0, 270.000, 'n00M')
    set u=BlzCreateUnitWithSkin(p, 'n00M', - 13888.0, - 13952.0, 180.000, 'n00M')
    set u=BlzCreateUnitWithSkin(p, 'n00M', - 2240.0, 5312.0, 180.000, 'n00M')
    set u=BlzCreateUnitWithSkin(p, 'n00M', - 6080.0, 9792.0, 270.000, 'n00M')
endfunction

//===========================================================================
function CreateUnitsForPlayer0 takes nothing returns nothing
    local player p= Player(0)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=BlzCreateUnitWithSkin(p, 'e003', - 9323.0, - 11696.6, 209.461, 'e003')
endfunction

//===========================================================================
function CreateNeutralHostile takes nothing returns nothing
    local player p= Player(PLAYER_NEUTRAL_AGGRESSIVE)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set gg_unit_h02A_0115=BlzCreateUnitWithSkin(p, 'h02A', 1759.4, - 11992.8, 0.000, 'h02A')
    set u=BlzCreateUnitWithSkin(p, 'h01Z', 2086.3, - 14783.1, 181.181, 'h01Z')
    set u=BlzCreateUnitWithSkin(p, 'h01Z', 2017.3, - 12236.3, 274.664, 'h01Z')
    set u=BlzCreateUnitWithSkin(p, 'h01Z', 1493.8, - 12179.2, 274.746, 'h01Z')
    set gg_unit_h02C_0124=BlzCreateUnitWithSkin(p, 'h02C', 1764.6, - 12118.7, 90.000, 'h02C')
    call UnitAddItemToSlotById(gg_unit_h02C_0124, 'I002', 0)
    set t=CreateTrigger()
    call TriggerRegisterUnitEvent(t, gg_unit_h02C_0124, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(t, gg_unit_h02C_0124, EVENT_UNIT_CHANGE_OWNER)
    call TriggerAddAction(t, function Unit000173_DropItems)
    set u=BlzCreateUnitWithSkin(p, 'h02D', 1922.4, - 13471.8, 37.508, 'h02D')
    set u=BlzCreateUnitWithSkin(p, 'h02D', 2018.6, - 13554.4, 259.066, 'h02D')
    set u=BlzCreateUnitWithSkin(p, 'h02D', 1881.7, - 15202.2, 304.495, 'h02D')
    set u=BlzCreateUnitWithSkin(p, 'h018', 11678.0, 9460.5, 260.090, 'h018')
    set t=CreateTrigger()
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_CHANGE_OWNER)
    call TriggerAddAction(t, function Unit000130_DropItems)
    set u=BlzCreateUnitWithSkin(p, 'n00B', 132.8, 7734.3, 300.650, 'n00B')
    set u=BlzCreateUnitWithSkin(p, 'n00B', 114.2, 7370.4, 350.387, 'n00B')
    set u=BlzCreateUnitWithSkin(p, 'n00B', 190.7, 7699.8, 13.129, 'n00B')
    set u=BlzCreateUnitWithSkin(p, 'n00B', - 89.8, 7498.0, 60.910, 'n00B')
    set u=BlzCreateUnitWithSkin(p, 'n00B', - 67.8, 7296.7, 191.783, 'n00B')
    set u=BlzCreateUnitWithSkin(p, 'n00B', 295.2, 7296.7, 39.299, 'n00B')
    set u=BlzCreateUnitWithSkin(p, 'n00B', 238.9, 7573.2, 177.973, 'n00B')
    set u=BlzCreateUnitWithSkin(p, 'n00C', 105.9, 7459.2, 107.856, 'n00C')
    set u=BlzCreateUnitWithSkin(p, 'n00C', 305.6, 7712.0, 331.742, 'n00C')
    set u=BlzCreateUnitWithSkin(p, 'n00D', 323.5, 7535.1, 207.835, 'n00D')
    set u=BlzCreateUnitWithSkin(p, 'n00D', 49.2, 7565.5, 1.637, 'n00D')
    set u=BlzCreateUnitWithSkin(p, 'n00D', 69.0, 7757.4, 280.995, 'n00D')
    set u=BlzCreateUnitWithSkin(p, 'n00D', 328.5, 7346.7, 76.149, 'n00D')
endfunction

//===========================================================================
function CreateNeutralPassiveBuildings takes nothing returns nothing
    local player p= Player(PLAYER_NEUTRAL_PASSIVE)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=BlzCreateUnitWithSkin(p, 'h00O', - 11200.0, 9152.0, 270.000, 'h00O')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'h00R', - 11200.0, 9280.0, 180.000, 'h00R')
    call SetUnitColor(u, ConvertPlayerColor(4))
    set gg_unit_h02O_0017=BlzCreateUnitWithSkin(p, 'h02O', - 12160.0, 13056.0, 270.000, 'h02O')
    set u=BlzCreateUnitWithSkin(p, 'h00Q', - 3840.0, - 3776.0, 90.000, 'h00Q')
    call SetUnitColor(u, ConvertPlayerColor(3))
    set u=BlzCreateUnitWithSkin(p, 'h00P', - 14528.0, - 5888.0, 180.000, 'h00P')
    call SetUnitColor(u, ConvertPlayerColor(1))
    set u=BlzCreateUnitWithSkin(p, 'n00x', 10261.3, 5538.4, 90.000, 'n00x')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set u=BlzCreateUnitWithSkin(p, 'h023', - 10816.0, 13120.0, 270.000, 'h023')
    set u=BlzCreateUnitWithSkin(p, 'h017', - 12224.0, 11712.0, 270.000, 'h017')
    set u=BlzCreateUnitWithSkin(p, 'h00G', - 10816.0, 11712.0, 270.000, 'h00G')
    set u=BlzCreateUnitWithSkin(p, 'h00P', 8192.0, 3456.0, 220.888, 'h00P')
    call SetUnitColor(u, ConvertPlayerColor(1))
    set u=BlzCreateUnitWithSkin(p, 'h00O', 8192.0, 3584.0, 270.000, 'h00O')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'h00G', 8320.0, 3584.0, 270.000, 'h00G')
    set u=BlzCreateUnitWithSkin(p, 'h017', 8896.0, 3520.0, 270.000, 'h017')
    set u=BlzCreateUnitWithSkin(p, 'h014', 8896.0, 4160.0, 270.000, 'h014')
    set u=BlzCreateUnitWithSkin(p, 'h00R', 8320.0, 3456.0, 0.000, 'h00R')
    call SetUnitColor(u, ConvertPlayerColor(4))
    set u=BlzCreateUnitWithSkin(p, 'h00G', - 14528.0, - 5632.0, 270.000, 'h00G')
    set u=BlzCreateUnitWithSkin(p, 'h00G', - 7936.0, - 4096.0, 270.000, 'h00G')
    set u=BlzCreateUnitWithSkin(p, 'h00G', - 4608.0, - 1536.0, 270.000, 'h00G')
    set u=BlzCreateUnitWithSkin(p, 'h00G', - 7552.0, - 4096.0, 270.000, 'h00G')
    set gg_unit_h011_0100=BlzCreateUnitWithSkin(p, 'h011', - 7808.0, - 6400.0, 270.000, 'h011')
    set u=BlzCreateUnitWithSkin(p, 'h014', - 11840.0, 9728.0, 270.000, 'h014')
    set u=BlzCreateUnitWithSkin(p, 'h014', - 1088.0, - 3712.0, 270.000, 'h014')
    set u=BlzCreateUnitWithSkin(p, 'h014', - 10176.0, - 3648.0, 270.000, 'h014')
    set u=BlzCreateUnitWithSkin(p, 'h016', - 15872.0, - 3968.0, 270.000, 'h016')
    set u=BlzCreateUnitWithSkin(p, 'h00P', - 14400.0, 6784.0, 180.000, 'h00P')
    call SetUnitColor(u, ConvertPlayerColor(1))
    set u=BlzCreateUnitWithSkin(p, 'h00G', - 11584.0, 3776.0, 270.000, 'h00G')
    set u=BlzCreateUnitWithSkin(p, 'h023', - 320.0, - 1024.0, 270.000, 'h023')
    set u=BlzCreateUnitWithSkin(p, 'h023', - 15872.0, - 4288.0, 270.000, 'h023')
    set u=BlzCreateUnitWithSkin(p, 'h023', - 13056.0, - 896.0, 270.000, 'h023')
    set u=BlzCreateUnitWithSkin(p, 'h017', - 3200.0, - 11904.0, 270.000, 'h017')
    set u=BlzCreateUnitWithSkin(p, 'h023', - 3200.0, - 14720.0, 270.000, 'h023')
    set u=BlzCreateUnitWithSkin(p, 'h023', - 12928.0, 3776.0, 270.000, 'h023')
    set gg_unit_h049_0139=BlzCreateUnitWithSkin(p, 'h049', - 11776.0, 7360.0, 270.000, 'h049')
    set u=BlzCreateUnitWithSkin(p, 'h017', - 4096.0, - 3776.0, 270.000, 'h017')
    set u=BlzCreateUnitWithSkin(p, 'h00O', - 12224.0, - 960.0, 270.000, 'h00O')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set gg_unit_h04X_0148=BlzCreateUnitWithSkin(p, 'h04X', - 7488.0, 7168.0, 270.000, 'h04X')
    call SetUnitColor(gg_unit_h04X_0148, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'h00R', - 11840.0, - 960.0, 270.000, 'h00R')
    call SetUnitColor(u, ConvertPlayerColor(4))
    set gg_unit_h02O_0151=BlzCreateUnitWithSkin(p, 'h02O', - 13696.0, 5184.0, 270.000, 'h02O')
    set gg_unit_h019_0154=BlzCreateUnitWithSkin(p, 'h019', 10246.4, 6316.2, 270.000, 'h019')
    set gg_unit_h019_0155=BlzCreateUnitWithSkin(p, 'h019', - 11545.6, 15628.2, 270.000, 'h019')
    set gg_unit_h04X_0172=BlzCreateUnitWithSkin(p, 'h04X', - 8704.0, 6400.0, 270.000, 'h04X')
    call SetUnitColor(gg_unit_h04X_0172, ConvertPlayerColor(0))
    set gg_unit_h04X_0173=BlzCreateUnitWithSkin(p, 'h04X', - 6016.0, 6336.0, 270.000, 'h04X')
    call SetUnitColor(gg_unit_h04X_0173, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n00x', - 12720.8, 2385.9, 221.780, 'n00x')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set gg_unit_h02O_0184=BlzCreateUnitWithSkin(p, 'h02O', - 11904.0, - 11968.0, 270.000, 'h02O')
    set u=BlzCreateUnitWithSkin(p, 'h014', - 12032.0, - 14592.0, 270.000, 'h014')
    set u=BlzCreateUnitWithSkin(p, 'h00G', - 4800.0, - 14656.0, 270.000, 'h00G')
    set u=BlzCreateUnitWithSkin(p, 'h00G', - 4800.0, - 11968.0, 270.000, 'h00G')
    set gg_unit_h03Z_0188=BlzCreateUnitWithSkin(p, 'h03Z', - 9664.0, 10112.0, 270.000, 'h03Z')
    set u=BlzCreateUnitWithSkin(p, 'h00P', - 9472.0, - 15360.0, 270.000, 'h00P')
    call SetUnitColor(u, ConvertPlayerColor(1))
    set u=BlzCreateUnitWithSkin(p, 'h00Q', - 9216.0, - 15360.0, 270.000, 'h00Q')
    call SetUnitColor(u, ConvertPlayerColor(3))
    set u=BlzCreateUnitWithSkin(p, 'h00O', - 9472.0, - 11264.0, 270.000, 'h00O')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'h00R', - 9152.0, - 11264.0, 270.000, 'h00R')
    call SetUnitColor(u, ConvertPlayerColor(4))
    set u=BlzCreateUnitWithSkin(p, 'h00G', 5568.0, 14720.0, 270.000, 'h00G')
    set u=BlzCreateUnitWithSkin(p, 'h017', 5568.0, 14912.0, 270.000, 'h017')
    set gg_unit_h02O_0207=BlzCreateUnitWithSkin(p, 'h02O', - 10496.0, - 3648.0, 270.000, 'h02O')
    set u=BlzCreateUnitWithSkin(p, 'h017', - 3264.0, 13504.0, 270.000, 'h017')
    set u=BlzCreateUnitWithSkin(p, 'h014', - 15744.0, 4416.0, 270.000, 'h014')
    set gg_unit_h012_0217=BlzCreateUnitWithSkin(p, 'h012', 10304.0, - 4096.0, 270.000, 'h012')
    set u=BlzCreateUnitWithSkin(p, 'h00G', - 1216.0, 13504.0, 270.000, 'h00G')
    set u=BlzCreateUnitWithSkin(p, 'h00G', - 6592.0, 12608.0, 270.000, 'h00G')
    set gg_unit_h02O_0257=BlzCreateUnitWithSkin(p, 'h02O', - 1856.0, 8576.0, 270.000, 'h02O')
    set u=BlzCreateUnitWithSkin(p, 'h023', - 832.0, 8064.0, 270.000, 'h023')
    set gg_unit_h02O_0262=BlzCreateUnitWithSkin(p, 'h02O', - 6848.0, 12544.0, 270.000, 'h02O')
    set u=BlzCreateUnitWithSkin(p, 'h00G', - 2240.0, 8064.0, 270.000, 'h00G')
    set u=BlzCreateUnitWithSkin(p, 'h04S', - 1088.0, 8576.0, 270.000, 'h04S')
endfunction

//===========================================================================
function CreateNeutralPassive takes nothing returns nothing
    local player p= Player(PLAYER_NEUTRAL_PASSIVE)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set gg_unit_h001_0002=BlzCreateUnitWithSkin(p, 'h001', - 8091.9, 12158.2, 1.830, 'h001')
    set gg_unit_h04I_0012=BlzCreateUnitWithSkin(p, 'h04I', - 1484.6, 9428.8, 0.000, 'h04I')
    set gg_unit_h000_0013=BlzCreateUnitWithSkin(p, 'h000', - 11514.4, 12559.8, 0.210, 'h000')
    set gg_unit_h001_0016=BlzCreateUnitWithSkin(p, 'h001', - 14969.3, 12654.1, 1.830, 'h001')
    set gg_unit_h003_0018=BlzCreateUnitWithSkin(p, 'h003', 14236.8, - 8238.0, 345.170, 'h003')
    set gg_unit_h004_0019=BlzCreateUnitWithSkin(p, 'h004', 12293.0, 14634.7, 0.000, 'h004')
    set gg_unit_h002_0020=BlzCreateUnitWithSkin(p, 'h002', 15201.2, 14994.7, 7.110, 'h002')
    set gg_unit_h002_0021=BlzCreateUnitWithSkin(p, 'h002', 15337.5, 14856.8, 0.229, 'h002')
    set gg_unit_h004_0023=BlzCreateUnitWithSkin(p, 'h004', 12277.9, 15908.4, 0.000, 'h004')
    set gg_unit_h006_0026=BlzCreateUnitWithSkin(p, 'h006', - 15145.7, 6876.8, 0.000, 'h006')
    set gg_unit_h007_0027=BlzCreateUnitWithSkin(p, 'h007', 7809.9, - 12085.6, 0.000, 'h007')
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 9280.9, - 3028.2, 33.360, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set gg_unit_h009_0029=BlzCreateUnitWithSkin(p, 'h009', 9715.5, - 8272.5, 0.000, 'h009')
    set gg_unit_h00A_0030=BlzCreateUnitWithSkin(p, 'h00A', - 13058.3, 2436.5, 0.000, 'h00A')
    set gg_unit_h00B_0031=BlzCreateUnitWithSkin(p, 'h00B', - 11780.6, 387.3, 270.000, 'h00B')
    set gg_unit_h00B_0032=BlzCreateUnitWithSkin(p, 'h00B', - 12807.2, 376.1, 270.000, 'h00B')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 8352.3, 12431.9, 230.258, 'e003')
    set gg_unit_h001_0041=BlzCreateUnitWithSkin(p, 'h001', - 4629.8, - 3198.9, 1.830, 'h001')
    set gg_unit_h001_0042=BlzCreateUnitWithSkin(p, 'h001', 241.1, - 1904.4, 1.830, 'h001')
    set gg_unit_h001_0043=BlzCreateUnitWithSkin(p, 'h001', - 2279.9, - 3713.7, 1.830, 'h001')
    set gg_unit_h001_0044=BlzCreateUnitWithSkin(p, 'h001', - 1618.7, - 3712.9, 1.830, 'h001')
    set gg_unit_h002_0045=BlzCreateUnitWithSkin(p, 'h002', 15423.1, 14862.0, 3.240, 'h002')
    set gg_unit_h002_0046=BlzCreateUnitWithSkin(p, 'h002', 15520.6, 15073.6, 6.105, 'h002')
    set gg_unit_h004_0047=BlzCreateUnitWithSkin(p, 'h004', 10608.6, 15904.5, 0.000, 'h004')
    set gg_unit_h004_0048=BlzCreateUnitWithSkin(p, 'h004', 10617.7, 14610.4, 0.000, 'h004')
    set gg_unit_h00X_0049=BlzCreateUnitWithSkin(p, 'h00X', 9336.7, - 14374.2, 107.380, 'h00X')
    set gg_unit_h00Y_0050=BlzCreateUnitWithSkin(p, 'h00Y', - 15030.1, - 13317.7, 90.000, 'h00Y')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 647.1, - 14281.9, 145.463, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 683.9, - 12347.9, 208.692, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'n003', 6404.5, 5184.5, 98.254, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', 8321.4, 6625.5, 285.137, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', 10400.1, 9341.2, 90.310, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'h010', - 7136.7, - 4593.4, 233.770, 'h010')
    set u=BlzCreateUnitWithSkin(p, 'h010', - 8309.6, - 4588.9, 342.040, 'h010')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 11386.8, 9459.6, 0.000, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 11530.8, 15337.2, 0.000, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 345.2, - 1535.3, 0.000, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 7759.5, - 4193.7, 0.000, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 12645.6, - 382.9, 0.000, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 10607.6, - 261.9, 0.000, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'n000', - 11008.4, - 4733.9, 92.233, 'n000')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 7393.7, - 1730.8, 0.000, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'n003', 11530.6, 8271.8, 115.393, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set gg_unit_e012_0074=BlzCreateUnitWithSkin(p, 'e012', - 7143.6, - 13306.4, 353.480, 'e012')
    set u=BlzCreateUnitWithSkin(p, 'n003', 6532.0, 2378.4, 152.274, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'e003', 8592.8, 4050.6, 0.000, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'n000', - 10963.5, - 4764.8, 298.453, 'n000')
    set u=BlzCreateUnitWithSkin(p, 'n000', - 10579.1, - 4705.5, 281.544, 'n000')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 3331.5, - 3600.4, 0.000, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 15528.4, - 3997.2, 0.000, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'n000', - 10543.6, - 4774.1, 358.341, 'n000')
    set u=BlzCreateUnitWithSkin(p, 'n001', - 10127.9, - 4715.3, 356.870, 'n001')
    set t=CreateTrigger()
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_CHANGE_OWNER)
    call TriggerAddAction(t, function Unit000090_DropItems)
    set u=BlzCreateUnitWithSkin(p, 'n003', 11389.9, 2495.1, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n001', - 10066.4, - 4776.1, 356.869, 'n001')
    set u=BlzCreateUnitWithSkin(p, 'n001', - 9701.6, - 4691.6, 356.869, 'n001')
    set u=BlzCreateUnitWithSkin(p, 'n003', 11373.9, 4807.7, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n001', - 9703.1, - 4779.2, 356.869, 'n001')
    set u=BlzCreateUnitWithSkin(p, 'n002', 4869.4, 2919.3, 351.130, 'n002')
    set t=CreateTrigger()
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_CHANGE_OWNER)
    call TriggerAddAction(t, function Unit000134_DropItems)
    set gg_unit_e012_0092=BlzCreateUnitWithSkin(p, 'e012', 7469.5, 6053.6, 353.480, 'e012')
    set u=BlzCreateUnitWithSkin(p, 'n003', 6409.1, 2485.4, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', 10145.6, 2080.4, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', 11362.8, 7666.7, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', 9162.3, 9343.8, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'h026', 4804.0, - 12817.0, 32.280, 'h026')
    set u=BlzCreateUnitWithSkin(p, 'h025', 4584.8, - 12464.7, 224.344, 'h025')
    set u=BlzCreateUnitWithSkin(p, 'n003', 9443.2, 9955.6, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'h025', 4374.7, - 12748.2, 305.876, 'h025')
    set u=BlzCreateUnitWithSkin(p, 'h025', 4735.4, - 12917.6, 171.476, 'h025')
    set u=BlzCreateUnitWithSkin(p, 'h025', 4306.9, - 12450.5, 301.110, 'h025')
    set u=BlzCreateUnitWithSkin(p, 'h025', 4484.2, - 12223.2, 99.403, 'h025')
    set u=BlzCreateUnitWithSkin(p, 'h025', 4702.6, - 12254.0, 121.144, 'h025')
    set u=BlzCreateUnitWithSkin(p, 'h025', 4127.3, - 12192.7, 9.140, 'h025')
    set u=BlzCreateUnitWithSkin(p, 'h025', 4734.9, - 12134.0, 310.419, 'h025')
    set u=BlzCreateUnitWithSkin(p, 'h025', 4309.2, - 12935.9, 342.000, 'h025')
    set u=BlzCreateUnitWithSkin(p, 'h026', 4216.2, - 12903.8, 32.280, 'h026')
    set u=BlzCreateUnitWithSkin(p, 'h026', 4735.9, - 12326.3, 32.280, 'h026')
    set u=BlzCreateUnitWithSkin(p, 'h026', 4268.6, - 12007.3, 32.280, 'h026')
    set gg_unit_h029_0114=BlzCreateUnitWithSkin(p, 'h029', 14933.6, 14934.6, 224.290, 'h029')
    set gg_unit_h02B_0116=BlzCreateUnitWithSkin(p, 'h02B', 14877.9, 16272.2, 331.500, 'h02B')
    set u=BlzCreateUnitWithSkin(p, 'n003', 6059.2, 8835.6, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', 4727.1, 5829.8, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set gg_unit_h002_0138=BlzCreateUnitWithSkin(p, 'h002', 15919.5, 14975.3, 2.064, 'h002')
    set u=BlzCreateUnitWithSkin(p, 'n003', 4467.3, 3875.1, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', 4020.3, 1770.6, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set gg_unit_h048_0143=BlzCreateUnitWithSkin(p, 'h048', - 6867.2, - 1149.7, 270.000, 'h048')
    set gg_unit_h04A_0144=BlzCreateUnitWithSkin(p, 'h04A', - 14594.7, - 6775.0, 183.180, 'h04A')
    set u=BlzCreateUnitWithSkin(p, 'n00A', - 3400.9, 5896.5, 315.710, 'n00A')
    set t=CreateTrigger()
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_CHANGE_OWNER)
    call TriggerAddAction(t, function Unit000225_DropItems)
    set u=BlzCreateUnitWithSkin(p, 'n004', 11040.0, 2515.5, 238.810, 'n004')
    set t=CreateTrigger()
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_CHANGE_OWNER)
    call TriggerAddAction(t, function Unit000072_DropItems)
    set gg_unit_u000_0150=BlzCreateUnitWithSkin(p, 'u000', 11712.2, 2655.2, 174.670, 'u000')
    set gg_unit_h002_0153=BlzCreateUnitWithSkin(p, 'h002', 16049.8, 14980.7, 0.000, 'h002')
    set gg_unit_h004_0156=BlzCreateUnitWithSkin(p, 'h004', 8827.6, 15916.2, 0.000, 'h004')
    set gg_unit_h004_0157=BlzCreateUnitWithSkin(p, 'h004', 8827.4, 14640.0, 0.000, 'h004')
    set gg_unit_h002_0158=BlzCreateUnitWithSkin(p, 'h002', 16298.2, 15146.9, 8.138, 'h002')
    set gg_unit_h002_0159=BlzCreateUnitWithSkin(p, 'h002', 16284.3, 15065.7, 10.049, 'h002')
    set gg_unit_h004_0160=BlzCreateUnitWithSkin(p, 'h004', 6919.3, 15902.1, 0.000, 'h004')
    set gg_unit_h004_0161=BlzCreateUnitWithSkin(p, 'h004', 6919.1, 14625.9, 0.000, 'h004')
    set gg_unit_h001_0162=BlzCreateUnitWithSkin(p, 'h001', - 194.2, - 14028.3, 1.830, 'h001')
    set gg_unit_h001_0163=BlzCreateUnitWithSkin(p, 'h001', - 213.9, - 12106.4, 1.830, 'h001')
    set gg_unit_h04B_0165=BlzCreateUnitWithSkin(p, 'h04B', 11378.8, - 2097.5, 2.230, 'h04B')
    set u=BlzCreateUnitWithSkin(p, 'n003', 4766.2, 9085.8, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', 5279.5, 7747.4, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', 8399.6, 6998.4, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', 4784.1, 5631.4, 193.887, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', 6039.0, 4937.2, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', 5152.6, 3416.4, 0.549, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 11710.8, - 570.7, 33.360, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 1396.8, - 1732.4, 6.590, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set u=BlzCreateUnitWithSkin(p, 'n00I', 15088.9, 15615.3, 297.230, 'n00I')
    call SetUnitColor(u, ConvertPlayerColor(3))
    call IssueImmediateOrder(u, "")
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 3470.2, - 1509.6, 33.360, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set gg_unit_h004_0179=BlzCreateUnitWithSkin(p, 'h004', 382.4, 15585.8, 0.000, 'h004')
    set gg_unit_h03J_0180=BlzCreateUnitWithSkin(p, 'h03J', 16106.9, 16192.0, 270.000, 'h03J')
    set gg_unit_h03K_0181=BlzCreateUnitWithSkin(p, 'h03K', 15954.9, 16281.4, 270.000, 'h03K')
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 3487.1, - 2072.2, 33.360, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set gg_unit_h02I_0183=BlzCreateUnitWithSkin(p, 'h02I', 6922.8, 8278.4, 90.000, 'h02I')
    set u=BlzCreateUnitWithSkin(p, 'h04O', 331.8, 5853.6, 220.710, 'h04O')
    set u=BlzCreateUnitWithSkin(p, 'n00A', - 3353.2, 6161.3, 315.710, 'n00A')
    set t=CreateTrigger()
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_CHANGE_OWNER)
    call TriggerAddAction(t, function Unit000227_DropItems)
    set u=BlzCreateUnitWithSkin(p, 'n00A', - 3032.3, 6086.8, 315.710, 'n00A')
    set t=CreateTrigger()
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_CHANGE_OWNER)
    call TriggerAddAction(t, function Unit000201_DropItems)
    set gg_unit_h008_0196=BlzCreateUnitWithSkin(p, 'h008', 10173.9, - 11967.6, 224.960, 'h008')
    set gg_unit_h01A_0197=BlzCreateUnitWithSkin(p, 'h01A', 12050.4, - 11774.9, 15.680, 'h01A')
    call SetUnitColor(gg_unit_h01A_0197, ConvertPlayerColor(4))
    set gg_unit_h02H_0198=BlzCreateUnitWithSkin(p, 'h02H', 16099.1, 15784.5, 206.030, 'h02H')
    set gg_unit_h004_0199=BlzCreateUnitWithSkin(p, 'h004', 5240.2, 15893.0, 0.000, 'h004')
    set gg_unit_h02L_0202=BlzCreateUnitWithSkin(p, 'h02L', 16295.3, 16075.2, 137.790, 'h02L')
    set gg_unit_h02K_0203=BlzCreateUnitWithSkin(p, 'h02K', - 15882.1, - 4950.5, 0.000, 'h02K')
    set gg_unit_h02K_0204=BlzCreateUnitWithSkin(p, 'h02K', - 15882.9, - 7273.2, 0.000, 'h02K')
    set gg_unit_h02L_0205=BlzCreateUnitWithSkin(p, 'h02L', 16343.5, 16218.8, 137.790, 'h02L')
    set gg_unit_h004_0206=BlzCreateUnitWithSkin(p, 'h004', 1921.6, 15910.7, 0.000, 'h004')
    set gg_unit_h03O_0208=BlzCreateUnitWithSkin(p, 'h03O', 7349.7, 6069.8, 340.740, 'h03O')
    set gg_unit_h03T_0209=BlzCreateUnitWithSkin(p, 'h03T', 10863.7, - 10295.3, 341.430, 'h03T')
    set u=BlzCreateUnitWithSkin(p, 'n003', 10859.3, - 3009.6, 98.254, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set gg_unit_h02Q_0212=BlzCreateUnitWithSkin(p, 'h02Q', 15001.8, - 14525.6, 205.250, 'h02Q')
    set gg_unit_h004_0213=BlzCreateUnitWithSkin(p, 'h004', - 2237.7, 15209.1, 0.000, 'h004')
    set gg_unit_h02S_0215=BlzCreateUnitWithSkin(p, 'h02S', 15499.0, 16114.0, 0.000, 'h02S')
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 10731.6, - 868.4, 33.360, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set gg_unit_n006_0218=BlzCreateUnitWithSkin(p, 'n006', 7884.5, 4513.9, 21.303, 'n006')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 15176.0, - 6608.5, 0.000, 'e003')
    set gg_unit_h004_0221=BlzCreateUnitWithSkin(p, 'h004', 3577.5, 15905.7, 0.000, 'h004')
    set u=BlzCreateUnitWithSkin(p, 'e003', 1926.1, 15560.9, 0.000, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 9330.1, - 15088.9, 0.000, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'e003', - 12081.6, 77.3, 0.000, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'n00A', - 3039.9, 5775.9, 315.710, 'n00A')
    set t=CreateTrigger()
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_CHANGE_OWNER)
    call TriggerAddAction(t, function Unit000264_DropItems)
    set u=BlzCreateUnitWithSkin(p, 'n00A', - 3151.9, 5792.2, 315.710, 'n00A')
    set t=CreateTrigger()
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(t, u, EVENT_UNIT_CHANGE_OWNER)
    call TriggerAddAction(t, function Unit000263_DropItems)
    set u=BlzCreateUnitWithSkin(p, 'n003', - 82.2, 4354.6, 48.887, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', - 136.1, 4800.6, 98.254, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', - 98.4, 4651.5, 269.610, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'e003', - 10862.2, - 4316.7, 0.000, 'e003')
    set u=BlzCreateUnitWithSkin(p, 'n003', 16.8, 4354.2, 215.702, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', 378.9, 4337.4, 326.391, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', - 8.8, 4822.1, 315.542, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'n003', 142.6, 4632.6, 221.473, 'n003')
    call SetUnitColor(u, ConvertPlayerColor(0))
    set u=BlzCreateUnitWithSkin(p, 'nech', - 3059.8, 4416.4, 257.363, 'nech')
    set u=BlzCreateUnitWithSkin(p, 'nech', - 3030.3, 4596.3, 257.560, 'nech')
    set u=BlzCreateUnitWithSkin(p, 'nech', - 3122.2, 4619.5, 257.483, 'nech')
    set u=BlzCreateUnitWithSkin(p, 'nech', - 3314.4, 4338.7, 193.255, 'nech')
    set u=BlzCreateUnitWithSkin(p, 'nfro', - 2949.5, 4708.8, 312.516, 'nfro')
    set u=BlzCreateUnitWithSkin(p, 'necr', - 3207.7, 4441.5, 285.587, 'necr')
    set u=BlzCreateUnitWithSkin(p, 'necr', - 3434.3, 4411.5, 23.369, 'necr')
    set u=BlzCreateUnitWithSkin(p, 'necr', - 3087.8, 4340.9, 112.492, 'necr')
    set u=BlzCreateUnitWithSkin(p, 'nshe', - 3137.4, 4699.3, 267.426, 'nshe')
    set u=BlzCreateUnitWithSkin(p, 'nshe', - 3007.4, 4787.7, 124.149, 'nshe')
    set u=BlzCreateUnitWithSkin(p, 'nshe', - 3238.0, 4788.4, 313.351, 'nshe')
    set u=BlzCreateUnitWithSkin(p, 'nder', - 3016.0, 4520.4, 317.086, 'nder')
    set u=BlzCreateUnitWithSkin(p, 'h04J', - 26.2, 5759.6, 343.179, 'h04J')
    set u=BlzCreateUnitWithSkin(p, 'h04J', 189.3, 5819.1, 176.039, 'h04J')
    set u=BlzCreateUnitWithSkin(p, 'h04J', 334.4, 5953.8, 27.445, 'h04J')
    set gg_unit_h04U_0252=BlzCreateUnitWithSkin(p, 'h04U', - 6316.2, 8988.4, 270.000, 'h04U')
    set gg_unit_h04V_0253=BlzCreateUnitWithSkin(p, 'h04V', 11449.9, - 15084.1, 220.000, 'h04V')
    set u=BlzCreateUnitWithSkin(p, 'h04J', - 100.5, 5826.5, 343.179, 'h04J')
    set u=BlzCreateUnitWithSkin(p, 'h04J', 114.9, 5886.1, 176.039, 'h04J')
    set u=BlzCreateUnitWithSkin(p, 'h04J', 260.0, 6020.7, 27.445, 'h04J')
    set gg_unit_h04R_0258=BlzCreateUnitWithSkin(p, 'h04R', - 1475.2, 8824.7, 180.000, 'h04R')
    set gg_unit_h04E_0259=BlzCreateUnitWithSkin(p, 'h04E', 14243.8, - 11157.7, 187.170, 'h04E')
    set gg_unit_h04F_0260=BlzCreateUnitWithSkin(p, 'h04F', - 6063.5, 12873.4, 0.000, 'h04F')
    set gg_unit_h04T_0265=BlzCreateUnitWithSkin(p, 'h04T', 13467.5, - 14562.4, 15.000, 'h04T')
    set gg_unit_h04P_0266=BlzCreateUnitWithSkin(p, 'h04P', - 3177.6, 7510.9, 37.500, 'h04P')
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 5445.5, - 2617.4, 33.360, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 8627.5, - 2611.8, 33.360, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 8620.7, 439.0, 33.360, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 5441.4, 454.1, 33.360, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 11426.0, - 13831.7, 33.360, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 12003.0, - 13700.0, 33.360, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 9978.8, - 14905.6, 33.360, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 9978.9, - 14652.1, 33.360, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 9851.1, - 14779.6, 33.360, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 2806.4, - 1802.6, 276.276, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set u=BlzCreateUnitWithSkin(p, 'n00J', - 3266.8, - 1790.0, 276.276, 'n00J')
    call SetUnitColor(u, ConvertPlayerColor(12))
    set gg_unit_h005_0281=BlzCreateUnitWithSkin(p, 'h005', 14763.4, - 13496.9, 20.410, 'h005')
endfunction

//===========================================================================
function CreatePlayerBuildings takes nothing returns nothing
    call CreateBuildingsForPlayer0()
endfunction

//===========================================================================
function CreatePlayerUnits takes nothing returns nothing
    call CreateUnitsForPlayer0()
endfunction

//===========================================================================
function CreateAllUnits takes nothing returns nothing
    call CreateNeutralPassiveBuildings()
    call CreateBuildingsForPlayer0() // INLINED!!
    call CreateNeutralHostile()
    call CreateNeutralPassive()
    call CreateUnitsForPlayer0() // INLINED!!
endfunction

//***************************************************************************
//*
//*  Regions
//*
//***************************************************************************

function CreateRegions takes nothing returns nothing
    local weathereffect we

    set gg_rct_ST1=Rect(- 16096.0, 8736.0, - 7584.0, 16256.0)
    set gg_rct_ST1Control=Rect(- 11584.0, 12416.0, - 11456.0, 12544.0)
    set gg_rct_STV1=Rect(- 8800.0, 11968.0, - 7872.0, 12832.0)
    set gg_rct_STV2=Rect(- 14272.0, 12256.0, - 8768.0, 12576.0)
    set gg_rct_STV3=Rect(- 11712.0, 9920.0, - 11328.0, 15008.0)
    set gg_rct_STV4=Rect(- 11968.0, 9024.0, - 11104.0, 9888.0)
    set gg_rct_STV5=Rect(- 15168.0, 11968.0, - 14272.0, 12800.0)
    set gg_rct_STV6=Rect(- 11968.0, 14912.0, - 11072.0, 15808.0)
    set gg_rct_STV7=Rect(- 12352.0, 11648.0, - 10720.0, 13248.0)
    set gg_rct_SS1Control=Rect(12192.0, 15712.0, 12384.0, 15872.0)
    set gg_rct_SS1=Rect(11712.0, 15072.0, 12832.0, 16192.0)
    call SetSoundPosition(gg_snd_NightElfGlueScreenLoop1, 12272.0, 15632.0, - 256.0)
    call RegisterStackedSound(gg_snd_NightElfGlueScreenLoop1, true, 1120.0, 1120.0)
    set gg_rct_Space=Rect(6560.0, - 16384.0, 16384.0, - 6560.0)
    set gg_rct_SS1EE=Rect(12608.0, 15392.0, 12704.0, 15648.0)
    set gg_rct_Timeout=Rect(14720.0, 14752.0, 16352.0, 16352.0)
    set gg_rct_SS2=Rect(11808.0, 13824.0, 12768.0, 14816.0)
    set gg_rct_SS2EE=Rect(12608.0, 14144.0, 12704.0, 14368.0)
    set gg_rct_SS2Control=Rect(12192.0, 14432.0, 12384.0, 14592.0)
    set gg_rct_ST2V1=Rect(- 6720.0, 14240.0, - 5056.0, 15904.0)
    set gg_rct_ST2V2=Rect(- 6080.0, 13856.0, - 5696.0, 14304.0)
    set gg_rct_ST2=Rect(- 7296.0, 13536.0, - 4832.0, 16352.0)
    set we=AddWeatherEffect(gg_rct_ST2, 'FDwl')
    call EnableWeatherEffect(we, true)
    call SetSoundPosition(gg_snd_RunesGlow, - 6064.0, 14944.0, - 256.0)
    call RegisterStackedSound(gg_snd_RunesGlow, true, 2464.0, 2816.0)
    set gg_rct_ST3Control=Rect(- 15232.0, 6720.0, - 15040.0, 6848.0)
    set gg_rct_ST3V1=Rect(- 13120.0, 6176.0, - 11488.0, 7840.0)
    set gg_rct_ST3V2=Rect(- 12512.0, 5280.0, - 12096.0, 6272.0)
    set gg_rct_ST3V4=Rect(- 13120.0, 3616.0, - 11456.0, 5280.0)
    set gg_rct_ST3V5=Rect(- 14304.0, 4288.0, - 13088.0, 4672.0)
    set gg_rct_ST3V3=Rect(- 15904.0, 4032.0, - 14304.0, 7968.0)
    set gg_rct_ST3=Rect(- 16384.0, 3296.0, - 11264.0, 8512.0)
    call SetSoundPosition(gg_snd_BlueFireBurstLoop, - 13824.0, 5904.0, - 256.0)
    call RegisterStackedSound(gg_snd_BlueFireBurstLoop, true, 5120.0, 5216.0)
    set gg_rct_ST4V1=Rect(- 13504.0, 1696.0, - 12608.0, 2592.0)
    set gg_rct_ST4V2=Rect(- 13248.0, 544.0, - 12864.0, 1824.0)
    set gg_rct_ST4V3=Rect(- 13248.0, - 1056.0, - 11584.0, 576.0)
    set gg_rct_ST4V4=Rect(- 11648.0, - 448.0, - 8736.0, - 96.0)
    set gg_rct_ST4V7=Rect(- 16064.0, - 7616.0, - 14400.0, - 1984.0)
    set gg_rct_ST4V8=Rect(- 14432.0, - 4160.0, - 12256.0, - 3776.0)
    set gg_rct_ST4V10=Rect(- 10816.0, - 992.0, - 10368.0, - 384.0)
    set gg_rct_ST4V11=Rect(- 12384.0, - 5184.0, - 9536.0, - 3488.0)
    set gg_rct_ST4V15=Rect(- 10016.0, - 5184.0, - 9120.0, - 1248.0)
    set gg_rct_ST4V18=Rect(- 8640.0, - 6688.0, - 7008.0, - 3296.0)
    set gg_rct_ST4V24=Rect(- 5344.0, - 1216.0, - 4736.0, - 800.0)
    set gg_rct_ST4V25=Rect(- 8768.0, - 2752.0, - 5312.0, 544.0)
    set gg_rct_ST4V30=Rect(- 4864.0, - 3904.0, 448.0, - 896.0)
    set gg_rct_ST4S2=Rect(- 16384.0, - 7872.0, 2624.0, 2720.0)
    set gg_rct_ST4Control=Rect(- 13120.0, 2240.0, - 12992.0, 2368.0)
    set gg_rct_DD1=Rect(- 12608.0, 256.0, - 12480.0, 384.0)
    set gg_rct_DD2=Rect(- 12096.0, 256.0, - 11968.0, 384.0)
    set gg_rct_ST4V32=Rect(- 11584.0, - 3424.0, - 10432.0, - 2336.0)
    set gg_rct_SS3=Rect(10080.0, 15040.0, 11168.0, 16160.0)
    set gg_rct_SS3Control=Rect(10528.0, 15712.0, 10688.0, 15904.0)
    set gg_rct_SS3EE=Rect(10944.0, 15424.0, 11008.0, 15680.0)
    set gg_rct_SS4=Rect(10144.0, 13856.0, 11136.0, 14848.0)
    set gg_rct_SS4EE=Rect(10944.0, 14112.0, 11040.0, 14400.0)
    set gg_rct_SS4Control=Rect(10528.0, 14432.0, 10720.0, 14592.0)
    set gg_rct_ST5V1=Rect(- 15424.0, - 14112.0, - 13792.0, - 12544.0)
    set gg_rct_ST5V2=Rect(- 13824.0, - 13728.0, - 2656.0, - 12896.0)
    set gg_rct_ST5V3=Rect(- 12224.0, - 14816.0, - 11360.0, - 11840.0)
    set gg_rct_ST5V4=Rect(- 10144.0, - 15584.0, - 8544.0, - 11136.0)
    set gg_rct_ST5V5=Rect(- 8608.0, - 14784.0, - 4704.0, - 14400.0)
    set gg_rct_ST5V6=Rect(- 8576.0, - 12224.0, - 4704.0, - 11872.0)
    set gg_rct_ST5V7=Rect(- 5568.0, - 14752.0, - 4704.0, - 11904.0)
    set gg_rct_ST5V8=Rect(- 3360.0, - 12896.0, 64.0, - 11904.0)
    set gg_rct_ST5V9=Rect(- 2720.0, - 11936.0, - 2240.0, - 11104.0)
    set gg_rct_ST5V10=Rect(- 3360.0, - 11936.0, - 2720.0, - 11744.0)
    set gg_rct_ST5V11=Rect(- 3392.0, - 14816.0, 64.0, - 13760.0)
    set gg_rct_ST5V12=Rect(- 2752.0, - 15552.0, - 2240.0, - 14720.0)
    set gg_rct_ST5V13=Rect(- 3392.0, - 14944.0, - 2688.0, - 14816.0)
    set gg_rct_ST5=Rect(- 16384.0, - 16384.0, 736.0, - 10528.0)
    call SetSoundPosition(gg_snd_ScourgeGlueScreen, - 7824.0, - 13456.0, - 256.0)
    call RegisterStackedSound(gg_snd_ScourgeGlueScreen, true, 17120.0, 5856.0)
    set gg_rct_ST5Control=Rect(- 14944.0, - 13440.0, - 14752.0, - 13152.0)
    set gg_rct_BombTeleport=Rect(- 15936.0, - 3168.0, - 15680.0, - 2880.0)
    set gg_rct_SpaceSound=Rect(7616.0, - 16320.0, 16384.0, - 7328.0)
    call SetSoundPosition(gg_snd_War3XMainGlueScreen, 12000.0, - 11824.0, - 256.0)
    call RegisterStackedSound(gg_snd_War3XMainGlueScreen, true, 8768.0, 8992.0)
    set gg_rct_Planet=Rect(3616.0, 1600.0, 11872.0, 10688.0)
    set we=AddWeatherEffect(gg_rct_Planet, 'RAhr')
    call EnableWeatherEffect(we, true)
    call SetSoundPosition(gg_snd_RainAmbience, 7744.0, 6144.0, - 256.0)
    call RegisterStackedSound(gg_snd_RainAmbience, true, 8256.0, 9088.0)
    set gg_rct_LostStation=Rect(3648.0, - 13280.0, 5056.0, - 11712.0)
    call SetSoundPosition(gg_snd_FrostmourneChant1, 4352.0, - 12496.0, - 256.0)
    call RegisterStackedSound(gg_snd_FrostmourneChant1, true, 1408.0, 1568.0)
    set gg_rct_LostStationAppear=Rect(15808.0, - 7968.0, 16032.0, - 7808.0)
    set gg_rct_PirateShip=Rect(1312.0, - 15424.0, 2240.0, - 11904.0)
    set gg_rct_D35=Rect(10048.0, 6976.0, 10464.0, 7456.0)
    set gg_rct_SS5=Rect(8352.0, 15136.0, 9280.0, 16032.0)
    set gg_rct_SS5EE=Rect(9152.0, 15424.0, 9248.0, 15648.0)
    set gg_rct_SS5Control=Rect(8768.0, 15712.0, 8896.0, 15840.0)
    set gg_rct_SS6=Rect(8352.0, 13856.0, 9280.0, 14784.0)
    set gg_rct_SS6EE=Rect(9152.0, 14144.0, 9216.0, 14368.0)
    set gg_rct_SS6Control=Rect(8736.0, 14432.0, 8896.0, 14592.0)
    set gg_rct_SS7=Rect(6432.0, 15136.0, 7360.0, 16096.0)
    set gg_rct_SS8=Rect(6432.0, 13856.0, 7360.0, 14784.0)
    set gg_rct_SS7EE=Rect(7200.0, 15392.0, 7328.0, 15680.0)
    set gg_rct_SS7Control=Rect(6816.0, 15712.0, 7008.0, 15872.0)
    set gg_rct_SS8EE=Rect(7232.0, 14112.0, 7328.0, 14400.0)
    set gg_rct_SS8Control=Rect(6816.0, 14432.0, 6976.0, 14560.0)
    set gg_rct_PersonnelUpgrade=Rect(- 14656.0, - 5280.0, - 14464.0, - 5056.0)
    set gg_rct_SS9=Rect(4672.0, 13760.0, 5792.0, 16096.0)
    set gg_rct_SS9EE=Rect(5152.0, 14016.0, 5408.0, 14080.0)
    set gg_rct_SS9Control=Rect(5152.0, 15712.0, 5312.0, 15872.0)
    set gg_rct_SS10EE=Rect(3488.0, 14720.0, 3744.0, 14816.0)
    set gg_rct_SS10=Rect(3008.0, 14528.0, 4096.0, 16128.0)
    set gg_rct_SS10Control=Rect(3488.0, 15712.0, 3648.0, 15872.0)
    set gg_rct_SS11=Rect(1408.0, 14624.0, 2432.0, 16160.0)
    set gg_rct_SS11Control=Rect(1824.0, 15712.0, 1984.0, 15872.0)
    set gg_rct_SS11EE=Rect(1824.0, 14624.0, 2112.0, 14784.0)
    set gg_rct_ST4EscapePod=Rect(- 9664.0, - 2112.0, - 9536.0, - 1984.0)
    set gg_rct_PlanetEscapePod=Rect(10976.0, 4000.0, 11104.0, 4128.0)
    set gg_rct_ST5EscapePod=Rect(- 11584.0, - 12544.0, - 11456.0, - 12416.0)
    set gg_rct_ST3EscapePod=Rect(- 11744.0, 4288.0, - 11488.0, 4512.0)
    set gg_rct_ST1EscapePod=Rect(- 11360.0, 15040.0, - 11104.0, 15296.0)
    set gg_rct_SS12P1=Rect(- 3488.0, 13344.0, - 1056.0, 14720.0)
    set gg_rct_SS12P2=Rect(- 2656.0, 14688.0, - 1824.0, 15360.0)
    set gg_rct_SS12EE=Rect(- 2368.0, 13152.0, - 2080.0, 13248.0)
    set gg_rct_SS12Control=Rect(- 2336.0, 15008.0, - 2176.0, 15168.0)
    set gg_rct_SS12=Rect(- 3648.0, 12864.0, - 832.0, 15616.0)
    set gg_rct_PirateABEnter=Rect(1824.0, - 14816.0, 1920.0, - 14688.0)
    set gg_rct_ST4V5=Rect(- 12896.0, - 4224.0, - 12480.0, - 352.0)
    set gg_rct_ST4V31=Rect(- 10048.0, - 5088.0, - 8256.0, - 4672.0)
    set gg_rct_ST4V33=Rect(- 9184.0, - 2400.0, - 8640.0, - 1984.0)
    set gg_rct_UnvisionNiffy=Rect(- 4224.0, - 736.0, 1120.0, 1248.0)
    set gg_rct_NoOutpostRect=Rect(- 16064.0, - 3744.0, - 14624.0, - 1984.0)
    set gg_rct_SS13=Rect(- 96.0, 14752.0, 832.0, 15712.0)
    set gg_rct_SS13EE=Rect(704.0, 15072.0, 800.0, 15360.0)
    set gg_rct_SS13Control=Rect(288.0, 15392.0, 480.0, 15552.0)
    set gg_rct_SwaggerLandEnter=Rect(7392.0, 5984.0, 7552.0, 6144.0)
    set gg_rct_SwaggerLandPos=Rect(5952.0, 6240.0, 6080.0, 6336.0)
    set gg_rct_SwaggerLandExit=Rect(- 7232.0, - 13376.0, - 7040.0, - 13248.0)
    set gg_rct_MoonRect=Rect(8704.0, - 4576.0, 12416.0, - 1024.0)
    call SetSoundPosition(gg_snd_NightElfGlueScreenLoop1, 10560.0, - 2800.0, - 256.0)
    call RegisterStackedSound(gg_snd_NightElfGlueScreenLoop1, true, 3712.0, 3552.0)
    set gg_rct_MoonEscapePod=Rect(12032.0, - 3136.0, 12160.0, - 3008.0)
    set gg_rct_ST3V6=Rect(- 13920.0, 4640.0, - 13472.0, 5312.0)
    set gg_rct_ST1V8=Rect(- 11072.0, 9376.0, - 9984.0, 9792.0)
    set gg_rct_ST1V9=Rect(- 10048.0, 9376.0, - 9024.0, 10304.0)
    set gg_rct_AndroidUpgrade=Rect(- 9504.0, 9824.0, - 9120.0, 10208.0)
    set gg_rct_Fabricate=Rect(- 9696.0, 9888.0, - 9568.0, 10016.0)
    set gg_rct_ST6Console=Rect(4000.0, - 13056.0, 4160.0, - 12896.0)
    set gg_rct_NiffyPowerControl=Rect(- 7072.0, - 1248.0, - 6912.0, - 1056.0)
    set gg_rct_AssemblyControl=Rect(11296.0, - 2304.0, 11456.0, - 2144.0)
    set gg_rct_AssemblyDropoff=Rect(11008.0, - 2208.0, 11136.0, - 2112.0)
    set gg_rct_GiantAsteroidSpawn=Rect(6592.0, - 16160.0, 16320.0, - 16128.0)
    set gg_rct_ST8=Rect(- 7104.0, 10784.0, - 5056.0, 12992.0)
    call SetSoundPosition(gg_snd_CityBuildingDeath1, - 6080.0, 11888.0, - 256.0)
    call RegisterStackedSound(gg_snd_CityBuildingDeath1, true, 2048.0, 2208.0)
    set gg_rct_ST8Control=Rect(- 6176.0, 12640.0, - 5984.0, 12800.0)
    set gg_rct_ST8EscapePod=Rect(- 5344.0, 12064.0, - 5120.0, 12288.0)
    set gg_rct_ST8EE=Rect(- 6144.0, 10944.0, - 5856.0, 11040.0)
    set gg_rct_ST9=Rect(- 4288.0, 4064.0, 1280.0, 10624.0)
    set gg_rct_ST9Control=Rect(- 1568.0, 9248.0, - 1408.0, 9376.0)
    set gg_rct_ST9EscapePod=Rect(- 1728.0, 4352.0, - 1440.0, 4608.0)
    set gg_rct_Cage1=Rect(- 3680.0, 7136.0, - 2752.0, 8032.0)
    set gg_rct_Cage2=Rect(- 3648.0, 5568.0, - 2784.0, 6464.0)
    set gg_rct_Cage3=Rect(- 3648.0, 4160.0, - 2752.0, 5056.0)
    set gg_rct_Cage4=Rect(- 320.0, 4128.0, 576.0, 5056.0)
    set gg_rct_Cage5=Rect(- 352.0, 5536.0, 576.0, 6464.0)
    set gg_rct_Cage6=Rect(- 352.0, 7104.0, 576.0, 7968.0)
    set gg_rct_ST9V1=Rect(- 4160.0, 8544.0, 1056.0, 10176.0)
    set gg_rct_ST9V2=Rect(- 2400.0, 4000.0, - 704.0, 8576.0)
    set gg_rct_ST9V3=Rect(- 2784.0, 7360.0, - 2368.0, 7808.0)
    set gg_rct_ST9V4=Rect(- 2784.0, 5824.0, - 2368.0, 6240.0)
    set gg_rct_ST9V5=Rect(- 2784.0, 4416.0, - 2336.0, 4832.0)
    set gg_rct_ST9V6=Rect(- 736.0, 4416.0, - 288.0, 4832.0)
    set gg_rct_ST9V7=Rect(- 736.0, 5760.0, - 320.0, 6240.0)
    set gg_rct_ST9V8=Rect(- 736.0, 7328.0, - 320.0, 7776.0)
    set gg_rct_FreeAnomalyRect=Rect(- 2848.0, 5792.0, - 2592.0, 6240.0)
    set gg_rct_Cage_Transport=Rect(- 1664.0, 8352.0, - 1312.0, 8672.0)
    set gg_rct_ST9Control2=Rect(- 1568.0, 8896.0, - 1408.0, 9024.0)
    set gg_rct_ST10=Rect(- 7200.0, 8064.0, - 5024.0, 10176.0)
    set gg_rct_ST10Control=Rect(- 6528.0, 8928.0, - 6368.0, 9088.0)
    set gg_rct_ST10EE=Rect(- 6912.0, 8896.0, - 6848.0, 9152.0)
    set gg_rct_TransportationPlatform=Rect(- 5920.0, 8736.0, - 5376.0, 9312.0)
    set gg_rct_ST10V1=Rect(- 7008.0, 8224.0, - 5344.0, 9888.0)
    set gg_rct_ST10EscapePod=Rect(- 6720.0, 8320.0, - 6464.0, 8544.0)
    set gg_rct_MapCenter=Rect(- 160.0, - 192.0, 288.0, 256.0)
    set gg_rct_OverlordRect=Rect(- 9728.0, 2688.0, - 5344.0, 7424.0)
    set gg_rct_OverlordPod=Rect(- 9568.0, 4256.0, - 9280.0, 4512.0)
    set gg_rct_ST11V1=Rect(- 7904.0, 2848.0, - 7200.0, 7360.0)
    set gg_rct_ST11V2=Rect(- 9664.0, 5504.0, - 5440.0, 6304.0)
    set gg_rct_ST11V3=Rect(- 9696.0, 4000.0, - 5408.0, 4672.0)
    set gg_rct_ST11V4=Rect(- 9344.0, 4960.0, - 5760.0, 5312.0)
    set gg_rct_ST11V5=Rect(- 9408.0, 5216.0, - 5696.0, 5344.0)
    set gg_rct_ST11V6=Rect(- 9536.0, 5344.0, - 5664.0, 5536.0)
    set gg_rct_ST11V7=Rect(- 9472.0, 6304.0, - 5568.0, 6432.0)
    set gg_rct_ST11V8=Rect(- 9408.0, 6400.0, - 5696.0, 6528.0)
    set gg_rct_ST11V9=Rect(- 9344.0, 6528.0, - 5792.0, 6624.0)
    set gg_rct_ST11V10=Rect(- 8256.0, 6592.0, - 6816.0, 7072.0)
    set gg_rct_ST11V11=Rect(- 8096.0, 7072.0, - 6944.0, 7168.0)
    set gg_rct_ST11V12=Rect(- 8000.0, 7168.0, - 7072.0, 7296.0)
    set gg_rct_ST11V13=Rect(- 7904.0, 7296.0, - 7200.0, 7392.0)
    set gg_rct_ST11V14=Rect(- 9440.0, 4896.0, - 5728.0, 4992.0)
    set gg_rct_ST11V15=Rect(- 9504.0, 4800.0, - 5632.0, 4928.0)
    set gg_rct_ST11V16=Rect(- 9568.0, 4672.0, - 5472.0, 4800.0)
    set gg_rct_ST11V17=Rect(- 9504.0, 3808.0, - 5600.0, 4000.0)
    set gg_rct_ST11V18=Rect(- 9312.0, 3680.0, - 5792.0, 3808.0)
    set gg_rct_ST11V19=Rect(- 8896.0, 3552.0, - 6176.0, 3680.0)
    set gg_rct_ST11V20=Rect(- 8768.0, 3424.0, - 6400.0, 3552.0)
    set gg_rct_ST11V21=Rect(- 8608.0, 3296.0, - 6528.0, 3424.0)
    set gg_rct_ST11V22=Rect(- 8224.0, 3168.0, - 6912.0, 3296.0)
    set gg_rct_ST11V23=Rect(- 8096.0, 3072.0, - 6976.0, 3168.0)
    set gg_rct_ST11V24=Rect(- 7968.0, 2944.0, - 7072.0, 3072.0)
    set gg_rct_Warp=Rect(960.0, - 9792.0, 2496.0, - 8032.0)
    set gg_rct_Defunct_TP=Rect(- 5760.0, 14400.0, - 5376.0, 14880.0)
    set gg_rct_Mirror_Arena=Rect(3168.0, - 10304.0, 4768.0, - 8576.0)
    set gg_rct_BarrelsExplodingNiffy=Rect(- 9344.0, - 3424.0, - 9184.0, - 3168.0)
    set gg_rct_SS13RightDebug=Rect(1024.0, 14560.0, 1120.0, 16096.0)
    set gg_rct_SS11BottomDebug=Rect(1280.0, 14080.0, 2560.0, 14464.0)
    set gg_rct_SS10BottomDebug=Rect(2944.0, 14080.0, 4224.0, 14464.0)
    set gg_rct_SS9BottomDebug=Rect(4608.0, 13312.0, 5888.0, 13696.0)
    set gg_rct_SS8RightDebug=Rect(7520.0, 13440.0, 7808.0, 14848.0)
    set gg_rct_SS7RightDebug=Rect(7520.0, 14912.0, 7808.0, 16384.0)
    set gg_rct_SS5RightDebug=Rect(9440.0, 14976.0, 9632.0, 16384.0)
    set gg_rct_SS6RightDebug=Rect(9472.0, 13568.0, 9664.0, 14944.0)
    set gg_rct_SS4RightDebug=Rect(11200.0, 13600.0, 11360.0, 14912.0)
    set gg_rct_SS3RightDebug=Rect(11200.0, 14912.0, 11360.0, 16352.0)
    set gg_rct_SS2RightDebug=Rect(12864.0, 13536.0, 13152.0, 14944.0)
    set gg_rct_SS1RightDebug=Rect(12864.0, 14944.0, 13152.0, 16384.0)
    set gg_rct_SS12BottomDebug=Rect(- 3648.0, 12480.0, - 832.0, 12864.0)
    set gg_rct_Niffy_Lockdown_Start=Rect(- 160.0, - 2880.0, 64.0, - 1760.0)
    set gg_rct_MinotaurChargeDebug=Rect(- 16352.0, - 7776.0, - 16256.0, - 1760.0)
    set gg_rct_SS1TopDebug=Rect(11680.0, 16256.0, 12864.0, 16352.0)
    set gg_rct_SS1LeftDebug=Rect(11552.0, 14976.0, 11712.0, 16352.0)
    set gg_rct_SS2BottomDebug=Rect(11680.0, 13536.0, 12864.0, 13696.0)
    set gg_rct_SS2LeftDebug=Rect(11552.0, 13536.0, 11680.0, 14944.0)
    set gg_rct_SS3TopDebug=Rect(10016.0, 16256.0, 11200.0, 16352.0)
    set gg_rct_SS3LeftDebug=Rect(9856.0, 14976.0, 10016.0, 16352.0)
    set gg_rct_SS4BottomDebug=Rect(9920.0, 13568.0, 11200.0, 13696.0)
    set gg_rct_SS4LeftDebug=Rect(9856.0, 13696.0, 10016.0, 14976.0)
    set gg_rct_SS5TopDebug=Rect(8032.0, 16256.0, 9408.0, 16352.0)
    set gg_rct_SS5LeftDebug=Rect(8032.0, 14976.0, 8192.0, 16256.0)
    set gg_rct_SS6BottomDebug=Rect(8192.0, 13536.0, 9472.0, 13696.0)
    set gg_rct_SS6LeftDebug=Rect(8032.0, 13536.0, 8192.0, 14880.0)
    set gg_rct_SS7TopDebug=Rect(6176.0, 16256.0, 7520.0, 16384.0)
    set gg_rct_SS7LeftDebug=Rect(6176.0, 14976.0, 6272.0, 16256.0)
    set gg_rct_SS8BottomDebug=Rect(6272.0, 13440.0, 7520.0, 13696.0)
    set gg_rct_SS8LeftDebug=Rect(6176.0, 13440.0, 6272.0, 14944.0)
    set gg_rct_SS9RightDebug=Rect(5888.0, 13312.0, 6048.0, 16384.0)
    set gg_rct_SS9TopDebug=Rect(4608.0, 16256.0, 5888.0, 16384.0)
    set gg_rct_SS9LeftDebug=Rect(4448.0, 13312.0, 4608.0, 16384.0)
    set gg_rct_SS10RightDebug=Rect(4224.0, 14080.0, 4352.0, 16384.0)
    set gg_rct_SS10TopDebug=Rect(2944.0, 16256.0, 4224.0, 16384.0)
    set gg_rct_SS10LeftDebug=Rect(2784.0, 14080.0, 2944.0, 16384.0)
    set gg_rct_SS11RightDebug=Rect(2560.0, 14080.0, 2688.0, 16352.0)
    set gg_rct_SS11TopDebug=Rect(1280.0, 16256.0, 2560.0, 16384.0)
    set gg_rct_SS11LeftDebug=Rect(1152.0, 14080.0, 1280.0, 16384.0)
    set gg_rct_SS13BottomDebug=Rect(- 256.0, 14400.0, 1120.0, 14560.0)
    set gg_rct_SS13TopDebug=Rect(- 256.0, 15904.0, 1024.0, 16096.0)
    set gg_rct_SS13LeftDebug=Rect(- 416.0, 14400.0, - 256.0, 16096.0)
    set gg_rct_SS12RightDebug=Rect(- 832.0, 12480.0, - 640.0, 15744.0)
    set gg_rct_SS12LeftDebug=Rect(- 3808.0, 12512.0, - 3648.0, 15872.0)
    set gg_rct_SS12TopDebug=Rect(- 3648.0, 15616.0, - 832.0, 15872.0)
    set gg_rct_PirateShipControl=Rect(1696.0, - 12192.0, 1824.0, - 12064.0)
endfunction

//***************************************************************************
//*
//*  Custom Script Code
//*
//***************************************************************************
//The only time I ever had to use vJass!
// ===========================


function GetGameTime takes nothing returns real
return TimerGetElapsed(udg_GameTimer)
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
function CreateCTLRequirement takes nothing returns nothing

    //Allows the temporal control alien to cast closed time-like loop 11 seconds after he is createed.
    call PolledWait(11.0)

    //Temporal Alien
    if udg_RogueAndroidStoleTimeLoop == false then
        call CreateNUnitsAtLoc(1, 'e00K', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_HoldZone, bj_UNIT_FACING)
    else
        call CreateNUnitsAtLoc(1, 'e00K', udg_RogueAndroid, udg_HoldZone, bj_UNIT_FACING)
    endif
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
function SetHandleInt takes handle t,string h,integer value returns nothing
//Alias of SaveInteger, less work for my conversion from pre 1.24 to a post 1.24 world.
call SaveInteger((udg_hash), GetHandleId(t), StringHash(h), value) // INLINED!!
endfunction

////////////////////////////////////////////////////////////////////////////////////////////////////////
function AddAbilityForPeriod_Remove takes nothing returns nothing
local timer o=GetExpiredTimer()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(o), StringHash("unit")) // INLINED!!
local integer theability=LoadInteger((udg_hash), GetHandleId(o), StringHash("Ability")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(o)) // INLINED!!
call DestroyTimer(o)
set o=null
call UnitRemoveAbility(a, theability)
endfunction
function UnitAddAbilityForPeriod takes unit a,integer theability,real duration returns nothing
//This function will add an ability to a unit for a period so that if this function is called again while the unit has the ability
//And adds it for another duration then only the later duration will remove the ability.
//For example, if you wanted to code a grace period of invulnerability for 3 seconds but then had an ability that also made the caster
//invulnerable and both were triggered, you should use this function so that as the grace period for invulnerability ends it does not
//short circuit the invulnerable ability.
local timer o=null
if HaveSavedHandle((udg_hash), GetHandleId(a), StringHash("AbilityTimed_Timer_" + I2S(theability))) then // INLINED!!
set o=LoadTimerHandle((udg_hash), GetHandleId(a), StringHash("AbilityTimed_Timer_" + I2S(theability))) // INLINED!!
endif
if o != null then
    if TimerGetRemaining(o) < duration then
    //If the ability is scheduled for removal at a later date than this addition will imply, we do nothing.
    //If not then we proceed regularly.
        call TimerStart(o, duration, false, function AddAbilityForPeriod_Remove)
    endif
else
    if GetUnitAbilityLevel(a, theability) >= 1 then
        return
    else
        set o=CreateTimer()
        call SaveInteger((udg_hash), GetHandleId(o), StringHash("Ability"), theability) // INLINED!!
        call SaveUnitHandle((udg_hash), GetHandleId(o), StringHash("unit"), a) // INLINED!!
        call SaveTimerHandle((udg_hash), GetHandleId(a), StringHash("AbilityTimed_Timer_" + I2S(theability)), o) // INLINED!!
        call TimerStart(o, duration, false, function AddAbilityForPeriod_Remove)
        call UnitAddAbility(a, theability)
    endif
endif
endfunction

////////////////////////////////////////////////////////////////////////////////////////////////////////

function CloneUnit takes unit whichUnit,player cloneOwner,real cloneX,real cloneY,real cloneFacing returns unit
//Abuses gamecaches to make a clone of unit, which restores inventories, health, etc. Used by masquerader.
    local unit clone
    local gamecache g= InitGameCache("CloneCache.w3v")
    //Clones a unit. Got this function from somewhere.
    call StoreUnit(g, "clone", "clone", whichUnit)
    set clone=RestoreUnit(g, "clone", "clone", cloneOwner, cloneX, cloneY, cloneFacing)
    call SetUnitState(clone, UNIT_STATE_LIFE, GetUnitState(whichUnit, UNIT_STATE_LIFE))
    call SetUnitState(clone, UNIT_STATE_MANA, GetUnitState(whichUnit, UNIT_STATE_MANA))
    call FlushGameCache(g)
    set g=null
    return clone
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////

function AlienRequirementRestore takes nothing returns nothing
//I realize that using temporary globals is not the prettiest way to pass arguments, but seeing as I'm lazy
//And like the convenience of using GUI and JASS this will have to do.
//This function restores an alien requirement to use an ability after TempReal seconds to TempPlayer of TempUnitType.
//TempUnitType being the name of the unit type required for the ability to be cast.
local integer a=udg_TempUnitType
local player b=udg_TempPlayer
local real k=udg_TempReal
//Restores a requirement unit after k seconds.
//Use ExecuteFunc to not steal thread focus
call PolledWait(k)
call CreateUnitAtLoc(b, a, udg_HoldZone, 270)
endfunction

function AlienRequirementRemove_Child takes nothing returns nothing
call RemoveUnit(GetEnumUnit())
endfunction
function AlienRequirementRemove takes nothing returns nothing
local group b=GetUnitsOfPlayerAndTypeId(udg_TempPlayer, udg_TempUnitType)
//Removes the requirements from tempplayer for the spell that needs tempunittype.
call ForGroup(b, function AlienRequirementRemove_Child)
call DestroyGroup(b)
set b=null
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////


function ParseEnteredString takes nothing returns nothing
local string r= GetEventPlayerChatString()
local integer lasti= 0
local integer i= 0
local integer argumenton= 1
local integer k=StringLength(r)
local integer n
//Divides an entered string into spaces. "-liquidate lightblue" becomes udg_arguments[0]=-liquidate and udg_arguments[1]=lightblue
loop
exitwhen i > k
if SubString(r, i - 1, i) == " " then
set n=lasti - 1
if n < 0 then
set n=0
endif
set udg_arguments[argumenton]=SubString(r, lasti - 1, i - 1)
set argumenton=argumenton + 1
set lasti=i + 1
endif
set i=i + 1

endloop
set udg_arguments[argumenton]=SubString(r, lasti - 1, 999)
endfunction

function ClearArguments takes nothing returns nothing
local integer i=0
//Preps the arguments bank so that arguments from the last are not considered
loop
exitwhen i > 100
set udg_arguments[i]=""
set i=i + 1
endloop
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////

function MurderPart2 takes nothing returns nothing
local unit a=udg_TempUnit
local player b=udg_TempPlayer
//Executes the MurderPart2 trigger after 4 seconds, preserving local data.
//This hack brought to you by the Board of Hackery and Bad Code.
call PolledWait(1.1)
set udg_TempUnit=a
set udg_TempPlayer=b
call TriggerExecute(gg_trg_PlayerMurderPart2)
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////






////////////////////////////////////////////////////////////////////////////////////////////////////////
//Counter bars!


function DestroyBar takes timer k returns nothing
//Given a timer k, this will destroy the associated countdown bar.
local texttag a= LoadTextTagHandle((udg_hash), GetHandleId(k), StringHash("countdown")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(a)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
call PauseTimer(k)
call DestroyTimer(k)
call ShowTextTagForceBJ(false, a, GetPlayersAll())
call DestroyTextTag(a)
endfunction

function DestroyUnitBar takes unit a returns nothing
//Destroys a countup bar given a unit a.
if HaveSavedHandle((udg_hash), GetHandleId(a), StringHash("CountupTimer")) then // INLINED!!
call DestroyBar(LoadTimerHandle((udg_hash), GetHandleId(a), StringHash("CountupTimer"))) // INLINED!!
endif
endfunction

function DestroyBarStop takes timer k returns nothing
//Destroys a bar and stops its endfunction from executing
local texttag a= LoadTextTagHandle((udg_hash), GetHandleId(k), StringHash("countdown")) // INLINED!!
local timer end=LoadTimerHandle((udg_hash), GetHandleId(k), StringHash("endtimer")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(a)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(end)) // INLINED!!
call PauseTimer(end)
call DestroyTimer(end)
call PauseTimer(k)
call DestroyTimer(k)
call ShowTextTagForceBJ(false, a, GetPlayersAll())
call DestroyTextTag(a)
endfunction
function DestroyUnitBarStop takes unit a returns nothing
//Destroys a countup bar given a unit a.
if HaveSavedHandle((udg_hash), GetHandleId(a), StringHash("CountupTimer")) then // INLINED!!
call DestroyBarStop(LoadTimerHandle((udg_hash), GetHandleId(a), StringHash("CountupTimer"))) // INLINED!!
endif
endfunction

function CountUpBar_Execute takes nothing returns nothing
//This uses a seperate timer to precisely execute the necessary function.
local timer end=GetExpiredTimer()
local timer k=LoadTimerHandle((udg_hash), GetHandleId(end), StringHash("k")) // INLINED!!
local unit whofor=LoadUnitHandle((udg_hash), GetHandleId(end), StringHash("whofor")) // INLINED!!
local string endfunc=LoadStr((udg_hash), GetHandleId(end), StringHash("endfunc")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(end)) // INLINED!!
call DestroyTimer(end)
call DestroyBar(k)
set udg_CountupBarTemp=whofor
call ExecuteFunc(endfunc)
endfunction


function AddCountdown takes integer howmanybars,unit whatunit,real interval,timer k returns texttag
//Creates a text tag.
local string barcount= " "
local integer i=1
local texttag a
local location c=GetUnitLoc(whatunit)
loop
exitwhen i > howmanybars
set barcount=barcount + "I"
set i=i + 1
endloop
call CreateTextTagLocBJ(barcount, c, 0, 6, 100, 100, 100, 0)
    call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
set a=bj_lastCreatedTextTag
    call SetTextTagFadepointBJ(a, howmanybars * interval)
    call SetTextTagLifespanBJ(a, howmanybars * interval + 1)
call SaveTextTagHandle((udg_hash), GetHandleId(k), StringHash("countdown"), a) // INLINED!!
call SaveInteger((udg_hash), GetHandleId(k), StringHash("progress"), 0) // INLINED!!
call SaveInteger((udg_hash), GetHandleId(k), StringHash("barcount"), howmanybars) // INLINED!!
call RemoveLocation(c)
return a
endfunction
function AddBarProgress takes timer k returns nothing
//Updates a countup texttag.
//Not sure why I coded things into so many seperate functions but I did.
local texttag a= LoadTextTagHandle((udg_hash), GetHandleId(k), StringHash("countdown")) // INLINED!!
local integer progress= LoadInteger((udg_hash), GetHandleId(k), StringHash("progress")) // INLINED!!
local integer barcount= LoadInteger((udg_hash), GetHandleId(k), StringHash("barcount")) // INLINED!!
local string barstring= LoadStr((udg_hash), GetHandleId(k), StringHash("barcolor")) // INLINED!!
local integer i=1
if barcount <= progress then
call DestroyBar(k)
endif
loop
exitwhen i > progress
set barstring=barstring + "I"
set i=i + 1
endloop
set barstring=barstring + "|r"
loop
exitwhen i > barcount
set barstring=barstring + "I"
set i=i + 1
endloop
call SetTextTagTextBJ(a, barstring, 6.0)
call SaveInteger((udg_hash), GetHandleId(k), StringHash("progress"), progress + 1) // INLINED!!
endfunction
function RegisterOnBarFull takes texttag a,string whatfunc,timer k returns nothing
call SaveStr((udg_hash), GetHandleId(k), StringHash("onend"), whatfunc) // INLINED!!
endfunction
function BarCountUpLoop takes nothing returns nothing
//This is t he part that is called first every update.
local unit a= LoadUnitHandle((udg_hash), GetHandleId(GetExpiredTimer()), StringHash("countuploop")) // INLINED!!
local texttag t=LoadTextTagHandle((udg_hash), GetHandleId(GetExpiredTimer()), StringHash("countdown")) // INLINED!!
call SetTextTagPos(t, GetUnitX(a), GetUnitY(a), 0.00)
call AddBarProgress(GetExpiredTimer())
endfunction


function CountUpBar takes unit whofor,integer howmanybars,real interval,string endfunc returns nothing
//Please note that because this uses a PolledWait for compatability that this function will time out code execution for its duration.
//This is mostly a compatability thing.
//udg_CountUpBarColor, a later introduction to this function, uses a global string variable to work now. If you don't se it before
//calling this function you will have no control over the color of the bar.
//If you set CountupBar_HideTempBool=true and provide a TempPlayerGroup with which not to show the text tag too this function will
//handle that. But it will also destroy the player group that you pass it.
local real duration= I2R(howmanybars) * interval
local timer k=CreateTimer()
local timer end=CreateTimer()
local texttag a= AddCountdown(howmanybars , whofor , interval , k)
call SaveStr((udg_hash), GetHandleId(k), StringHash("barcolor"), udg_CountUpBarColor) // INLINED!!
call SaveInteger((udg_hash), GetHandleId(k), StringHash("progress"), 1) // INLINED!!
call RegisterOnBarFull(a , endfunc , k)
call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("countuploop"), whofor) // INLINED!!
call TimerStart(k, interval, true, function BarCountUpLoop)
if udg_CountupBar_HideTempBool == true then
set udg_CountupBar_HideTempBool=false
call ShowTextTagForceBJ(false, a, udg_TempPlayerGroup)
call DestroyForce(udg_TempPlayerGroup)
endif
call SaveUnitHandle((udg_hash), GetHandleId(end), StringHash("whofor"), whofor) // INLINED!!
call SaveStr((udg_hash), GetHandleId(end), StringHash("endfunc"), endfunc) // INLINED!!
call SaveTimerHandle((udg_hash), GetHandleId(end), StringHash("k"), k) // INLINED!!
call SaveTimerHandle((udg_hash), GetHandleId(whofor), StringHash("CountupTimer"), k) // INLINED!!
call SaveTextTagHandle((udg_hash), GetHandleId(k), StringHash("countdown"), a) // INLINED!!
call SaveTimerHandle((udg_hash), GetHandleId(k), StringHash("end"), end) // INLINED!!
call TimerStart(end, duration, false, function CountUpBar_Execute)
call PolledWait(duration)
set udg_CountupBarTemp=whofor
//PolledWait for compatibility with older versions
//call FlushChildHashtable(LS(), GetHandleId(k))
//call PauseTimer(k)
//call DestroyTimer(k)
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
//This entire section below is basically the same as above but it dynamically checks for visibility to show the text tag.
//If you notice, fusion bombs don't do this but landing ships do.
////////////////////////////////////////////////
function CountdownBar_ShowLocal takes nothing returns nothing
if IsLocationVisibleToPlayer(udg_TempPoint, GetEnumPlayer()) then
if GetLocalPlayer() == GetEnumPlayer() then
call SetTextTagVisibility(udg_TempTexttag, true)
endif
else
if GetLocalPlayer() == GetEnumPlayer() then
call SetTextTagVisibility(udg_TempTexttag, false)
endif
endif
endfunction
function DestroyBar_Local takes timer k returns nothing
local texttag a= LoadTextTagHandle((udg_hash), GetHandleId(k), StringHash("countdown")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(a)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
call PauseTimer(k)
call DestroyTimer(k)
call ShowTextTagForceBJ(false, a, GetPlayersAll())
call DestroyTextTag(a)
endfunction

function CountUpBar_Execute_Local takes nothing returns nothing
local timer end=GetExpiredTimer()
local timer k=LoadTimerHandle((udg_hash), GetHandleId(end), StringHash("k")) // INLINED!!
local unit whofor=LoadUnitHandle((udg_hash), GetHandleId(end), StringHash("whofor")) // INLINED!!
local string endfunc=LoadStr((udg_hash), GetHandleId(end), StringHash("endfunc")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(end)) // INLINED!!
call DestroyTimer(end)
call DestroyBar_Local(k)
set udg_CountupBarTemp=whofor
call ExecuteFunc(endfunc)
endfunction


function AddCountdown_Local takes integer howmanybars,unit whatunit,real interval,timer k returns texttag
local string barcount= " "
local integer i=1
local texttag a
local location c=GetUnitLoc(whatunit)
loop
exitwhen i > howmanybars
set barcount=barcount + "I"
set i=i + 1
endloop
call CreateTextTagLocBJ(barcount, c, 0, 6, 100, 100, 100, 0)
    call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
set a=bj_lastCreatedTextTag
    call SetTextTagFadepointBJ(a, howmanybars * interval)
    call SetTextTagLifespanBJ(a, howmanybars * interval + 1)
call SaveTextTagHandle((udg_hash), GetHandleId(k), StringHash("countdown"), a) // INLINED!!
call SaveInteger((udg_hash), GetHandleId(k), StringHash("progress"), 0) // INLINED!!
call SaveInteger((udg_hash), GetHandleId(k), StringHash("barcount"), howmanybars) // INLINED!!
call RemoveLocation(c)
return a
endfunction
function AddBarProgress_Local takes timer k returns nothing
local texttag a= LoadTextTagHandle((udg_hash), GetHandleId(k), StringHash("countdown")) // INLINED!!
local integer progress= LoadInteger((udg_hash), GetHandleId(k), StringHash("progress")) // INLINED!!
local integer barcount= LoadInteger((udg_hash), GetHandleId(k), StringHash("barcount")) // INLINED!!
local string barstring= LoadStr((udg_hash), GetHandleId(k), StringHash("barcolor")) // INLINED!!
local integer i=1
if barcount <= progress then
call DestroyBar(k)
endif
loop
exitwhen i > progress
set barstring=barstring + "I"
set i=i + 1
endloop
set barstring=barstring + "|r"
loop
exitwhen i > barcount
set barstring=barstring + "I"
set i=i + 1
endloop
call SetTextTagTextBJ(a, barstring, 6.0)
call SaveInteger((udg_hash), GetHandleId(k), StringHash("progress"), progress + 1) // INLINED!!
endfunction
function RegisterOnBarFull_Local takes texttag a,string whatfunc,timer k returns nothing
call SaveStr((udg_hash), GetHandleId(k), StringHash("onend"), whatfunc) // INLINED!!
endfunction
function BarCountUpLoop_Local takes nothing returns nothing
local unit a= LoadUnitHandle((udg_hash), GetHandleId(GetExpiredTimer()), StringHash("countuploop")) // INLINED!!
local texttag t=LoadTextTagHandle((udg_hash), GetHandleId(GetExpiredTimer()), StringHash("countdown")) // INLINED!!
local location n=GetUnitLoc(a)
set udg_TempPoint=n
set udg_TempTexttag=t
call ForForce(GetPlayersAll(), function CountdownBar_ShowLocal)
call RemoveLocation(n)
call SetTextTagPos(t, GetUnitX(a), GetUnitY(a), 0.00)
call AddBarProgress(GetExpiredTimer())
endfunction


function CountUpBar_Local takes unit whofor,integer howmanybars,real interval,string endfunc returns nothing
local real duration= I2R(howmanybars) * interval
local timer k=CreateTimer()
local boolexpr lolz
local timer end=CreateTimer()
local texttag a= AddCountdown(howmanybars , whofor , interval , k)
call SaveStr((udg_hash), GetHandleId(k), StringHash("barcolor"), udg_CountUpBarColor) // INLINED!!
call SaveInteger((udg_hash), GetHandleId(k), StringHash("progress"), 1) // INLINED!!
call RegisterOnBarFull_Local(a , endfunc , k)
call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("countuploop"), whofor) // INLINED!!
call TimerStart(k, interval, true, function BarCountUpLoop_Local)
if udg_CountupBar_HideTempBool == true then
set udg_CountupBar_HideTempBool=false
call ShowTextTagForceBJ(false, a, udg_TempPlayerGroup)
call DestroyForce(udg_TempPlayerGroup)
endif
call SaveUnitHandle((udg_hash), GetHandleId(end), StringHash("whofor"), whofor) // INLINED!!
call SaveStr((udg_hash), GetHandleId(end), StringHash("endfunc"), endfunc) // INLINED!!
call SaveTimerHandle((udg_hash), GetHandleId(end), StringHash("k"), k) // INLINED!!
call SaveTimerHandle((udg_hash), GetHandleId(whofor), StringHash("CountupTimer"), k) // INLINED!!
call SaveTextTagHandle((udg_hash), GetHandleId(k), StringHash("countdown"), a) // INLINED!!
call SaveTimerHandle((udg_hash), GetHandleId(k), StringHash("end"), end) // INLINED!!
call TimerStart(end, duration, false, function CountUpBar_Execute_Local)
call PolledWait(duration)
set udg_CountupBarTemp=whofor
//PolledWait for compatibility with older versions
//call FlushChildHashtable(LS(), GetHandleId(k))
//call PauseTimer(k)
//call DestroyTimer(k)
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
function BarLocal_RunDummy takes nothing returns nothing
//This function, used in conjunction with ExecuteFunc(), won't block thread execution.
call CountUpBar_Local(udg_TempUnit , udg_TempInt , udg_TempReal , udg_TempString)
endfunction
//
//--------------------------

////////////////////////////////////////////////////////////////////////////////////////////////////////
//Various dummy functions to link JASS counter bars with GUI triggers.
function MutantUpgrade takes nothing returns nothing
    call TriggerExecute(gg_trg_MutantUpgradeFinish)
endfunction

function ParasiteUpgrade takes nothing returns nothing
    call TriggerExecute(gg_trg_ParasiteUpgradeFinish)
endfunction

function FusionBombExplosion takes nothing returns nothing
    call TriggerExecute(gg_trg_FusionBombExplode)
endfunction

function FusionBombExplosion2 takes nothing returns nothing
    call TriggerExecute(gg_trg_ProjectedExplosionExplode)
endfunction

function CarrierSackExplosion takes nothing returns nothing
    call TriggerExecute(gg_trg_CarrierSackExplode)
endfunction


function TeleportBombExplosion takes nothing returns nothing
    call TriggerExecute(gg_trg_TeleportBombExplode)
endfunction
function BlackHoleExplosion takes nothing returns nothing
    call TriggerExecute(gg_trg_BlackHoleExplode)
endfunction

function TacNukeExplosion takes nothing returns nothing
call TriggerExecute(gg_trg_TacticalNuclearExplosion)
endfunction

//function ShieldsGoUp takes nothing returns nothing
  //  call TriggerExecute( gg_trg_ShieldsUp )
//endfunction

function RogueAndroidUnpause takes nothing returns nothing
    call TriggerExecute(gg_trg_UnpauseRogueAndroidChip)
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//From trial and error we have learned the ExecuteFunc("SFXClean") many times in a row
//will disconnect the silly Macintosh users, a la planetary bombardment.
//Thinking about it maybe these still disconnect silly Macintosh users?
//Note that the stuff below just destroys the last created function after like 10 seconds.
function SFXClean takes nothing returns nothing
local effect a=GetLastCreatedEffectBJ()
call PolledWait(10.0)
call DestroyEffect(a)
endfunction

function CleanSFX takes nothing returns nothing
local effect a=GetLastCreatedEffectBJ()
call PolledWait(10.0)
call DestroyEffect(a)
endfunction


function SFXClean2 takes nothing returns nothing
local effect a=GetLastCreatedEffectBJ()
call PolledWait(0.5)
call DestroyEffect(a)
endfunction
function SFXThreadClean_Child takes nothing returns nothing
local timer t=GetExpiredTimer()
call DestroyEffect(LoadEffectHandle((udg_hash), GetHandleId(t), StringHash("a"))) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call DestroyTimer(t)
endfunction

function SFXThreadClean takes nothing returns nothing
//Uses a timer for thread safety.
local effect a=GetLastCreatedEffectBJ()
local timer t=CreateTimer()
call TimerStart(t, 10.0, false, function SFXThreadClean_Child)
call SaveEffectHandle((udg_hash), GetHandleId(t), StringHash("a"), a) // INLINED!!
endfunction
function SFXThreadCleanTimed takes nothing returns nothing
//Uses a timer for thread safety.
local effect a=GetLastCreatedEffectBJ()
local timer t=CreateTimer()
call TimerStart(t, udg_TempReal, false, function SFXThreadClean_Child)
call SaveEffectHandle((udg_hash), GetHandleId(t), StringHash("a"), a) // INLINED!!
endfunction
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
//
function BombEndShaking takes nothing returns nothing
//This will stop shaking the camera after the player has viewed a fusion bomb.
local player a=udg_TempPlayer
    call PolledWait(3.00)
    call CameraClearNoiseForPlayer(a)
endfunction

function Remove2_CallBack takes nothing returns nothing
local timer t=GetExpiredTimer()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("u")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call DestroyTimer(t)
call RemoveUnit(a)
endfunction

function Remove2 takes nothing returns nothing
local timer t=CreateTimer()
//Removes a unit after like two seconds.
local unit a=udg_TempUnit
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("u"), a) // INLINED!!
call TimerStart(t, 2.0, false, function Remove2_CallBack)
endfunction
function Preserve4 takes nothing returns nothing
//Preserves a unit as tempunit for 4 seconds.
//Do not ExecuteFunc(), that would be pointless
local unit a=udg_TempUnit
call PolledWait(4)
set udg_TempUnit=a
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
function CinematicFilterGenericForPlayer takes player whichPlayer,real duration,blendmode bmode,string tex,real red0,real green0,real blue0,real trans0,real red1,real green1,real blue1,real trans1 returns nothing
    //A cinematic filter that can be used locally.
    if udg_Player_Blinded[GetConvertedPlayerId(whichPlayer)] != true then
    if ( GetLocalPlayer() == whichPlayer ) then
        call SetCineFilterTexture(tex)
        call SetCineFilterBlendMode(bmode)
        call SetCineFilterTexMapFlags(TEXMAP_FLAG_NONE)
        call SetCineFilterStartUV(0, 0, 1, 1)
        call SetCineFilterEndUV(0, 0, 1, 1)
        call SetCineFilterStartColor(PercentTo255(red0), PercentTo255(green0), PercentTo255(blue0), PercentTo255(100 - trans0))
        call SetCineFilterEndColor(PercentTo255(red1), PercentTo255(green1), PercentTo255(blue1), PercentTo255(100 - trans1))
        call SetCineFilterDuration(duration)
        call DisplayCineFilter(true)
    endif
    endif
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
///

////////////////////////////////////////////////////////////////////////////////////////////////////////
function PendUpgrade takes nothing returns nothing
local unit a=udg_TempUnit
local integer q=udg_TempUnitType
local integer b
local player k=udg_TempPlayer
local unit o
//Waits for a good time to apply spawn upgrades. A good time is considered as when you are not in an escape pod.
loop
call PolledWait(1.0)
exitwhen RectContainsUnit(gg_rct_Timeout, a) == false

endloop
set b=GetConvertedPlayerId(k)
set bj_forLoopBIndex=1
            set bj_forLoopBIndexEnd=6
            loop
                exitwhen bj_forLoopBIndex > bj_forLoopBIndexEnd
                set udg_TempItemArray[GetForLoopIndexB()]=UnitItemInSlotBJ(udg_Playerhero[b], GetForLoopIndexB())
                call UnitRemoveItemFromSlotSwapped(GetForLoopIndexB(), udg_Playerhero[b])
                set bj_forLoopBIndex=bj_forLoopBIndex + 1
            endloop
//set k=GetOwningPlayer(a)
set o=ReplaceUnitBJ(a, q, bj_UNIT_STATE_METHOD_RELATIVE)
set udg_Playerhero[GetConvertedPlayerId(k)]=o
            set bj_forLoopBIndex=1
            set bj_forLoopBIndexEnd=6
            loop
                exitwhen bj_forLoopBIndex > bj_forLoopBIndexEnd
                call UnitAddItemSwapped(udg_TempItemArray[GetForLoopIndexB()], o)
                set udg_TempItemArray[GetForLoopIndexB()]=null
                set bj_forLoopBIndex=bj_forLoopBIndex + 1
            endloop
            call SelectUnitForPlayerSingle(o, GetOwningPlayer(o))
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
function DoorResetLock takes nothing returns nothing
//Used in the engineer's role ability, DoorHack.
//Opens and enables said door.
local unit a=udg_CountupBarTemp
local destructable k=LoadDestructableHandle((udg_hash), GetHandleId(a), StringHash("kittens")) // INLINED!!
    set udg_TempTrigger=LoadTriggerHandle((udg_hash), GetHandleId(k), StringHash("t1")) // INLINED!!
        call EnableTrigger(udg_TempTrigger)
        call TriggerExecute(udg_TempTrigger)
        call KillDestructable(LoadDestructableHandle((udg_hash), GetHandleId(udg_TempTrigger), StringHash("doorpath"))) // INLINED!!
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////

function LoopDynamicLightningVisibility takes lightning l,real startx,real starty,real endx,real endy returns nothing
local real midx= ( startx + endx ) / 2.0
local real midy= ( starty + endy ) / 2.0
local integer i
local integer r=GetHandleId(l)
local boolean k
//WC3's lightning system sucks in that if you want to have lightning that lasts a long time and is only visible if you are next to it,
//The lightning will not show if you could not see its creation, or alternatively shows to everyone!
//With this system, lightning will dynamically check visibility to see if players should see the lightning.
//It hides the lightning with alpha!
loop
exitwhen LoadBoolean((udg_hash), GetHandleId(l), StringHash("w")) != true // INLINED!!
set i=0
loop
exitwhen i > 11
if IsVisibleToPlayer(startx, starty, Player(i)) or IsVisibleToPlayer(midx, midy, Player(i)) or IsVisibleToPlayer(endx, endy, Player(i)) then
if GetLocalPlayer() == Player(i) then
call SetLightningColor(l, 1, 1, 1, 1)
endif
else
if GetLocalPlayer() == Player(i) then
call SetLightningColor(l, 1, 1, 1, 0)
endif
endif
set i=i + 1
endloop
call PolledWait(0.2)
endloop
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////
//function AwardAchievement takes integer achievement, player achiever returns nothing
//call SaveBoolean(LS(), GetHandleId(gg_trg_AchievementsInit), StringHash("Player_" + I2S(GetConvertedPlayerId(achiever)) + "_won_" + I2S(achievement)),true)
//endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////

function RubbleDestroy takes nothing returns nothing
if GetDestructableTypeId(GetEnumDestructable()) == 'B003' or GetDestructableTypeId(GetEnumDestructable()) == 'B007' then
call KillDestructable(GetEnumDestructable())
endif
endfunction

function FleshGolemLoop takes nothing returns nothing
//The flesh golem crushes nearby rubble and this is the triggering for it.
local unit a=udg_TempUnit
local location b

    loop
        exitwhen IsUnitDeadBJ(a)
            set b=GetUnitLoc(a)
            call EnumDestructablesInCircleBJ(225.0, b, function RubbleDestroy)
            call RemoveLocation(b)
            call PolledWait(0.1)
    endloop
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
//Not documenting this function since force shields are no longer in the game!
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
function BlockDamage_RemoveAbility takes nothing returns nothing
local timer t=GetExpiredTimer()
local unit blockee=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("blockee")) // INLINED!!
local real o=GetUnitState(blockee, UNIT_STATE_LIFE)
call UnitRemoveAbility(blockee, 'A05G')
call SaveBoolean((udg_hash), GetHandleId(t), StringHash("DamageBlock_Thread"), false) // INLINED!!
call SetUnitState(blockee, UNIT_STATE_LIFE, LoadReal((udg_hash), GetHandleId(t), StringHash("restore")) - ( 90000 - o )) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call DestroyTimer(t)
endfunction

function BlockDamage takes unit blockee,real amount returns nothing
//Blocks the damage a unit would recieve.
//This needs to be executed before the damage happens, which is when AnyUnitIsDamaged triggers.
local timer t=CreateTimer()
local real o=GetUnitState(blockee, UNIT_STATE_LIFE)
if not ( HaveSavedBoolean((udg_hash), GetHandleId(blockee), StringHash("DamageBlock_Thread")) and LoadBoolean((udg_hash), GetHandleId(blockee), StringHash("DamageBlock_Thread")) ) then // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("blockee"), blockee) // INLINED!!
call SaveBoolean((udg_hash), GetHandleId(t), StringHash("DamageBlock_Thread"), true) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("restore"), o + amount) // INLINED!!
call UnitAddAbility(GetTriggerUnit(), 'A05G')
call SetUnitState(blockee, UNIT_STATE_LIFE, 90000)
call TimerStart(t, 0, false, function BlockDamage_RemoveAbility)
endif
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
function RectOfDoom_Kill takes nothing returns nothing
call KillUnit(GetEnumUnit())
endfunction

function RectOfDoom takes rect r returns nothing
//This keeps murdering everything in a dead ship or station for about five minutes.
local integer i=0
local group g
loop
exitwhen i > 300
set i=i + 1
call PolledWait(1.0)
set g=GetUnitsInRectAll(r)
call ForGroup(g, function RectOfDoom_Kill)
call DestroyGroup(g)
endloop
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
//All of these are mostly obvious, and use straightforward linear gradients.
function FadeUnitOverTime_Child takes nothing returns nothing
local timer t=GetExpiredTimer()
local real alpha=LoadReal((udg_hash), GetHandleId(t), StringHash("alpha")) // INLINED!!
local real alphaPerTick=LoadReal((udg_hash), GetHandleId(t), StringHash("alphaPerTick")) // INLINED!!
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
call SetUnitVertexColorBJ(a, 100, 100, 100, alpha + alphaPerTick)
if alpha + alphaPerTick <= 0 then
if LoadBoolean((udg_hash), GetHandleId(t), StringHash("remove")) then // INLINED!!
call RemoveUnit(a)
endif
call PauseTimer(t)
call DestroyTimer(t)
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
return
endif
call SaveReal((udg_hash), GetHandleId(t), StringHash("alpha"), alpha + alphaPerTick) // INLINED!!
endfunction

function FadeUnitOverTime takes unit a,real duration,boolean remove returns nothing
local timer t=CreateTimer()
call SaveReal((udg_hash), GetHandleId(t), StringHash("alpha"), 100) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("alphaPerTick"), - 100 / ( duration / 0.04 )) // INLINED!!
call SaveBoolean((udg_hash), GetHandleId(t), StringHash("remove"), remove) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), a) // INLINED!!
call TimerStart(t, 0.04, true, function FadeUnitOverTime_Child)
endfunction


function TintUnitOverTime_Child takes nothing returns nothing
local timer t=GetExpiredTimer()
local real red=LoadReal((udg_hash), GetHandleId(t), StringHash("red")) // INLINED!!
local real green=LoadReal((udg_hash), GetHandleId(t), StringHash("green")) // INLINED!!
local real blue=LoadReal((udg_hash), GetHandleId(t), StringHash("blue")) // INLINED!!
local real redPerTick=LoadReal((udg_hash), GetHandleId(t), StringHash("redPerTick")) // INLINED!!
local real greenPerTick=LoadReal((udg_hash), GetHandleId(t), StringHash("greenPerTick")) // INLINED!!
local real bluePerTick=LoadReal((udg_hash), GetHandleId(t), StringHash("bluePerTick")) // INLINED!!
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
local real duration=LoadReal((udg_hash), GetHandleId(t), StringHash("duration")) // INLINED!!
local real elapsed=LoadReal((udg_hash), GetHandleId(t), StringHash("elapsed")) // INLINED!!
call SetUnitVertexColor(a, R2I(red + redPerTick), R2I(green + greenPerTick), R2I(blue + bluePerTick), 255)
if elapsed >= duration then
call PauseTimer(t)
call DestroyTimer(t)
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
return
endif
call SaveReal((udg_hash), GetHandleId(t), StringHash("elapsed"), elapsed + 0.1) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("green"), green + greenPerTick) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("blue"), blue + bluePerTick) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("red"), red + redPerTick) // INLINED!!
endfunction

function TintUnitOverTime takes unit a,real duration,integer red,integer green,integer blue returns nothing
local timer t=CreateTimer()
call SaveReal((udg_hash), GetHandleId(t), StringHash("red"), 255) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("green"), 255) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("blue"), 255) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("greenPerTick"), ( green - 255 ) / ( duration / 0.10 )) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("bluePerTick"), ( blue - 255 ) / ( duration / 0.10 )) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("redPerTick"), ( red - 255 ) / ( duration / 0.10 )) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("duration"), duration) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("elapsed"), 0) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), a) // INLINED!!
call TimerStart(t, 0.10, true, function TintUnitOverTime_Child)
endfunction

function SizeUnitOverTime_Child takes nothing returns nothing
local timer t=GetExpiredTimer()
local real startsize=LoadReal((udg_hash), GetHandleId(t), StringHash("startsize")) // INLINED!!
local real sizePerTick=LoadReal((udg_hash), GetHandleId(t), StringHash("sizePerTick")) // INLINED!!
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
call SetUnitScale(a, startsize + sizePerTick, startsize + sizePerTick, startsize + sizePerTick)
if sizePerTick > 0 then
if startsize + sizePerTick >= LoadReal((udg_hash), GetHandleId(t), StringHash("endsize")) then // INLINED!!
if LoadBoolean((udg_hash), GetHandleId(t), StringHash("remove")) then // INLINED!!
call RemoveUnit(a)
endif
call PauseTimer(t)
call DestroyTimer(t)
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
return
endif
else
if startsize + sizePerTick <= LoadReal((udg_hash), GetHandleId(t), StringHash("endsize")) then // INLINED!!
if LoadBoolean((udg_hash), GetHandleId(t), StringHash("remove")) then // INLINED!!
call RemoveUnit(a)
endif
call PauseTimer(t)
call DestroyTimer(t)
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
return
endif
endif
call SaveReal((udg_hash), GetHandleId(t), StringHash("startsize"), startsize + sizePerTick) // INLINED!!
endfunction

function SizeUnitOverTime takes unit a,real duration,real startsize,real endsize,boolean remove returns nothing
//Sadly this function cannot get a unit's default size.
local timer t=CreateTimer()
call SaveReal((udg_hash), GetHandleId(t), StringHash("startsize"), startsize) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("endsize"), endsize) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("sizePerTick"), ( endsize - startsize ) / ( duration / 0.04 )) // INLINED!!
call SaveBoolean((udg_hash), GetHandleId(t), StringHash("remove"), remove) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), a) // INLINED!!
call TimerStart(t, 0.04, true, function SizeUnitOverTime_Child)
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////




function DamageUnitOverTime_Child takes nothing returns nothing
local timer t=GetExpiredTimer()
local real damage=LoadReal((udg_hash), GetHandleId(t), StringHash("damage")) // INLINED!!
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
local unit damager=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("damager")) // INLINED!!
call UnitDamageTarget(damager, a, damage, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)

endfunction

function DamageUnitOverTime_End takes nothing returns nothing
local timer o=GetExpiredTimer()
local timer t=LoadTimerHandle((udg_hash), GetHandleId(o), StringHash("timer")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(o)) // INLINED!!
call PauseTimer(t)
call DestroyTimer(t)
call DestroyTimer(o)
endfunction

function DamageUnitOverTime takes unit target,unit damager,real duration,real damage returns nothing
local timer t=CreateTimer()
local timer o=CreateTimer()
//Used in the Kyo cannon's hit.
call SaveReal((udg_hash), GetHandleId(t), StringHash("damage"), damage / duration / 25) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), target) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("damager"), damager) // INLINED!!
call SaveTimerHandle((udg_hash), GetHandleId(o), StringHash("timer"), t) // INLINED!!
call TimerStart(t, 0.04, true, function DamageUnitOverTime_Child)
call TimerStart(o, duration, false, function DamageUnitOverTime_End)
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////

function Player_IsDead takes player p returns boolean
return IsPlayerInForce(p, udg_DeadGroup)
endfunction

/////////////
function SunLoop_Blind takes nothing returns nothing
if GetEnumUnit() == (udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer((GetEnumUnit())))]) then // INLINED!!
call CinematicFilterGenericForPlayer(GetOwningPlayer(GetEnumUnit()) , 7.0 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\White_mask.blp" , 100 , 100 , 100 , udg_TempReal / 9 , 0 , 0 , 0 , 100)
endif
endfunction

function SunLoop takes unit a returns nothing
local unit sun=gg_unit_h01A_0197
local location q
local location b
local real r
local rect om=udg_SpaceObject_Rect[GetUnitUserData(a)]
local group g
loop
set q=GetUnitLoc(a)
set b=GetUnitLoc(sun)
set r=DistanceBetweenPoints(q, b)
call RemoveLocation(q)
call RemoveLocation(b)
exitwhen r > 850
call UnitDamageTarget(sun, a, udg_SunDamage * ( 850 - r ), false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
if om != null then
set g=GetUnitsInRectAll(om)
set udg_TempReal=r
call ForGroup(g, function SunLoop_Blind)
call DestroyGroup(g)
endif
call PolledWait(1.0)
endloop

endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////

function AngleBetweenUnits takes unit a,unit b returns real
//local location c=GetUnitLoc(a)
//local location d=GetUnitLoc(b)
//local real r=AngleBetweenPoints(c,d)
//call RemoveLocation(c)
//set c=null
//call RemoveLocation(d)
//set d=null
//return r
return bj_RADTODEG * Atan2(GetUnitY(b) - GetUnitY(a), GetUnitX(b) - GetUnitX(a))
endfunction

function DistanceBetweenUnits takes unit unitA,unit unitB returns real
    return SquareRoot(( GetUnitX(unitB) - GetUnitX(unitA) ) * ( GetUnitX(unitB) - GetUnitX(unitA) ) + ( GetUnitY(unitB) - GetUnitY(unitA) ) * ( GetUnitY(unitB) - GetUnitY(unitA) ))
endfunction


////////////////////////////////////////////////////////////////////////////////////////////////////////

//Want to make a timer for the goo? Want to make the goo die on death? It is currently impossible, here is how to remake it:
//Cache the rects (q), and cache the special effects, and ofc link them (same [i])
//When damage is taken, find the rect you belong, and delete the special effect linked with it
function DefilerGoo_ExpireDeath takes nothing returns nothing
    local timer expiredTimer= GetExpiredTimer()
    local region damageRegion
    local rect rectToDelete
    
    //Get region since its linked via defiler mutant unit
    set damageRegion=LoadRegionHandle((udg_hash), GetHandleId(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]), StringHash("r")) // INLINED!!
    
    //Get rect to delete since it is linked via timer
    set rectToDelete=LoadRectHandle((udg_hash), GetHandleId(expiredTimer), StringHash("DefilerGoo_ExpireSlime")) // INLINED!!
    
    call RegionClearRect(damageRegion, rectToDelete)
    call DestroyEffect(LoadEffectHandle((udg_hash), GetHandleId(expiredTimer), StringHash("DefilerGoo_ExpireSlime"))) // INLINED!!

endfunction

function DefilerGoo_Create takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("a")) // INLINED!!
local location b
local region r=LoadRegionHandle((udg_hash), GetHandleId(k), StringHash("r")) // INLINED!!
local rect q
local real slimeSize= 20.0
local effect slimeVFX
local timer slimeExpirationTimer

    //If defiler is dead, stop the timer
    if (IsPlayerInForce((GetOwningPlayer(a)), udg_DeadGroup)) then // INLINED!!
        call PauseTimer(k)
        call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
        call RemoveRegion(r)
        call DestroyTimer(k)
    else
        set b=GetUnitLoc(a)
        if not ( IsLocationInRegion(r, b) ) then
            set slimeVFX=AddSpecialEffectLoc("Abilities\\Spells\\NightElf\\MoonWell\\MoonWellTarget.mdl", b)
            set q=Rect(GetLocationX(b) - slimeSize, GetLocationY(b) - slimeSize, GetLocationX(b) + slimeSize, GetLocationY(b) + slimeSize)
            call RegionAddRect(r, q)
            
            //Timer here!
            set slimeExpirationTimer=CreateTimer()
            call SaveRectHandle((udg_hash), GetHandleId(slimeExpirationTimer), StringHash("DefilerGoo_ExpireSlime"), q) // INLINED!!
            call SaveEffectHandle((udg_hash), GetHandleId(slimeExpirationTimer), StringHash("DefilerGoo_ExpireSlime"), slimeVFX) // INLINED!!
            call TimerStart(slimeExpirationTimer, 240, false, function DefilerGoo_ExpireDeath)
            
            call RemoveRect(q)
            set q=null
        endif
    
        call RemoveLocation(b)
        set b=null
    endif
    
endfunction

function DefilerGoo_UnDamage takes nothing returns nothing
    call SaveBoolean((udg_hash), GetHandleId(GetTriggerUnit()), StringHash("DefilerGoo_Thread"), true) // INLINED!!
endfunction

function DefilerGoo_Damage takes nothing returns nothing
    local region r=LoadRegionHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("r")) // INLINED!!
    local unit b=GetTriggerUnit()
    local boolean m

    if not ( HaveSavedBoolean((udg_hash), GetHandleId(b), StringHash("DefilerGoo_Thread")) ) then // INLINED!!
        set m=true
    else
        set m=LoadBoolean((udg_hash), GetHandleId(b), StringHash("DefilerGoo_Thread")) // INLINED!!
    endif
    
    if m and not ( GetUnitAbilityLevel(b, 'A0AS') == 1 or GetUnitTypeId(b) == 'h01X' ) then
        call SaveBoolean((udg_hash), GetHandleId(b), StringHash("DefilerGoo_Thread"), true) // INLINED!!
        loop
            exitwhen IsUnitInRegion(r, b) == false
                call UnitDamageTarget(b, b, 10.0, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
                call PolledWait(0.5)
        endloop
    endif
endfunction

function DefilerGoo takes nothing returns nothing
local unit a=udg_TempUnit
local timer k=CreateTimer()
local region r=CreateRegion()
local trigger b=CreateTrigger()
local trigger c=CreateTrigger()

call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("a"), a) // INLINED!!
call SaveRegionHandle((udg_hash), GetHandleId(b), StringHash("r"), r) // INLINED!!
call SaveRegionHandle((udg_hash), GetHandleId(k), StringHash("r"), r) // INLINED!!
call SaveRegionHandle((udg_hash), GetHandleId(a), StringHash("r"), r) // INLINED!!

call TimerStart(k, 0.1, true, function DefilerGoo_Create)
call TriggerRegisterEnterRegionSimple(b, r)
call TriggerAddAction(b, function DefilerGoo_Damage)
call TriggerRegisterLeaveRegionSimple(b, r)
call TriggerAddAction(b, function DefilerGoo_UnDamage)
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
function HostileSpaceAI_Cond takes nothing returns boolean
if GetOwningPlayer(GetFilterUnit()) != Player(PLAYER_NEUTRAL_AGGRESSIVE) and IsUnitAliveBJ(GetFilterUnit()) then
return true
endif
return false

endfunction

function HostileSpaceAI takes unit a returns nothing
//Will break thread execution!
//Use below function to circumvent this.
//Basic AI is to just attack towards units in space. Will not attack Minertha until everything else is dead.
local group g
local location o

	loop
		exitwhen IsUnitDeadBJ(a)
			set o=GetUnitLoc(a)
			set g=GetUnitsInRectMatching(gg_rct_Space, Condition(function HostileSpaceAI_Cond))
			call RemoveLocation(o)

			set o=GetUnitLoc(FirstOfGroup(g))
			call IssuePointOrderLoc(a, "attack", o)
			call RemoveLocation(o)
			call DestroyGroup(g)

			call PolledWait(10.0)
	endloop
endfunction

function HostileSpaceAIForTempUnit takes nothing returns nothing
//For continued thread execution.
call HostileSpaceAI(udg_TempUnit)
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
function PlaySoundForPlayer takes sound toplay,player playfor returns nothing
if GetLocalPlayer() == playfor then
call StartSound(toplay)
endif
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////




function SlugglyAssassin takes unit sluggly returns nothing
//Part of the amusing but mostly impossible black hole secret.
local group g
local unit o
local rect r=udg_SectorId[GetUnitSector(sluggly)]
call UnitAddAbility(sluggly, 'AInv')
    call UnitAddItemByIdSwapped('I00N', sluggly)
    call UnitAddItemByIdSwapped('I00R', sluggly)
    call UnitAddAbility(sluggly, 'A03U')
        call UnitAddAbilityBJ('A02I', sluggly)
    call UnitAddAbilityBJ('AIl2', sluggly)
loop
exitwhen IsUnitAliveBJ(sluggly) == false
set g=GetUnitsInRectAll(r)
loop
exitwhen FirstOfGroup(g) == null
set o=FirstOfGroup(g)
call GroupRemoveUnit(g, o)
    if UnitHasItemOfTypeBJ(o, 'I01F') then
        if UnitHasItemOfTypeBJ(sluggly, 'I00N') then
            call UnitUseItemPoint(sluggly, UnitItemInSlotBJ(sluggly, 1), GetUnitX(o), GetUnitY(o))
        else
            if UnitHasItemOfTypeBJ(sluggly, 'I00R') then
                if DistanceBetweenUnits(sluggly , o) <= 600.0 then
                    call UnitUseItemPoint(sluggly, UnitItemInSlotBJ(sluggly, 2), GetUnitX(o), GetUnitY(o))
                else
                    call IssuePointOrder(sluggly, "move", GetUnitX(o), GetUnitY(o))
                endif
            else
                call UnitAddItemByIdSwapped('I00N', sluggly)
                call UnitAddItemByIdSwapped('I00R', sluggly)
            endif
        endif
    endif
endloop
call DestroyGroup(g)
set g=null
call PolledWait(2.0)
endloop


endfunction

function SlugglyAssassinAIForTempUnit takes nothing returns nothing
call SlugglyAssassin(udg_TempUnit)

endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
function RoboButler_Move takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("u")) // INLINED!!
local player c=LoadPlayerHandle((udg_hash), GetHandleId(k), StringHash("u2")) // INLINED!!
local unit b=(udg_Playerhero[GetConvertedPlayerId((c))]) // INLINED!!
local real angle=bj_RADTODEG * Atan2(GetUnitY(a) - GetUnitY(b), GetUnitX(a) - GetUnitX(b))
local real x=GetUnitX(b) + 75.0 * CosBJ(angle)
local real y=GetUnitY(b) + 75.0 * SinBJ(angle)
//Will not follow spacial alien into space. Instead will magically stay at the same spot, and warp to spacial alien when
//it boards.
if IsUnitDeadBJ(b) or b == null then
call RemoveUnit(a)
call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
call PauseTimer(k)
call DestroyTimer(k)
return
endif
if RectContainsCoords(gg_rct_Space, x, y) != true then
call SetUnitX(a, x)
call SetUnitY(a, y)
endif
if GetOwningPlayer(b) == Player(bj_PLAYER_NEUTRAL_EXTRA) or GetUnitTypeId(b) == 'h01D' or udg_Player_IsMasquerading[GetConvertedPlayerId(c)] or GetUnitAbilityLevel(b, 'A08D') >= 1 then
//The alien is in alien form or the mutant is a stalker. Cloaking will be applied.
call UnitAddAbility(a, 'Agho')
else
call UnitRemoveAbility(a, 'Agho')
endif
endfunction

function RoboButler takes nothing returns nothing
local unit a=udg_TempUnit
local player b=GetOwningPlayer(udg_TempUnit2)
local timer k=CreateTimer()
call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("u"), a) // INLINED!!
call SavePlayerHandle((udg_hash), GetHandleId(k), StringHash("u2"), b) // INLINED!!
call TimerStart(k, 0.04, true, function RoboButler_Move)
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
//Automatically ends the masquerader's impersonation after X seconds.
//Originally made for android and mutant, and to last 30 seconds.
//For ships, 60 seconds?
function Masquerade_TimerEnd takes player a,real duration returns nothing
    call PolledWait(duration)
    call ForceUICancelBJ(a)
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
function CastAbilityOnGroup takes group r,integer abil,string orderId returns nothing
local unit q
local unit o
loop
exitwhen FirstOfGroup(r) == null
set q=FirstOfGroup(r)
call GroupRemoveUnit(r, q)
if GetOwningPlayer(q) != Player(PLAYER_NEUTRAL_AGGRESSIVE) then
set o=CreateUnit(Player(PLAYER_NEUTRAL_AGGRESSIVE), 'e01Q', GetUnitX(q), GetUnitY(q), 0.0)
else
set o=CreateUnit(Player(1), 'e01Q', GetUnitX(q), GetUnitY(q), 0.0)
endif
call UnitAddAbility(o, abil)
call IssueTargetOrder(o, orderId, q)
endloop
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
//The below functions are useful in tracking pings: I.E. you are standing right outside a ship, use a tracking
//device, and see players inside the ship as well.
function GetUnitsInRectAndShips_Child takes nothing returns nothing
local group g
if udg_SpaceObject_Rect[GetUnitUserData(GetEnumUnit())] != null then
set g=GetUnitsInRectAll(udg_SpaceObject_Rect[GetUnitUserData(GetEnumUnit())])
call GroupAddGroup(g, local_GetUnitsInRectAndShips_Group)
call DestroyGroup(g)
endif
endfunction

function GetUnitsInRectAndShips takes rect r returns group
local group g=GetUnitsInRectAll(r)
set local_GetUnitsInRectAndShips_Group=g
call ForGroup(g, function GetUnitsInRectAndShips_Child)
return g
endfunction

function GetUnitsInRangeAndShips takes location m,real radius returns group
local group g=GetUnitsInRangeOfLocAll(radius, m)
set local_GetUnitsInRectAndShips_Group=g
call ForGroup(g, function GetUnitsInRectAndShips_Child)
return g
endfunction
function SHU_Test takes nothing returns nothing
if (udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer((GetEnumUnit())))]) == GetEnumUnit() then // INLINED!!
set SHU_Bool=true
endif
endfunction
function ShipHasUnits takes unit ship returns boolean
local group r=GetUnitsInRectAll(udg_SpaceObject_Rect[GetUnitUserData(ship)])
set SHU_Bool=false
call ForGroup(r, function SHU_Test)
return SHU_Bool
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
//Actually I think this code I stole from somewhere.
function AddFadingTextTag takes string text,real x,real y,integer red,integer green,integer blue,integer alpha returns nothing
    local texttag t= CreateTextTag()
    call SetTextTagText(t, text, 0.025)
    call SetTextTagPos(t, x, y, 0.00)
    call SetTextTagColor(t, red, green, blue, alpha)
    call SetTextTagVelocity(t, 0, 0.03)
    call SetTextTagVisibility(t, true)
    call SetTextTagFadepoint(t, 2)
    call SetTextTagLifespan(t, 3)
    call SetTextTagPermanent(t, false)
    set t=null
endfunction

function AddFadingTextTagLoc takes string text,location where,integer red,integer green,integer blue,integer alpha returns nothing
    call AddFadingTextTag(text , GetLocationX(where) , GetLocationY(where) , red , green , blue , alpha)
endfunction


////



////////////////////////////////////////////////////////////////////////////////////////////////////////
function PacificationBotSort takes nothing returns nothing
local unit b=GetEnumUnit()
if gg_unit_h04A_0144 != b and ( IsUnitType(b, UNIT_TYPE_MECHANICAL) or (GetUnitAbilityLevel((b), 'A070') == 1) ) and GetConvertedPlayerId(GetOwningPlayer(b)) <= 12 and GetUnitAbilityLevel(b, 'Avul') == 0 and IsUnitAliveBJ(b) and GetUnitTypeId(b) != 'n00A' then // INLINED!!
set udg_TempUnit=b
endif
endfunction

function PacificationBotDisable takes nothing returns nothing
local timer k=LoadTimerHandle((udg_hash), GetHandleId(gg_unit_h04A_0144), StringHash("director")) // INLINED!!
call PauseTimer(k)
call DestroyTimer(k)
call SetUnitTimeScale(gg_unit_h04A_0144, 0)
call PauseUnit(gg_unit_h04A_0144, true)
endfunction


function PacificationBotDirect takes nothing returns nothing
local location b=GetUnitLoc(gg_unit_h04A_0144)
local group g=GetUnitsInRangeOfLocAll(600.0, b)
local integer m=GetRandomInt(0, 10)

if IsUnitDeadBJ(gg_unit_h04A_0144) then
    call PacificationBotDisable()
    return
endif

//If pacification bot is player-controlled, gtfo
if GetOwningPlayer(gg_unit_h04A_0144) != Player(PLAYER_NEUTRAL_PASSIVE) then
    return
endif

set udg_TempUnit=null
call ForGroup(g, function PacificationBotSort)
call DestroyGroup(g)
if udg_TempUnit != null then
if GetRandomInt(0, 4) == 0 then
call AddFadingTextTag(udg_PacificationBotLines[m] , GetUnitX(gg_unit_h04A_0144) , GetUnitY(gg_unit_h04A_0144) , 255 , 0 , 0 , 255)
endif
call IssueTargetOrder(gg_unit_h04A_0144, "attack", udg_TempUnit)
else
if GetUnitCurrentOrder(gg_unit_h04A_0144) != String2OrderIdBJ("move") then
set udg_TempPoint=GetRandomLocInRect(gg_rct_ST4S2)
call IssuePointOrderLoc(gg_unit_h04A_0144, "move", udg_TempPoint)
call RemoveLocation(udg_TempPoint)
endif
endif
endfunction

function PacificationBotEnable takes nothing returns nothing
local timer k=CreateTimer()
if IsUnitAliveBJ(gg_unit_h04A_0144) then
    call SaveTimerHandle((udg_hash), GetHandleId(gg_unit_h04A_0144), StringHash("director"), k) // INLINED!!
    call SetUnitTimeScale(gg_unit_h04A_0144, 1.0)
    call PauseUnit(gg_unit_h04A_0144, false)
    call TimerStart(k, 2, true, function PacificationBotDirect)
else
    call DestroyTimer(k)
endif
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
//The effect that the Kyo has when it has a charged ATM
function DestroyLightningRing takes timer m returns nothing
call PauseTimer(m)
call RemoveUnit(LoadUnitHandle((udg_hash), GetHandleId(m), StringHash("ring"))) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(m)) // INLINED!!
call DestroyTimer(m)
endfunction

function LightningRingReverse takes nothing returns nothing
local timer m=GetExpiredTimer()
local unit ring=LoadUnitHandle((udg_hash), GetHandleId(m), StringHash("ring")) // INLINED!!
if GetUnitFlyHeight(ring) > 300 then
call SetUnitFlyHeight(ring, 0, 1400)
else
call SetUnitFlyHeight(ring, 700, 1400)
endif
call SetUnitFacing(ring, GetUnitFacing(ring) + 179.0)
endfunction

function LightningRing takes unit a returns timer
local unit ring=CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'e01Y', GetUnitX(a), GetUnitY(a), GetRandomDirectionDeg())
local timer m=CreateTimer()
call SaveUnitHandle((udg_hash), GetHandleId(m), StringHash("ring"), ring) // INLINED!!
call SetUnitFlyHeight(ring, 700, 1400)
call TimerStart(m, 0.5, true, function LightningRingReverse)
return m
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
//The zappy ATM effect.
function DestroyLightningPeriod takes nothing returns nothing
local lightning k=bj_lastCreatedLightning
call PolledWait(1.0)
call DestroyLightning(k)
endfunction

function AddLightningStormEx takes string codename,real x1,real y1,real z1,real x2,real y2,real z2,integer number,real variation returns nothing
local integer i=1
loop
exitwhen i > number
set bj_lastCreatedLightning=AddLightningEx(codename, false, x1 + GetRandomReal(- variation, variation), y1 + GetRandomReal(- variation, variation), z1 + GetRandomReal(- variation, variation), x2 + GetRandomReal(- variation, variation), y2 + GetRandomReal(- variation, variation), z2 + GetRandomReal(- variation, variation))
call ExecuteFunc("DestroyLightningPeriod")
set i=i + 1
endloop
endfunction

////////////////////////////////////////////////////////////////////////////////////////////////////////
//Checks to see that there are no elevated cliff level sbetween locations a and b, and no SPEHSS
function TerrainLineCheck takes location a,location b,integer resolution returns boolean
local real dist=DistanceBetweenPoints(a, b)
local real angle=AngleBetweenPoints(a, b)
local real interval=dist / I2R(resolution)
local integer i=1
local boolean clear=true
local location c=Location(GetLocationX(a), GetLocationY(a))
local location d
local integer defaultHeight=GetTerrainCliffLevel(GetLocationX(a), GetLocationY(a))
loop
exitwhen ( i > resolution ) or not ( clear )
set d=PolarProjectionBJ(c, interval, angle)
if GetTerrainCliffLevel(GetLocationX(d), GetLocationY(d)) > defaultHeight or GetTerrainType(GetLocationX(d), GetLocationY(d)) == 'Vcbp' then
set clear=false
endif
call RemoveLocation(c)
set c=d
set i=i + 1
endloop
call RemoveLocation(d)
return clear
endfunction
////////////////////////////////////////////////////////////////////////////////////////////////////////
function AsteroidHit takes nothing returns nothing
local unit asteroid=LoadUnitHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("asteroid")) // INLINED!!
if (GetUnitAbilityLevel((GetTriggerUnit()), 'A072') == 1) then // INLINED!!
call UnitDamageTarget(asteroid, GetTriggerUnit(), GetUnitState(asteroid, UNIT_STATE_LIFE) * 4, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
call KillUnit(asteroid)
endif
if (GetUnitAbilityLevel((GetTriggerUnit()), 'A071') == 1) then // INLINED!!
call UnitDamageTarget(asteroid, GetTriggerUnit(), 3000, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
call Push(GetTriggerUnit() , 500.0 , 150.0 , AngleBetweenUnits(asteroid , GetTriggerUnit()))
endif
endfunction
function AsteroidDeath takes nothing returns nothing
local trigger d=GetTriggeringTrigger()
local unit asteroid=LoadUnitHandle((udg_hash), GetHandleId(d), StringHash("asteroid")) // INLINED!!
local trigger t=LoadTriggerHandle((udg_hash), GetHandleId(d), StringHash("t")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call DestroyTrigger(t)
call DestroyTrigger(d)
call CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'e01E', GetUnitX(asteroid), GetUnitY(asteroid), GetRandomDirectionDeg())
endfunction
function Asteroid_LeaveCheck takes nothing returns nothing
local unit asteroid=LoadUnitHandle((udg_hash), GetHandleId(GetExpiredTimer()), StringHash("asteroid")) // INLINED!!
local real x=GetUnitX(asteroid)
local real y=GetUnitY(asteroid)
if x < 6756 or x > 16129 or y > - 6749 or y < - 16203 then
call SetUnitPosition(asteroid, 144, 1444)
call KillUnit(asteroid)
endif
if IsUnitDeadBJ(asteroid) then
call PauseTimer(GetExpiredTimer())
call FlushChildHashtable((udg_hash), GetHandleId(GetExpiredTimer())) // INLINED!!
call DestroyTimer(GetExpiredTimer())
endif
endfunction
function GiantAsteroid takes unit asteroid,real target returns nothing
local trigger t=CreateTrigger()
local trigger d=CreateTrigger()
local timer m=CreateTimer()
local real r=target
call Push(asteroid , 50.0 + GetRandomReal(- 30.0, 40.0) , 0 , r)
call SaveUnitHandle((udg_hash), GetHandleId(m), StringHash("asteroid"), asteroid) // INLINED!!
call TriggerRegisterUnitInRangeSimple(t, 90.0, asteroid)
call TriggerAddAction(t, function AsteroidHit)
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("asteroid"), asteroid) // INLINED!!
call TriggerRegisterUnitEvent(d, asteroid, EVENT_UNIT_DEATH)
call TriggerAddAction(d, function AsteroidDeath)
call SaveUnitHandle((udg_hash), GetHandleId(d), StringHash("asteroid"), asteroid) // INLINED!!
call SaveTriggerHandle((udg_hash), GetHandleId(d), StringHash("t"), t) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(m), StringHash("asteroid"), asteroid) // INLINED!!
call TimerStart(m, 1, true, function Asteroid_LeaveCheck)
endfunction
//////////////////////////////////////////////////////////////////
function IntelligentRubble takes location a,real max,real angle returns location
local location suppose
local location prev=Location(GetLocationX(a), GetLocationY(a))
local integer ID=GetSector(a)
local real i=0
if max > 40 then
loop
exitwhen i > max
set suppose=PolarProjectionBJ(a, i, angle)
if GetTerrainCliffLevelBJ(suppose) > GetTerrainCliffLevelBJ(a) or not ( LocInSector(suppose , ID) ) or GetTerrainType(GetLocationX(suppose), GetLocationY(suppose)) == 'Vcbp' then
call RemoveLocation(suppose)
return prev
endif
call RemoveLocation(prev)
set prev=suppose
set i=i + 20
endloop
return suppose
else
return Location(GetLocationX(a), GetLocationY(a))
endif
endfunction
////////////////
//Basically creates a chain of lightnings near a loc! WOOOOO
//Ensures that stuff doesn't stretch.
//Returns a hashtable that contains all of the lightnings, which can be used with 
//the second function to destroy the lightning chain
function LightningizeLocs takes string acode,location a,location b,real refresh,hashtable savehash returns nothing
local real h=DistanceBetweenPoints(a, b)
local real ang=AngleBetweenPoints(a, b)
local integer i=0
local real m=0
local location q=Location(GetLocationX(a), GetLocationY(a))
local location q2
loop
exitwhen m > h
set i=i + 1
if h - m < refresh then
set q2=PolarProjectionBJ(q, h - m, ang)
else
set q2=PolarProjectionBJ(q, refresh, ang)
endif
call SaveLightningHandle(savehash, 1, i, AddLightningLoc(acode, q, q2))
call RemoveLocation(q)
set q=q2
set m=m + refresh

endloop
call SaveInteger(savehash, 2, 1, i)
endfunction
function Delightningize takes hashtable h returns nothing
local integer i=LoadInteger(h, 2, 1)
local integer k=1
loop
exitwhen k > i
call DestroyLightning(LoadLightningHandle(h, 1, k))
set k=k + 1
endloop
endfunction
///////////////////////
///////////////////////
////////////////////////
function Trig_CrabTeleport_Conditions takes nothing returns boolean
    if ( not ( OrderId2StringBJ(GetIssuedOrderIdBJ()) == "smart" ) ) then
        return false
    endif
    return true
endfunction

function Trig_CrabTeleport_Actions takes nothing returns nothing
    set udg_TempReal=( GetUnitStateSwap(UNIT_STATE_MANA, GetOrderedUnit()) * 20.00 )
    set udg_TempPoint2=GetUnitLoc(GetOrderedUnit())
    set udg_TempPoint3=GetOrderPointLoc()
    set udg_TempReal2=AngleBetweenPoints(udg_TempPoint2, udg_TempPoint3)
    
    if ( DistanceBetweenPoints(udg_TempPoint2, udg_TempPoint3) >= udg_TempReal ) then
        call RemoveLocation(udg_TempPoint3)
        set udg_TempPoint3=PolarProjectionBJ(udg_TempPoint2, udg_TempReal, udg_TempReal2)
    endif
    
    if ( DistanceBetweenPoints(udg_TempPoint2, udg_TempPoint3) <= 100.00 ) then
        set udg_TempPoint=udg_TempPoint3
    else
        set udg_TempPoint=IntelligentRubble(udg_TempPoint2 , DistanceBetweenPoints(udg_TempPoint2, udg_TempPoint3) , AngleBetweenPoints(udg_TempPoint2, udg_TempPoint3))
    endif
    
    call SetUnitManaBJ(GetOrderedUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetOrderedUnit()) - ( DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2) / 20.00 ) ))
    call SetUnitPositionLoc(GetOrderedUnit(), udg_TempPoint)
    
    call AddSpecialEffectLocBJ(udg_TempPoint, "Objects\\Spawnmodels\\Naga\\NagaDeath\\NagaDeath.mdl")
    call SFXThreadClean()
        call AddSpecialEffectLocBJ(udg_TempPoint2, "Objects\\Spawnmodels\\Naga\\NagaDeath\\NagaDeath.mdl")
    call SFXThreadClean()
    
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    call RemoveLocation(udg_TempPoint3)
endfunction
//===========================================================================

function CrabTeleport takes unit q returns nothing
local trigger a= CreateTrigger()
    call TriggerRegisterUnitEvent(a, q, EVENT_UNIT_ISSUED_POINT_ORDER)
    call TriggerAddCondition(a, Condition(function Trig_CrabTeleport_Conditions))
    call TriggerAddAction(a, function Trig_CrabTeleport_Actions)
endfunction
///////////////////
//////////////


function SVOP_Callback takes nothing returns nothing
local timer k=GetExpiredTimer()
local sound r=LoadSoundHandle((udg_hash), GetHandleId(k), StringHash("r")) // INLINED!!
local real start=LoadReal((udg_hash), GetHandleId(k), StringHash("start")) // INLINED!!
local real end=LoadReal((udg_hash), GetHandleId(k), StringHash("end")) // INLINED!!
local real lerp=LoadReal((udg_hash), GetHandleId(k), StringHash("lerp")) // INLINED!!
set start=start + lerp
call SetSoundVolume(r, R2I(start))
if start > end then
call PauseTimer(k)
call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
call DestroyTimer(k)
else
call SaveReal((udg_hash), GetHandleId(k), StringHash("start"), start) // INLINED!!
endif
endfunction

function SoundVolumeOverPeriod takes sound r,real start,real end,real time returns nothing
local timer k=CreateTimer()
call SaveSoundHandle((udg_hash), GetHandleId(k), StringHash("r"), r) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("start"), start) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("end"), end) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("lerp"), ( end - start ) / time * 0.05) // INLINED!!
call TimerStart(k, 0.05, true, function SVOP_Callback)
endfunction

//Moogle
function MKU_CallBack takes nothing returns nothing
    local timer t=GetExpiredTimer()
    call KillUnit(LoadUnitHandle(udg_hash, GetHandleId(t), StringHash("r")))
    call FlushChildHashtable(udg_hash, GetHandleId(t))
    call DestroyTimer(t)
endfunction
    
//Moogle
function MoogleKillUnit takes unit Victim,unit Killer returns nothing
    //Fel should definitely make his own function
    local timer t=CreateTimer()
    
        call UnitRemoveBuffs(Victim, true, true)
        call ShowUnit(Victim, true)
        call SetUnitInvulnerable(Victim, false)
        call SetUnitState(Victim, UNIT_STATE_LIFE, 1)
        call UnitDamageTarget(Killer, Victim, 421337, true, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
call SaveUnitHandle(udg_hash, GetHandleId(t), StringHash("r"), Victim)
call TimerStart(t, 0.01, false, function MKU_CallBack)
endfunction
    
//For when you want to completely erase a unit from existence and make sure it is ultra dead without bugs.
function EraseUnit takes unit unitToDestroyCompletely,unit killerDummy returns nothing
    
    local integer i= 1
    
    //"And Stay Dead" ability
    call UnitAddAbilityBJ('A02T', unitToDestroyCompletely)
    
    //Remove all buffs
    call UnitRemoveBuffsBJ(bj_REMOVEBUFFS_ALL, unitToDestroyCompletely)
    
    //Destroy Regeneration Alien Cores
    call UnitRemoveAbilityBJ('A04T', unitToDestroyCompletely)
    call UnitRemoveAbilityBJ('A04U', unitToDestroyCompletely)
    call UnitRemoveAbilityBJ('A0AR', unitToDestroyCompletely)
    
    set i=1
    loop
        exitwhen i > 6
        call RemoveItem(UnitItemInSlotBJ(unitToDestroyCompletely, i))
        set i=i + 1
    endloop
    
    call MoogleKillUnit(unitToDestroyCompletely , killerDummy)
    
endfunction
   
   function DropItem_FollowThrough takes nothing returns nothing
   local trigger t=GetTriggeringTrigger()
   local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
   local integer itemType=LoadInteger((udg_hash), GetHandleId(t), StringHash("itemType")) // INLINED!!
   call CreateItem(itemType, GetUnitX(a), GetUnitY(a))
   call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
   call DestroyTrigger(t)
   endfunction
   
function DropItemFromUnitOnDeath takes unit a,integer itemType returns nothing
local trigger t=CreateTrigger()
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), a) // INLINED!!
call SaveInteger((udg_hash), GetHandleId(t), StringHash("itemType"), itemType) // INLINED!!
call TriggerAddAction(t, function DropItem_FollowThrough)
call TriggerRegisterUnitEvent(t, a, EVENT_UNIT_DEATH)
endfunction

function VendorDamagedCheck takes nothing returns nothing
local timer t=GetExpiredTimer()
local unit u=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
local effect d=LoadEffectHandle((udg_hash), GetHandleId(t), StringHash("effect")) // INLINED!!
if not ( IsUnitPaused(u) ) or u == null then
call PauseTimer(t)
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call DestroyTimer(t)
call DestroyEffect(d)
endif
endfunction

function VendorIsDamaged takes unit a returns nothing
local boolean b=not ( IsUnitPaused(a) )
local unit c=a
local effect d
local timer t
if GetEventDamage() < 0.5 then
return
endif
call PauseUnitForPeriod(a , 10.0)
if b then
set d=AddSpecialEffect("Abilities\\Spells\\Orc\\Purge\\PurgeBuffTarget.mdl", GetUnitX(c), GetUnitY(c))
set t=CreateTimer()
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), c) // INLINED!!
call SaveEffectHandle((udg_hash), GetHandleId(t), StringHash("effect"), d) // INLINED!!
call TimerStart(t, 0.2, true, function VendorDamagedCheck)
endif
endfunction

function Vendor_Damaged takes nothing returns nothing
local boolean b=not ( IsUnitPaused(GetTriggerUnit()) )
local unit c=GetTriggerUnit()
local effect d
call PauseUnitForPeriod(GetTriggerUnit() , 10.0)
if b then
set d=AddSpecialEffect("Abilities\\Spells\\Orc\\Purge\\PurgeBuffTarget.mdl", GetUnitX(c), GetUnitY(c))
loop
exitwhen not ( IsUnitPaused(c) ) or c == null
call PolledWait(0.2)
endloop
call DestroyEffect(d)
endif
endfunction

function RegisterVendor takes unit vendor returns nothing
//Sets up the "vendor disabled for X seconds on damage"
local trigger t=udg_VendorTrigger
call TriggerRegisterUnitEvent(t, vendor, EVENT_UNIT_DAMAGED)
endfunction

function dinit takes nothing returns nothing
if GetUnitAbilityLevel(GetEnumUnit(), 'A07Q') > 0 then
call RegisterVendor(GetEnumUnit())
endif
endfunction

function vendorDamage_init takes nothing returns nothing
local group g=GetUnitsInRectAll(GetPlayableMapRect())
set udg_VendorTrigger=CreateTrigger()
call TriggerAddAction(udg_VendorTrigger, function Vendor_Damaged)
call ForGroup(g, function dinit)
endfunction




























function BasicAI_FindEvasionLoc takes location a,real max,real angle,location danger returns location
    local location suppose=a
    local location prev=Location(GetLocationX(a), GetLocationY(a))
    local integer ID=GetSector(a)
    local real i=0
    if max > 40 then
        loop
        exitwhen DistanceBetweenPoints(suppose, danger) > max
            set suppose=PolarProjectionBJ(a, i, angle)
            if GetTerrainCliffLevelBJ(suppose) > GetTerrainCliffLevelBJ(a) or not ( LocInSector(suppose , ID) ) or GetTerrainType(GetLocationX(suppose), GetLocationY(suppose)) == 'Vcbp' then
                call RemoveLocation(suppose)
                return prev
            endif
            call RemoveLocation(prev)
            set prev=suppose
            set i=i + 40
            endloop
        return suppose
    else
        return Location(GetLocationX(a), GetLocationY(a))
    endif
endfunction

function BasicAI_EvadeDanger takes unit q,location danger,real clearradius,real passtime returns nothing
    local location a=GetUnitLoc(q)
    local real r=clearradius - DistanceBetweenPoints(a, danger)
    local real score=- 9999
    local real tscore=0
    local location test
    local location winner=null
    local integer i=0
    local boolean b=LoadStr((udg_hash), GetHandleId(q), StringHash("AI_ORDER")) == "ATTACK" // INLINED!!
    local unit targ
    local location targloc
    local real range=LoadReal((udg_hash), GetHandleId(q), StringHash("AI_ATTACKRANGE")) // INLINED!!
    if b then
        set targ=LoadUnitHandle((udg_hash), GetHandleId(q), StringHash("AI_TARGET")) // INLINED!!
        set targloc=GetUnitLoc(targ)
    endif
    if r > 0 then
        call SaveStr((udg_hash), GetHandleId(q), StringHash("AI_ORDER"), "EVADE") // INLINED!!
        call SaveReal((udg_hash), GetHandleId(q), StringHash("AI_EVADE_PASSTIME"), TimerGetElapsed(udg_GameTimer) + passtime) // INLINED!!
        loop
        exitwhen i > 40
            set test=BasicAI_FindEvasionLoc(a , clearradius * GetRandomReal(1, 2) , GetRandomDirectionDeg() , danger)
            set tscore=0
            if DistanceBetweenPoints(danger, test) > clearradius then
                set tscore=tscore + clearradius
            endif
            if b and DistanceBetweenPoints(targloc, test) <= range then
                set tscore=tscore + 5
            endif
            if tscore > score then
                call RemoveLocation(winner)
                set winner=test
                set score=tscore
            else
                call RemoveLocation(test)
            endif
            set i=i + 1
        endloop
        call IssuePointOrderLoc(q, "move", winner)
        call RemoveLocation(winner)
        call RemoveLocation(a)
    endif
    if b then
        call RemoveLocation(targloc)
    endif
endfunction

function BasicAI_IssueDangerArea_Z takes nothing returns nothing
    local timer k=GetExpiredTimer()
    local location danger=LoadLocationHandle((udg_hash), GetHandleId(k), StringHash("danger")) // INLINED!!
    local real clearradius=LoadReal((udg_hash), GetHandleId(k), StringHash("clearradius")) // INLINED!!
    local real passtime=LoadReal((udg_hash), GetHandleId(k), StringHash("passtime")) // INLINED!!
    local group g=GetUnitsInRangeOfLocAll(clearradius, danger)
    local unit test
    call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
    call DestroyTimer(k)
    loop
    exitwhen FirstOfGroup(g) == null
        set test=FirstOfGroup(g)
        if HaveSavedString((udg_hash), GetHandleId(test), StringHash("AI_TEAM")) then // INLINED!!
            call BasicAI_EvadeDanger(test , danger , clearradius , passtime)
        endif
        call GroupRemoveUnit(g, test)
    endloop
    call DestroyGroup(g)
endfunction

function BasicAI_IssueDangerArea takes location danger,real clearradius,real passtime returns nothing
    local timer k=CreateTimer()
    call SaveLocationHandle((udg_hash), GetHandleId(k), StringHash("danger"), danger) // INLINED!!
    call SaveReal((udg_hash), GetHandleId(k), StringHash("clearradius"), clearradius) // INLINED!!
    call SaveReal((udg_hash), GetHandleId(k), StringHash("passtime"), passtime) // INLINED!!
    call TimerStart(k, 0.0, false, function BasicAI_IssueDangerArea_Z)
endfunction

function BasicAI_FindFleePlace takes unit q returns location
    local rect sector=udg_SectorId[GetUnitSector(q)]
    local integer consider=0
    local real score= 0
    local location a=GetUnitLoc(q)
    local location b
    local location c=a
    loop
    exitwhen consider > 100
        set b=GetRandomLocInRect(sector)
        if GetTerrainTypeBJ(b) == 'Vcbp' then
            call RemoveLocation(b)
        else
            if DistanceBetweenPoints(a, b) > score then
                call RemoveLocation(c)
                set c=b
                set score=DistanceBetweenPoints(a, b)
            else
                call RemoveLocation(b)
            endif
        endif
        set consider=consider + 1
    endloop
    return c
endfunction

function B2I takes boolean a returns integer
    if a then
        return 1
    else
        return 0
    endif
endfunction

function BasicAI_ScoreUnit takes unit q,unit consider returns real
    local real retz=0.0
    set retz=retz - DistanceBetweenUnits(consider , q) / 600.0
    set retz=retz - 4 * GetUnitLifePercent(consider) / 100
    set retz=retz - 5 * B2I(GetOwningPlayer(consider) == Player(PLAYER_NEUTRAL_PASSIVE))
    set retz=retz - 5 * B2I(IsUnitType(consider, UNIT_TYPE_STRUCTURE))
    if UnitHasItemOfTypeBJ(consider, 'I029') then
    set retz=retz - 100
    endif
    return retz
endfunction

function BasicAI_ConsiderTargets takes unit q,real acquirerange returns unit
//Considers all groups within a range of acquirerange and returns the best target, will return null if none
    local group g
    local group m
    local unit target=null
    local unit consider
    local real score
    local location a
    local string team=LoadStr((udg_hash), GetHandleId(q), StringHash("AI_TEAM")) // INLINED!!
    set a=GetUnitLoc(q)
    set g=GetUnitsInRangeOfLocAll(acquirerange, a)
    call RemoveLocation(a)
    set m=CreateGroup()
    loop
    exitwhen FirstOfGroup(g) == null
        set consider=FirstOfGroup(g)
        if GetUnitAbilityLevel(consider, 'Avul') == 0 and IsUnitAliveBJ(consider) and ( not ( HaveSavedString((udg_hash), GetHandleId(consider), StringHash("AI_TEAM")) ) or LoadStr((udg_hash), GetHandleId(consider), StringHash("AI_TEAM")) != team ) and GetUnitTypeId(consider) != 'n00A' then // INLINED!!
            call GroupAddUnit(m, consider)
        endif
        call GroupRemoveUnit(g, consider)
    endloop
    call DestroyGroup(g)
    if CountUnitsInGroup(m) > 0 then
        if CountUnitsInGroup(m) > 1 then
            set score=- 999
            loop
            exitwhen FirstOfGroup(m) == null
                set consider=FirstOfGroup(m)
                if score <= BasicAI_ScoreUnit(q , consider) then
                    set target=consider
                    set score=BasicAI_ScoreUnit(q , consider)
                endif
                call GroupRemoveUnit(m, consider)
            endloop
        else
            set target=FirstOfGroup(m)
        endif
    endif
    call DestroyGroup(m)
    return target
endfunction

function BasicAI_Update takes nothing returns nothing
    local timer t=GetExpiredTimer()
    local unit q=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
    local string order=LoadStr((udg_hash), GetHandleId(q), StringHash("AI_ORDER")) // INLINED!!
    local string team=LoadStr((udg_hash), GetHandleId(q), StringHash("AI_TEAM")) // INLINED!!
    local location a
    local location b
    local unit target=LoadUnitHandle((udg_hash), GetHandleId(q), StringHash("AI_TARGET")) // INLINED!!
    local unit consider
    local real passtime
    local real attackrange=LoadReal((udg_hash), GetHandleId(q), StringHash("AI_ATTACKRANGE")) // INLINED!!
    local real acquirerange=LoadReal((udg_hash), GetHandleId(q), StringHash("AI_ACQUIRERANGE")) // INLINED!!
    if IsUnitHidden(q) then
        return
    endif
    if IsUnitDeadBJ(q) then
        call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
        call DestroyTimer(t)
        return
    endif
    if order == "ROAM" then
        set target=BasicAI_ConsiderTargets(q , acquirerange)
        if target != null then
            call SaveStr((udg_hash), GetHandleId(q), StringHash("AI_ORDER"), "ATTACK") // INLINED!!
            call SaveUnitHandle((udg_hash), GetHandleId(q), StringHash("AI_TARGET"), target) // INLINED!!
            set order="ATTACK"
        else
            set a=GetUnitLoc(q)
            if GetRandomInt(0, 3) == 0 then
                set b=PolarProjectionBJ(a, GetRandomReal(0, 600.0), GetRandomDirectionDeg())
                call IssuePointOrderLoc(q, "move", b)
            endif
            call RemoveLocation(b)
            call RemoveLocation(a)
        endif
    endif
    if order == "ATTACK" then
        set consider=BasicAI_ConsiderTargets(q , acquirerange)
        if consider != target then
            if consider == null then
                call SaveStr((udg_hash), GetHandleId(q), StringHash("AI_ORDER"), "ROAM") // INLINED!!
            else
                call SaveUnitHandle((udg_hash), GetHandleId(q), StringHash("AI_TARGET"), consider) // INLINED!!
                call IssueTargetOrder(q, "attack", consider)
            endif
        else
            if not ( OrderId2String(GetUnitCurrentOrder(q)) == "attack" ) then
                call IssueTargetOrder(q, "attack", target)
            endif
        endif
    endif

    if order == "FLEE" then
        if GetUnitLifePercent(q) > 50.0 then
            call SaveStr((udg_hash), GetHandleId(q), StringHash("AI_ORDER"), "ROAM") // INLINED!!
            call h__SetUnitMoveSpeed(q, GetUnitMoveSpeed(q) - 50.0)
        else
            set consider=BasicAI_ConsiderTargets(q , acquirerange)
            if consider != null and GetUnitCurrentOrder(q) != String2OrderIdBJ("move") then
                set a=BasicAI_FindFleePlace(q)
                call IssuePointOrderLoc(q, "move", a)
                call RemoveLocation(a)
            endif
        endif
    endif
    if order == "EVADE" then
        set passtime=LoadReal((udg_hash), GetHandleId(q), StringHash("AI_EVADE_PASSTIME")) // INLINED!!
        if TimerGetElapsed(udg_GameTimer) > passtime then
            call SaveStr((udg_hash), GetHandleId(q), StringHash("AI_ORDER"), "ROAM") // INLINED!!
        else
            if GetUnitCurrentOrder(q) != String2OrderIdBJ("move") then
                set consider=BasicAI_ConsiderTargets(q , attackrange)
                if consider != null then
                    call IssueTargetOrder(q, "attack", consider)
                endif
            endif
        endif
    else
        if GetUnitLifePercent(q) < 34.0 then
            call SaveStr((udg_hash), GetHandleId(q), StringHash("AI_ORDER"), "FLEE") // INLINED!!
            call h__SetUnitMoveSpeed(q, GetUnitMoveSpeed(q) + 50.0)
        endif
    endif
//
endfunction

function BasicAI takes unit q,real range,real acquirerange returns nothing
    local timer refresh=CreateTimer()
    call SaveUnitHandle((udg_hash), GetHandleId(refresh), StringHash("unit"), q) // INLINED!!
    call TimerStart(refresh, 0.5, true, function BasicAI_Update)
    call SaveUnitHandle((udg_hash), GetHandleId(q), StringHash("AI_TARGET"), null) // INLINED!!
    call SaveStr((udg_hash), GetHandleId(q), StringHash("AI_TEAM"), "AI") // INLINED!!
    call SaveStr((udg_hash), GetHandleId(q), StringHash("AI_ORDER"), "ROAM") // INLINED!!
    call SaveReal((udg_hash), GetHandleId(q), StringHash("AI_ATTACKRANGE"), range) // INLINED!!
    call SaveReal((udg_hash), GetHandleId(q), StringHash("AI_ACQUIRERANGE"), acquirerange) // INLINED!!
endfunction
///



//
function BasicAI_Update_Murmusk takes nothing returns nothing
    local timer t=GetExpiredTimer()
    local unit q=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
    local string order=LoadStr((udg_hash), GetHandleId(q), StringHash("AI_ORDER")) // INLINED!!
    local string team=LoadStr((udg_hash), GetHandleId(q), StringHash("AI_TEAM")) // INLINED!!
    local location a
    local location b
    local unit target=LoadUnitHandle((udg_hash), GetHandleId(q), StringHash("AI_TARGET")) // INLINED!!
    local unit consider
    local real passtime
    local real attackrange=LoadReal((udg_hash), GetHandleId(q), StringHash("AI_ATTACKRANGE")) // INLINED!!
    local real acquirerange=LoadReal((udg_hash), GetHandleId(q), StringHash("AI_ACQUIRERANGE")) // INLINED!!
//
    if IsUnitHidden(q) then
        return
    endif
    if IsUnitDeadBJ(q) then
        call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
        call DestroyTimer(t)
        return
    endif
    if order == "ROAM" then
        set target=BasicAI_ConsiderTargets(q , acquirerange)
        if target != null then
            call SaveStr((udg_hash), GetHandleId(q), StringHash("AI_ORDER"), "ATTACK") // INLINED!!
            call SaveUnitHandle((udg_hash), GetHandleId(q), StringHash("AI_TARGET"), target) // INLINED!!
            set order="ATTACK"
        else
            set a=GetUnitLoc(q)
            if GetRandomInt(0, 3) == 0 then
                set b=PolarProjectionBJ(a, GetRandomReal(0, 600.0), GetRandomDirectionDeg())
                call IssuePointOrderLoc(q, "move", b)
            endif
            call RemoveLocation(b)
            call RemoveLocation(a)
        endif
    endif
    if order == "ATTACK" then
        set consider=BasicAI_ConsiderTargets(q , acquirerange)
        if consider != target then
            if consider == null then
                call SaveStr((udg_hash), GetHandleId(q), StringHash("AI_ORDER"), "ROAM") // INLINED!!
            else
                call SaveUnitHandle((udg_hash), GetHandleId(q), StringHash("AI_TARGET"), consider) // INLINED!!
                call IssueTargetOrder(q, "attack", consider)
            endif
        else
            if not ( OrderId2String(GetUnitCurrentOrder(q)) == "attack" ) then
                call IssueTargetOrder(q, "attack", target)
            endif
        endif
    endif


    if order == "EVADE" then
        set passtime=LoadReal((udg_hash), GetHandleId(q), StringHash("AI_EVADE_PASSTIME")) // INLINED!!
        if TimerGetElapsed(udg_GameTimer) > passtime then
            call SaveStr((udg_hash), GetHandleId(q), StringHash("AI_ORDER"), "ROAM") // INLINED!!
        else
            if GetUnitCurrentOrder(q) != String2OrderIdBJ("move") then
                set consider=BasicAI_ConsiderTargets(q , attackrange)
                if consider != null then
                    call IssueTargetOrder(q, "attack", consider)
                endif
            endif
        endif
    endif
//
endfunction
//
function BasicAI_Murmusk takes unit q,real range,real acquirerange returns nothing
    local timer refresh=CreateTimer()
    call SaveUnitHandle((udg_hash), GetHandleId(refresh), StringHash("unit"), q) // INLINED!!
    call TimerStart(refresh, 0.5, true, function BasicAI_Update_Murmusk)
    call SaveUnitHandle((udg_hash), GetHandleId(q), StringHash("AI_TARGET"), null) // INLINED!!
    call SaveStr((udg_hash), GetHandleId(q), StringHash("AI_TEAM"), "MURMUSK") // INLINED!!
    call SaveStr((udg_hash), GetHandleId(q), StringHash("AI_ORDER"), "ROAM") // INLINED!!
    call SaveReal((udg_hash), GetHandleId(q), StringHash("AI_ATTACKRANGE"), range) // INLINED!!
    call SaveReal((udg_hash), GetHandleId(q), StringHash("AI_ACQUIRERANGE"), acquirerange) // INLINED!!
endfunction

//////
/////
// function FloatingTextVisibilityCheck takes nothing returns nothing
// if IsLocationVisibleToPlayer(udg_TempPoint, GetEnumPlayer()) then
// if GetLocalPlayer() == GetEnumPlayer() then
// call SetTextTagVisibility(udg_TempTexttag, true)
// endif
// else
// if GetLocalPlayer() == GetEnumPlayer() then
// call SetTextTagVisibility(udg_TempTexttag, false)
// endif
// endif
// endfunction

// function FloatingTextVisibilityUpdate takes nothing returns nothing
// local timer t=GetExpiredTimer()
// local texttag a=LoadTextTagHandle(LS(),GetHandleId(t),StringHash("tt"))
// local location b=LoadLocationHandle(LS(),GetHandleId(t),StringHash("loc"))
// if a == null then
// call FlushChildHashtable(LS(),GetHandleId(t))
// call PauseTimer(t)
// call DestroyTimer(t)
// endif
// set udg_TempPoint=b
// set udg_TempTexttag=a
// call ForForce(GetPlayersAll(),function FloatingTextVisibilityCheck)
// endfunction

// function MakeFloatingTextVisibilityDependent takes texttag a, location b returns nothing
// local timer t=CreateTimer()
// call SaveLocationHandle(LS(),GetHandleId(t),StringHash("loc"),Location(GetLocationX(b),GetLocationY(b)))
// call SaveTextTagHandle(LS(),GetHandleId(t),StringHash("tt"),a)
// call TimerStart(t,0.25,true,function FloatingTextVisibilityUpdate)
// endfunction

//==================
//---RogueAndroid===

//Adds PlantChip and Cyborg Tooltip
function AddHumanRogueAndroidAbilities takes unit rogueAndroidUnit returns nothing
    call UnitAddAbilityBJ('A0AI', rogueAndroidUnit) //Plant Chip
    //call UnitAddAbilityBJ( 'A0AQ', rogueAndroidUnit )//Cyborg Tooltip
endfunction

//Removes PlantChip and Cyborg Tooltip
function RemoveHumanRogueAndroidAbilities takes unit rogueAndroidUnit returns nothing
    call UnitRemoveAbilityBJ('A0AI', rogueAndroidUnit) //Plant Chip
    //call UnitRemoveAbilityBJ( 'A0AQ', rogueAndroidUnit )//Cyborg Tooltip
endfunction

function CreateAlienCooldownRequirementsForPlayer takes player playerToGiveAlienCooldownAbilities returns nothing
    call CreateUnitAtLoc(playerToGiveAlienCooldownAbilities, 'e00V', udg_HoldZone, bj_UNIT_FACING)
    call CreateUnitAtLoc(playerToGiveAlienCooldownAbilities, 'e00P', udg_HoldZone, bj_UNIT_FACING)
    call CreateUnitAtLoc(playerToGiveAlienCooldownAbilities, 'e00S', udg_HoldZone, bj_UNIT_FACING)
    call CreateUnitAtLoc(playerToGiveAlienCooldownAbilities, 'e00M', udg_HoldZone, bj_UNIT_FACING)
    call CreateUnitAtLoc(playerToGiveAlienCooldownAbilities, 'e00T', udg_HoldZone, bj_UNIT_FACING)
    call CreateUnitAtLoc(playerToGiveAlienCooldownAbilities, 'e00O', udg_HoldZone, bj_UNIT_FACING)
    call CreateUnitAtLoc(playerToGiveAlienCooldownAbilities, 'e00J', udg_HoldZone, bj_UNIT_FACING)
    call CreateUnitAtLoc(playerToGiveAlienCooldownAbilities, 'e015', udg_HoldZone, bj_UNIT_FACING)
endfunction

//==================

////////////////////////////////////////////////////////////////////////////////////////////////////////
function SuitRoleAbilityReAdd_Child takes nothing returns nothing
    local timer k=GetExpiredTimer()
    local real q=LoadReal((udg_hash), GetHandleId(k), StringHash("q")) // INLINED!!
    local unit a=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("a")) // INLINED!!
    
    call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
    call DestroyTimer(k)
    call SetUnitLifePercentBJ(a, q)
    
    //If the role ability of the player is that of a doctor, then add the proper PhD ability.
    if udg_RoleAbility[udg_PlayerRole[GetConvertedPlayerId(GetOwningPlayer(a))]] != 'A00X' then
        //Role abilities. Works in any suit form!
        call UnitAddAbilityBJ(udg_RoleAbility[udg_PlayerRole[GetConvertedPlayerId(GetOwningPlayer(a))]], a)
    else
        //Dr. microRole abilities!
        call UnitAddAbilityBJ(udg_Dr_RoleAbility[udg_Researcher_PhD[GetConvertedPlayerId(GetOwningPlayer(a))]], a)
    endif
    
    
    //Do not mix up Human Form and Human Form (Spawn), or Alien Form and Alien Form (Spawn)
    if ( GetOwningPlayer(a) == udg_Parasite ) then
        //If peasant -> alien form ability
        if GetUnitTypeId(a) == 'h00H' then
            call UnitAddAbilityBJ('A02O', a)
            
        //Else if manipulation tree -> alien form ability anyway
        elseif udg_ParasiteUpgradingTo == 'h02V' or udg_ParasiteUpgradingTo == 'h033' then
            call UnitAddAbilityBJ('A02O', a)
            
        endif
            
    endif
    
    //Alien spawn form.
    if udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(a))] and udg_HiddenAndroid != GetOwningPlayer(a) then
        if GetUnitTypeId(a) == 'h00H' then
            call UnitAddAbilityBJ('A02W', a)
        elseif udg_ParasiteUpgradingTo == 'h02V' or udg_ParasiteUpgradingTo == 'h033' then
            call UnitAddAbilityBJ('A02W', a)
        endif
            
    endif
    
    //Devour, for mutants in unsuited form.
    if ( GetOwningPlayer(a) == udg_Mutant ) and GetUnitTypeId(a) == 'h00H' then
        call UnitAddAbilityBJ('A05M', a)
    endif

    if udg_HiddenAndroid == GetOwningPlayer(a) then
        //Android tooltip. Unsuited form not necessary here.
        call UnitAddAbilityBJ('A05Z', a)
    endif
    
    //Rogue Android Plant Chip
    if udg_RogueAndroid == GetOwningPlayer(a) then
        call UnitAddAbilityBJ('A0AI', (a)) // INLINED!!
    endif
endfunction

function SuitRoleAbilityReAdd takes nothing returns nothing
//This JASS function is called at the end of the trigger to put on a suit. What it does basically is adds all the abilities and such
//that go with an unsuited unit back to the unit taking off their suit. It does so with a timer and a period of about 0.1, which seems
//near the minimum amount of time that the Chaos ability needs to be able to have abilities added to the transformed unit.
//Actual unit transformation is done with the chaos ability by the way.
local unit a=udg_TempUnit
local real q=udg_TempReal
local timer k=CreateTimer()
call PauseUnitForPeriod(a , 0.1)
call UnitAddAbilityForPeriod(a , 'Avul' , 0.1)
//Readds 'role abilities' after a suit is dropped or put on.
//Also re-adds transformation ability for aliens.
call SaveReal((udg_hash), GetHandleId(k), StringHash("q"), q) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("a"), a) // INLINED!!
call TimerStart(k, 0.2, false, function SuitRoleAbilityReAdd_Child)
endfunction


function PlaySound3D takes string soundName,real x,real y returns nothing
    local sound soundHandle= CreateSound(soundName, false, true, true, 12700, 12700, "")
    call SetSoundPosition(soundHandle, x, y, 0)
    call StartSound(soundHandle)
    call KillSoundWhenDone(soundHandle)
endfunction


function SmashCancelSmash takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
local unit d=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("tsfx")) // INLINED!!
call RemoveUnit(d)
call SetUnitState(a, UNIT_STATE_MANA, GetUnitState(a, UNIT_STATE_MANA) + 35.0)
call SaveBoolean((udg_hash), GetHandleId(a), StringHash("Smash_Casting"), false) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call DestroyTrigger(t)
endfunction


function SmashCheckEnsure takes unit a returns boolean
local location c=GetUnitLoc(a)
local boolean b=DistanceBetweenPoints(c, LoadLocationHandle((udg_hash), GetHandleId(a), StringHash("Smash_Location"))) < 125.0 and LoadBoolean((udg_hash), GetHandleId(a), StringHash("Smash_Casting")) // INLINED!!
call RemoveLocation(c)
return b
endfunction

function SmashCheckCleanup takes unit a returns nothing
local trigger t=LoadTriggerHandle((udg_hash), GetHandleId(a), StringHash("Smash_Trigger")) // INLINED!!
local unit d=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("tsfx")) // INLINED!!
call RemoveUnit(d)
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call DestroyTrigger(t)
call RemoveLocation(LoadLocationHandle((udg_hash), GetHandleId(a), StringHash("Smash_Location"))) // INLINED!!
endfunction

function SmashEnsureNoOrders takes unit a returns nothing
local trigger t=CreateTrigger()
local location b=GetUnitLoc(a)
local location c=GetSpellTargetLoc()
local unit d=CreateScaledEffect2("Abilities\\Spells\\NightElf\\TrueshotAura\\TrueshotAura.mdl" , 1.6 , 4.0 , GetLocationX(c) , GetLocationY(c))
call RemoveLocation(c)
call SaveLocationHandle((udg_hash), GetHandleId(a), StringHash("Smash_Location"), b) // INLINED!!
call SaveBoolean((udg_hash), GetHandleId(a), StringHash("Smash_Casting"), true) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), a) // INLINED!!
call SaveTriggerHandle((udg_hash), GetHandleId(a), StringHash("Smash_Trigger"), t) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("tsfx"), d) // INLINED!!
    call TriggerRegisterUnitEvent(t, a, EVENT_UNIT_ISSUED_TARGET_ORDER)
    call TriggerRegisterUnitEvent(t, a, EVENT_UNIT_ISSUED_POINT_ORDER)
    call TriggerRegisterUnitEvent(t, a, EVENT_UNIT_ISSUED_ORDER)
    call TriggerRegisterUnitEvent(t, a, EVENT_UNIT_USE_ITEM)
    call TriggerAddAction(t, function SmashCancelSmash)
endfunction


function CheckMaintainConsoleControl_Child takes nothing returns nothing
    if GetOwningPlayer(GetEnumUnit()) == GetOwningPlayer(udg_TempUnit) and SubStringBJ(I2S(GetUnitPointValue(GetEnumUnit())), 1, 1) == "2" and IsUnitIllusion(GetEnumUnit()) == false then
        set udg_TempBool=true
    endif
endfunction

function CheckMaintainConsoleControl takes nothing returns nothing
    local timer t=GetExpiredTimer()
    local unit p1=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("p1")) // INLINED!!
    local unit p2=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("p2")) // INLINED!!
    local rect r=LoadRectHandle((udg_hash), GetHandleId(t), StringHash("rect")) // INLINED!!
    local group g=GetUnitsInRectAll(r)
    set udg_TempBool=false
    set udg_TempUnit=p1
    call ForGroup(g, function CheckMaintainConsoleControl_Child)
    call DestroyGroup(g)
    
    if udg_TempBool == false then
        call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
        call PauseTimer(t)
        call DestroyTimer(t)
        call SetUnitOwner(p1, Player(PLAYER_NEUTRAL_PASSIVE), false)
        call SetUnitOwner(p2, Player(PLAYER_NEUTRAL_PASSIVE), false)
    endif
endfunction

function CheckConsoleControl takes unit p1,unit p2,rect r returns nothing
    local timer t=CreateTimer()
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("p1"), p1) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("p2"), p2) // INLINED!!
    call SaveRectHandle((udg_hash), GetHandleId(t), StringHash("rect"), r) // INLINED!!
    call TimerStart(t, 1.0, true, function CheckMaintainConsoleControl)
endfunction

function BloodTestingWipe takes nothing returns nothing
//Searches to every inventory and deletes blood tests(and for shops) + GIT resolver.
//Gets triggered at GITResolve trigger, when an resolver is used near GIT.(after it passes the range check)
    local integer i
    local integer itemslot
    set i=1
    
            //call DisplayTextToForce( GetPlayersAll(), "Wiping bloodtests on every unit!")// Debug msg
    
    //Playerhero loop
    loop
    set itemslot=0
        loop // Inventory loop
            //If GIT Resolver or Genetic Testing Device
            if ( ( GetItemTypeId(UnitItemInSlot(udg_Playerhero[i], itemslot)) == 'I019' ) or ( GetItemTypeId(UnitItemInSlot(udg_Playerhero[i], itemslot)) == 'I00M' ) ) then
                call RemoveItem(UnitItemInSlot(udg_Playerhero[i], itemslot))
            endif
            set itemslot=itemslot + 1
            exitwhen itemslot == 7
        endloop
        set i=i + 1
            //call DisplayTextToForce( GetPlayersAll(), "i is:" + I2S(i))// Debug msg
        exitwhen i == 13
    endloop
    
            //call DisplayTextToForce( GetPlayersAll(), "Got out!")// Debug msg
    
    //Vendor/Shops removal
    call RemoveItemFromAllStock('I00M')
endfunction

function GetMasqueradeShopCount takes nothing returns integer

    local integer i
    set i=0

    loop
        if ( udg_MasqueradedShop[i] != null ) then
            set i=i + 1
        endif
        
        exitwhen i == 5 //[4] is max
    endloop
    
    return i

endfunction

function SetMasqueradeShop takes unit shop returns nothing

    local integer i
    set i=0

    loop
        if ( udg_MasqueradedShop[i] == null ) then
            set udg_MasqueradedShop[i]=shop
            return
        endif
        
        set i=i + 1
        exitwhen i == 5 //[4] is max
    endloop

endfunction

//Normally, should compare by unit-type, but whatever.
function ReturnMasqueradeShop takes nothing returns unit

    local integer i
    local unit returnedShop
    set i=0

    loop
        if ( udg_MasqueradedShop[i] != null ) then
            set returnedShop=udg_MasqueradedShop[i]
            set udg_MasqueradedShop[i]=null
            return returnedShop
        endif
        
        set i=i + 1
        exitwhen i == 5 //[4] is max
    endloop
    
    //Should never reach here, since it gets in here only when a structure is masqueraded.
    return null

endfunction

//Credits to Tal0n for RunCinematicUnstuck functions
function RunCinematicUnstuck takes player p,boolean enable returns nothing
  if ( GetLocalPlayer() == p ) then // the player who typed -unstuck
   call ClearTextMessages() // this can probably be disabled but it clears messages sent from triggers usually
   call ShowInterface(enable, 1.5) // disables/enables player interface
   call EnableUserControl(enable) // disables/enables player cursor and control
   call EnableOcclusion(enable)
   call EnableWorldFogBoundary(enable) // likely fixes filter bugs
  endif
endfunction
 
function CinematicUnstuckConditionsKappa takes nothing returns boolean
    local player p=GetTriggerPlayer()
    call RunCinematicUnstuck(p , true) // calls for a set of interface toggles onward
    call RunCinematicUnstuck(p , false) // calls for a set of interface toggles offward
    
    return true
endfunction

function CinematicUnstuckInit takes nothing returns nothing
    local trigger t=CreateTrigger()
    local integer i=0
    
    loop
        exitwhen i == 13 // this stops at brown ( player 12 )
            call TriggerRegisterPlayerChatEvent(t, Player(i), "-unstuck", true) // add the command for each player
            call TriggerAddCondition(t, Condition(function CinematicUnstuckConditionsKappa)) // the code for the command to work
        set i=i + 1 // go from red/player to next player
    endloop
endfunction

//Can't believe this didn't exist already.
function IsUnitPlayerHero takes unit chosenUnit returns boolean
    local integer i= 0
    
    loop
        exitwhen i == 12
            if chosenUnit == udg_Playerhero[i] then
                return true
            endif
    endloop
    
    return false
endfunction

//Utility function for not looping manually each time through the inventory
function RemoveItemTypeFromUnit takes unit inventoryUnit,integer itemId returns boolean
    local integer i= 0
    
    loop
        exitwhen i > 5
        
            //If item slot has the item, remove it
            if ( GetItemTypeId(UnitItemInSlot(inventoryUnit, i)) == itemId ) then
                //call DisplayTextToForce(GetPlayersAll(), "i is: " + I2S(i))
                call UnitRemoveItemFromSlot(inventoryUnit, i)
                return true
            endif
        
        set i=i + 1
    endloop
    return false

endfunction

//Utility function for removing an item from a unit, without even checking if it has it (since it does it inside the function)
function DetermineRemoveItemTypeFromUnit takes unit inventoryUnit,integer itemId returns boolean

    if UnitHasItemOfTypeBJ(inventoryUnit, itemId) then
        call RemoveItemTypeFromUnit(inventoryUnit , itemId)
        return true
    endif
    
    return false

endfunction



//These 2 functions should be on a suit library/scope
function GetRawSuitID takes unit suitUnit returns integer
    if GetUnitTypeId(suitUnit) == 'h00I' then //Tesla
        return 2
    elseif GetUnitTypeId(suitUnit) == 'h00C' then //Rocket
        return 3
    elseif GetUnitTypeId(suitUnit) == 'h00J' then //Cryo
        return 4
    elseif GetUnitTypeId(suitUnit) == 'h00D' then //Plasma
        return 5
    elseif GetUnitTypeId(suitUnit) == 'h00E' then //Flamethrower
        return 6
    elseif GetUnitTypeId(suitUnit) == 'h00F' then //Photon
        return 7
    elseif GetUnitTypeId(suitUnit) == 'h00K' then //Service
        return 8
    elseif GetUnitTypeId(suitUnit) == 'h00L' then //DarkMatter
        return 9
    elseif GetUnitTypeId(suitUnit) == 'h00M' then //Illusion
        return 10
    elseif GetUnitTypeId(suitUnit) == 'h00N' then //Radiation
        return 11
    elseif GetUnitTypeId(suitUnit) == 'h024' then //Operative
        return 12
    elseif GetUnitTypeId(suitUnit) == 'h027' then //Scientist
        return 13
    elseif GetUnitTypeId(suitUnit) == 'h02G' then //Guard
        return 14
    elseif GetUnitTypeId(suitUnit) == 'h02R' then //Acid
        return 15
    elseif GetUnitTypeId(suitUnit) == 'h03U' then //Machinegun
        return 16
    elseif GetUnitTypeId(suitUnit) == 'h03L' then //Force
        return 17
    elseif GetUnitTypeId(suitUnit) == 'h04K' then //Magnetic
        return 18
    elseif GetUnitTypeId(suitUnit) == 'h04M' then //Pulse
        return 19
    endif
    
    return - 1
endfunction

//Because the first suit (tesla) starts from [2] instead of [0]
function GetConvertedSuitID takes unit suitUnit returns integer
    return GetRawSuitID(suitUnit) - 2
endfunction


//Used to be on PlantChip trigger but PlayerMurder cant access it -_-
//Gotta make rogue android chip functions on a global library
function GetChippedCorpses takes nothing returns integer
    local integer i= 0
    local integer chippedCorpses= 0
    
    //Iterate all chipped corpses
    loop
        exitwhen i > 17
    
        if udg_RogueAndroidChippedCorpses[i] != null then
            set chippedCorpses=chippedCorpses + 1
        endif
        
        set i=i + 1
    endloop

    return chippedCorpses
endfunction

//This is usually called after IsBodyChipped for clean readable code instead of using -1
function GetBodyChippedIndex takes unit bodyToCheck returns integer
    local integer i= 0
    
    //Iterate all chipped corpses, and compare with the unit/corpse given
    loop
        exitwhen i > 17
    
        if udg_RogueAndroidChippedCorpses[i] == bodyToCheck then
            return i
        endif
        
        set i=i + 1
    endloop
    
    return - 1
endfunction

function IsBodyChipped takes unit bodyToCheck returns boolean
    local integer i= 0
    
    //Iterate all chipped corpses, and compare with the unit/corpse given
    loop
        exitwhen i > 17
    
        if udg_RogueAndroidChippedCorpses[i] == bodyToCheck then
            return true
        endif
        
        set i=i + 1
    endloop
    
    return false
endfunction

//Get master, give spawn, ggwp
function GetAlienSpawnId takes integer mainAlienId returns integer
    //Default
    if mainAlienId == 'h02M' then
        return 'h02N'
        
    //Power
    elseif mainAlienId == 'h03E' then
        return 'h03F'
        
    //Energy
    elseif mainAlienId == 'h035' then
        return 'h036'
        
    //Manipulation
    elseif mainAlienId == 'h02V' then
        return 'h02W'
        
    //Basilisk
    elseif mainAlienId == 'h03G' then
        return 'h03H'
        
    //Webspinner
    elseif mainAlienId == 'h03V' then
        return 'h03W'
        
    //Regeneration
    elseif mainAlienId == 'h03P' then
        return 'h03R'
        
    //Combustion
    elseif mainAlienId == 'h03A' then
        return 'h03B'
        
    //Electricity
    elseif mainAlienId == 'h037' then
        return 'h039'
        
    //Illusion
    elseif mainAlienId == 'h03C' then
        return 'h03D'
        
    //Spacial
    elseif mainAlienId == 'h031' then
        return 'h032'
        
    //Temporal
    elseif mainAlienId == 'h02Y' then
        return 'h030'
        
    //Masquerade
    elseif mainAlienId == 'h033' then
        return 'h034'
    endif
    
    return - 1
endfunction

function GetMutantSpawnId takes integer mainMutantId returns integer
    //Infection T1
    if mainMutantId == 'h00V' then
        return 'h00W'
        
    //Human Development
    elseif mainMutantId == 'h01I' then
        return 'h01J'
        
    //Rapid Gestation
    elseif mainMutantId == 'h01L' then
        return 'h01M'
        
    //Complete Infection
    elseif mainMutantId == 'h01K' then
        return 'h01N'
        
    //================================
    //Non-Infection skill forms below
    //================================

    
    //Sustained Development
    elseif mainMutantId == 'h01O' then
        return 'h01R'
        
    //Defiler
    elseif mainMutantId == 'h01V' then
        return 'h01X'
        
    //Overlord (SPACE)
    elseif mainMutantId == 'h04G' then
        return 'h01T'
        
    //Overlord (GROUND)
    elseif mainMutantId == 'h04W' then
        return 'h01Y'
    endif
    
    return - 1
endfunction

//==========================
//===Alien Skill Database===
//==========================

//GetAlienQ -> if AbilityLevel(Parasite) == 1 then give parasite rogue lmao
function GetAlienUnitW takes unit alienCorpse returns integer

    //Power
    if GetUnitTypeId(alienCorpse) == 'h03E' or GetUnitTypeId(alienCorpse) == 'h03F' then
        return 'A044' //Sly Tentacles
        
    //Energy
    elseif GetUnitTypeId(alienCorpse) == 'h035' or GetUnitTypeId(alienCorpse) == 'h036' then
        return 'A03L' //Energy Deflection
        
    //Manipulation
    elseif GetUnitTypeId(alienCorpse) == 'h02V' then
        return 'A02Y' //Mute-ilate
        
    //Basilisk
    elseif GetUnitTypeId(alienCorpse) == 'h03G' then
        //call CreateNUnitsAtLoc( 1, 'e00V', udg_RogueAndroid, udg_HoldZone, bj_UNIT_FACING )
        return 'A045' //Petrify
        
    //Regeneration (The core is the actual corpse)
    elseif GetUnitTypeId(alienCorpse) == 'h03P' then
        return 'A04W' //Swarmbolt
        
    //Webspinner
    elseif GetUnitTypeId(alienCorpse) == 'h03V' or GetUnitTypeId(alienCorpse) == 'h03W' then
        return 'A05B' //Webwire
        
    //Combustion
    elseif GetUnitTypeId(alienCorpse) == 'h03A' then
        return 'A03V' //Projected Explosion
        
    //Combustion (Spawn)
    elseif GetUnitTypeId(alienCorpse) == 'h03B' then
        return 'A03X' //Projected Explosion (Spawn)
        
    //Lighting
    elseif GetUnitTypeId(alienCorpse) == 'h037' or GetUnitTypeId(alienCorpse) == 'h039' then
        //call CreateNUnitsAtLoc( 1, 'e00P', udg_RogueAndroid, udg_HoldZone, bj_UNIT_FACING )
        return 'A03R' //Lighting Strike
    
    //Illusion
    elseif GetUnitTypeId(alienCorpse) == 'h03C' then
        //call CreateNUnitsAtLoc( 1, 'e00S', udg_RogueAndroid, udg_HoldZone, bj_UNIT_FACING )
        return 'A03Y' //Manifold
        
    //Illusion (Spawn)
    elseif GetUnitTypeId(alienCorpse) == 'h03D' then
        return 'A042' //Manifold
        
    //Spacial
    elseif GetUnitTypeId(alienCorpse) == 'h031' or GetUnitTypeId(alienCorpse) == 'h032' then
        //call CreateNUnitsAtLoc( 1, 'e00M', udg_RogueAndroid, udg_HoldZone, bj_UNIT_FACING )
        return 'A03I' //Spatial Swap/Teletransportation
    
    //Temporal
    elseif GetUnitTypeId(alienCorpse) == 'h02Y' then
        set udg_RogueAndroidStoleTimeLoop=true
        call EnableTrigger(gg_trg_ClosedTimeLikeLoopSavePos) //Should close when time alien is dead btw
        call ExecuteFunc("CreateCTLRequirement")
        return 'A033' //Timeloop
        
    //Masquerade
    elseif GetUnitTypeId(alienCorpse) == 'h033' then
        return 'A02Y' //Mute-ilate
    
    endif
    
    return - 1
endfunction

function GetAlienUnitE takes unit alienCorpse returns integer

    //Power
    if GetUnitTypeId(alienCorpse) == 'h03E' or GetUnitTypeId(alienCorpse) == 'h03F' then
        return 'A043' //Neurotoxic Poison (the spawn has exactly the same lmao
    
    //Energy
    elseif GetUnitTypeId(alienCorpse) == 'h035' then
        return 'A03M' //Entropy
        
    //Manipulation
    elseif GetUnitTypeId(alienCorpse) == 'h02V' then
        //call CreateNUnitsAtLoc( 1, 'e00T', udg_RogueAndroid, udg_HoldZone, bj_UNIT_FACING )
        return 'A02Z' //Temporal Flux
    
    //Basilisk
    elseif GetUnitTypeId(alienCorpse) == 'h03G' or GetUnitTypeId(alienCorpse) == 'h03F' then
        return 'A043' //Neurotoxic Poison
        
    //Regeneration (the core form is the actual corpse)
    elseif GetUnitTypeId(alienCorpse) == 'h03P' or GetUnitTypeId(alienCorpse) == 'h03R' or GetUnitTypeId(alienCorpse) == 'h03Q' or GetUnitTypeId(alienCorpse) == 'h03S' then
        return 'A0AR' //Alien Cyborg Regenerator Core Form
    
    //Combustion
    elseif GetUnitTypeId(alienCorpse) == 'h03A' or GetUnitTypeId(alienCorpse) == 'h03B' then
        return 'A03U' //Lord of Flames
    
    //Lighting
    elseif GetUnitTypeId(alienCorpse) == 'h037' then
        //call CreateNUnitsAtLoc( 1, 'e00O', udg_RogueAndroid, udg_HoldZone, bj_UNIT_FACING )
        return 'A03Q' //Electromagnetic Disruption
        
    //Illusion
    elseif GetUnitTypeId(alienCorpse) == 'h03C' then
        return 'A041' //Blackness
        
    //Spacial
    elseif GetUnitTypeId(alienCorpse) == 'h031' then
        return 'A03C' //Spatial Relocation
        
    //Temporal
    elseif GetUnitTypeId(alienCorpse) == 'h02Y' then
        set udg_RogueAndroidStoleBackFromHell=true
        //call CreateNUnitsAtLoc( 1, 'e00J', udg_RogueAndroid, udg_HoldZone, bj_UNIT_FACING )
        return 'A032' //Back From Hell
        
    //Masquerade
    elseif GetUnitTypeId(alienCorpse) == 'h033' or GetUnitTypeId(alienCorpse) == 'h034' then
        //call CreateNUnitsAtLoc( 1, 'e015', udg_RogueAndroid, udg_HoldZone, bj_UNIT_FACING )
        return 'A03K' //Night of Masks
    
    endif
    
    return - 1
endfunction

//===========================
//===Mutant Skill Database===
//===========================

function GetMutantUnitQ takes unit mutantCorpse returns integer

    //Perfection
    if GetUnitTypeId(mutantCorpse) == 'h00U' then
        return 'A012' //Sludge

    //Strength
    elseif GetUnitTypeId(mutantCorpse) == 'h01E' then
        return 'A098' //Smash

    //Mobility
    elseif GetUnitTypeId(mutantCorpse) == 'h01B' then
        return 'A01I' //Don't Blink
        
    //Flesh Golem
    elseif GetUnitTypeId(mutantCorpse) == 'h01G' then
        return 'A098' //Smash
        
    //Minotaur
    elseif GetUnitTypeId(mutantCorpse) == 'h01H' then
        return 'A08R' //Charge
        
    //Stalker
    elseif GetUnitTypeId(mutantCorpse) == 'h01D' then
        return 'A01L' //Stalk
        
    //Crab
    elseif GetUnitTypeId(mutantCorpse) == 'h01C' then
        call CrabTeleport(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)])
        return 'A07F' //Crabosity
        
    //=====================
    //Infection Tree Below
    //=====================

    //Prion Infection 1
    elseif GetUnitTypeId(mutantCorpse) == 'h00V' or GetUnitTypeId(mutantCorpse) == 'h00W' then
        return 'A0AU' //Infection 1 Cyborg
        
    //Human Development
    elseif GetUnitTypeId(mutantCorpse) == 'h01I' or GetUnitTypeId(mutantCorpse) == 'h01J' then
        return 'A0AV' //Infection 2 Cyborg
      
    //Sustained Development
    elseif GetUnitTypeId(mutantCorpse) == 'h01O' or GetUnitTypeId(mutantCorpse) == 'h01R' then
        return 'A01Y' //Spiderlings
        
    //Rapid Gestation
    elseif GetUnitTypeId(mutantCorpse) == 'h01L' or GetUnitTypeId(mutantCorpse) == 'h01M' then
        return 'A0AW' //Infection 3 Cyborg//Make it able to infect mutants and aliens too!
        
    //Complete Infection
    elseif GetUnitTypeId(mutantCorpse) == 'h01K' or GetUnitTypeId(mutantCorpse) == 'h01N' then
        return 'A067' //Global Infection

    //Defiler
    elseif GetUnitTypeId(mutantCorpse) == 'h01V' then
        return 'A023' //Metamorphosis
        
    //Harbringer
    elseif GetUnitTypeId(mutantCorpse) == 'h01T' then
        return 'A08K' //Swarm Fervor
    
    endif
    
    return - 1
endfunction

function GetMutantUnitW takes unit mutantCorpse returns integer

    //Strength
    if GetUnitTypeId(mutantCorpse) == 'h01E' then
        return 'A01O' //Fleshies
        
    //Mobility
    elseif GetUnitTypeId(mutantCorpse) == 'h01B' then
        return 'A02M' //Spatial Burst
        
    //Flesh Golem
    elseif GetUnitTypeId(mutantCorpse) == 'h01G' then
        return 'A05F' //It's Raining Rocks
        
    //Minotaur
    elseif GetUnitTypeId(mutantCorpse) == 'h01H' then
        return 'A08T' //Rolling Thunder
        
    //Stalker
    elseif GetUnitTypeId(mutantCorpse) == 'h01D' then
        return 'A01M' //Omniscience
        
    //Crab
    elseif GetUnitTypeId(mutantCorpse) == 'h01C' then
        return 'A07G' //Panic
        
    //Human Development
    elseif GetUnitTypeId(mutantCorpse) == 'h01I' or GetUnitTypeId(mutantCorpse) == 'h01J' then
        return 'A01T' //Tainted Vendor
        
    //Sustained Development
    elseif GetUnitTypeId(mutantCorpse) == 'h01O' or GetUnitTypeId(mutantCorpse) == 'h01R' then
        return 'A01Z' //Reabsorption
        
    //Rapid Gestation
    elseif GetUnitTypeId(mutantCorpse) == 'h01L' or GetUnitTypeId(mutantCorpse) == 'h01M' then
        return 'A01W' //Blast Shield
        
    //Global Infection
    elseif GetUnitTypeId(mutantCorpse) == 'h01K' or GetUnitTypeId(mutantCorpse) == 'h01N' then
        return 'A01W' //Blast Shield
        
    //Defiler
    elseif GetUnitTypeId(mutantCorpse) == 'h01V' then
        set udg_TempUnit=udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)]
        call ExecuteFunc("DefilerGoo")
        return 'A0AS'
        
    //Harbringer
    elseif GetUnitTypeId(mutantCorpse) == 'h01T' then
        return 'A08L' //Embrace of the Overlord

    endif
    
    return - 1
endfunction

function GetMutantUnitE takes unit mutantCorpse returns integer
    //Flesh Golem
    if GetUnitTypeId(mutantCorpse) == 'h01G' then
        return 'A01Q' //Rocks Fall, Everyone Dies
    
    //Rapid Gestation
    elseif GetUnitTypeId(mutantCorpse) == 'h01L' then
        return 'A05I' //Carrier
        
    //Global Infection
    elseif GetUnitTypeId(mutantCorpse) == 'h01K' then
        return 'A05J' //Vector
        
    endif
    
    return - 1
endfunction

//Rip, cant remove missile barrage for just 1 possible skill!
function GetMutantUnitR takes unit mutantCorpse returns integer
    //Flesh Golem
    if GetUnitTypeId(mutantCorpse) == 'h01G' then
        set udg_TempUnit=udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)]
        call ExecuteFunc("FleshGolemLoop")
        return 'A05E' //Flesh Golem
    endif
    
    return - 1
endfunction

//=======

function ConvertInfectionParasiteUnitToCyborgInfection takes unit convertedCyborgUnit returns nothing

    //If Alien
    if GetUnitAbilityLevel(convertedCyborgUnit, 'A02N') == 1 then
        call UnitRemoveAbility(convertedCyborgUnit, 'A02N')
        call UnitAddAbility(convertedCyborgUnit, 'A0AT')
    
    //If Infection(1)
    elseif GetUnitAbilityLevel(convertedCyborgUnit, 'A013') == 1 then
        call UnitRemoveAbility(convertedCyborgUnit, 'A013')
        call UnitAddAbility(convertedCyborgUnit, 'A0AU')
        
    //If Infection(2)
    elseif GetUnitAbilityLevel(convertedCyborgUnit, 'A01S') == 1 then
        call UnitRemoveAbility(convertedCyborgUnit, 'A01S')
        call UnitAddAbility(convertedCyborgUnit, 'A0AV')
        
    //If Infection(3)
    elseif GetUnitAbilityLevel(convertedCyborgUnit, 'A01X') == 1 then
        call UnitRemoveAbility(convertedCyborgUnit, 'A01X')
        call UnitAddAbility(convertedCyborgUnit, 'A0AW')
    endif

endfunction

//Aka AllowForTeleport
function AllowForMirrorDimension takes unit pickedUnit returns boolean

    //If hidden
    if IsUnitHidden(pickedUnit) then
        return false
    endif
    
    //If dead already
    if IsUnitType(pickedUnit, UNIT_TYPE_DEAD) or IsUnitDeadBJ(pickedUnit) then
        return false
    endif

    //If structure
    if IsUnitType(pickedUnit, UNIT_TYPE_STRUCTURE) then
        return false
    endif
    
    //If corpse (applied as an ability on trigger AnyDeath)
    if GetUnitAbilityLevel(GetEnumUnit(), 'A077') == 1 then
        return false
    endif
    
    //Console
    if GetUnitAbilityLevel(pickedUnit, 'A079') == 1 then
        return false
    endif
    
    //Explorer
    if GetUnitAbilityLevel(pickedUnit, 'A071') == 1 then
        return false
    endif
    
    //Vendor
    if GetUnitAbilityLevel(pickedUnit, 'A07Q') == 1 then
        return false
    endif


    // == Unit Blacklisting Below ==

    //If unit-selector
    if GetUnitTypeId(pickedUnit) == 'H03I' then
        return false
    endif
    
    //If robo-butler (CEO)
    if GetUnitTypeId(pickedUnit) == 'H046' then
        return false
    endif

    //If rogue android duplicate chip 
    if GetUnitTypeId(pickedUnit) == 'h056' then
        return false
    endif
    
    //If scientist
    if GetUnitTypeId(pickedUnit) == 'h025' then
        return false
    endif
    
    
    return true

endfunction

//***************************************************************************
//*
//*  Triggers
//*
//***************************************************************************

//===========================================================================
// Trigger: Untitled Trigger 001
//===========================================================================
function Trig_Untitled_Trigger_001_Actions takes nothing returns nothing
endfunction

//===========================================================================
function InitTrig_Untitled_Trigger_001 takes nothing returns nothing
    set gg_trg_Untitled_Trigger_001=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_Untitled_Trigger_001, gg_unit_h048_0143, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(gg_trg_Untitled_Trigger_001, gg_unit_h019_0155, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(gg_trg_Untitled_Trigger_001, gg_unit_h03Z_0188, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_Untitled_Trigger_001, function Trig_Untitled_Trigger_001_Actions)
endfunction

//===========================================================================
// Trigger: Explorer infection Bugfix
//===========================================================================
function Trig_Explorer_infection_Bugfix_Func001C takes nothing returns boolean
    if ( ( GetSpellAbilityId() == 'A013' ) ) then
        return true
    endif
    if ( ( GetSpellAbilityId() == 'A01S' ) ) then
        return true
    endif
    if ( ( GetSpellAbilityId() == 'A01X' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Explorer_infection_Bugfix_Conditions takes nothing returns boolean
    if ( not Trig_Explorer_infection_Bugfix_Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Explorer_infection_Bugfix_Func003Func007C takes nothing returns boolean
    return false
endfunction

function Trig_Explorer_infection_Bugfix_Func003C takes nothing returns boolean
    if ( not (false) ) then // INLINED!!
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h001' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02I' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02K' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02S' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h03K' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Explorer_infection_Bugfix_Actions takes nothing returns nothing
    if ( Trig_Explorer_infection_Bugfix_Func003C() ) then
        call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
        call CreateTextTagUnitBJ("TRIGSTR_4838", GetTriggerUnit(), 0, 10, 100.00, 100.00, 100, 0)
        call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 32.00, 90)
        call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
        call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 5)
        call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 4)
    else
    endif
endfunction

//===========================================================================
function InitTrig_Explorer_infection_Bugfix takes nothing returns nothing
    set gg_trg_Explorer_infection_Bugfix=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Explorer_infection_Bugfix, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Explorer_infection_Bugfix, Condition(function Trig_Explorer_infection_Bugfix_Conditions))
    call TriggerAddAction(gg_trg_Explorer_infection_Bugfix, function Trig_Explorer_infection_Bugfix_Actions)
endfunction

//===========================================================================
// Trigger: Minotaur Charge Bugfix
//===========================================================================
function Trig_Minotaur_Charge_Bugfix_Actions takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), OffsetLocation(GetUnitLoc(GetTriggerUnit()), 400.00, 0))
endfunction

//===========================================================================
function InitTrig_Minotaur_Charge_Bugfix takes nothing returns nothing
    set gg_trg_Minotaur_Charge_Bugfix=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Minotaur_Charge_Bugfix, gg_rct_MinotaurChargeDebug)
    call TriggerAddAction(gg_trg_Minotaur_Charge_Bugfix, function Trig_Minotaur_Charge_Bugfix_Actions)
endfunction

//===========================================================================
// Trigger: Rapid Infection Bugfix
//===========================================================================
function Trig_Rapid_Infection_Bugfix_Func002C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h01M' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h01L' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Rapid_Infection_Bugfix_Func003C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h01M' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h01L' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Rapid_Infection_Bugfix_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A01X' ) ) then
        return false
    endif
    if ( not Trig_Rapid_Infection_Bugfix_Func002C() ) then
        return false
    endif
    if ( not Trig_Rapid_Infection_Bugfix_Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_Rapid_Infection_Bugfix_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
endfunction

//===========================================================================
function InitTrig_Rapid_Infection_Bugfix takes nothing returns nothing
    set gg_trg_Rapid_Infection_Bugfix=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Rapid_Infection_Bugfix, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Rapid_Infection_Bugfix, Condition(function Trig_Rapid_Infection_Bugfix_Conditions))
    call TriggerAddAction(gg_trg_Rapid_Infection_Bugfix, function Trig_Rapid_Infection_Bugfix_Actions)
endfunction

//===========================================================================
// Trigger: Tetrabin Bugfix
//===========================================================================
function Trig_Tetrabin_Bugfix_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I01K' ) ) then
        return false
    endif
    if ( not ( GetTriggerUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] ) ) then
        return false
    endif
    if ( not ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == false ) ) then
        return false
    endif
    if ( not ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == false ) ) then
        return false
    endif
    if ( not ( udg_HiddenAndroid != GetOwningPlayer(GetTriggerUnit()) ) ) then
        return false
    endif
    if ( not ( udg_Mutant != GetOwningPlayer(GetTriggerUnit()) ) ) then
        return false
    endif
    if ( not ( udg_Parasite != GetOwningPlayer(GetTriggerUnit()) ) ) then
        return false
    endif
    if ( not ( GetPlayerTechCountSimple('R00A', GetOwningPlayer(GetTriggerUnit())) >= 15 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Tetrabin_Bugfix_Actions takes nothing returns nothing
    call ExplodeUnitBJ(udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetManipulatingUnit()))])
endfunction

//===========================================================================
function InitTrig_Tetrabin_Bugfix takes nothing returns nothing
    set gg_trg_Tetrabin_Bugfix=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Tetrabin_Bugfix, EVENT_PLAYER_UNIT_USE_ITEM)
    call TriggerAddCondition(gg_trg_Tetrabin_Bugfix, Condition(function Trig_Tetrabin_Bugfix_Conditions))
    call TriggerAddAction(gg_trg_Tetrabin_Bugfix, function Trig_Tetrabin_Bugfix_Actions)
endfunction

//===========================================================================
// Trigger: Mutalien bugfix Copy
//===========================================================================
function Trig_Mutalien_bugfix_Copy_Func002C takes nothing returns boolean
    if ( ( GetOwningPlayer(GetTriggerUnit()) == udg_Mutant ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetTriggerUnit()) == udg_Parasite ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetTriggerUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return true
    endif
    return false
endfunction

function Trig_Mutalien_bugfix_Copy_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'h02P' ) ) then
        return false
    endif
    if ( not Trig_Mutalien_bugfix_Copy_Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_Mutalien_bugfix_Copy_Func004C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetTriggerUnit()) == udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mutalien_bugfix_Copy_Actions takes nothing returns nothing
    if ( Trig_Mutalien_bugfix_Copy_Func004C() ) then
        call RemoveUnit(udg_Mutant_EvoSelector)
    else
        call RemoveUnit(udg_Parasite_EvoSelector)
    endif
endfunction

//===========================================================================
function InitTrig_Mutalien_bugfix_Copy takes nothing returns nothing
    set gg_trg_Mutalien_bugfix_Copy=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Mutalien_bugfix_Copy, gg_rct_SpaceSound)
    call TriggerAddCondition(gg_trg_Mutalien_bugfix_Copy, Condition(function Trig_Mutalien_bugfix_Copy_Conditions))
    call TriggerAddAction(gg_trg_Mutalien_bugfix_Copy, function Trig_Mutalien_bugfix_Copy_Actions)
endfunction

//===========================================================================
// Trigger: AlienDeathShipControl
//===========================================================================
function Trig_AlienDeathShipControl_Func001C takes nothing returns boolean
    if ( ( GetOwningPlayer(GetTriggerUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetTriggerUnit()) == udg_Parasite ) ) then
        return true
    endif
    return false
endfunction

function Trig_AlienDeathShipControl_Func002C takes nothing returns boolean
    if ( ( GetUnitRace(GetTriggerUnit()) == RACE_ORC ) ) then
        return true
    endif
    if ( ( GetUnitRace(GetTriggerUnit()) == RACE_UNDEAD ) ) then
        return true
    endif
    return false
endfunction

function Trig_AlienDeathShipControl_Conditions takes nothing returns boolean
    if ( not Trig_AlienDeathShipControl_Func001C() ) then
        return false
    endif
    if ( not Trig_AlienDeathShipControl_Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_AlienDeathShipControl_Func005Func001Func001C takes nothing returns boolean
    if ( ( GetOwningPlayer(GetEnumUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetEnumUnit()) == udg_Parasite ) ) then
        return true
    endif
    return false
endfunction

function Trig_AlienDeathShipControl_Func005Func001C takes nothing returns boolean
    if ( not Trig_AlienDeathShipControl_Func005Func001Func001C() ) then
        return false
    endif
    if not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) ) then // INLINED!!
    return false
    endif
    return true
endfunction

function Trig_AlienDeathShipControl_Func005A takes nothing returns nothing
    if ( Trig_AlienDeathShipControl_Func005Func001C() ) then
        call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_PASSIVE), false)
    else
    endif
endfunction

function Trig_AlienDeathShipControl_Func007Func001C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A079', GetEnumUnit()) == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienDeathShipControl_Func007A takes nothing returns nothing
    if ( Trig_AlienDeathShipControl_Func007Func001C() ) then
        call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_PASSIVE), false)
    else
    endif
endfunction

function Trig_AlienDeathShipControl_Func008Func001C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A079', GetEnumUnit()) == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienDeathShipControl_Func008A takes nothing returns nothing
    if ( Trig_AlienDeathShipControl_Func008Func001C() ) then
        call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_PASSIVE), false)
    else
    endif
endfunction

function Trig_AlienDeathShipControl_Actions takes nothing returns nothing
    // Remove spaceship ownership
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_Space), function Trig_AlienDeathShipControl_Func005A)
    // Remove console ownership
    call ForGroupBJ(GetUnitsOfPlayerAll(udg_Parasite), function Trig_AlienDeathShipControl_Func007A)
    call ForGroupBJ(GetUnitsOfPlayerAll(Player(bj_PLAYER_NEUTRAL_EXTRA)), function Trig_AlienDeathShipControl_Func008A)
endfunction

//===========================================================================
function InitTrig_AlienDeathShipControl takes nothing returns nothing
    set gg_trg_AlienDeathShipControl=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_AlienDeathShipControl, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_AlienDeathShipControl, Condition(function Trig_AlienDeathShipControl_Conditions))
    call TriggerAddAction(gg_trg_AlienDeathShipControl, function Trig_AlienDeathShipControl_Actions)
endfunction

//===========================================================================
// Trigger: HarbringerDeathShipControl
//===========================================================================
function Trig_HarbringerDeathShipControl_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'h01T' ) ) then
        return false
    endif
    return true
endfunction

function Trig_HarbringerDeathShipControl_Func003Func001Func004C takes nothing returns boolean
    if ( ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == true ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetEnumUnit()) == udg_Mutant ) ) then
        return true
    endif
    return false
endfunction

function Trig_HarbringerDeathShipControl_Func003Func001C takes nothing returns boolean
    if not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) ) then // INLINED!!
    return false
    endif
    if ( not Trig_HarbringerDeathShipControl_Func003Func001Func004C() ) then
        return false
    endif
    return true
endfunction

function Trig_HarbringerDeathShipControl_Func003A takes nothing returns nothing
    if ( Trig_HarbringerDeathShipControl_Func003Func001C() ) then
        call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_PASSIVE), false)
    else
    endif
endfunction

function Trig_HarbringerDeathShipControl_Actions takes nothing returns nothing
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_Space), function Trig_HarbringerDeathShipControl_Func003A)
endfunction

//===========================================================================
function InitTrig_HarbringerDeathShipControl takes nothing returns nothing
    set gg_trg_HarbringerDeathShipControl=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_HarbringerDeathShipControl, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_HarbringerDeathShipControl, Condition(function Trig_HarbringerDeathShipControl_Conditions))
    call TriggerAddAction(gg_trg_HarbringerDeathShipControl, function Trig_HarbringerDeathShipControl_Actions)
endfunction

//===========================================================================
// Trigger: Stalker Range Restriction Attack
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_Stalker_Range_Restriction_Attack_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'h01D' ) ) then
        return false
    endif
    if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("attack") ) ) then
        return false
    endif
    return true
endfunction

function Trig_Stalker_Range_Restriction_Attack_Actions takes nothing returns nothing
    set udg_StalkerAttackLocation=GetUnitLoc(GetOrderTargetUnit())
    set udg_StalkerUnitLocation=GetUnitLoc(GetTriggerUnit())
    set udg_StalkerUnit=GetTriggerUnit()
    call StartTimerBJ(udg_StalkerAttackTimer, false, 0.00)
endfunction

//===========================================================================
function InitTrig_Stalker_Range_Restriction_Attack takes nothing returns nothing
    set gg_trg_Stalker_Range_Restriction_Attack=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Stalker_Range_Restriction_Attack, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER)
    call TriggerAddCondition(gg_trg_Stalker_Range_Restriction_Attack, Condition(function Trig_Stalker_Range_Restriction_Attack_Conditions))
    call TriggerAddAction(gg_trg_Stalker_Range_Restriction_Attack, function Trig_Stalker_Range_Restriction_Attack_Actions)
endfunction


//===========================================================================
// Trigger: Stalker Range Restriction GroundAttack
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_Stalker_Range_Restriction_GroundAttack_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'h01D' ) ) then
        return false
    endif
    if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("attackground") ) ) then
        return false
    endif
    return true
endfunction

function Trig_Stalker_Range_Restriction_GroundAttack_Actions takes nothing returns nothing
    //set udg_StalkerAttackLocation = GetOrderPointLoc()
    //set udg_StalkerUnitLocation = GetUnitLoc(GetTriggerUnit())
    //set udg_StalkerUnit = GetTriggerUnit()
    //call StartTimerBJ( udg_StalkerAttackTimer, false, 0.00 )
    ///call DisplayTextToForce(GetPlayersAll(), "groundattack!")
endfunction

//===========================================================================
function InitTrig_Stalker_Range_Restriction_GroundAttack takes nothing returns nothing
    set gg_trg_Stalker_Range_Restriction_GroundAttack=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Stalker_Range_Restriction_GroundAttack, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)
    call TriggerAddCondition(gg_trg_Stalker_Range_Restriction_GroundAttack, Condition(function Trig_Stalker_Range_Restriction_GroundAttack_Conditions))
    call TriggerAddAction(gg_trg_Stalker_Range_Restriction_GroundAttack, function Trig_Stalker_Range_Restriction_GroundAttack_Actions)
endfunction


//===========================================================================
// Trigger: Stalker Range Restriction Activation
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_Stalker_Range_Restriction_Activation_Actions takes nothing returns nothing
    //If less than 400 range, stop attacking.
    if ( DistanceBetweenPoints(udg_StalkerAttackLocation, udg_StalkerUnitLocation) <= 400.00 ) then
        call IssueImmediateOrderBJ(udg_StalkerUnit, "stop")
        
        //Explain to mutant the range mechanic, and color-code it plz.
        call DisplayTimedTextToPlayer(udg_Mutant, 0, 0, 1.00, "|cffF4A460Distance from Prey: |r|cffFF0000" + R2S(DistanceBetweenPoints(udg_StalkerAttackLocation, udg_StalkerUnitLocation)))
    else
        call DisplayTimedTextToPlayer(udg_Mutant, 0, 0, 1.00, "|cffF4A460Distance from Prey: |r|cff8AB600" + R2S(DistanceBetweenPoints(udg_StalkerAttackLocation, udg_StalkerUnitLocation)))
    endif
    
    
    //Memory Leak Cleaning
    call RemoveLocation(udg_StalkerAttackLocation)
    call RemoveLocation(udg_StalkerUnitLocation)
endfunction

//===========================================================================
function InitTrig_Stalker_Range_Restriction_Activation takes nothing returns nothing
    set gg_trg_Stalker_Range_Restriction_Activation=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_Stalker_Range_Restriction_Activation, udg_StalkerAttackTimer)
    call TriggerAddAction(gg_trg_Stalker_Range_Restriction_Activation, function Trig_Stalker_Range_Restriction_Activation_Actions)
endfunction


//===========================================================================
// Trigger: PhoenixHeight
//===========================================================================
function Trig_PhoenixHeight_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'h052' ) ) then
        return false
    endif
    return true
endfunction

function Trig_PhoenixHeight_Actions takes nothing returns nothing
    call UnitAddAbilityBJ('Amrf', GetTriggerUnit())
    call SetUnitFlyHeight(GetTriggerUnit(), 30, 0)
    call UnitRemoveAbilityBJ('Amrf', GetTriggerUnit())
endfunction

//===========================================================================
function InitTrig_PhoenixHeight takes nothing returns nothing
    set gg_trg_PhoenixHeight=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_PhoenixHeight, GetPlayableMapRect())
    call TriggerAddCondition(gg_trg_PhoenixHeight, Condition(function Trig_PhoenixHeight_Conditions))
    call TriggerAddAction(gg_trg_PhoenixHeight, function Trig_PhoenixHeight_Actions)
endfunction

//===========================================================================
// Trigger: IllusionPodstart
//===========================================================================
function Trig_IllusionPodstart_Func001C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h02O' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetBuyingUnit()) == 'h00M' ) ) then
        return true
    endif
    return false
endfunction

function Trig_IllusionPodstart_Conditions takes nothing returns boolean
    if ( not Trig_IllusionPodstart_Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_IllusionPodstart_Actions takes nothing returns nothing
    set udg_IllusionSuitBoolean=true
    call StartTimerBJ(udg_IllusionSuitTimer, false, 5.00)
endfunction

//===========================================================================
function InitTrig_IllusionPodstart takes nothing returns nothing
    set gg_trg_IllusionPodstart=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_IllusionPodstart, EVENT_PLAYER_UNIT_SELL_ITEM)
    call TriggerAddCondition(gg_trg_IllusionPodstart, Condition(function Trig_IllusionPodstart_Conditions))
    call TriggerAddAction(gg_trg_IllusionPodstart, function Trig_IllusionPodstart_Actions)
endfunction

//===========================================================================
// Trigger: IllusionStop
//===========================================================================
function Trig_IllusionStop_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A00T' ) ) then
        return false
    endif
    if ( not ( udg_IllusionSuitBoolean == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_IllusionStop_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
endfunction

//===========================================================================
function InitTrig_IllusionStop takes nothing returns nothing
    set gg_trg_IllusionStop=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_IllusionStop, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_IllusionStop, Condition(function Trig_IllusionStop_Conditions))
    call TriggerAddAction(gg_trg_IllusionStop, function Trig_IllusionStop_Actions)
endfunction

//===========================================================================
// Trigger: IllusionTimer
//===========================================================================
function Trig_IllusionTimer_Actions takes nothing returns nothing
    set udg_IllusionSuitBoolean=false
endfunction

//===========================================================================
function InitTrig_IllusionTimer takes nothing returns nothing
    set gg_trg_IllusionTimer=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_IllusionTimer, udg_IllusionSuitTimer)
    call TriggerAddAction(gg_trg_IllusionTimer, function Trig_IllusionTimer_Actions)
endfunction

//===========================================================================
// Trigger: Color Library and PathingFuncs and Antisave
//
// Cause, uno, Fel's way makes me cry with all the little udgs.
//===========================================================================




//====================================
// PreventSave
//====================================
//
//   This library is simple enough. It allows you to enable or
//   disabled game saving. It works by showing a dialog instantly
//   before a game is saved. This closes the save screen therefor
//   the game is never actually saved.
//
//   Nothing visually happens to the game except for maybe a quick open
//   and close of the save dialog, though it's hardly noticeable.
//   This even works in single player surprisngly without pausing the game
//   which usually happens when a dialog is opened offline.
//
//   You can toggle allowing or disallowing saving by setting
//   GameAllowSave to true, or false.
//
//====================================
// Import Instructions
//====================================
//
//   1. Copy this entire script.
//   2. Create a new trigger in your trigger
//      editor and convert it to Jass.
//   3. Paste this in there and save the map.
//
//      This requires JassHelper which is included
//      in JassNewGenPack.
//
//====================================

//===========================================================================
// Trigger: UnitCustomData
//
// Saves some custom data for some units. Specifically unit mass (used to determine force suit knockback) at the moment.
//===========================================================================
//===========================================================================
function InitTrig_UnitCustomData takes nothing returns nothing

    //Units with a mass of 100 are not represented here.
    call SaveReal((udg_hash), ('h02X' ), StringHash("CustomData_Mass"), (( 2000.0)*1.0)) //Alien coccoon // INLINED!!
    call SaveReal((udg_hash), ('h02U' ), StringHash("CustomData_Mass"), (( 330.0)*1.0)) //Penguin android // INLINED!!
    call SaveReal((udg_hash), ('h02F' ), StringHash("CustomData_Mass"), (( 330.0)*1.0)) //Surbeit Chassis // INLINED!!
    call SaveReal((udg_hash), ('h00B' ), StringHash("CustomData_Mass"), (( 130.0)*1.0)) //Defense drone // INLINED!!
    call SaveReal((udg_hash), ('h02S' ), StringHash("CustomData_Mass"), (( 4000.0)*1.0)) //Grounded albadar // INLINED!!
    call SaveReal((udg_hash), ('h02I' ), StringHash("CustomData_Mass"), (( 3500.0)*1.0)) //Grounded hunter // INLINED!!
    call SaveReal((udg_hash), ('h02K' ), StringHash("CustomData_Mass"), (( 2500.0)*1.0)) //Grounded obda // INLINED!!
    call SaveReal((udg_hash), ('h001' ), StringHash("CustomData_Mass"), (( 3000.0)*1.0)) //Grounded raptor // INLINED!!
    call SaveReal((udg_hash), ('h03K' ), StringHash("CustomData_Mass"), (( 3000.0)*1.0)) //Grounded sheepyship // INLINED!!
    call SaveReal((udg_hash), ('h00H' ), StringHash("CustomData_Mass"), (( 80.0)*1.0)) //Unsuited personnel // INLINED!!
    call SaveReal((udg_hash), ('h00K' ), StringHash("CustomData_Mass"), (( 95.0)*1.0)) //Chainsaw suit // INLINED!!
    call SaveReal((udg_hash), ('h00E' ), StringHash("CustomData_Mass"), (( 130.0)*1.0)) //Flamethrower suit // INLINED!!
    call SaveReal((udg_hash), ('h02G' ), StringHash("CustomData_Mass"), (( 110.0)*1.0)) //Guard suit // INLINED!!
    call SaveReal((udg_hash), ('h00M' ), StringHash("CustomData_Mass"), (( 130.0)*1.0)) //Illusory suit apparently...? // INLINED!!
    call SaveReal((udg_hash), ('h00F' ), StringHash("CustomData_Mass"), (( 90.0)*1.0)) //Photon suit // INLINED!!
    call SaveReal((udg_hash), ('h00C' ), StringHash("CustomData_Mass"), (( 120.0)*1.0)) //Rocket suit // INLINED!!
    call SaveReal((udg_hash), ('h027' ), StringHash("CustomData_Mass"), (( 80.0)*1.0)) //Scientist suit // INLINED!!
    call SaveReal((udg_hash), ('h033' ), StringHash("CustomData_Mass"), (( 110.0)*1.0)) //Masquerader // INLINED!!
    call SaveReal((udg_hash), ('h02M' ), StringHash("CustomData_Mass"), (( 110)*1.0)) //T1 alien // INLINED!!
    call SaveReal((udg_hash), ('h03E' ), StringHash("CustomData_Mass"), (( 150.0)*1.0)) //T2 power alien // INLINED!!
    call SaveReal((udg_hash), ('h03G' ), StringHash("CustomData_Mass"), (( 275.0)*1.0)) //T3 basilisk // INLINED!!
    call SaveReal((udg_hash), ('h03A' ), StringHash("CustomData_Mass"), (( 120.0)*1.0)) //T3 combustion // INLINED!!
    call SaveReal((udg_hash), ('h037' ), StringHash("CustomData_Mass"), (( 275.0)*1.0)) //T3 electricity // INLINED!!
    call SaveReal((udg_hash), ('h03P' ), StringHash("CustomData_Mass"), (( 175.0)*1.0)) //T3 regeneration // INLINED!!
    call SaveReal((udg_hash), ('h03V' ), StringHash("CustomData_Mass"), (( 180.0)*1.0)) //T3 webspinner // INLINED!!
    call SaveReal((udg_hash), ('h03Q' ), StringHash("CustomData_Mass"), (( 80.0)*1.0)) //Regeneration core // INLINED!!
    call SaveReal((udg_hash), ('h03F' ), StringHash("CustomData_Mass"), (( 130.0)*1.0)) //T2 Power alien spawn // INLINED!!
    call SaveReal((udg_hash), ('h03H' ), StringHash("CustomData_Mass"), (( 200.0)*1.0)) //Basilisk spawn // INLINED!!
    call SaveReal((udg_hash), ('h03B' ), StringHash("CustomData_Mass"), (( 120.0)*1.0)) //Combustion spawn // INLINED!!
    call SaveReal((udg_hash), ('h039' ), StringHash("CustomData_Mass"), (( 275.0)*1.0)) //Electricity spawn // INLINED!!
    call SaveReal((udg_hash), ('h03R' ), StringHash("CustomData_Mass"), (( 165.0)*1.0)) //T3 regeneration spawn // INLINED!!
    call SaveReal((udg_hash), ('h03W' ), StringHash("CustomData_Mass"), (( 180.0)*1.0)) //Webspinner spawn // INLINED!!
    call SaveReal((udg_hash), ('h03S' ), StringHash("CustomData_Mass"), (( 80.0)*1.0)) //Alien spawn core // INLINED!!
    call SaveReal((udg_hash), ('h01U' ), StringHash("CustomData_Mass"), (( 50.0)*1.0)) //Carrier sack // INLINED!!
    call SaveReal((udg_hash), ('h01T' ), StringHash("CustomData_Mass"), (( 160.0)*1.0)) //Harbinger // INLINED!!
    call SaveReal((udg_hash), ('h01K' ), StringHash("CustomData_Mass"), (( 180.0)*1.0)) //Complete infection mutant // INLINED!!
    call SaveReal((udg_hash), ('h01V' ), StringHash("CustomData_Mass"), (( 250.0)*1.0)) //Defiler mutant // INLINED!!
    call SaveReal((udg_hash), ('h01G' ), StringHash("CustomData_Mass"), (( 1000.0)*1.0)) //Flesh golem mutant // INLINED!!
    call SaveReal((udg_hash), ('h01C' ), StringHash("CustomData_Mass"), (( 80.0)*1.0)) //Gargoyle mutant // INLINED!!
    call SaveReal((udg_hash), ('h01I' ), StringHash("CustomData_Mass"), (( 120.0)*1.0)) //Human development mutant // INLINED!!
    call SaveReal((udg_hash), ('h01H' ), StringHash("CustomData_Mass"), (( 260.0)*1.0)) //Minotaur mutant // INLINED!!
    call SaveReal((udg_hash), ('h00U' ), StringHash("CustomData_Mass"), (( 125.0)*1.0)) //Perfection mutant // INLINED!!
    call SaveReal((udg_hash), ('h01L' ), StringHash("CustomData_Mass"), (( 115.0)*1.0)) //Rapid gestation mutant // INLINED!!
    call SaveReal((udg_hash), ('h01D' ), StringHash("CustomData_Mass"), (( 175.0)*1.0)) //Stalker mutant // INLINED!!
    call SaveReal((udg_hash), ('h01E' ), StringHash("CustomData_Mass"), (( 400.0)*1.0)) //Strength mutant // INLINED!!
    call SaveReal((udg_hash), ('h01O' ), StringHash("CustomData_Mass"), (( 120.0)*1.0)) //Sustained development mutant (scorpion) // INLINED!!
    call SaveReal((udg_hash), ('h01N' ), StringHash("CustomData_Mass"), (( 115.0)*1.0)) //Complete infection spawn // INLINED!!
    call SaveReal((udg_hash), ('h01X' ), StringHash("CustomData_Mass"), (( 175.0)*1.0)) //Defiler spawn // INLINED!!
    call SaveReal((udg_hash), ('h01Y' ), StringHash("CustomData_Mass"), (( 175.0)*1.0)) //Overlord spawn // INLINED!!
    call SaveReal((udg_hash), ('h01M' ), StringHash("CustomData_Mass"), (( 115.0)*1.0)) //Rapid gestation spawn // INLINED!!
    call SaveReal((udg_hash), ('h01P' ), StringHash("CustomData_Mass"), (( 30.0)*1.0)) //Spiderling // INLINED!!
    call SaveReal((udg_hash), ('h01S' ), StringHash("CustomData_Mass"), (( 30.0)*1.0)) //Swarm beetle // INLINED!!
    call SaveReal((udg_hash), ('h022' ), StringHash("CustomData_Mass"), (( 165.0)*1.0)) //Overlord tentacle unit // INLINED!!
    call SaveReal((udg_hash), ('h01W' ), StringHash("CustomData_Mass"), (( 20.0)*1.0)) //Defiler worm // INLINED!!
    call SaveReal((udg_hash), ('h01Q' ), StringHash("CustomData_Mass"), (( 4000.0)*1.0)) //Overlord mutant // INLINED!!
    call SaveReal((udg_hash), ('h04Q' ), StringHash("CustomData_Mass"), (( 80.0)*1.0)) //Cage // INLINED!!
    call SaveReal((udg_hash), ('h057' ), StringHash("CustomData_Mass"), (( 200.0)*1.0)) //Rogue Android // INLINED!!
    call SaveReal((udg_hash), ('h056' ), StringHash("CustomData_Mass"), (( 999999999.0)*1.0)) //Rogue Android's Corpse Chip // INLINED!!
    
    //Consoles
    call SaveReal((udg_hash), ('h000' ), StringHash("CustomData_Mass"), (( 999999999.0)*1.0)) // INLINED!!
    call SaveReal((udg_hash), ('h00Y' ), StringHash("CustomData_Mass"), (( 999999999.0)*1.0)) // INLINED!!
    call SaveReal((udg_hash), ('h04B' ), StringHash("CustomData_Mass"), (( 999999999.0)*1.0)) // INLINED!!
    call SaveReal((udg_hash), ('h006' ), StringHash("CustomData_Mass"), (( 999999999.0)*1.0)) // INLINED!!
    call SaveReal((udg_hash), ('h048' ), StringHash("CustomData_Mass"), (( 999999999.0)*1.0)) // INLINED!!
    call SaveReal((udg_hash), ('h00A' ), StringHash("CustomData_Mass"), (( 999999999.0)*1.0)) // INLINED!!
    call SaveReal((udg_hash), ('h02A' ), StringHash("CustomData_Mass"), (( 999999999.0)*1.0)) // INLINED!!
    call SaveReal((udg_hash), ('h004' ), StringHash("CustomData_Mass"), (( 999999999.0)*1.0)) // INLINED!!
endfunction


//===========================================================================
// Trigger: ArrayDat
//
// Array Data assigns every unit in the map a unique identifier number and saves it to their point value. Arrays can then be used to store data about the unit.
// Important note: This system was designed before hashtables, in the days of slow and clunky gamecaches. So don't blame me okay.
//===========================================================================


//Faster to type than GetUnitUserData() and easier to remember.
function GetUnitAN takes unit h returns integer
            return GetUnitUserData(h)
endfunction

function NewUnitRegister takes unit h returns nothing
endfunction
//When a unit enters the map, this will catch it and assign a number to it.
//The bad part is, you shouldn't reference a unit immediately after creating it.
//If you must, call NewUnitRegister(GetLastCreatedUnit()). A built in safety guard will prevent this function from overwriting.
function Redirect_RegisterUnit takes nothing returns nothing
endfunction
//==============================
//Give pre-placed units a number.
//You should still call a new register before accessing if you immediately want it during map init.
function PrePlacedUnits takes nothing returns nothing
    call NewUnitRegister(GetEnumUnit())
endfunction
function Init_ForGlobal takes nothing returns nothing
//Fun fun fun, make sure to call this somewhere.
local group x=GetUnitsInRectAll(GetPlayableMapRect())
local trigger v=CreateTrigger()
    call TriggerRegisterEnterRectSimple(v, GetPlayableMapRect())
    call TriggerAddAction(v, function Redirect_RegisterUnit)
call ForGroup(x, function PrePlacedUnits)
call DestroyGroup(x)
set x=null
//HEY LOOK RANDOM INITIALIZATION
        set udg_ColorCodesRed[0]=255
        set udg_ColorCodesGreen[0]=2
        set udg_ColorCodesBlue[0]=2
        set udg_ColorCodesRed[1]=0
        set udg_ColorCodesGreen[1]=65
        set udg_ColorCodesBlue[1]=255
        set udg_ColorCodesRed[2]=27
        set udg_ColorCodesGreen[2]=230
        set udg_ColorCodesBlue[2]=184
        set udg_ColorCodesRed[3]=83
        set udg_ColorCodesGreen[3]=0
        set udg_ColorCodesBlue[3]=128
        set udg_ColorCodesRed[4]=255
        set udg_ColorCodesGreen[4]=252
        set udg_ColorCodesBlue[4]=0
        set udg_ColorCodesRed[5]=254
        set udg_ColorCodesGreen[5]=137
        set udg_ColorCodesBlue[5]=13
        set udg_ColorCodesRed[6]=31
        set udg_ColorCodesGreen[6]=191
        set udg_ColorCodesBlue[6]=0
        set udg_ColorCodesRed[7]=229
        set udg_ColorCodesGreen[7]=90
        set udg_ColorCodesBlue[7]=175
        set udg_ColorCodesRed[8]=148
        set udg_ColorCodesGreen[8]=149
        set udg_ColorCodesBlue[8]=150
        set udg_ColorCodesRed[9]=125
        set udg_ColorCodesGreen[9]=190
        set udg_ColorCodesBlue[9]=241
        set udg_ColorCodesRed[10]=15
        set udg_ColorCodesGreen[10]=97
        set udg_ColorCodesBlue[10]=69
        set udg_ColorCodesRed[11]=77
        set udg_ColorCodesGreen[11]=41
        set udg_ColorCodesBlue[11]=3
endfunction
//===========================================================================
function InitTrig_ArrayDat takes nothing returns nothing
    call Init_ForGlobal()
endfunction


//===========================================================================
// Trigger: InitGUI
//
// Initialization of many game things.
//===========================================================================
function Trig_InitGUI_Func003A takes nothing returns nothing
    call SetPlayerHandicapBJ(GetEnumPlayer(), 100)
endfunction

function Trig_InitGUI_Func031A takes nothing returns nothing
    // Sets up original player name and makes sure all players are allied.
    set udg_TempPlayer=GetEnumPlayer()
    // Preserve original names so that names can revert at game end.
    set udg_OriginalName[GetConvertedPlayerId(GetEnumPlayer())]=GetPlayerName(GetEnumPlayer())
    // Make sure everyone is allied to everyone else.
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=12
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call SetPlayerAllianceStateBJ(ConvertedPlayer(GetForLoopIndexA()), udg_TempPlayer, bj_ALLIANCE_ALLIED)
        call SetPlayerAllianceStateBJ(udg_TempPlayer, ConvertedPlayer(GetForLoopIndexA()), bj_ALLIANCE_ALLIED)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call SetPlayerAllianceStateBJ(GetEnumPlayer(), Player(bj_PLAYER_NEUTRAL_EXTRA), bj_ALLIANCE_ALLIED)
    call SetPlayerAllianceStateBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), GetEnumPlayer(), bj_ALLIANCE_ALLIED)
endfunction

function Trig_InitGUI_Func032A takes nothing returns nothing
    // Create starting personnel, set it at playerhero.
    // Playerhero always points to the 'main' unit of the player, usually a personnel or alien/mutant.
    call CreateNUnitsAtLoc(1, 'h00H', GetEnumPlayer(), udg_HoldZone, GetRandomDirectionDeg())
    set udg_Playerhero[GetConvertedPlayerId(GetEnumPlayer())]=GetLastCreatedUnit()
    call CreateNUnitsAtLoc(1, 'H03I', GetEnumPlayer(), udg_HoldZone, GetRandomDirectionDeg())
    call TriggerRegisterUnitEvent(gg_trg_Selection, GetLastCreatedUnit(), EVENT_UNIT_SELECTED)
endfunction

function Trig_InitGUI_Func123A takes nothing returns nothing
    call AdjustPlayerStateBJ(GetRandomInt(10000000, 1000000000), GetEnumPlayer(), PLAYER_STATE_RESOURCE_LUMBER)
endfunction

function Trig_InitGUI_Actions takes nothing returns nothing
    set udg_TESTING=bj_isSinglePlayer
    call DestroyTrigger(GetTriggeringTrigger())
    call ForForce(GetPlayersAll(), function Trig_InitGUI_Func003A)
    // Gametime is set at midnight
    call SetMapFlag(MAP_LOCK_RESOURCE_TRADING, true)
    call SetTimeOfDay(24.00)
    call SetTimeOfDayScalePercentBJ(0.00)
    // Holdzone is intended to be just a place to send units where no interaction with them can occur. IE Upper right map corner
    set udg_HoldZone=GetRectCenter(gg_rct_Timeout)
    // Escape pod harbor is the place where an escape pod starts when you buy the item from the vendor
    // NewUnitRegister is called so that units can have a unique AN number. Always register a unit that was created in the same trigger, or that is at map init.
    set udg_EscapePodVendor_Harbor[GetUnitUserData(gg_unit_h02O_0184)]=gg_unit_h00X_0049
    set udg_EscapePodVendor_Harbor[GetUnitUserData(gg_unit_h02O_0207)]=gg_unit_h009_0029
    set udg_EscapePodVendor_Harbor[GetUnitUserData(gg_unit_h02O_0017)]=gg_unit_h003_0018
    set udg_EscapePodVendor_Harbor[GetUnitUserData(gg_unit_h02O_0151)]=gg_unit_h007_0027
    set udg_TempUnit=gg_unit_h02O_0262
    set udg_EscapePodVendor_Harbor[GetUnitUserData(gg_unit_h02O_0262)]=gg_unit_h04E_0259
    set udg_TempUnit=gg_unit_h02O_0257
    set udg_EscapePodVendor_Harbor[GetUnitUserData(gg_unit_h02O_0257)]=gg_unit_h04T_0265
    // So pirates can see all of space
    call CreateFogModifierRectBJ(true, Player(PLAYER_NEUTRAL_AGGRESSIVE), FOG_OF_WAR_VISIBLE, gg_rct_Space)
    // Neutral Extra is the alien replacement.
    call SetPlayerName(Player(bj_PLAYER_NEUTRAL_EXTRA), "TRIGSTR_4375")
    // Makes planet start at random position in its circular orbit.
    set udg_PlanetAngle=GetRandomReal(0, 360.00)
    // So pirates can auto-attack stations
    call SetPlayerAllianceStateBJ(Player(PLAYER_NEUTRAL_AGGRESSIVE), Player(PLAYER_NEUTRAL_PASSIVE), bj_ALLIANCE_UNALLIED)
    call SetPlayerAllianceStateBJ(Player(PLAYER_NEUTRAL_PASSIVE), Player(bj_PLAYER_NEUTRAL_EXTRA), bj_ALLIANCE_ALLIED)
    call CreateNUnitsAtLoc(1, 'e020', Player(PLAYER_NEUTRAL_PASSIVE), udg_HoldZone, bj_UNIT_FACING)
    set udg_TheNullUnit=GetLastCreatedUnit()
    call ForForce(GetPlayersAll(), function Trig_InitGUI_Func031A)
    call ForForce(GetPlayersAll(), function Trig_InitGUI_Func032A)
    // SelectorGroup refers to the group of all playerhero icons.
    set udg_SelectorGroup=GetUnitsOfTypeIdAll('H03I')
    // News strings... moved here to stop repeats..
    set udg_NewsString[1]="The U.S.I. Ordinator has reached an accord with the outlying provinces today, promising technical aid and supplies in exchange for influence in the rogue government."
    set udg_NewsString[2]="A new synthetic compound developed by DIZ Photonics has been commissioned by the military in a possible use as an agent to repair cracked or worn metal."
    set udg_NewsString[3]="An uprising in Kyanda leaves 400,000 dead and 28 million homeless as U.S.I. leaders struggle to contain and appease the rebels."
    set udg_NewsString[4]="Scientists predict that new terraforming techniques could be used to revitalize planets destroyed by nuclear warfare. But should we be giving them a second chance? Send your opinion to wavelength 19215.212!"
    set udg_NewsString[5]="A new survey suggests that 35% of all males have suffered Zibin's Disease and that the 'harmless' epidemic continues to spread. The disease has no symptoms but government officials are placing 'dangerous' sectors under quarantine."
    set udg_NewsString[6]="Sector 198X2, a small cluster of research stations on the outer fringes of civilization, is planning to announce a breakthrough in an undisclosed field. Industry analysts expect the announcement to be of a military nature."
    set udg_NewsString[7]="A housewife shares her experience in savagely murdering rebel sympathizers tonight on wavelength 18920.221."
    set udg_NewsString[8]="The economy has taken a 20% upturn in the past year, but can this trend last? Our senior economist explains everything at 8:00 standard time."
    set udg_NewsString[9]="An error has occurred with your transmission service. Please check you have tuned in to the correct wavelength and reset your quantum transmitter."
    set udg_NewsString[10]="A lost Coalition frigate from the Wars of Division has reappeared near an outpost in Byat sector yesterday. Confused crewmen were informed that their FTL time containment drives had failed, and that 34 years had passed since they began the jump."
    set udg_NewsString[11]="Researchers on Earth have discovered that dinosaurs never actually existed. Details at 9:00 standard."
    set udg_NewsString[12]="Citizens should be reminded that Delicious™ Confectionary Food Bars are a healthy and sensually pleasing way to replenish lost nutrients, and are encouraged to requisition some ASAP."
    set udg_PacificationBotLines[0]="Halt!"
    set udg_PacificationBotLines[1]="Disarm citizen!"
    set udg_PacificationBotLines[2]="Stop, before you damage company property!"
    set udg_PacificationBotLines[3]="You are probably in violation of several regulations!"
    set udg_PacificationBotLines[4]="If you do not put your weapons down, I will kill you to keep the peace."
    set udg_PacificationBotLines[5]="Have a nice day!"
    set udg_PacificationBotLines[6]="My name is PACIFICATION BOT, and I am here to help you learn about the power of nonviolence!"
    set udg_PacificationBotLines[7]=":("
    set udg_PacificationBotLines[8]="I will be confiscating all the weapons you have!"
    set udg_PacificationBotLines[9]="True men use space-pickaxes, suit-wearing cur!"
    set udg_PacificationBotLines[10]="I have at least thirty hours left of charge! Plenty of time to stop evildoers such as you."
    // Player string to number matching. Use CONVERTED PLAYER ID so NEUTRAL EXTRA is player 15.
    // Please don't delete or disable gg_trg_ChatGroupBroadcast.
    call SetMapFlag(MAP_LOCK_ALLIANCE_CHANGES, true)
        call SetMapFlag(MAP_SHARED_ADVANCED_CONTROL, false)
    set udg_ColorCode[1]="|CFFFF0303"
    set udg_ColorCode[2]="|CFF0042FF"
    set udg_ColorCode[3]="|cff00FFFF"
    set udg_ColorCode[4]="|CFF540081"
    set udg_ColorCode[5]="|CFFFFFF01"
    set udg_ColorCode[6]="|CFFFE8A0E"
    set udg_ColorCode[7]="|CFF20C000"
    set udg_ColorCode[8]="|CFFE55BB0"
    set udg_ColorCode[9]="|CFF959697"
    set udg_ColorCode[10]="|CFF7EBFF1"
    set udg_ColorCode[11]="|CFF106246"
    set udg_ColorCode[12]="|CFF4E2A04"
    set udg_ColorCode[GetConvertedPlayerId(Player(bj_PLAYER_NEUTRAL_EXTRA))]="|cff800080"
    call StartTimerBJ(udg_GameTimer, false, 1000000000.00)
      set udg_SpaceObject_CollideGroup=CreateGroup()
    // Space collision initialization
    set udg_TempUnit=gg_unit_h009_0029
    call GroupAddUnitSimple(udg_TempUnit, udg_SpaceObject_CollideGroup)
    set udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)]=370.00
    set udg_TempUnit=gg_unit_h008_0196
    call GroupAddUnitSimple(udg_TempUnit, udg_SpaceObject_CollideGroup)
    set udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)]=350.00
    set udg_TempUnit=gg_unit_h03T_0209
    call GroupAddUnitSimple(udg_TempUnit, udg_SpaceObject_CollideGroup)
    set udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)]=150.00
    set udg_TempUnit=gg_unit_h003_0018
    call GroupAddUnitSimple(udg_TempUnit, udg_SpaceObject_CollideGroup)
    set udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)]=180.00
    set udg_TempUnit=gg_unit_h005_0281
    call GroupAddUnitSimple(udg_TempUnit, udg_SpaceObject_CollideGroup)
    set udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)]=100.00
    set udg_TempUnit=gg_unit_h007_0027
    call GroupAddUnitSimple(udg_TempUnit, udg_SpaceObject_CollideGroup)
    set udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)]=230.00
    set udg_TempUnit=gg_unit_h00X_0049
    call GroupAddUnitSimple(udg_TempUnit, udg_SpaceObject_CollideGroup)
    set udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)]=260.00
    set udg_TempUnit=gg_unit_h04T_0265
    call GroupAddUnitSimple(udg_TempUnit, udg_SpaceObject_CollideGroup)
    set udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)]=220.00
    set udg_TempUnit=gg_unit_h04V_0253
    call GroupAddUnitSimple(udg_TempUnit, udg_SpaceObject_CollideGroup)
    set udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)]=220.00
    // Removes wood from scorescreen.
    call ForForce(GetPlayersAll(), function Trig_InitGUI_Func123A)
    set udg_Secret_ControlCode=GetRandomInt(1000, 9999)
    set udg_TempUnit=gg_unit_h049_0139
    call PauseUnitForPeriod(udg_TempUnit , 99999999.0)
    call StartTimerBJ(udg_SpaceAI_Timer, true, 7.00)
    call TriggerEvaluate(st__EscapePod_IntEscapePod) // INLINED!!
endfunction

//===========================================================================
function InitTrig_InitGUI takes nothing returns nothing
    set gg_trg_InitGUI=CreateTrigger()
    call TriggerAddAction(gg_trg_InitGUI, function Trig_InitGUI_Actions)
endfunction

//===========================================================================
// Trigger: Sound
//
// Plays that one sound and locks alliance setting. Additionally sets all players lumber to 0 to prevent score screen mutant/alien divination.
//===========================================================================
function Trig_Sound_Func012A takes nothing returns nothing
    call SetPlayerStateBJ(GetEnumPlayer(), PLAYER_STATE_RESOURCE_LUMBER, 0)
endfunction

function Trig_Sound_Actions takes nothing returns nothing
    call PauseUnitBJ(true, gg_unit_u000_0150)
    call PauseGameOn()
    call PauseGameOff()
    call PauseGameOn()
    call PauseGameOff()
    call PauseGameOn()
    call PauseGameOff()
    // Plays that one sound at the beginning and locks alliance settings.
    call PlaySoundBJ(gg_snd_TempleOfTheDamnedWhat)
    call SetMapFlag(MAP_LOCK_ALLIANCE_CHANGES, true)
    call ForForce(GetPlayersAll(), function Trig_Sound_Func012A)
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

//===========================================================================
function InitTrig_Sound takes nothing returns nothing
    set gg_trg_Sound=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_Sound, 0.00)
    call TriggerAddAction(gg_trg_Sound, function Trig_Sound_Actions)
endfunction

//===========================================================================
// Trigger: ReadTheChangelog
//===========================================================================
function Trig_ReadTheChangelog_Actions takes nothing returns nothing
    // Read the changelog reminder! ^_^
    call DisplayTextToForce(GetPlayersAll(), ( "|cff008040[Read the " + ( udg_VERSION + " changelog at Discord to see what's new!]" ) ))
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

//===========================================================================
function InitTrig_ReadTheChangelog takes nothing returns nothing
    set gg_trg_ReadTheChangelog=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_ReadTheChangelog, 25.00)
    call TriggerAddAction(gg_trg_ReadTheChangelog, function Trig_ReadTheChangelog_Actions)
endfunction

//===========================================================================
// Trigger: FixVis
//
// In addition to fixing a minor minimap bug above the Niffy docking bay, this sets some useful variables.
//===========================================================================
function Trig_FixVis_Func004A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_UnvisionNiffy)
    call DestroyFogModifier(GetLastCreatedFogModifier())
endfunction

function Trig_FixVis_Func053C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_FixVis_Func054C takes nothing returns boolean
    if ( not ( false == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_FixVis_Actions takes nothing returns nothing
    call EnableTrigger(gg_trg_Rename)
    // There's a bug where the center of the map, roughly above the Niffy docking bay, is partially visible which fudges up the minimap. This restores the black mask.
    call ForForce(GetPlayersAll(), function Trig_FixVis_Func004A)
    // Also, initialize space things
    set udg_Sector_Space[1]=gg_unit_h003_0018
    set udg_Sector_Space[2]=gg_unit_h005_0281
    set udg_Sector_Space[3]=gg_unit_h007_0027
    set udg_Sector_Space[4]=gg_unit_h009_0029
    set udg_Sector_Space[5]=gg_unit_h00X_0049
    set udg_Sector_Space[6]=gg_unit_h029_0114
    set udg_Sector_Space[7]=gg_unit_h02B_0116
    set udg_Sector_Space[8]=gg_unit_h008_0196
    set udg_Sector_Space[22]=gg_unit_h03T_0209
    set udg_Sector_Space[23]=gg_unit_h04E_0259
    set udg_Sector_Space[24]=gg_unit_h04T_0265
    set udg_Sector_Space[25]=gg_unit_h04V_0253
    set bj_forLoopAIndex=9
    set bj_forLoopAIndexEnd=20
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_Sector_Space[GetForLoopIndexA()]=udg_SpaceshipID_Space[( GetForLoopIndexA() - 8 )]
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    set udg_Sector_Space[21]=null
    set udg_Sector_Space[22]=gg_unit_h03T_0209
    // SpaceObject_Rect for spaceship/explorers is set in spaceship initialization.
    set udg_SpaceObject_Rect[GetUnitUserData(gg_unit_h009_0029)]=gg_rct_ST4S2
    set udg_SpaceObject_Rect[GetUnitUserData(gg_unit_h00X_0049)]=gg_rct_ST5
    set udg_SpaceObject_Rect[GetUnitUserData(gg_unit_h005_0281)]=gg_rct_ST2
    set udg_SpaceObject_Rect[GetUnitUserData(gg_unit_h003_0018)]=gg_rct_ST1
    set udg_SpaceObject_Rect[GetUnitUserData(gg_unit_h008_0196)]=gg_rct_Planet
    set udg_SpaceObject_Rect[GetUnitUserData(gg_unit_h007_0027)]=gg_rct_ST3
    set udg_SpaceObject_Rect[GetUnitUserData(gg_unit_h02B_0116)]=gg_rct_PirateShip
    set udg_SpaceObject_Rect[GetUnitUserData(gg_unit_h029_0114)]=gg_rct_LostStation
    set udg_SpaceObject_Rect[GetUnitUserData(gg_unit_h03T_0209)]=gg_rct_MoonRect
    set udg_SpaceObject_Rect[GetUnitUserData(gg_unit_h04E_0259)]=gg_rct_ST8
    set udg_SpaceObject_Rect[GetUnitUserData(gg_unit_h04T_0265)]=gg_rct_ST9
    set udg_SpaceObject_Rect[GetUnitUserData(gg_unit_h04V_0253)]=gg_rct_ST10
    // Sluggly assassin init
    set udg_SpaceObject_SlugglyAssassinX[1]=- 11535.00
    set udg_SpaceObject_SlugglyAssassinY[1]=15200.00
    set udg_SpaceObject_SlugglyAssassinX[2]=- 6462.00
    set udg_SpaceObject_SlugglyAssassinY[2]=14482.00
    set udg_SpaceObject_SlugglyAssassinX[3]=- 11779.00
    set udg_SpaceObject_SlugglyAssassinY[3]=7644.00
    set udg_SpaceObject_SlugglyAssassinX[4]=- 11368.00
    set udg_SpaceObject_SlugglyAssassinY[4]=- 3219.00
    set udg_SpaceObject_SlugglyAssassinX[5]=- 10040.00
    set udg_SpaceObject_SlugglyAssassinY[5]=- 11242.00
    set udg_SpaceObject_SlugglyAssassinX[8]=7959.00
    set udg_SpaceObject_SlugglyAssassinY[8]=2551.00
    set udg_SpaceObject_SlugglyAssassinX[22]=12083.90
    set udg_SpaceObject_SlugglyAssassinY[22]=- 1733.00
    call vendorDamage_init()
       call DestroyTrigger(GetTriggeringTrigger())
    set udg_TempBool=bj_isSinglePlayer == true
    if ( Trig_FixVis_Func053C() ) then
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4372")
    else
    endif
    if ( Trig_FixVis_Func054C() ) then
               call DestroyTrigger(gg_trg_Help)
                call DestroyTrigger(gg_trg_SpawnHelp)
                call DestroyTrigger(gg_trg_SpawnCodeGet)
                call DestroyTrigger(gg_trg_AlienEvoPoints)
                call DestroyTrigger(gg_trg_NoWin)
           call DestroyTrigger(gg_trg_Mine)
           call DestroyTrigger(gg_trg_Hostile)
                call DestroyTrigger(gg_trg_ForceRandom)
        call DestroyTrigger(gg_trg_SpawnUnit)
           call DestroyTrigger(gg_trg_TestAbilities)
           call DestroyTrigger(gg_trg_SetPlayerhero)
           call DestroyTrigger(gg_trg_SpawnApocalypse)
    else
    endif
endfunction

//===========================================================================
function InitTrig_FixVis takes nothing returns nothing
    set gg_trg_FixVis=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_FixVis, 0.50)
    call TriggerAddAction(gg_trg_FixVis, function Trig_FixVis_Actions)
endfunction

//===========================================================================
// Trigger: WinOn
//===========================================================================
function Trig_WinOn_Actions takes nothing returns nothing
    // If a person leaves before game really start, buggy things can cause instant victory. Tis terrible.
    call EnableTrigger(gg_trg_WinCheck)
       call DestroyTrigger(GetTriggeringTrigger())
endfunction

//===========================================================================
function InitTrig_WinOn takes nothing returns nothing
    set gg_trg_WinOn=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_WinOn, 10.00)
    call TriggerAddAction(gg_trg_WinOn, function Trig_WinOn_Actions)
endfunction

//===========================================================================
// Trigger: Quests
//
// Create quests.
//===========================================================================
function Trig_Quests_Actions takes nothing returns nothing
    // Stations
    call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, ( "|cff800080Queen Niffy" ), "TRIGSTR_1444", "war3mapImported\\BTNniffy.tga")
    call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, ( "|cff800080Arbitress" ), "TRIGSTR_1445", "war3mapImported\\BTNarbitress.tga")
    call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, ( "|cff800080Kyo Cannon" ), "TRIGSTR_1446", "war3mapImported\\BTNkyo.tga")
    call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, ( "|cff800080Defunct Station" ), "TRIGSTR_1447", "war3mapImported\\BTNdefunct.tga")
    call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, ( "|cff800080Minertha" ), "TRIGSTR_1448", "war3mapImported\\BTNminertha.tga")
    call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, ( "|cff800080Errun" ), "TRIGSTR_2698", "war3mapImported\\BTNminertha.tga")
    call CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, ( "|cff800080Swagger" ), "TRIGSTR_1449", "war3mapImported\\BTNswagger.tga")
    // Gameplay Mechanics
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( ( "Newbie help|cff0099FF" ) + "" ), "TRIGSTR_4585", "war3MapPreview.tga")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( ( "Version|cff0099FF" ) + udg_VERSION ), "TRIGSTR_2005", "war3MapPreview.tga")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Overview" ), "TRIGSTR_1459", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Commands" ), "TRIGSTR_3201", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Alien/Mutant Evolution" ), "TRIGSTR_2423", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Alien Guide: Overview" ), "TRIGSTR_4020", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Alien Guide: Strategy" ), "TRIGSTR_4021", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Alien Guide: Tips" ), "TRIGSTR_4022", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Alien Guide: Energy Forms" ), "TRIGSTR_4023", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Alien Guide: Power Forms" ), "TRIGSTR_4024", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Alien Guide: Manipulation Forms" ), "TRIGSTR_4025", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Mutant Guide: Overview" ), "TRIGSTR_4030", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Mutant Guide: Strategy" ), "TRIGSTR_4031", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Mutant Guide: Tips" ), "TRIGSTR_4032", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Mutant Guide: Perfection Forms" ), "TRIGSTR_4033", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Mutant Guide: Infection Forms" ), "TRIGSTR_4034", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Human Guide: Overview" ), "TRIGSTR_4036", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Android Guide: Overview" ), "TRIGSTR_4037", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Random Events" ), "TRIGSTR_1450", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Chat Groups" ), "TRIGSTR_1958", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Death Systems" ), "TRIGSTR_2360", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Tips" ), "TRIGSTR_1959", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Credits" ), "TRIGSTR_1962", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00More Credits" ), "TRIGSTR_1961", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Yet More Credits" ), "TRIGSTR_1960", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Even More Credits" ), "TRIGSTR_2012", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
    call CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, ( "|cffffcc00Last Credits, I Swear" ), "TRIGSTR_2250", "ReplaceableTextures\\WorldEditUI\\Editor-Random-Item.blp")
       call DestroyTrigger(GetTriggeringTrigger())
endfunction

//===========================================================================
function InitTrig_Quests takes nothing returns nothing
    set gg_trg_Quests=CreateTrigger()
    call TriggerAddAction(gg_trg_Quests, function Trig_Quests_Actions)
endfunction

//===========================================================================
// Trigger: ConstPing
//
// Constantly sets the spacebar-loc for all players to the position of their hero. This is convenient for the players and disables spacebar ping locations, so you truly do not know where someone pings.
//===========================================================================
function ConstPing_Callback takes nothing returns nothing
local unit a=(udg_Playerhero[GetConvertedPlayerId((GetEnumPlayer()))]) // INLINED!!
call SetCameraQuickPositionForPlayer(GetEnumPlayer(), GetUnitX(a), GetUnitY(a))
endfunction

function Trig_ConstPing_Actions takes nothing returns nothing
call ForForce(GetPlayersAll(), function ConstPing_Callback)
endfunction

//===========================================================================
function InitTrig_ConstPing takes nothing returns nothing
    set gg_trg_ConstPing=CreateTrigger()
    call TriggerRegisterTimerEventPeriodic(gg_trg_ConstPing, 0.10)
    call TriggerAddAction(gg_trg_ConstPing, function Trig_ConstPing_Actions)
endfunction


//===========================================================================
// Trigger: DeathSysTwo
//
// Begin the vote for the death system.
//===========================================================================
function Trig_DeathSysTwo_Func022A takes nothing returns nothing
    call DialogDisplayBJ(true, udg_DeathVoteDialog, GetEnumPlayer())
endfunction

function Trig_DeathSysTwo_Actions takes nothing returns nothing
    // Votes for the death mode type.
       call DestroyTrigger(GetTriggeringTrigger())
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_3434")
    call PlaySoundBJ(gg_snd_ArrangedTeamInvitation)
    call PolledWait(5.00)
    call DialogAddButtonBJ(udg_DeathVoteDialog, "TRIGSTR_2353")
    set udg_DeathVoteDialog_Buttons[1]=GetLastCreatedButtonBJ()
    call DialogAddButtonBJ(udg_DeathVoteDialog, "TRIGSTR_2354")
    set udg_DeathVoteDialog_Buttons[2]=GetLastCreatedButtonBJ()
    call ForForce(GetPlayersAll(), function Trig_DeathSysTwo_Func022A)
endfunction

//===========================================================================
function InitTrig_DeathSysTwo takes nothing returns nothing
    set gg_trg_DeathSysTwo=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_DeathSysTwo, Player(0), "-vote death", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_DeathSysTwo, Player(1), "-vote death", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_DeathSysTwo, Player(2), "-vote death", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_DeathSysTwo, Player(3), "-vote death", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_DeathSysTwo, Player(4), "-vote death", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_DeathSysTwo, Player(5), "-vote death", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_DeathSysTwo, Player(6), "-vote death", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_DeathSysTwo, Player(7), "-vote death", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_DeathSysTwo, Player(8), "-vote death", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_DeathSysTwo, Player(9), "-vote death", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_DeathSysTwo, Player(10), "-vote death", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_DeathSysTwo, Player(11), "-vote death", true)
    call TriggerAddAction(gg_trg_DeathSysTwo, function Trig_DeathSysTwo_Actions)
endfunction

//===========================================================================
// Trigger: DeathSysClick
//
// Vote for the Metastasis death system.
//===========================================================================
function Trig_DeathSysClick_Func003Func002Func003A takes nothing returns nothing
    call DialogDisplayBJ(false, udg_DeathVoteDialog, GetEnumPlayer())
endfunction

function Trig_DeathSysClick_Func003Func002C takes nothing returns boolean
    if ( not ( udg_InstantBootMode_Votes >= ( CountPlayersInForceBJ(GetPlayersAll()) / 2 ) ) ) then
        return false
    endif
    return true
endfunction

function Trig_DeathSysClick_Func003Func003Func004Func003A takes nothing returns nothing
    call DialogDisplayBJ(false, udg_DeathVoteDialog, GetEnumPlayer())
endfunction

function Trig_DeathSysClick_Func003Func003Func004C takes nothing returns boolean
    if ( not ( udg_InstantBootMode_Votes >= ( CountPlayersInForceBJ(GetPlayersAll()) / 2 ) ) ) then
        return false
    endif
    return true
endfunction

function Trig_DeathSysClick_Func003Func003C takes nothing returns boolean
    if ( not ( GetClickedButtonBJ() == udg_DeathVoteDialog_Buttons[2] ) ) then
        return false
    endif
    return true
endfunction

function Trig_DeathSysClick_Func003C takes nothing returns boolean
    if ( not ( GetClickedButtonBJ() == udg_DeathVoteDialog_Buttons[1] ) ) then
        return false
    endif
    return true
endfunction

function Trig_DeathSysClick_Actions takes nothing returns nothing
    // Voting. Since Spectator mode is default, the voting really only ends if enough votes accumulate for Instant Boot mode.
    if ( Trig_DeathSysClick_Func003C() ) then
        call DisplayTextToForce(GetPlayersAll(), ( GetPlayerName(GetTriggerPlayer()) + " |cffFF8000has voted for spectator mode!|r" ))
        if ( Trig_DeathSysClick_Func003Func002C() ) then
            call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2358")
            set udg_DeathType=1
            call ForForce(GetPlayersAll(), function Trig_DeathSysClick_Func003Func002Func003A)
        else
        endif
    else
        if ( Trig_DeathSysClick_Func003Func003C() ) then
            set udg_InstantBootMode_Votes=( udg_InstantBootMode_Votes + 1 )
            call DisplayTextToForce(GetPlayersAll(), ( GetPlayerName(GetTriggerPlayer()) + " |cffFF8000has voted for instant-boot mode!|r" ))
            if ( Trig_DeathSysClick_Func003Func003Func004C() ) then
                call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2355")
                set udg_DeathType=2
                call ForForce(GetPlayersAll(), function Trig_DeathSysClick_Func003Func003Func004Func003A)
            else
            endif
        else
            call DialogDisplayBJ(true, udg_DeathVoteDialog, GetTriggerPlayer())
        endif
    endif
endfunction

//===========================================================================
function InitTrig_DeathSysClick takes nothing returns nothing
    set gg_trg_DeathSysClick=CreateTrigger()
    call TriggerRegisterDialogEventBJ(gg_trg_DeathSysClick, udg_DeathVoteDialog)
    call TriggerAddAction(gg_trg_DeathSysClick, function Trig_DeathSysClick_Actions)
endfunction

//===========================================================================
// Trigger: Votekick
//
// Votekicks a dead player.
//===========================================================================
function Trig_Votekick_Conditions takes nothing returns boolean
    if ( not ( SubStringBJ(GetEventPlayerChatString(), 1, 10) == "-votekick " ) ) then
        return false
    endif
    return true
endfunction

function Trig_Votekick_Func019Func002Func004Func001C takes nothing returns boolean
    if ( not ( IsPlayerInForce(ConvertedPlayer(GetForLoopIndexA()), udg_DeadGroup) == false ) ) then
        return false
    endif
    if ( not ( GetPlayerSlotState(ConvertedPlayer(GetForLoopIndexA())) == PLAYER_SLOT_STATE_PLAYING ) ) then
        return false
    endif
    return true
endfunction

function Trig_Votekick_Func019Func002Func005Func001C takes nothing returns boolean
    if ( not ( ConvertedPlayer(udg_TempInt) == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Votekick_Func019Func002Func005C takes nothing returns boolean
    if ( not ( udg_Player_DeadKickVotes[udg_TempInt] >= ( udg_TempInt2 / 2 ) ) ) then
        return false
    endif
    return true
endfunction

function Trig_Votekick_Func019Func002C takes nothing returns boolean
    if ( not ( IsPlayerInForce(ConvertedPlayer(udg_TempInt), udg_DeadGroup) == true ) ) then
        return false
    endif
    if ( not ( IsPlayerInForce(GetTriggerPlayer(), udg_DeadGroup) == false ) ) then
        return false
    endif
    if ( not ( IsPlayerInForce(GetTriggerPlayer(), udg_Player_VotedKickGroup[udg_TempInt]) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Votekick_Func019C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Votekick_Actions takes nothing returns nothing
    // Standard argument parsing. Parses any entered string into a series of arguments seperated by spaces. -kill noob becausehesucks would set arguments[1] equal to -kill, arguments[2] to noob, etc.
        call ExecuteFunc("ClearArguments")
        call ExecuteFunc("ParseEnteredString")
    // Nasty crashes can occur if you don't check if you have an integer before you use it.
    set udg_TempBool=HaveSavedInteger((udg_hash), GetHandleId(gg_trg_ChatGroupBroadcast), StringHash(udg_arguments[2])) // INLINED!!
    if ( Trig_Votekick_Func019C() ) then
                set udg_TempInt=LoadInteger((udg_hash), GetHandleId(gg_trg_ChatGroupBroadcast), StringHash(udg_arguments[2])) // INLINED!!
        if ( Trig_Votekick_Func019Func002C() ) then
            set udg_Player_DeadKickVotes[udg_TempInt]=( udg_Player_DeadKickVotes[udg_TempInt] + 1 )
            set udg_TempInt2=0
            call ForceAddPlayerSimple(GetTriggerPlayer(), udg_Player_VotedKickGroup[udg_TempInt])
            set bj_forLoopAIndex=1
            set bj_forLoopAIndexEnd=12
            loop
                exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                if ( Trig_Votekick_Func019Func002Func004Func001C() ) then
                    set udg_TempInt2=( udg_TempInt2 + 1 )
                else
                endif
                set bj_forLoopAIndex=bj_forLoopAIndex + 1
            endloop
            if ( Trig_Votekick_Func019Func002Func005C() ) then
                if ( Trig_Votekick_Func019Func002Func005Func001C() ) then
                    call DisplayTextToForce(GetPlayersAll(), ( "Dialoguing offensive android..." + ( " " + ( udg_Player_OriginalName[udg_TempInt] + "!" ) ) ))
                    call ShowInterfaceForceOff(GetForceOfPlayer(udg_HiddenAndroid), 2.00)
                else
                    call DisplayTextToForce(GetPlayersAll(), ( "Dialoguing offensive player..." + ( " " + ( udg_Player_OriginalName[udg_TempInt] + "!" ) ) ))
                    call ShowInterfaceForceOff(GetForceOfPlayer(ConvertedPlayer(udg_TempInt)), 2.00)
                endif
            else
                call DisplayTextToForce(GetPlayersAll(), ( I2S(( ( udg_TempInt2 / 2 ) - udg_Player_DeadKickVotes[udg_TempInt] )) + ( " votes left to kick " + ( udg_Player_OriginalName[udg_TempInt] + "!" ) ) ))
            endif
        else
        endif
    else
    endif
endfunction

//===========================================================================
function InitTrig_Votekick takes nothing returns nothing
    set gg_trg_Votekick=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_Votekick, Player(0), "-votekick ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Votekick, Player(1), "-votekick ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Votekick, Player(2), "-votekick ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Votekick, Player(3), "-votekick ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Votekick, Player(4), "-votekick ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Votekick, Player(5), "-votekick ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Votekick, Player(6), "-votekick ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Votekick, Player(7), "-votekick ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Votekick, Player(8), "-votekick ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Votekick, Player(9), "-votekick ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Votekick, Player(10), "-votekick ", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Votekick, Player(11), "-votekick ", false)
    call TriggerAddCondition(gg_trg_Votekick, Condition(function Trig_Votekick_Conditions))
    call TriggerAddAction(gg_trg_Votekick, function Trig_Votekick_Actions)
endfunction

//===========================================================================
// Trigger: GetSectorInit
//===========================================================================
function Trig_GetSectorInit_Actions takes nothing returns nothing
       call DestroyTrigger(GetTriggeringTrigger())
    set udg_SectorId[1]=gg_rct_ST1
    set udg_SectorId[2]=gg_rct_ST2
    set udg_SectorId[3]=gg_rct_ST3
    set udg_SectorId[4]=gg_rct_ST4S2
    set udg_SectorId[5]=gg_rct_ST5
    set udg_SectorId[6]=gg_rct_LostStation
    set udg_SectorId[7]=gg_rct_PirateShip
    set udg_SectorId[8]=gg_rct_Planet
    set udg_SectorId[9]=gg_rct_SS1
    set udg_SectorId[10]=gg_rct_SS2
    set udg_SectorId[11]=gg_rct_SS3
    set udg_SectorId[12]=gg_rct_SS4
    set udg_SectorId[13]=gg_rct_SS5
    set udg_SectorId[14]=gg_rct_SS6
    set udg_SectorId[15]=gg_rct_SS7
    set udg_SectorId[16]=gg_rct_SS8
    set udg_SectorId[17]=gg_rct_SS9
    set udg_SectorId[18]=gg_rct_SS10
    set udg_SectorId[19]=gg_rct_SS11
    set udg_SectorId[20]=gg_rct_SS12
    set udg_SectorId[21]=gg_rct_Space
    set udg_SectorId[22]=gg_rct_MoonRect
    set udg_SectorId[23]=gg_rct_ST8
    set udg_SectorId[24]=gg_rct_ST9
    set udg_SectorId[25]=gg_rct_ST10
    set udg_SectorId[28]=gg_rct_Mirror_Arena
endfunction

//===========================================================================
function InitTrig_GetSectorInit takes nothing returns nothing
    set gg_trg_GetSectorInit=CreateTrigger()
    call TriggerAddAction(gg_trg_GetSectorInit, function Trig_GetSectorInit_Actions)
endfunction

//===========================================================================
// Trigger: MapCenterError
//===========================================================================
function Trig_MapCenterError_Func004C takes nothing returns boolean
    if not ( (udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer((GetTriggerUnit())))]) == GetTriggerUnit() ) then // INLINED!!
    return false
    endif
    return true
endfunction

function Trig_MapCenterError_Func006C takes nothing returns boolean
    if ( not ( udg_MapCenterErrors > 16 ) ) then
        return false
    endif
    return true
endfunction

function Trig_MapCenterError_Actions takes nothing returns nothing
    call DisplayTextToForce(GetPlayersAll(), ( "MAP ERROR: " + GetUnitName(GetTriggerUnit()) ))
    call SetUnitPositionLoc(GetEnteringUnit(), GetRectCenter(gg_rct_Planet))
    if ( Trig_MapCenterError_Func004C() ) then
        call UnitAddItemByIdSwapped('I00O', GetEnteringUnit())
    else
    endif
    set udg_MapCenterErrors=( udg_MapCenterErrors + 1 )
    if ( Trig_MapCenterError_Func006C() ) then
           call DestroyTrigger(GetTriggeringTrigger())
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4248")
    else
    endif
endfunction

//===========================================================================
function InitTrig_MapCenterError takes nothing returns nothing
    set gg_trg_MapCenterError=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_MapCenterError, gg_rct_MapCenter)
    call TriggerAddAction(gg_trg_MapCenterError, function Trig_MapCenterError_Actions)
endfunction

//===========================================================================
// Trigger: Barrel Coloring
//
// High Importance Coding here.
//===========================================================================
function Trig_Barrel_Coloring_Func003A takes nothing returns nothing
    call SetUnitVertexColorBJ(GetEnumUnit(), GetRandomReal(1.00, 255.00), GetRandomReal(1.00, 255.00), GetRandomReal(1.00, 255.00), 1.00)
endfunction

function Trig_Barrel_Coloring_Actions takes nothing returns nothing
    set udg_TempUnitGroup=GetUnitsOfTypeIdAll('n00J')
    call ForGroupBJ(udg_TempUnitGroup, function Trig_Barrel_Coloring_Func003A)
    call DestroyGroup(udg_TempUnitGroup)
endfunction

//===========================================================================
function InitTrig_Barrel_Coloring takes nothing returns nothing
    set gg_trg_Barrel_Coloring=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_Barrel_Coloring, 0.00)
    call TriggerAddAction(gg_trg_Barrel_Coloring, function Trig_Barrel_Coloring_Actions)
endfunction

//===========================================================================
// Trigger: Init Cinematic Unstuck
//===========================================================================
function Trig_Init_Cinematic_Unstuck_Actions takes nothing returns nothing
    call CinematicUnstuckInit()
endfunction

//===========================================================================
function InitTrig_Init_Cinematic_Unstuck takes nothing returns nothing
    set gg_trg_Init_Cinematic_Unstuck=CreateTrigger()
    call TriggerAddAction(gg_trg_Init_Cinematic_Unstuck, function Trig_Init_Cinematic_Unstuck_Actions)
endfunction

//===========================================================================
// Trigger: DoorSys
//
// DoorSys holds the functions for doors- their opening, closing, and death functions are here. When a door dies do NOT try to revive it.
//===========================================================================
function DoorOpen_Malfunction takes destructable d returns nothing
local destructable dp=LoadDestructableHandle((udg_hash), GetHandleId(d), StringHash("doorpath")) // INLINED!!
local trigger destroytrigger= LoadTriggerHandle((udg_hash), GetHandleId(d), StringHash("destroytrigger")) // INLINED!!
call SaveBoolean((udg_hash), GetHandleId(d), StringHash("isopen"), true) // INLINED!!
call SaveReal((udg_hash), GetHandleId(d), StringHash("life"), GetDestructableLife(d)) // INLINED!!
call DisableTrigger(destroytrigger)
call KillDestructable(d)
call EnableTrigger(destroytrigger)
call KillDestructable(dp)
call SetDestructableAnimationSpeed(d, 0.5)
call SetDestructableAnimation(d, "morph")
endfunction
function DoorSlam_Knockback takes nothing returns nothing
local location a=GetUnitLoc(GetEnumUnit())
local boolean b
if udg_TempInt == 1 then
//Horizontal door
set b=RAbsBJ(GetLocationY(a) - GetLocationY(udg_TempPoint)) < 55.0
else
//Vertical door
set b=RAbsBJ(GetLocationX(a) - GetLocationX(udg_TempPoint)) < 55.0
endif
if b then
if GetUnitState(GetEnumUnit(), UNIT_STATE_LIFE) <= 175.0 then
call SetUnitState(GetEnumUnit(), UNIT_STATE_LIFE, 1.0)
else
call UnitDamageTarget(udg_TheNullUnit, GetEnumUnit(), 225.0, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
endif
call Push2(GetEnumUnit() , 625.0 , 525.0 , AngleBetweenPoints(udg_TempPoint, a))
call AddSpecialEffectTarget("Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl", GetEnumUnit(), "origin")
call SFXThreadClean()
call RemoveLocation(a)
endif
endfunction

function DoorClose_Malfunction takes destructable d returns nothing
local destructable dp=LoadDestructableHandle((udg_hash), GetHandleId(d), StringHash("doorpath")) // INLINED!!
local location o=GetDestructableLoc(d)
local group g=GetUnitsInRangeOfLocAll(125.0, o)
local boolean isopen=LoadBoolean((udg_hash), GetHandleId(d), StringHash("isopen")) // INLINED!!
local real life= LoadReal((udg_hash), GetHandleId(d), StringHash("life")) // INLINED!!
if isopen then
if life == 0 then
set life=GetDestructableMaxLife(d)
endif
call SaveBoolean((udg_hash), GetHandleId(d), StringHash("isopen"), false) // INLINED!!
call SetDestructableAnimationSpeed(d, 2.0)
call DestructableRestoreLife(d, GetDestructableMaxLife(d), true)
call SetDestructableLife(d, life)
call DestructableRestoreLife(dp, GetDestructableMaxLife(dp), true)
call SetDestructableAnimation(d, "morph alternate")
set udg_TempPoint=o
call PlaySound3D("Sound\\Units\\Combat\\MetalHeavyBashMetal1.wav" , GetLocationX(o) , GetLocationY(o))
if ( GetDestructableTypeId(d) == 'B000' ) then
set udg_TempInt=1
else
set udg_TempInt=0
endif
call ForGroup(g, function DoorSlam_Knockback)
endif
call RemoveLocation(o)
call DestroyGroup(g)
endfunction

function DoorOpen takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
//local integer clearance = GetHandleInt(t, "clearance")
local integer clearance= LoadInteger((udg_hash), GetHandleId(t), StringHash("clearance")) // INLINED!!
//local destructable door = GetHandleDestructable(t, "door")
local destructable door= LoadDestructableHandle((udg_hash), GetHandleId(t), StringHash("door")) // INLINED!!
//local destructable doorpath=GetHandleDestructable(t, "doorpath")
local destructable doorpath=LoadDestructableHandle((udg_hash), GetHandleId(t), StringHash("doorpath")) // INLINED!!
//local trigger destroytrigger= GetHandleTrigger(t, "destroytrigger")
local trigger destroytrigger= LoadTriggerHandle((udg_hash), GetHandleId(t), StringHash("destroytrigger")) // INLINED!!
if GetDestructableLife(door) <= 0 then
return
endif
if clearance != 0 then
if UnitHasItemOfTypeBJ(GetTriggerUnit(), clearance) or GetUnitTypeId(GetTriggerUnit()) == 'h037' or GetUnitTypeId(GetTriggerUnit()) == 'h039' then
//call SetHandleReal(door, "life", GetDestructableLife(door))
call SaveReal((udg_hash), GetHandleId(door), StringHash("life"), GetDestructableLife(door)) // INLINED!!
//call SetHandleBoolean(door, "isopen", true)
call SaveBoolean((udg_hash), GetHandleId(door), StringHash("isopen"), true) // INLINED!!
call DisableTrigger(destroytrigger)
call KillDestructable(door)
call EnableTrigger(destroytrigger)
call KillDestructable(doorpath)
call SetDestructableAnimation(door, "morph")
endif
else
//call SetHandleBoolean(door, "isopen", true)
call SaveBoolean((udg_hash), GetHandleId(door), StringHash("isopen"), true) // INLINED!!
//call SetHandleReal(door, "life", GetDestructableLife(door))
call SaveReal((udg_hash), GetHandleId(door), StringHash("life"), GetDestructableLife(door)) // INLINED!!
call DisableTrigger(destroytrigger)
call KillDestructable(door)
call EnableTrigger(destroytrigger)
call SetDestructableAnimation(door, "morph")
endif
endfunction

function DoorClose takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
//local rect r=GetHandleRect(t, "rect")
local rect r=LoadRectHandle((udg_hash), GetHandleId(t), StringHash("rect")) // INLINED!!
//local integer clearance = GetHandleInt(t, "clearance")
local integer clearance= LoadInteger((udg_hash), GetHandleId(t), StringHash("clearance")) // INLINED!!
//local destructable door = GetHandleDestructable(t, "door")
local destructable door= LoadDestructableHandle((udg_hash), GetHandleId(t), StringHash("door")) // INLINED!!
//local destructable doorpath=GetHandleDestructable(t, "doorpath")
local destructable doorpath= LoadDestructableHandle((udg_hash), GetHandleId(t), StringHash("doorpath")) // INLINED!!
//local trigger destroytrigger= GetHandleTrigger(t, "destroytrigger")
local trigger destroytrigger=LoadTriggerHandle((udg_hash), GetHandleId(t), StringHash("destroytrigger")) // INLINED!!
local group z=GetUnitsInRectAll(r)
//local boolean isopen=GetHandleBoolean(door, "isopen")
local boolean isopen=LoadBoolean((udg_hash), GetHandleId(door), StringHash("isopen")) // INLINED!!
if ( CountUnitsInGroup(z) == 0 or udg_TempDoorHack ) and isopen then
//call SetHandleBoolean(door, "isopen", false)
call SaveBoolean((udg_hash), GetHandleId(door), StringHash("isopen"), false) // INLINED!!
call DestructableRestoreLife(door, GetDestructableMaxLife(door), true)
call SetDestructableLife(door, LoadReal((udg_hash), GetHandleId(door), StringHash("life"))) // INLINED!!
call SetDestructableAnimation(door, "morph alternate")
if clearance != 0 then
call DestructableRestoreLife(doorpath, GetDestructableMaxLife(doorpath), true)
endif
endif
endfunction

function DoorBustDown takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
local destructable door= LoadDestructableHandle((udg_hash), GetHandleId(t), StringHash("door")) // INLINED!!
local destructable doorpath= LoadDestructableHandle((udg_hash), GetHandleId(t), StringHash("doorpath")) // INLINED!!
local trigger dooropen=LoadTriggerHandle((udg_hash), GetHandleId(t), StringHash("t1")) // INLINED!!
local trigger doorclose=LoadTriggerHandle((udg_hash), GetHandleId(t), StringHash("t2")) // INLINED!!
call DestroyTimer(LoadTimerHandle((udg_hash), GetHandleId(door), StringHash("malfunction_timer"))) // INLINED!!
call DestroyTimer(LoadTimerHandle((udg_hash), GetHandleId(door), StringHash("malfunction_timer2"))) // INLINED!!
call DestroyTrigger(GetTriggeringTrigger())
call KillDestructable(doorpath)
call DestroyTrigger(dooropen)
call DestroyTrigger(doorclose)
endfunction

function DoorRegisterClearance takes destructable door,integer clearance returns nothing
local trigger t=LoadTriggerHandle((udg_hash), GetHandleId(door), StringHash("t1")) // INLINED!!
local trigger k=LoadTriggerHandle((udg_hash), GetHandleId(door), StringHash("t2")) // INLINED!!
call SaveInteger((udg_hash), GetHandleId(t), StringHash("clearance"), clearance) // INLINED!!
call SaveInteger((udg_hash), GetHandleId(k), StringHash("clearance"), clearance) // INLINED!!
        set udg_TempTrigger=LoadTriggerHandle((udg_hash), GetHandleId(door), StringHash("t2")) // INLINED!!
        set udg_TempDoorHack=true
        call TriggerExecute(udg_TempTrigger)
        set udg_TempDoorHack=false
        if clearance != 0 then
        call DestructableRestoreLife(LoadDestructableHandle((udg_hash), GetHandleId(udg_TempTrigger), StringHash("doorpath")), 999999, true) // INLINED!!
        else
        call KillDestructable(LoadDestructableHandle((udg_hash), GetHandleId(udg_TempTrigger), StringHash("doorpath"))) // INLINED!!
        endif
endfunction

function RegisterSecurityDoor takes destructable door,rect where,integer clearance returns nothing
local trigger t=CreateTrigger()
local trigger k=CreateTrigger()
local trigger m=CreateTrigger()
local destructable doorpath
if GetDestructableTypeId(door) == 'B000' then
set doorpath=CreateDestructable('B002', GetDestructableX(door), GetDestructableY(door), 0, 1.0, 1)
else
set doorpath=CreateDestructable('B004', GetDestructableX(door), GetDestructableY(door), 0, 1.0, 1)
endif

if clearance == 0 then
call KillDestructable(doorpath)
endif
call TriggerRegisterEnterRectSimple(t, where)
call TriggerAddAction(t, function DoorOpen)
call TriggerRegisterLeaveRectSimple(k, where)
call TriggerAddAction(k, function DoorClose)
call TriggerRegisterDeathEvent(m, door)
call TriggerAddAction(m, function DoorBustDown)
call SaveDestructableHandle((udg_hash), GetHandleId(t), StringHash("door"), door) // INLINED!!
call SaveDestructableHandle((udg_hash), GetHandleId(t), StringHash("doorpath"), doorpath) // INLINED!!
call SaveRectHandle((udg_hash), GetHandleId(t), StringHash("rect"), where) // INLINED!!
call SaveInteger((udg_hash), GetHandleId(t), StringHash("clearance"), clearance) // INLINED!!
call SaveDestructableHandle((udg_hash), GetHandleId(door), StringHash("doorpath"), doorpath) // INLINED!!
//I hate patch 1.24.
call SaveDestructableHandle((udg_hash), GetHandleId(k), StringHash("door"), door) // INLINED!!
call SaveDestructableHandle((udg_hash), GetHandleId(k), StringHash("doorpath"), doorpath) // INLINED!!
call SaveRectHandle((udg_hash), GetHandleId(k), StringHash("rect"), where) // INLINED!!
call SaveInteger((udg_hash), GetHandleId(k), StringHash("clearance"), clearance) // INLINED!!
call SaveDestructableHandle((udg_hash), GetHandleId(m), StringHash("door"), door) // INLINED!!
call SaveDestructableHandle((udg_hash), GetHandleId(m), StringHash("doorpath"), doorpath) // INLINED!!
call SaveRectHandle((udg_hash), GetHandleId(m), StringHash("rect"), where) // INLINED!!
call SaveInteger((udg_hash), GetHandleId(m), StringHash("clearance"), clearance) // INLINED!!
call SaveTriggerHandle((udg_hash), GetHandleId(m), StringHash("t1"), t) // INLINED!!
call SaveTriggerHandle((udg_hash), GetHandleId(m), StringHash("t2"), k) // INLINED!!
call SaveTriggerHandle((udg_hash), GetHandleId(door), StringHash("t1"), t) // INLINED!!
call SaveTriggerHandle((udg_hash), GetHandleId(door), StringHash("t2"), k) // INLINED!!
call SaveTriggerHandle((udg_hash), GetHandleId(t), StringHash("destroytrigger"), m) // INLINED!!
call SaveTriggerHandle((udg_hash), GetHandleId(k), StringHash("destroytrigger"), m) // INLINED!!
call SaveTriggerHandle((udg_hash), GetHandleId(door), StringHash("destroytrigger"), m) // INLINED!!
endfunction

function DoorMalfunction_Open takes nothing returns nothing
local timer k=GetExpiredTimer()
local destructable d=LoadDestructableHandle((udg_hash), GetHandleId(k), StringHash("d")) // INLINED!!
call DoorOpen_Malfunction(d)
call TimerStart(k, 2.25, false, function DoorMalfunction_Open)
endfunction

function DoorMalfunction_Slam takes nothing returns nothing
local timer k=GetExpiredTimer()
local destructable d=LoadDestructableHandle((udg_hash), GetHandleId(k), StringHash("d")) // INLINED!!
call DoorClose_Malfunction(d)
call TimerStart(k, 2.25, false, function DoorMalfunction_Slam)
endfunction

function DoorMalfunction_End takes destructable door returns nothing
call EnableTrigger(LoadTriggerHandle((udg_hash), GetHandleId(door), StringHash("t1"))) // INLINED!!
call EnableTrigger(LoadTriggerHandle((udg_hash), GetHandleId(door), StringHash("t2"))) // INLINED!!
call DestroyTimer(LoadTimerHandle((udg_hash), GetHandleId(door), StringHash("malfunction_timer"))) // INLINED!!
call DestroyTimer(LoadTimerHandle((udg_hash), GetHandleId(door), StringHash("malfunction_timer2"))) // INLINED!!
endfunction

function DoorMalfunction takes destructable door returns nothing
local timer k=CreateTimer()
local timer j=CreateTimer()
local location o=GetDestructableLoc(door)
if LoadInteger((udg_hash), GetHandleId(LoadTriggerHandle((udg_hash), GetHandleId(door), StringHash("t1"))), StringHash("clearance")) != 0 then // INLINED!!
call DestroyTimer(k)
call DestroyTimer(j)
call RemoveLocation(o)
return
endif
call CreateNUnitsAtLoc(1, 'e039', Player(PLAYER_NEUTRAL_PASSIVE), o, bj_UNIT_FACING)
call RemoveLocation(o)
call DisableTrigger(LoadTriggerHandle((udg_hash), GetHandleId(door), StringHash("t1"))) // INLINED!!
call DisableTrigger(LoadTriggerHandle((udg_hash), GetHandleId(door), StringHash("t2"))) // INLINED!!
call SaveTimerHandle((udg_hash), GetHandleId(door), StringHash("malfunction_timer"), k) // INLINED!!
call SaveTimerHandle((udg_hash), GetHandleId(door), StringHash("malfunction_timer2"), j) // INLINED!!
call SaveDestructableHandle((udg_hash), GetHandleId(k), StringHash("d"), door) // INLINED!!
call SaveDestructableHandle((udg_hash), GetHandleId(j), StringHash("d"), door) // INLINED!!
call SaveReal((udg_hash), GetHandleId(door), StringHash("life"), GetDestructableLife(door)) // INLINED!!
call TimerStart(k, 1.75, false, function DoorMalfunction_Slam)
call TimerStart(j, 0.25, false, function DoorMalfunction_Open)
endfunction

//===========================================================================
function InitTrig_DoorSys takes nothing returns nothing
endfunction


//===========================================================================
// Trigger: DoorInit2
//
// Registers and creates all security doors. Since 1.5.0 this is done automatically, but doors with special clearance must be done seperately. Locked doors will open for the Electric Alien no matter what their clearance.
//===========================================================================
function Trig_DoorInit2_Func003Func001Func006C takes nothing returns boolean
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B000' ) ) then
        return true
    endif
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B001' ) ) then
        return true
    endif
    return false
endfunction

function Trig_DoorInit2_Func003Func001C takes nothing returns boolean
    if ( not Trig_DoorInit2_Func003Func001Func006C() ) then
        return false
    endif
    return true
endfunction

function Trig_DoorInit2_Func003A takes nothing returns nothing
    if ( Trig_DoorInit2_Func003Func001C() ) then
        set udg_TempDestruct=GetEnumDestructable()
        set udg_TempPoint=GetDestructableLoc(GetEnumDestructable())
        set udg_TempRect=Rect(( GetLocationX(udg_TempPoint) - 280.00 ), ( GetLocationY(udg_TempPoint) - 280.00 ), ( GetLocationX(udg_TempPoint) + 280.00 ), ( GetLocationY(udg_TempPoint) + 280.00 ))
        call RegisterSecurityDoor(udg_TempDestruct , udg_TempRect , 0)
        call RemoveLocation(udg_TempPoint)
    else
    endif
endfunction

function Trig_DoorInit2_Actions takes nothing returns nothing
    call DisableTrigger(GetTriggeringTrigger())
    call EnumDestructablesInRectAll(GetPlayableMapRect(), function Trig_DoorInit2_Func003A)
    set udg_TempDestruct=gg_dest_B000_0656
    call DoorRegisterClearance(udg_TempDestruct , 'I00J')
    set udg_TempDestruct=gg_dest_B000_1445
    call DoorRegisterClearance(udg_TempDestruct , 'I00J')
    set udg_TempDestruct=gg_dest_B000_1811
    call DoorRegisterClearance(udg_TempDestruct , 'I00J')
endfunction

//===========================================================================
function InitTrig_DoorInit2 takes nothing returns nothing
    set gg_trg_DoorInit2=CreateTrigger()
    call TriggerAddAction(gg_trg_DoorInit2, function Trig_DoorInit2_Actions)
endfunction

//===========================================================================
// Trigger: Selection
//
// Reselects and pans appropriately when unit selectors are selected. This is your F1 hero.
//===========================================================================
function Trig_Selection_Actions takes nothing returns nothing
    set udg_TempInt=GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))
    set udg_TempPoint=GetUnitLoc(udg_Playerhero[udg_TempInt])
    call PanCameraToTimedLocForPlayer(ConvertedPlayer(udg_TempInt), udg_TempPoint, 0)
    call SelectUnitForPlayerSingle(udg_Playerhero[udg_TempInt], ConvertedPlayer(udg_TempInt))
endfunction

//===========================================================================
function InitTrig_Selection takes nothing returns nothing
    set gg_trg_Selection=CreateTrigger()
    call TriggerAddAction(gg_trg_Selection, function Trig_Selection_Actions)
endfunction

//===========================================================================
// Trigger: SelectorUpdate
//
// Periodically updates the selector. The +1% part ensures the selector doesn't die, which is necessary.
//===========================================================================
function Trig_SelectorUpdate_Func002Func003C takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))]) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_SelectorUpdate_Func002A takes nothing returns nothing
    call SetUnitLifePercentBJ(GetEnumUnit(), ( GetUnitLifePercent(udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))]) + 1.00 ))
    call SetUnitManaPercentBJ(GetEnumUnit(), GetUnitManaPercent(udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))]))
    if ( Trig_SelectorUpdate_Func002Func003C() ) then
        call SetUnitPosition(GetEnumUnit(), GetUnitX((udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer((GetEnumUnit())))])), GetUnitY((udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer((GetEnumUnit())))]))) // INLINED!!
    else
    endif
endfunction

function Trig_SelectorUpdate_Actions takes nothing returns nothing
    call ForGroupBJ(udg_SelectorGroup, function Trig_SelectorUpdate_Func002A)
endfunction

//===========================================================================
function InitTrig_SelectorUpdate takes nothing returns nothing
    set gg_trg_SelectorUpdate=CreateTrigger()
    call TriggerRegisterTimerEventPeriodic(gg_trg_SelectorUpdate, 0.25)
    call TriggerAddAction(gg_trg_SelectorUpdate, function Trig_SelectorUpdate_Actions)
endfunction

//===========================================================================
// Trigger: GenStation
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function ConsoleDisable takes unit console returns nothing
    if HaveSavedHandle((udg_hash), GetHandleId(console), StringHash("EnterTrigger")) then // INLINED!!
        call DisableTrigger(LoadTriggerHandle((udg_hash), GetHandleId(console), StringHash("EnterTrigger"))) // INLINED!!
    endif
    
    call SetUnitOwner(console, Player(PLAYER_NEUTRAL_PASSIVE), true)
    call SetUnitOwner(LoadUnitHandle((udg_hash), GetHandleId(console), StringHash("space")), Player(PLAYER_NEUTRAL_PASSIVE), true) // INLINED!!
endfunction

function ConsoleEnable takes unit console returns nothing
    if IsUnitAliveBJ(console) then
        call EnableTrigger(LoadTriggerHandle((udg_hash), GetHandleId(console), StringHash("EnterTrigger"))) // INLINED!!
    endif
endfunction

function ConsoleCleanup takes nothing returns nothing
    local trigger k=GetTriggeringTrigger()
    local trigger m=LoadTriggerHandle((udg_hash), GetHandleId(k), StringHash("EnterTrigger")) // INLINED!!
    local unit console=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("console")) // INLINED!!
    local unit space=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("space")) // INLINED!!
    local rect consolerect=LoadRectHandle((udg_hash), GetHandleId(k), StringHash("consolerect")) // INLINED!!
    local unit destroyed=CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), GetUnitTypeId(console), GetUnitX(console), GetUnitY(console), GetUnitFacing(console))
        
    if IsUnitAliveBJ(space) or space == console then
        //If the console has no associated space (IE space=console) then we do not check to see if the space is alive before proceeding.
        call SetUnitX(destroyed, GetUnitX(console))
        call SetUnitY(destroyed, GetUnitY(console))
        call UnitAddAbility(destroyed, 'Avul')
        call SetUnitVertexColor(destroyed, 50, 50, 50, 255)
            call SetUnitOwner(console, Player(PLAYER_NEUTRAL_PASSIVE), false)
            call SetUnitOwner(space, Player(PLAYER_NEUTRAL_PASSIVE), false)
        call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("console"), destroyed) // INLINED!!
        call SaveUnitHandle((udg_hash), GetHandleId(m), StringHash("console"), destroyed) // INLINED!!
        call DisableTrigger(k)
        call DisableTrigger(m)
        call RemoveUnit(console)
        call UnitAddAbility(destroyed, 'A06R')
        call SetUnitLifeBJ(destroyed, 1)
        call SaveTriggerHandle((udg_hash), GetHandleId(destroyed), StringHash("console_k"), k) // INLINED!!
        call SaveTriggerHandle((udg_hash), GetHandleId(destroyed), StringHash("console_m"), m) // INLINED!!
        call TriggerRegisterUnitEvent(k, destroyed, EVENT_UNIT_DEATH)
    else
        call RemoveRect(consolerect)
        call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
        call FlushChildHashtable((udg_hash), GetHandleId(m)) // INLINED!!
        call DestroyTrigger(GetTriggeringTrigger())
        call DestroyTrigger(GetTriggeringTrigger())
    endif
endfunction

function ConsoleLoopCheck_Child takes nothing returns nothing
    local timer k=GetExpiredTimer()
    local unit console=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("console")) // INLINED!!
    local unit space=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("space")) // INLINED!!
    local unit r=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("r")) // INLINED!!
    local rect consolerect=LoadRectHandle((udg_hash), GetHandleId(k), StringHash("consolerect")) // INLINED!!
    
    if RectContainsUnit(consolerect, r) == false or r == null or IsUnitDeadBJ(r) or GetOwningPlayer(r) != GetOwningPlayer(console) then
        call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
        call DestroyTimer(k)
        
        call SetUnitOwner(console, Player(PLAYER_NEUTRAL_PASSIVE), false)
        call SetUnitOwner(space, Player(PLAYER_NEUTRAL_PASSIVE), false)
    endif
endfunction

function ConsoleLoopCheck takes unit console,unit r,rect consolerect,unit space returns nothing
    local timer k=CreateTimer()
    
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("console"), console) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("space"), space) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("r"), r) // INLINED!!
    call SaveRectHandle((udg_hash), GetHandleId(k), StringHash("consolerect"), consolerect) // INLINED!!
    call TimerStart(k, 0.3, true, function ConsoleLoopCheck_Child)
endfunction

function ConsoleControl takes nothing returns nothing
    local trigger m=GetTriggeringTrigger()
    local unit console=LoadUnitHandle((udg_hash), GetHandleId(m), StringHash("console")) // INLINED!!
    local unit space=LoadUnitHandle((udg_hash), GetHandleId(m), StringHash("space")) // INLINED!!
    local rect consolerect=LoadRectHandle((udg_hash), GetHandleId(m), StringHash("consolerect")) // INLINED!!
    local unit r=GetTriggerUnit()
    local player om=GetOwningPlayer(r)
    
    if IsUnitIllusion(r) == false and GetOwningPlayer(console) == Player(PLAYER_NEUTRAL_PASSIVE) and GetUnitPointValue(r) != 37 and udg_Blackout == false and SubStringBJ(I2S(GetUnitPointValue(r)), 1, 1) != "1" then
        call SetUnitOwner(space, om, false)
        call SetUnitOwner(console, om, false)
        if om == Player(bj_PLAYER_NEUTRAL_EXTRA) then
            set om=udg_Parasite
        endif
        call DisplayTextToPlayer(om, 0, 0, ( GetUnitName(space) ))
        call DisplayTextToPlayer(om, 0, 0, ( " |cff00FF00Access Granted|r" ))
        call SelectUnitForPlayerSingle(console, om)
        call ConsoleLoopCheck(console , r , consolerect , space)
    endif
endfunction

function GenConsole takes unit console,unit space,rect consolerect returns nothing
    local trigger t=CreateTrigger()
    local trigger EnterTrigger=CreateTrigger()
    
    call TriggerRegisterUnitEvent(t, console, EVENT_UNIT_DEATH)
    //call TriggerRegisterUnitEvent(t,space,EVENT_UNIT_DEATH)
    call TriggerAddAction(t, function ConsoleCleanup)
    call TriggerRegisterEnterRectSimple(EnterTrigger, consolerect)
    call TriggerAddAction(EnterTrigger, function ConsoleControl)
    call SaveTriggerHandle((udg_hash), GetHandleId(t), StringHash("EnterTrigger"), EnterTrigger) // INLINED!!
    call SaveRectHandle((udg_hash), GetHandleId(EnterTrigger), StringHash("consolerect"), consolerect) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(EnterTrigger), StringHash("console"), console) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(EnterTrigger), StringHash("space"), space) // INLINED!!
    call SaveRectHandle((udg_hash), GetHandleId(t), StringHash("consolerect"), consolerect) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("console"), console) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("space"), space) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(console), StringHash("space"), space) // INLINED!!
    call SaveTriggerHandle((udg_hash), GetHandleId(console), StringHash("EnterTrigger"), EnterTrigger) // INLINED!!
endfunction

//===========================================================================
function InitTrig_GenStation takes nothing returns nothing

    //Arbitress
    call GenConsole(gg_unit_h000_0013 , gg_unit_h003_0018 , gg_rct_ST1Control)
    //Kyo
    call GenConsole(gg_unit_h006_0026 , gg_unit_h007_0027 , gg_rct_ST3Control)
    //Niffeh
    call GenConsole(gg_unit_h00A_0030 , gg_unit_h009_0029 , gg_rct_ST4Control)
    //Swaggah
    call GenConsole(gg_unit_h00Y_0050 , gg_unit_h00X_0049 , gg_rct_ST5Control)
    //Niffeh powar
    call GenConsole(gg_unit_h048_0143 , gg_unit_h048_0143 , gg_rct_NiffyPowerControl)
    //Errun assembly
    call GenConsole(gg_unit_h04B_0165 , gg_unit_h04B_0165 , gg_rct_AssemblyControl)

endfunction


//===========================================================================
// Trigger: SelectSpace
//
// The select space ability on most consoles that allow you to control a unit in space instantly jumps you from console to space.
//===========================================================================
function Trig_SelectSpace_Func001C takes nothing returns boolean
    if ( ( GetSpellAbilityId() == 'A073' ) ) then
        return true
    endif
    if ( ( GetSpellAbilityId() == 'A085' ) ) then
        return true
    endif
    return false
endfunction

function Trig_SelectSpace_Conditions takes nothing returns boolean
    if ( not Trig_SelectSpace_Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_SelectSpace_Func005C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_SelectSpace_Actions takes nothing returns nothing
    set udg_TempUnit=LoadUnitHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("space")) // INLINED!!
    set udg_TempPoint=GetUnitLoc(udg_TempUnit)
    if ( Trig_SelectSpace_Func005C() ) then
        call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TempPoint, 0)
        call SelectUnitForPlayerSingle(udg_TempUnit, udg_Parasite)
    else
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetSpellAbilityUnit()), udg_TempPoint, 0)
        call SelectUnitForPlayerSingle(udg_TempUnit, GetOwningPlayer(GetSpellAbilityUnit()))
    endif
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_SelectSpace takes nothing returns nothing
    set gg_trg_SelectSpace=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SelectSpace, EVENT_PLAYER_UNIT_SPELL_CAST)
    call TriggerAddCondition(gg_trg_SelectSpace, Condition(function Trig_SelectSpace_Conditions))
    call TriggerAddAction(gg_trg_SelectSpace, function Trig_SelectSpace_Actions)
endfunction

//===========================================================================
// Trigger: ST1mInit
//
// Initialize this station- set docks, create and destroy visibility modifiers, destroy visibility modifier rects, and open all walls of dock elevators.
//===========================================================================
function Trig_ST1mInit_Func007A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_STV1)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_STV2)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_STV3)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_STV4)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_STV5)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_STV6)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_STV7)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST1V8)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST1V9)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_SS1)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_SS2)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_SS3)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_SS4)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_SS5)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_SS6)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_SS7)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_SS8)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_SS9)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_SS10)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_SS11)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_SS12P1)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_SS12P2)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_Space)
    set udg_SpaceVisibility[GetConvertedPlayerId(GetEnumPlayer())]=GetLastCreatedFogModifier()
endfunction

function Trig_ST1mInit_Actions takes nothing returns nothing
       call DestroyTrigger(GetTriggeringTrigger())
    set udg_All_Dock[1]=gg_dest_DTrx_0232
    set udg_All_Dock[2]=gg_dest_DTrx_0243
    set udg_All_Dock[3]=gg_dest_DTrx_0235
    set udg_All_Dock[4]=gg_dest_DTrx_0257
    call ForForce(GetPlayersAll(), function Trig_ST1mInit_Func007A)
    call RemoveRect(gg_rct_STV1)
    call RemoveRect(gg_rct_STV2)
    call RemoveRect(gg_rct_STV3)
    call RemoveRect(gg_rct_STV4)
    call RemoveRect(gg_rct_STV5)
    call RemoveRect(gg_rct_STV6)
    call RemoveRect(gg_rct_STV7)
    call RemoveRect(gg_rct_SS12P1)
    call RemoveRect(gg_rct_SS12P2)
    call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, gg_dest_DTrx_0232)
    call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, gg_dest_DTrx_0243)
    call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, gg_dest_DTrx_0235)
    call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, gg_dest_DTrx_0257)
    call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, gg_dest_DTrx_0642)
endfunction

//===========================================================================
function InitTrig_ST1mInit takes nothing returns nothing
    set gg_trg_ST1mInit=CreateTrigger()
    call TriggerAddAction(gg_trg_ST1mInit, function Trig_ST1mInit_Actions)
endfunction

//===========================================================================
// Trigger: ST1Abilities
//
// If the console starts a surveillance sweep, pick every unit in the station and ping it.
// Note that if the pinger is neutral_extra (alien) it will ping it for the player-alien instead.
//===========================================================================
function Trig_ST1Abilities_Func002Func004Func001Func002Func001001001 takes nothing returns boolean
    return ( GetFilterPlayer() == udg_Parasite )
endfunction

function Trig_ST1Abilities_Func002Func004Func001Func002Func002001001 takes nothing returns boolean
    return ( GetFilterPlayer() == GetOwningPlayer(GetTriggerUnit()) )
endfunction

function Trig_ST1Abilities_Func002Func004Func001Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetTriggerUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST1Abilities_Func002Func004Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_AGGRESSIVE) ) ) then
        return false
    endif
    if ( not ( RectContainsUnit(gg_rct_Space, GetEnumUnit()) == false ) ) then
        return false
    endif
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == GetEnumUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST1Abilities_Func002Func004Func002Func002Func001001001 takes nothing returns boolean
    return ( udg_Parasite == GetFilterPlayer() )
endfunction

function Trig_ST1Abilities_Func002Func004Func002Func002Func002001001 takes nothing returns boolean
    return ( GetOwningPlayer(GetSpellAbilityUnit()) == GetFilterPlayer() )
endfunction

function Trig_ST1Abilities_Func002Func004Func002Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST1Abilities_Func002Func004Func002C takes nothing returns boolean
    if not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) and ShipHasUnits(GetEnumUnit()) ) then // INLINED!!
    return false
    endif
    return true
endfunction

function Trig_ST1Abilities_Func002Func004A takes nothing returns nothing
    if ( Trig_ST1Abilities_Func002Func004Func001C() ) then
        set udg_TempPoint=GetUnitLoc(GetEnumUnit())
        if ( Trig_ST1Abilities_Func002Func004Func001Func002C() ) then
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST1Abilities_Func002Func004Func001Func002Func002001001)), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 100, 100)
        else
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST1Abilities_Func002Func004Func001Func002Func001001001)), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 100, 100)
        endif
        call RemoveLocation(udg_TempPoint)
    else
    endif
    if ( Trig_ST1Abilities_Func002Func004Func002C() ) then
        set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
        if ( Trig_ST1Abilities_Func002Func004Func002Func002C() ) then
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST1Abilities_Func002Func004Func002Func002Func002001001)), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100.00, 25.00, 50.00)
        else
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST1Abilities_Func002Func004Func002Func002Func001001001)), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100.00, 25.00, 50.00)
        endif
        call RemoveLocation(udg_TempPoint2)
    else
    endif
endfunction

function Trig_ST1Abilities_Func002C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A000' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST1Abilities_Actions takes nothing returns nothing
    if ( Trig_ST1Abilities_Func002C() ) then
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4369")
        set udg_TempRect=gg_rct_ST1
        set udg_TempUnitGroup=GetUnitsInRectAll(udg_TempRect)
        call ForGroupBJ(udg_TempUnitGroup, function Trig_ST1Abilities_Func002Func004A)
            call DestroyGroup(udg_TempUnitGroup)
    else
    endif
endfunction

//===========================================================================
function InitTrig_ST1Abilities takes nothing returns nothing
    set gg_trg_ST1Abilities=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST1Abilities, gg_unit_h000_0013, EVENT_UNIT_SPELL_EFFECT)
    call TriggerAddAction(gg_trg_ST1Abilities, function Trig_ST1Abilities_Actions)
endfunction

//===========================================================================
// Trigger: ST1Death
//
// If the arbitress dies, destroy all arbitress triggers, permakill every unit in the station (including raptors!), and play a filter/sound.
//===========================================================================
function Trig_ST1Death_Func013A takes nothing returns nothing
    call EraseUnit(GetEnumUnit() , GetKillingUnit())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call RemoveItem(UnitItemInSlotBJ(GetEnumUnit(), GetForLoopIndexA()))
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    set udg_TempPoint=GetUnitLoc(GetEnumUnit())
    call CreateNUnitsAtLoc(1, 'e001', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    call RemoveLocation(udg_TempPoint)
endfunction

function Trig_ST1Death_Func015A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_ST1)
endfunction

function Trig_ST1Death_Actions takes nothing returns nothing
       call DestroyTrigger(GetTriggeringTrigger())
    call DestroyTrigger(gg_trg_ST1Abilities)
    call DestroyTrigger(gg_trg_ST1Death)
    call DestroyTrigger(gg_trg_ST1Attack)
    call DestroyTrigger(gg_trg_ST1AttackEnd)
    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 7.00, "ReplaceableTextures\\CameraMasks\\DreamFilter_Mask.blp", 100.00, 0, 0, 0)
    set udg_TempPoint=GetUnitLoc(GetDyingUnit())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=4
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempPoint2=PolarProjectionBJ(udg_TempPoint, GetRandomDirectionDeg(), GetRandomDirectionDeg())
        call CreateNUnitsAtLoc(1, 'e01E', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, GetRandomDirectionDeg())
        call RemoveLocation(udg_TempPoint2)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveLocation(udg_TempPoint)
    call PlaySoundBJ(gg_snd_NecropolisUpgrade1)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_137")
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST1), function Trig_ST1Death_Func013A)
    call PolledWait(5.00)
    call ForForce(GetPlayersAll(), function Trig_ST1Death_Func015A)
    call RectOfDoom(gg_rct_ST1)
endfunction

//===========================================================================
function InitTrig_ST1Death takes nothing returns nothing
    set gg_trg_ST1Death=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST1Death, gg_unit_h003_0018, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_ST1Death, function Trig_ST1Death_Actions)
endfunction

//===========================================================================
// Trigger: ST1Attack
//
// If the arbitress starts to take damage then add the alarm sound across the arbitress area.
//===========================================================================
function Trig_ST1Attack_Conditions takes nothing returns boolean
    if ( not ( GetEventDamage() >= 1.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST1Attack_Func004C takes nothing returns boolean
    if ( not ( udg_ST1_TakingDamage == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST1Attack_Func007Func001Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST1Attack_Func007Func001C takes nothing returns boolean
    if ( not ( GetEnumUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] ) ) then
        return false
    endif
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST1Attack_Func007A takes nothing returns nothing
    if ( Trig_ST1Attack_Func007Func001C() ) then
        if ( Trig_ST1Attack_Func007Func001Func001C() ) then
            call ForceAddPlayerSimple(udg_Parasite, udg_ST1_PGroup)
            call CameraSetEQNoiseForPlayer(udg_Parasite, 3)
        else
            call ForceAddPlayerSimple(GetOwningPlayer(GetEnumUnit()), udg_ST1_PGroup)
            call CameraSetEQNoiseForPlayer(GetOwningPlayer(GetEnumUnit()), 3)
        endif
    else
    endif
endfunction

function Trig_ST1Attack_Func008A takes nothing returns nothing
    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 5.00, "|cffFF0000U.S.I. Arbitress under attack!|r")
endfunction

function Trig_ST1Attack_Func010Func001C takes nothing returns boolean
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetEnumPlayer())] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST1Attack_Func010A takes nothing returns nothing
    if ( Trig_ST1Attack_Func010Func001C() ) then
        call CameraClearNoiseForPlayer(GetEnumPlayer())
    else
    endif
endfunction

function Trig_ST1Attack_Actions takes nothing returns nothing
    call DisableTrigger(GetTriggeringTrigger())
    if ( Trig_ST1Attack_Func004C() ) then
        call SetStackedSoundBJ(true, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST1)
        set udg_ST1_TakingDamage=true
    else
    endif
    call StartTimerBJ(udg_ST1_ResetAlarm, false, 10.00)
    call ForceClear(udg_ST1_PGroup)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST1), function Trig_ST1Attack_Func007A)
    call ForForce(udg_ST1_PGroup, function Trig_ST1Attack_Func008A)
    call PolledWait(5.00)
    call ForForce(udg_ST1_PGroup, function Trig_ST1Attack_Func010A)
    call EnableTrigger(gg_trg_ST1Attack)
endfunction

//===========================================================================
function InitTrig_ST1Attack takes nothing returns nothing
    set gg_trg_ST1Attack=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST1Attack, gg_unit_h003_0018, EVENT_UNIT_DAMAGED)
    call TriggerAddCondition(gg_trg_ST1Attack, Condition(function Trig_ST1Attack_Conditions))
    call TriggerAddAction(gg_trg_ST1Attack, function Trig_ST1Attack_Actions)
endfunction

//===========================================================================
// Trigger: ST1AttackEnd
//
// When ST1_ResetAlarm expires, assume the attack is over and end the alarm.
//===========================================================================
function Trig_ST1AttackEnd_Actions takes nothing returns nothing
    set udg_ST1_TakingDamage=false
    call SetStackedSoundBJ(false, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST1)
endfunction

//===========================================================================
function InitTrig_ST1AttackEnd takes nothing returns nothing
    set gg_trg_ST1AttackEnd=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_ST1AttackEnd, udg_ST1_ResetAlarm)
    call TriggerAddAction(gg_trg_ST1AttackEnd, function Trig_ST1AttackEnd_Actions)
endfunction

//===========================================================================
// Trigger: RadarSweepSector
//===========================================================================
function Trig_RadarSweepSector_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetSoldItem()) == 'I00T' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RadarSweepSector_Func004C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetBuyingUnit()) != 'e00L' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RadarSweepSector_Func005Func001Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetBuyingUnit()) != 'e00L' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RadarSweepSector_Func005Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_AGGRESSIVE) ) ) then
        return false
    endif
    if ( not ( RectContainsUnit(gg_rct_Space, GetEnumUnit()) == false ) ) then
        return false
    endif
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == GetEnumUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_RadarSweepSector_Func005Func002Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetBuyingUnit()) != 'e00L' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RadarSweepSector_Func005Func002C takes nothing returns boolean
    if not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) and ShipHasUnits(GetEnumUnit()) ) then // INLINED!!
    return false
    endif
    if ( not ( RectContainsUnit(gg_rct_Timeout, GetEnumUnit()) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RadarSweepSector_Func005A takes nothing returns nothing
    if ( Trig_RadarSweepSector_Func005Func001C() ) then
        set udg_TempPoint=GetUnitLoc(GetEnumUnit())
        if ( Trig_RadarSweepSector_Func005Func001Func002C() ) then
            call PingMinimapLocForForceEx(GetForceOfPlayer(GetOwningPlayer(GetBuyingUnit())), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 100, 100)
        else
            call PingMinimapLocForForceEx(GetForceOfPlayer(udg_Parasite), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 100, 100)
        endif
        call RemoveLocation(udg_TempPoint)
    else
    endif
    if ( Trig_RadarSweepSector_Func005Func002C() ) then
        set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
        if ( Trig_RadarSweepSector_Func005Func002Func002C() ) then
            call PingMinimapLocForForceEx(GetForceOfPlayer(GetOwningPlayer(GetBuyingUnit())), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 25.00, 50.00)
        else
            call PingMinimapLocForForceEx(GetForceOfPlayer(udg_Parasite), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 25.00, 50.00)
        endif
        call RemoveLocation(udg_TempPoint2)
    else
    endif
endfunction

function Trig_RadarSweepSector_Actions takes nothing returns nothing
    call RemoveItem(GetSoldItem())
    if ( Trig_RadarSweepSector_Func004C() ) then
        call DisplayTextToPlayer(GetOwningPlayer(GetBuyingUnit()), 0, 0, "|cffffcc00Sector sweep complete.|r")
    else
        call DisplayTextToPlayer(udg_Parasite, 0, 0, "|cffffcc00Sector sweep complete.|r")
    endif
    call ForGroupBJ(GetUnitsInRectAll(GetPlayableMapRect()), function Trig_RadarSweepSector_Func005A)
endfunction

//===========================================================================
function InitTrig_RadarSweepSector takes nothing returns nothing
    set gg_trg_RadarSweepSector=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_RadarSweepSector, EVENT_PLAYER_UNIT_SELL_ITEM)
    call TriggerAddCondition(gg_trg_RadarSweepSector, Condition(function Trig_RadarSweepSector_Conditions))
    call TriggerAddAction(gg_trg_RadarSweepSector, function Trig_RadarSweepSector_Actions)
endfunction

//===========================================================================
// Trigger: Explorer Locator
//===========================================================================
function Trig_Explorer_Locator_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetSoldItem()) == 'I02B' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Explorer_Locator_Func004Func001Func002Func001001001 takes nothing returns boolean
    return ( GetFilterPlayer() == udg_Parasite )
endfunction

function Trig_Explorer_Locator_Func004Func001Func002Func002001001 takes nothing returns boolean
    return ( GetFilterPlayer() == GetOwningPlayer(GetBuyingUnit()) )
endfunction

function Trig_Explorer_Locator_Func004Func001Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetBuyingUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_Explorer_Locator_Func004Func001Func005C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h02Q' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h02H' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h02L' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h03J' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h02S' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h02I' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h02K' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h001' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h03K' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Explorer_Locator_Func004Func001C takes nothing returns boolean
    if ( not ( RectContainsUnit(gg_rct_Timeout, GetEnumUnit()) == false ) ) then
        return false
    endif
    if ( not Trig_Explorer_Locator_Func004Func001Func005C() ) then
        return false
    endif
    return true
endfunction

function Trig_Explorer_Locator_Func004A takes nothing returns nothing
    if ( Trig_Explorer_Locator_Func004Func001C() ) then
        set udg_TempPoint=GetUnitLoc(GetEnumUnit())
        if ( Trig_Explorer_Locator_Func004Func001Func002C() ) then
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_Explorer_Locator_Func004Func001Func002Func002001001)), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 50.00, 50.00, 100)
        else
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_Explorer_Locator_Func004Func001Func002Func001001001)), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 50.00, 50.00, 100)
        endif
        call RemoveLocation(udg_TempPoint)
    else
    endif
endfunction

function Trig_Explorer_Locator_Actions takes nothing returns nothing
    call RemoveItem(GetSoldItem())
    call ForGroupBJ(GetUnitsInRectAll(GetPlayableMapRect()), function Trig_Explorer_Locator_Func004A)
endfunction

//===========================================================================
function InitTrig_Explorer_Locator takes nothing returns nothing
    set gg_trg_Explorer_Locator=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Explorer_Locator, EVENT_PLAYER_UNIT_SELL_ITEM)
    call TriggerAddCondition(gg_trg_Explorer_Locator, Condition(function Trig_Explorer_Locator_Conditions))
    call TriggerAddAction(gg_trg_Explorer_Locator, function Trig_Explorer_Locator_Actions)
endfunction

//===========================================================================
// Trigger: ScanAcquireASAD
//===========================================================================
//TESH.scrollpos=68
//TESH.alwaysfold=0
function USAD_AbilCode takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A06S' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ScanAcquireASAD_Func001Func003Func001Func001Func002Func001001001 takes nothing returns boolean
    return ( GetFilterPlayer() == udg_Parasite )
endfunction

function Trig_ScanAcquireASAD_Func001Func003Func001Func001Func002Func002001001 takes nothing returns boolean
    return ( GetFilterPlayer() == GetOwningPlayer(GetSpellAbilityUnit()) )
endfunction

function Trig_ScanAcquireASAD_Func001Func003Func001Func001Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ScanAcquireASAD_Func001Func003Func001Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_AGGRESSIVE) ) ) then
        return false
    endif
    if ( not ( RectContainsUnit(gg_rct_Space, GetEnumUnit()) == false ) ) then
        return false
    endif
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == GetEnumUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_ScanAcquireASAD_Func001Func003Func001Func002Func002Func001001001 takes nothing returns boolean
    return ( udg_Parasite == GetFilterPlayer() )
endfunction

function Trig_ScanAcquireASAD_Func001Func003Func001Func002Func002Func002001001 takes nothing returns boolean
    return ( GetOwningPlayer(GetSpellAbilityUnit()) == GetFilterPlayer() )
endfunction

function Trig_ScanAcquireASAD_Func001Func003Func001Func002Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ScanAcquireASAD_Func001Func003Func001Func002C takes nothing returns boolean
    if ( not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) and ShipHasUnits(GetEnumUnit()) ) ) then // INLINED!!
        return false
    endif
    if ( not ( RectContainsUnit(gg_rct_Timeout, GetEnumUnit()) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ScanAcquireASAD_Func001Func003Func001A takes nothing returns nothing
    if ( Trig_ScanAcquireASAD_Func001Func003Func001Func001C() ) then
        set udg_TempPoint=GetUnitLoc(GetEnumUnit())
        if ( Trig_ScanAcquireASAD_Func001Func003Func001Func001Func002C() ) then
            call PingMinimapLocForForceEx(GetPlayersAll(), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 100, 100)
        else
            call PingMinimapLocForForceEx(GetPlayersAll(), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 100, 100)
        endif
        call RemoveLocation(udg_TempPoint)
    else
    endif
    if ( Trig_ScanAcquireASAD_Func001Func003Func001Func002C() ) then
        set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
        if ( Trig_ScanAcquireASAD_Func001Func003Func001Func002Func002C() ) then
            call PingMinimapLocForForceEx(GetPlayersAll(), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100.00, 25.00, 50.00)
        else
            call PingMinimapLocForForceEx(GetPlayersAll(), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100.00, 25.00, 50.00)
        endif
        call RemoveLocation(udg_TempPoint2)
    else
    endif
endfunction

function Trig_ScanAcquireASAD_Actions takes nothing returns nothing
local unit q
local group g
    if GetSpellTargetUnit() == gg_unit_h019_0155 then
        call CreateNUnitsAtLoc(1, 'h04C', Player(PLAYER_NEUTRAL_PASSIVE), Location(- 11410.00, 15466.00), GetRandomDirectionDeg())
        set q=bj_lastCreatedUnit
        call RemoveItem(GetItemOfTypeFromUnitBJ(GetSpellAbilityUnit(), 'I01S'))
        loop
            exitwhen IsUnitAliveBJ(q) != true
            call DisplayTextToForce(GetPlayersAll(), "|cff00FFFFU.S.I. Arbitress Scanning...")
            set g=GetUnitsInRectAll(GetPlayableMapRect())
            call ForGroupBJ(g, function Trig_ScanAcquireASAD_Func001Func003Func001A)
            call DestroyGroup(g)
            call PolledWait(45.00)
        endloop
    else
        call UnitRemoveItemSwapped(GetManipulatedItem(), gg_unit_h019_0155)
    endif
endfunction

//===========================================================================
function InitTrig_ScanAcquireASAD takes nothing returns nothing
    set gg_trg_ScanAcquireASAD=CreateTrigger()
call TriggerRegisterAnyUnitEventBJ(gg_trg_ScanAcquireASAD, EVENT_PLAYER_UNIT_SPELL_EFFECT)
call TriggerAddCondition(gg_trg_ScanAcquireASAD, Condition(function USAD_AbilCode))
    call TriggerAddAction(gg_trg_ScanAcquireASAD, function Trig_ScanAcquireASAD_Actions)
endfunction


//===========================================================================
// Trigger: ST2mInit
//===========================================================================
function Trig_ST2mInit_Func005A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST2V1)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST2V2)
    call DestroyFogModifier(GetLastCreatedFogModifier())
endfunction

function Trig_ST2mInit_Actions takes nothing returns nothing
       call DestroyTrigger(GetTriggeringTrigger())
    set udg_All_Dock[5]=gg_dest_DTrx_0450
    set udg_All_Dock[6]=gg_dest_DTrx_0461
    call ForForce(GetPlayersAll(), function Trig_ST2mInit_Func005A)
    call RemoveRect(gg_rct_ST2V1)
    call RemoveRect(gg_rct_ST2V2)
    call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, gg_dest_DTrx_0450)
    call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, gg_dest_DTrx_0461)
endfunction

//===========================================================================
function InitTrig_ST2mInit takes nothing returns nothing
    set gg_trg_ST2mInit=CreateTrigger()
    call TriggerAddAction(gg_trg_ST2mInit, function Trig_ST2mInit_Actions)
endfunction

//===========================================================================
// Trigger: ST2Death
//===========================================================================
function Trig_ST2Death_Func011A takes nothing returns nothing
    call EraseUnit(GetEnumUnit() , GetKillingUnit())
    set udg_TempPoint=GetUnitLoc(GetEnumUnit())
    call CreateNUnitsAtLoc(1, 'e001', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    call RemoveLocation(udg_TempPoint)
endfunction

function Trig_ST2Death_Func013A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_ST2)
endfunction

function Trig_ST2Death_Actions takes nothing returns nothing
       call DestroyTrigger(GetTriggeringTrigger())
        call DestroyTrigger(gg_trg_ST2Attack)
        call DestroyTrigger(gg_trg_ST2AttackEnd)
    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 7.00, "ReplaceableTextures\\CameraMasks\\DreamFilter_Mask.blp", 100.00, 0, 0, 0)
    call PlaySoundBJ(gg_snd_NecropolisUpgrade1)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4365")
    set udg_TempPoint=GetUnitLoc(GetDyingUnit())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=2
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempPoint2=PolarProjectionBJ(udg_TempPoint, GetRandomDirectionDeg(), GetRandomDirectionDeg())
        call CreateNUnitsAtLoc(1, 'e01E', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, GetRandomDirectionDeg())
        call SetUnitAnimation(GetLastCreatedUnit(), "death")
        call RemoveLocation(udg_TempPoint2)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveLocation(udg_TempPoint)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST2), function Trig_ST2Death_Func011A)
    call PolledWait(5.00)
    call ForForce(GetPlayersAll(), function Trig_ST2Death_Func013A)
    call RectOfDoom(gg_rct_ST2)
endfunction

//===========================================================================
function InitTrig_ST2Death takes nothing returns nothing
    set gg_trg_ST2Death=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST2Death, gg_unit_h005_0281, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_ST2Death, function Trig_ST2Death_Actions)
endfunction

//===========================================================================
// Trigger: ST2Attack
//===========================================================================
function Trig_ST2Attack_Conditions takes nothing returns boolean
    if ( not ( GetEventDamage() >= 1.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST2Attack_Func004C takes nothing returns boolean
    if ( not ( udg_ST2_TakingDamage == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST2Attack_Func007Func001Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST2Attack_Func007Func001C takes nothing returns boolean
    if ( not ( GetEnumUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] ) ) then
        return false
    endif
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST2Attack_Func007A takes nothing returns nothing
    if ( Trig_ST2Attack_Func007Func001C() ) then
        if ( Trig_ST2Attack_Func007Func001Func001C() ) then
            call ForceAddPlayerSimple(udg_Parasite, udg_ST2_PGroup)
            call CameraSetEQNoiseForPlayer(udg_Parasite, 3)
        else
            call ForceAddPlayerSimple(GetOwningPlayer(GetEnumUnit()), udg_ST2_PGroup)
            call CameraSetEQNoiseForPlayer(GetOwningPlayer(GetEnumUnit()), 3)
        endif
    else
    endif
endfunction

function Trig_ST2Attack_Func008A takes nothing returns nothing
    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 5.00, "|cffFF0000Defunct station under attack!|r")
endfunction

function Trig_ST2Attack_Func010Func001C takes nothing returns boolean
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetEnumPlayer())] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST2Attack_Func010A takes nothing returns nothing
    if ( Trig_ST2Attack_Func010Func001C() ) then
        call CameraClearNoiseForPlayer(GetEnumPlayer())
    else
    endif
endfunction

function Trig_ST2Attack_Actions takes nothing returns nothing
    call DisableTrigger(GetTriggeringTrigger())
    if ( Trig_ST2Attack_Func004C() ) then
        call SetStackedSoundBJ(true, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST2)
        set udg_ST2_TakingDamage=true
    else
    endif
    call StartTimerBJ(udg_ST2_ResetAlarm, false, 10.00)
    call ForceClear(udg_ST2_PGroup)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST2), function Trig_ST2Attack_Func007A)
    call ForForce(udg_ST2_PGroup, function Trig_ST2Attack_Func008A)
    call PolledWait(5.00)
    call ForForce(udg_ST2_PGroup, function Trig_ST2Attack_Func010A)
    call EnableTrigger(gg_trg_ST2Attack)
endfunction

//===========================================================================
function InitTrig_ST2Attack takes nothing returns nothing
    set gg_trg_ST2Attack=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST2Attack, gg_unit_h005_0281, EVENT_UNIT_DAMAGED)
    call TriggerAddCondition(gg_trg_ST2Attack, Condition(function Trig_ST2Attack_Conditions))
    call TriggerAddAction(gg_trg_ST2Attack, function Trig_ST2Attack_Actions)
endfunction

//===========================================================================
// Trigger: ST2AttackEnd
//===========================================================================
function Trig_ST2AttackEnd_Actions takes nothing returns nothing
    set udg_ST2_TakingDamage=false
    call SetStackedSoundBJ(false, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST2)
endfunction

//===========================================================================
function InitTrig_ST2AttackEnd takes nothing returns nothing
    set gg_trg_ST2AttackEnd=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_ST2AttackEnd, udg_ST2_ResetAlarm)
    call TriggerAddAction(gg_trg_ST2AttackEnd, function Trig_ST2AttackEnd_Actions)
endfunction

//===========================================================================
// Trigger: ST3Abilities
//===========================================================================
function Trig_ST3Abilities_Func002Func004Func001Func002Func001001001 takes nothing returns boolean
    return ( GetFilterPlayer() == udg_Parasite )
endfunction

function Trig_ST3Abilities_Func002Func004Func001Func002Func002001001 takes nothing returns boolean
    return ( GetFilterPlayer() == GetOwningPlayer(GetTriggerUnit()) )
endfunction

function Trig_ST3Abilities_Func002Func004Func001Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetTriggerUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST3Abilities_Func002Func004Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_AGGRESSIVE) ) ) then
        return false
    endif
    if ( not ( RectContainsUnit(gg_rct_Space, GetEnumUnit()) == false ) ) then
        return false
    endif
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == GetEnumUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST3Abilities_Func002Func004Func002Func002Func001001001 takes nothing returns boolean
    return ( udg_Parasite == GetFilterPlayer() )
endfunction

function Trig_ST3Abilities_Func002Func004Func002Func002Func002001001 takes nothing returns boolean
    return ( GetOwningPlayer(GetSpellAbilityUnit()) == GetFilterPlayer() )
endfunction

function Trig_ST3Abilities_Func002Func004Func002Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST3Abilities_Func002Func004Func002C takes nothing returns boolean
    if not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) and ShipHasUnits(GetEnumUnit()) ) then // INLINED!!
    return false
    endif
    return true
endfunction

function Trig_ST3Abilities_Func002Func004A takes nothing returns nothing
    if ( Trig_ST3Abilities_Func002Func004Func001C() ) then
        set udg_TempPoint=GetUnitLoc(GetEnumUnit())
        if ( Trig_ST3Abilities_Func002Func004Func001Func002C() ) then
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST3Abilities_Func002Func004Func001Func002Func002001001)), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 100, 100)
        else
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST3Abilities_Func002Func004Func001Func002Func001001001)), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 100, 100)
        endif
        call RemoveLocation(udg_TempPoint)
    else
    endif
    if ( Trig_ST3Abilities_Func002Func004Func002C() ) then
        set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
        if ( Trig_ST3Abilities_Func002Func004Func002Func002C() ) then
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST3Abilities_Func002Func004Func002Func002Func002001001)), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100.00, 25.00, 50.00)
        else
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST3Abilities_Func002Func004Func002Func002Func001001001)), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100.00, 25.00, 50.00)
        endif
        call RemoveLocation(udg_TempPoint2)
    else
    endif
endfunction

function Trig_ST3Abilities_Func002C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A000' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST3Abilities_Actions takes nothing returns nothing
    if ( Trig_ST3Abilities_Func002C() ) then
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_167")
        set udg_TempRect=gg_rct_ST3
        set udg_TempUnitGroup=GetUnitsInRectAll(udg_TempRect)
        call ForGroupBJ(udg_TempUnitGroup, function Trig_ST3Abilities_Func002Func004A)
            call DestroyGroup(udg_TempUnitGroup)
    else
    endif
endfunction

//===========================================================================
function InitTrig_ST3Abilities takes nothing returns nothing
    set gg_trg_ST3Abilities=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST3Abilities, gg_unit_h006_0026, EVENT_UNIT_SPELL_EFFECT)
    call TriggerAddAction(gg_trg_ST3Abilities, function Trig_ST3Abilities_Actions)
endfunction

//===========================================================================
// Trigger: ST3mInit
//===========================================================================
function Trig_ST3mInit_Func006A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST3V1)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST3V2)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST3V3)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST3V4)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST3V5)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST3V6)
    call DestroyFogModifier(GetLastCreatedFogModifier())
endfunction

function Trig_ST3mInit_Actions takes nothing returns nothing
       call DestroyTrigger(GetTriggeringTrigger())
    set udg_All_Dock[7]=gg_dest_DTrx_0657
    set udg_All_Dock[8]=gg_dest_DTrx_0668
    set udg_All_Dock[34]=gg_dest_DTrx_0230
    call ForForce(GetPlayersAll(), function Trig_ST3mInit_Func006A)
    call RemoveRect(gg_rct_ST3V1)
    call RemoveRect(gg_rct_ST3V2)
    call RemoveRect(gg_rct_ST3V3)
    call RemoveRect(gg_rct_ST3V4)
    call RemoveRect(gg_rct_ST3V5)
    call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, gg_dest_DTrx_0657)
    call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, gg_dest_DTrx_0668)
    call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, gg_dest_DTrx_0230)
endfunction

//===========================================================================
function InitTrig_ST3mInit takes nothing returns nothing
    set gg_trg_ST3mInit=CreateTrigger()
    call TriggerAddAction(gg_trg_ST3mInit, function Trig_ST3mInit_Actions)
endfunction

//===========================================================================
// Trigger: ST3Death
//===========================================================================
function Trig_ST3Death_Func013A takes nothing returns nothing
    call EraseUnit(GetEnumUnit() , GetKillingUnit())
    set udg_TempPoint=GetUnitLoc(GetEnumUnit())
    call CreateNUnitsAtLoc(1, 'e001', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    call RemoveLocation(udg_TempPoint)
endfunction

function Trig_ST3Death_Func015A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_ST3)
endfunction

function Trig_ST3Death_Actions takes nothing returns nothing
       call DestroyTrigger(GetTriggeringTrigger())
        call DestroyTrigger(gg_trg_ST3Attack)
        call DestroyTrigger(gg_trg_ST3AttackEnd)
        call DestroyTrigger(gg_trg_ST3Cannon)
        call DestroyTrigger(gg_trg_ST3Abilities)
    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 7.00, "ReplaceableTextures\\CameraMasks\\DreamFilter_Mask.blp", 100.00, 0, 0, 0)
    call PlaySoundBJ(gg_snd_NecropolisUpgrade1)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4366")
    set udg_TempPoint=GetUnitLoc(GetDyingUnit())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=2
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempPoint2=PolarProjectionBJ(udg_TempPoint, GetRandomDirectionDeg(), GetRandomDirectionDeg())
        call CreateNUnitsAtLoc(1, 'e01E', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, GetRandomDirectionDeg())
        call RemoveLocation(udg_TempPoint2)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveLocation(udg_TempPoint)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST3), function Trig_ST3Death_Func013A)
    call PolledWait(5.00)
    call ForForce(GetPlayersAll(), function Trig_ST3Death_Func015A)
    call RectOfDoom(gg_rct_ST3)
endfunction

//===========================================================================
function InitTrig_ST3Death takes nothing returns nothing
    set gg_trg_ST3Death=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST3Death, gg_unit_h007_0027, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_ST3Death, function Trig_ST3Death_Actions)
endfunction

//===========================================================================
// Trigger: ST3Attack
//===========================================================================
function Trig_ST3Attack_Conditions takes nothing returns boolean
    if ( not ( GetEventDamage() >= 1.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST3Attack_Func004C takes nothing returns boolean
    if ( not ( udg_ST3_TakingDamage == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST3Attack_Func007Func001Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST3Attack_Func007Func001C takes nothing returns boolean
    if ( not ( GetEnumUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] ) ) then
        return false
    endif
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST3Attack_Func007A takes nothing returns nothing
    if ( Trig_ST3Attack_Func007Func001C() ) then
        if ( Trig_ST3Attack_Func007Func001Func001C() ) then
            call ForceAddPlayerSimple(udg_Parasite, udg_ST3_PGroup)
            call CameraSetEQNoiseForPlayer(udg_Parasite, 3)
        else
            call ForceAddPlayerSimple(GetOwningPlayer(GetEnumUnit()), udg_ST3_PGroup)
            call CameraSetEQNoiseForPlayer(GetOwningPlayer(GetEnumUnit()), 3)
        endif
    else
    endif
endfunction

function Trig_ST3Attack_Func008A takes nothing returns nothing
    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 5.00, "|cffFF0000Kyo Cannon under attack!|r")
endfunction

function Trig_ST3Attack_Func010Func001C takes nothing returns boolean
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetEnumPlayer())] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST3Attack_Func010A takes nothing returns nothing
    if ( Trig_ST3Attack_Func010Func001C() ) then
        call CameraClearNoiseForPlayer(GetEnumPlayer())
    else
    endif
endfunction

function Trig_ST3Attack_Actions takes nothing returns nothing
    call DisableTrigger(GetTriggeringTrigger())
    if ( Trig_ST3Attack_Func004C() ) then
        call SetStackedSoundBJ(true, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST3)
        set udg_ST3_TakingDamage=true
    else
    endif
    call StartTimerBJ(udg_ST3_ResetAlarm, false, 10.00)
    call ForceClear(udg_ST3_PGroup)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST3), function Trig_ST3Attack_Func007A)
    call ForForce(udg_ST3_PGroup, function Trig_ST3Attack_Func008A)
    call PolledWait(5.00)
    call ForForce(udg_ST3_PGroup, function Trig_ST3Attack_Func010A)
    call EnableTrigger(gg_trg_ST3Attack)
endfunction

//===========================================================================
function InitTrig_ST3Attack takes nothing returns nothing
    set gg_trg_ST3Attack=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST3Attack, gg_unit_h007_0027, EVENT_UNIT_DAMAGED)
    call TriggerAddCondition(gg_trg_ST3Attack, Condition(function Trig_ST3Attack_Conditions))
    call TriggerAddAction(gg_trg_ST3Attack, function Trig_ST3Attack_Actions)
endfunction

//===========================================================================
// Trigger: ST3AttackEnd
//===========================================================================
function Trig_ST3AttackEnd_Actions takes nothing returns nothing
    set udg_ST3_TakingDamage=false
    call SetStackedSoundBJ(false, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST3)
endfunction

//===========================================================================
function InitTrig_ST3AttackEnd takes nothing returns nothing
    set gg_trg_ST3AttackEnd=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_ST3AttackEnd, udg_ST3_ResetAlarm)
    call TriggerAddAction(gg_trg_ST3AttackEnd, function Trig_ST3AttackEnd_Actions)
endfunction

//===========================================================================
// Trigger: ST3CannonProjectile
//===========================================================================


//===========================================================================
// Trigger: ST3Cannon
//===========================================================================
function Trig_ST3Cannon_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A005' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST3Cannon_Func003Func004C takes nothing returns boolean
    if ( ( RectContainsUnit(gg_rct_Space, GetSpellTargetUnit()) != true ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02H' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02L' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02Q' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02T' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02P' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h031' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h032' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h03J' ) ) then
        return true
    endif
    return false
endfunction

function Trig_ST3Cannon_Func003C takes nothing returns boolean
    if ( not Trig_ST3Cannon_Func003Func004C() ) then
        return false
    endif
    return true
endfunction

function Trig_ST3Cannon_Actions takes nothing returns nothing
    if ( Trig_ST3Cannon_Func003C() ) then
        call DisplayTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, "|cffffcc00Cannot cast on this target.|r")
        call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
        return
    else
    endif
    call DisplayTextToForce(GetPlayersAll(), ( "|cffFF0000The Kyo Cannon has been fired at " + ( GetUnitName(GetSpellTargetUnit()) + "!|r" ) ))
    call PlaySoundBJ(gg_snd_HumanDissipate1)
    call PolledWait(1.00)
    call PlaySoundBJ(gg_snd_ThunderClapCaster)
endfunction

//===========================================================================
function InitTrig_ST3Cannon takes nothing returns nothing
    set gg_trg_ST3Cannon=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST3Cannon, gg_unit_h007_0027, EVENT_UNIT_SPELL_CAST)
    call TriggerAddCondition(gg_trg_ST3Cannon, Condition(function Trig_ST3Cannon_Conditions))
    call TriggerAddAction(gg_trg_ST3Cannon, function Trig_ST3Cannon_Actions)
endfunction

//===========================================================================
// Trigger: AMTFire
//===========================================================================
function Trig_AMTFire_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A06U' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AMTFire_Func004Func004C takes nothing returns boolean
    if ( ( RectContainsUnit(gg_rct_Space, GetSpellTargetUnit()) != true ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02H' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02L' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02Q' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02T' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02P' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h031' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h032' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h03J' ) ) then
        return true
    endif
    return false
endfunction

function Trig_AMTFire_Func004C takes nothing returns boolean
    if ( not Trig_AMTFire_Func004Func004C() ) then
        return false
    endif
    return true
endfunction

function Trig_AMTFire_Func017C takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(gg_unit_h007_0027) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AMTFire_Actions takes nothing returns nothing
    local unit b=GetSpellTargetUnit()
    if ( Trig_AMTFire_Func004C() ) then
        call DisplayTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, "|cffffcc00Cannot cast on this target.|r")
        call IssueImmediateOrderBJ(GetSpellAbilityUnit(), "stop")
        return
    else
    endif
    call DisplayTextToForce(GetPlayersAll(), ( "|cffFF0000Antimatter Teleportation Matrix now has a targetting lock on " + ( GetUnitName(GetSpellTargetUnit()) + "!|r" ) ))
    call UnitRemoveAbilityBJ('A06U', gg_unit_h007_0027)
    call PlaySoundBJ(gg_snd_Warning)
    set udg_TempUnit=gg_unit_h007_0027
    call TintUnitOverTime(udg_TempUnit , 45.0 , 120 , 255 , 120)
    call StartTimerBJ(udg_Kyo_ATM_WarningTimer, false, 60.00)
    call CreateTimerDialogBJ(GetLastCreatedTimerBJ(), ( "|cffFF0000ATM- " + GetUnitName(GetSpellTargetUnit()) ))
    set udg_Kyo_ATM_CountdownWindow=GetLastCreatedTimerDialogBJ()
    // Fel timers...
    call PolledWait(59.50)
    call DestroyTimerDialogBJ(udg_Kyo_ATM_CountdownWindow)
    call DestroyLightningRing(udg_Kyo_ATM_LightningRing)
    if ( Trig_AMTFire_Func017C() ) then
        call PlaySoundBJ(gg_snd_FlashBack1Second)
        call PolledWait(0.50)
        set udg_TempUnit2=b
        call PlaySoundBJ(gg_snd_BlueFireBurst01)
        call PlaySoundBJ(gg_snd_MarkOfChaos01)
        call PlaySoundBJ(gg_snd_HumanDissipate1)
        set udg_TempUnit=gg_unit_h007_0027
        call AddLightningStormEx("DRAL" , GetUnitX(udg_TempUnit) , GetUnitY(udg_TempUnit) , 650.0 , GetUnitX(udg_TempUnit2) , GetUnitY(udg_TempUnit2) , 125.0 , 26 , 90.0)
        call UnitDamageTargetBJ(gg_unit_h007_0027, udg_TempUnit2, 900000.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
        call PolledWait(0.50)
        call SetUnitVertexColorBJ(gg_unit_h007_0027, 100, 100, 100, 0)
        set udg_Kyo_ATM_Armed=false
    else
    endif
endfunction

//===========================================================================
function InitTrig_AMTFire takes nothing returns nothing
    set gg_trg_AMTFire=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_AMTFire, gg_unit_h007_0027, EVENT_UNIT_SPELL_CAST)
    call TriggerAddCondition(gg_trg_AMTFire, Condition(function Trig_AMTFire_Conditions))
    call TriggerAddAction(gg_trg_AMTFire, function Trig_AMTFire_Actions)
endfunction

//===========================================================================
// Trigger: ATMAcquire
//===========================================================================
function Trig_ATMAcquire_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A06T' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ATMAcquire_Func003C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h006' ) ) then
        return false
    endif
    if ( not ( GetUnitAbilityLevelSwapped('A06R', GetSpellTargetUnit()) == 0 ) ) then
        return false
    endif
    if ( not ( udg_Kyo_ATM_Armed == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ATMAcquire_Actions takes nothing returns nothing
    if ( Trig_ATMAcquire_Func003C() ) then
        set udg_Kyo_ATM_Armed=true
        set udg_TempPoint=GetUnitLoc(GetSpellTargetUnit())
        call SetSoundPositionLocBJ(gg_snd_Lever, udg_TempPoint, 0)
        call PlaySoundBJ(gg_snd_Lever)
        call RemoveItem(GetItemOfTypeFromUnitBJ(GetSpellAbilityUnit(), 'I01T'))
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Human\\ThunderClap\\ThunderClapCaster.mdl")
        call SFXThreadClean()
        call AddSpecialEffectLocBJ(udg_TempPoint, "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl")
        call SFXThreadClean()
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Human\\MarkOfChaos\\MarkOfChaosTarget.mdl")
        call SFXThreadClean()
        call RemoveLocation(udg_TempPoint)
        set udg_TempUnit=gg_unit_h007_0027
        set udg_Kyo_ATM_LightningRing=LightningRing(udg_TempUnit)
        call UnitAddAbilityBJ('A06U', gg_unit_h007_0027)
    else
    endif
endfunction

//===========================================================================
function InitTrig_ATMAcquire takes nothing returns nothing
    set gg_trg_ATMAcquire=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ATMAcquire, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ATMAcquire, Condition(function Trig_ATMAcquire_Conditions))
    call TriggerAddAction(gg_trg_ATMAcquire, function Trig_ATMAcquire_Actions)
endfunction

//===========================================================================
// Trigger: ST4Abilities
//===========================================================================
function Trig_ST4Abilities_Func002Func004Func001Func002Func001001001 takes nothing returns boolean
    return ( GetFilterPlayer() == udg_Parasite )
endfunction

function Trig_ST4Abilities_Func002Func004Func001Func002Func002001001 takes nothing returns boolean
    return ( GetFilterPlayer() == GetOwningPlayer(GetTriggerUnit()) )
endfunction

function Trig_ST4Abilities_Func002Func004Func001Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetTriggerUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4Abilities_Func002Func004Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_AGGRESSIVE) ) ) then
        return false
    endif
    if ( not ( RectContainsUnit(gg_rct_Space, GetEnumUnit()) == false ) ) then
        return false
    endif
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == GetEnumUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4Abilities_Func002Func004Func002Func002Func001001001 takes nothing returns boolean
    return ( udg_Parasite == GetFilterPlayer() )
endfunction

function Trig_ST4Abilities_Func002Func004Func002Func002Func002001001 takes nothing returns boolean
    return ( GetOwningPlayer(GetSpellAbilityUnit()) == GetFilterPlayer() )
endfunction

function Trig_ST4Abilities_Func002Func004Func002Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4Abilities_Func002Func004Func002C takes nothing returns boolean
    if not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) and ShipHasUnits(GetEnumUnit()) ) then // INLINED!!
    return false
    endif
    return true
endfunction

function Trig_ST4Abilities_Func002Func004A takes nothing returns nothing
    if ( Trig_ST4Abilities_Func002Func004Func001C() ) then
        set udg_TempPoint=GetUnitLoc(GetEnumUnit())
        if ( Trig_ST4Abilities_Func002Func004Func001Func002C() ) then
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST4Abilities_Func002Func004Func001Func002Func002001001)), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 100, 100)
        else
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST4Abilities_Func002Func004Func001Func002Func001001001)), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 100, 100)
        endif
        call RemoveLocation(udg_TempPoint)
    else
    endif
    if ( Trig_ST4Abilities_Func002Func004Func002C() ) then
        set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
        if ( Trig_ST4Abilities_Func002Func004Func002Func002C() ) then
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST4Abilities_Func002Func004Func002Func002Func002001001)), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100.00, 25.00, 50.00)
        else
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST4Abilities_Func002Func004Func002Func002Func001001001)), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100.00, 25.00, 50.00)
        endif
        call RemoveLocation(udg_TempPoint2)
    else
    endif
endfunction

function Trig_ST4Abilities_Func002C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A000' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4Abilities_Actions takes nothing returns nothing
    if ( Trig_ST4Abilities_Func002C() ) then
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_768")
        set udg_TempRect=gg_rct_ST4S2
        set udg_TempUnitGroup=GetUnitsInRectAll(udg_TempRect)
        call ForGroupBJ(udg_TempUnitGroup, function Trig_ST4Abilities_Func002Func004A)
            call DestroyGroup(udg_TempUnitGroup)
    else
    endif
endfunction

//===========================================================================
function InitTrig_ST4Abilities takes nothing returns nothing
    set gg_trg_ST4Abilities=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST4Abilities, gg_unit_h00A_0030, EVENT_UNIT_SPELL_EFFECT)
    call TriggerAddAction(gg_trg_ST4Abilities, function Trig_ST4Abilities_Actions)
endfunction

//===========================================================================
// Trigger: ST4mInit
//===========================================================================
function Trig_ST4mInit_Func003A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V1)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V10)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V11)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V15)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V18)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V2)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V24)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V25)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V3)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V30)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V32)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V4)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V5)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V7)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V8)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V31)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST4V33)
    call DestroyFogModifier(GetLastCreatedFogModifier())
endfunction

function Trig_ST4mInit_Actions takes nothing returns nothing
       call DestroyTrigger(GetTriggeringTrigger())
    call ForForce(GetPlayersAll(), function Trig_ST4mInit_Func003A)
    call RemoveRect(gg_rct_ST4V1)
    call RemoveRect(gg_rct_ST4V10)
    call RemoveRect(gg_rct_ST4V11)
    call RemoveRect(gg_rct_ST4V15)
    call RemoveRect(gg_rct_ST4V18)
    call RemoveRect(gg_rct_ST4V2)
    call RemoveRect(gg_rct_ST4V24)
    call RemoveRect(gg_rct_ST4V25)
    call RemoveRect(gg_rct_ST4V3)
    call RemoveRect(gg_rct_ST4V30)
    call RemoveRect(gg_rct_ST4V31)
    call RemoveRect(gg_rct_ST4V32)
    call RemoveRect(gg_rct_ST4V33)
    call RemoveRect(gg_rct_ST4V4)
    call RemoveRect(gg_rct_ST4V5)
    call RemoveRect(gg_rct_ST4V7)
    call RemoveRect(gg_rct_ST4V8)
    set udg_All_Dock[9]=gg_dest_DTrx_1464
    set udg_All_Dock[10]=gg_dest_DTrx_1474
    set udg_All_Dock[11]=gg_dest_DTrx_1484
    set udg_All_Dock[12]=gg_dest_DTrx_1534
    set udg_All_Dock[13]=gg_dest_DTrx_1494
    set udg_All_Dock[14]=gg_dest_DTrx_1504
    set udg_All_Dock[15]=gg_dest_DTrx_1514
    set udg_All_Dock[16]=gg_dest_DTrx_1524
    set udg_All_Dock[29]=gg_dest_DTrx_2402
    set udg_All_Dock[30]=gg_dest_DTrx_2412
    set udg_All_Dock[31]=gg_dest_DTrx_2422
    set udg_All_Dock[32]=gg_dest_DTrx_2432
    set udg_All_Dock[33]=gg_dest_DTrx_2442
    set bj_forLoopAIndex=9
    set bj_forLoopAIndexEnd=16
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, udg_All_Dock[GetForLoopIndexA()])
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    set bj_forLoopAIndex=29
    set bj_forLoopAIndexEnd=33
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, udg_All_Dock[GetForLoopIndexA()])
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call SetUnitTimeScalePercent(gg_unit_h04A_0144, 0.00)
    call PauseUnitBJ(true, gg_unit_h04A_0144)
endfunction

//===========================================================================
function InitTrig_ST4mInit takes nothing returns nothing
    set gg_trg_ST4mInit=CreateTrigger()
    call TriggerAddAction(gg_trg_ST4mInit, function Trig_ST4mInit_Actions)
endfunction

//===========================================================================
// Trigger: ST4Death
//===========================================================================
function Trig_ST4Death_Func018A takes nothing returns nothing
    call EraseUnit(GetEnumUnit() , GetKillingUnit())
    set udg_TempPoint=GetUnitLoc(GetEnumUnit())
    call CreateNUnitsAtLoc(1, 'e001', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    call RemoveLocation(udg_TempPoint)
endfunction

function Trig_ST4Death_Func020A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_ST4S2)
endfunction

function Trig_ST4Death_Actions takes nothing returns nothing
       call DestroyTrigger(GetTriggeringTrigger())
        call DestroyTrigger(gg_trg_ST4Abilities)
        call DestroyTrigger(gg_trg_ST4Attack)
        call DestroyTrigger(gg_trg_ST4AttackEnd)
        call DestroyTrigger(gg_trg_ST4Death)
        call DestroyTrigger(gg_trg_ST4DefenseDrone1)
        call DestroyTrigger(gg_trg_ST4DefenseDrone1Loss)
        call DestroyTrigger(gg_trg_ST4DefenseDrone2)
        call DestroyTrigger(gg_trg_ST4DefenseDrone2Loss)
    call TriggerExecute(gg_trg_ResetPowerBonus)
    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 7.00, "ReplaceableTextures\\CameraMasks\\DreamFilter_Mask.blp", 100.00, 0, 0, 0)
    call PlaySoundBJ(gg_snd_NecropolisUpgrade1)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4367")
    set udg_TempPoint=GetUnitLoc(GetDyingUnit())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=4
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempPoint2=PolarProjectionBJ(udg_TempPoint, GetRandomDirectionDeg(), GetRandomDirectionDeg())
        call CreateNUnitsAtLoc(1, 'e01E', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, GetRandomDirectionDeg())
        call RemoveLocation(udg_TempPoint2)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveLocation(udg_TempPoint)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST4S2), function Trig_ST4Death_Func018A)
    call PolledWait(5.00)
    call ForForce(GetPlayersAll(), function Trig_ST4Death_Func020A)
    call RectOfDoom(gg_rct_ST4S2)
endfunction

//===========================================================================
function InitTrig_ST4Death takes nothing returns nothing
    set gg_trg_ST4Death=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST4Death, gg_unit_h009_0029, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_ST4Death, function Trig_ST4Death_Actions)
endfunction

//===========================================================================
// Trigger: ST4Attack
//===========================================================================
function Trig_ST4Attack_Conditions takes nothing returns boolean
    if ( not ( GetEventDamage() >= 1.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4Attack_Func004C takes nothing returns boolean
    if ( not ( udg_ST4_TakingDamage == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4Attack_Func007Func001Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4Attack_Func007Func001C takes nothing returns boolean
    if ( not ( GetEnumUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] ) ) then
        return false
    endif
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4Attack_Func007A takes nothing returns nothing
    if ( Trig_ST4Attack_Func007Func001C() ) then
        if ( Trig_ST4Attack_Func007Func001Func001C() ) then
            call ForceAddPlayerSimple(udg_Parasite, udg_ST4_PGroup)
            call CameraSetEQNoiseForPlayer(udg_Parasite, 3)
        else
            call ForceAddPlayerSimple(GetOwningPlayer(GetEnumUnit()), udg_ST4_PGroup)
            call CameraSetEQNoiseForPlayer(GetOwningPlayer(GetEnumUnit()), 3)
        endif
    else
    endif
endfunction

function Trig_ST4Attack_Func008A takes nothing returns nothing
    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 5.00, "|cffFF0000U.S.I. Queen Niffy under attack!|r")
endfunction

function Trig_ST4Attack_Func010Func001C takes nothing returns boolean
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetEnumPlayer())] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4Attack_Func010A takes nothing returns nothing
    if ( Trig_ST4Attack_Func010Func001C() ) then
        call CameraClearNoiseForPlayer(GetEnumPlayer())
    else
    endif
endfunction

function Trig_ST4Attack_Actions takes nothing returns nothing
    call DisableTrigger(GetTriggeringTrigger())
    if ( Trig_ST4Attack_Func004C() ) then
        call SetStackedSoundBJ(true, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST4S2)
        set udg_ST4_TakingDamage=true
    else
    endif
    call StartTimerBJ(udg_ST4_ResetAlarm, false, 10.00)
    call ForceClear(udg_ST4_PGroup)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST4S2), function Trig_ST4Attack_Func007A)
    call ForForce(udg_ST4_PGroup, function Trig_ST4Attack_Func008A)
    call PolledWait(5.00)
    call ForForce(udg_ST4_PGroup, function Trig_ST4Attack_Func010A)
    call EnableTrigger(gg_trg_ST4Attack)
endfunction

//===========================================================================
function InitTrig_ST4Attack takes nothing returns nothing
    set gg_trg_ST4Attack=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST4Attack, gg_unit_h009_0029, EVENT_UNIT_DAMAGED)
    call TriggerAddCondition(gg_trg_ST4Attack, Condition(function Trig_ST4Attack_Conditions))
    call TriggerAddAction(gg_trg_ST4Attack, function Trig_ST4Attack_Actions)
endfunction

//===========================================================================
// Trigger: ST4AttackEnd
//===========================================================================
function Trig_ST4AttackEnd_Actions takes nothing returns nothing
    set udg_ST4_TakingDamage=false
    call SetStackedSoundBJ(false, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST4S2)
endfunction

//===========================================================================
function InitTrig_ST4AttackEnd takes nothing returns nothing
    set gg_trg_ST4AttackEnd=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_ST4AttackEnd, udg_ST4_ResetAlarm)
    call TriggerAddAction(gg_trg_ST4AttackEnd, function Trig_ST4AttackEnd_Actions)
endfunction

//===========================================================================
// Trigger: ST4DefenseDrone1
//===========================================================================
function Trig_ST4DefenseDrone1_Conditions takes nothing returns boolean
    if ( not ( IsUnitIllusionBJ(GetTriggerUnit()) == false ) ) then
        return false
    endif
    if ( not ( GetUnitPointValue(GetTriggerUnit()) != 37 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4DefenseDrone1_Func004C takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(gg_unit_h00B_0032) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4DefenseDrone1_Func005C takes nothing returns boolean
    if ( not ( SubStringBJ(I2S(GetUnitPointValue(GetTriggerUnit())), 1, 1) == "1" ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4DefenseDrone1_Func006C takes nothing returns boolean
    if ( not ( GetOwningPlayer(gg_unit_h00B_0032) == Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4DefenseDrone1_Actions takes nothing returns nothing
    if ( Trig_ST4DefenseDrone1_Func004C() ) then
    else
           call DestroyTrigger(GetTriggeringTrigger())
        call DestroyTrigger(gg_trg_ST4DefenseDrone1Loss)
    endif
    if ( Trig_ST4DefenseDrone1_Func005C() ) then
        call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "|cffffcc00This unit cannot pilot space stations/ships.|r")
        return
    else
    endif
    if ( Trig_ST4DefenseDrone1_Func006C() ) then
        call SetUnitOwner(gg_unit_h00B_0032, GetOwningPlayer(GetTriggerUnit()), false)
        call SelectUnitForPlayerSingle(gg_unit_h00B_0032, GetOwningPlayer(GetTriggerUnit()))
        call KillDestructable(gg_dest_XTmp_1430)
        set udg_TempUnit=gg_unit_h00B_0032
        set udg_TempRect=gg_rct_DD1
        call CheckConsoleControl(udg_TempUnit , udg_TempUnit , udg_TempRect)
    else
    endif
endfunction

//===========================================================================
function InitTrig_ST4DefenseDrone1 takes nothing returns nothing
    set gg_trg_ST4DefenseDrone1=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_ST4DefenseDrone1, gg_rct_DD1)
    call TriggerAddCondition(gg_trg_ST4DefenseDrone1, Condition(function Trig_ST4DefenseDrone1_Conditions))
    call TriggerAddAction(gg_trg_ST4DefenseDrone1, function Trig_ST4DefenseDrone1_Actions)
endfunction

//===========================================================================
// Trigger: ST4DefenseDrone1Loss
//===========================================================================
function Trig_ST4DefenseDrone1Loss_Conditions takes nothing returns boolean
    if ( not ( GetUnitPointValue(GetTriggerUnit()) != 37 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4DefenseDrone1Loss_Func003C takes nothing returns boolean
    if ( not ( GetOwningPlayer(gg_unit_h00B_0032) == GetOwningPlayer(GetTriggerUnit()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4DefenseDrone1Loss_Actions takes nothing returns nothing
    if ( Trig_ST4DefenseDrone1Loss_Func003C() ) then
        call SetUnitOwner(gg_unit_h00B_0032, Player(PLAYER_NEUTRAL_PASSIVE), false)
    else
    endif
endfunction

//===========================================================================
function InitTrig_ST4DefenseDrone1Loss takes nothing returns nothing
    set gg_trg_ST4DefenseDrone1Loss=CreateTrigger()
    call TriggerRegisterLeaveRectSimple(gg_trg_ST4DefenseDrone1Loss, gg_rct_DD1)
    call TriggerAddCondition(gg_trg_ST4DefenseDrone1Loss, Condition(function Trig_ST4DefenseDrone1Loss_Conditions))
    call TriggerAddAction(gg_trg_ST4DefenseDrone1Loss, function Trig_ST4DefenseDrone1Loss_Actions)
endfunction

//===========================================================================
// Trigger: ST4DefenseDrone2
//===========================================================================
function Trig_ST4DefenseDrone2_Conditions takes nothing returns boolean
    if ( not ( IsUnitIllusionBJ(GetTriggerUnit()) == false ) ) then
        return false
    endif
    if ( not ( GetUnitPointValue(GetTriggerUnit()) != 37 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4DefenseDrone2_Func004C takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(gg_unit_h00B_0031) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4DefenseDrone2_Func005C takes nothing returns boolean
    if ( not ( SubStringBJ(I2S(GetUnitPointValue(GetTriggerUnit())), 1, 1) == "1" ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4DefenseDrone2_Func006C takes nothing returns boolean
    if ( not ( GetOwningPlayer(gg_unit_h00B_0031) == Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4DefenseDrone2_Actions takes nothing returns nothing
    if ( Trig_ST4DefenseDrone2_Func004C() ) then
    else
           call DestroyTrigger(GetTriggeringTrigger())
        call DestroyTrigger(gg_trg_ST4DefenseDrone2Loss)
    endif
    if ( Trig_ST4DefenseDrone2_Func005C() ) then
        call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "|cffffcc00This unit cannot pilot space stations/ships.|r")
        return
    else
    endif
    if ( Trig_ST4DefenseDrone2_Func006C() ) then
        call SetUnitOwner(gg_unit_h00B_0031, GetOwningPlayer(GetTriggerUnit()), false)
        call SelectUnitForPlayerSingle(gg_unit_h00B_0031, GetOwningPlayer(GetTriggerUnit()))
        call KillDestructable(gg_dest_XTmp_1429)
        set udg_TempUnit=gg_unit_h00B_0031
        set udg_TempRect=gg_rct_DD2
        call CheckConsoleControl(udg_TempUnit , udg_TempUnit , udg_TempRect)
    else
    endif
endfunction

//===========================================================================
function InitTrig_ST4DefenseDrone2 takes nothing returns nothing
    set gg_trg_ST4DefenseDrone2=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_ST4DefenseDrone2, gg_rct_DD2)
    call TriggerAddCondition(gg_trg_ST4DefenseDrone2, Condition(function Trig_ST4DefenseDrone2_Conditions))
    call TriggerAddAction(gg_trg_ST4DefenseDrone2, function Trig_ST4DefenseDrone2_Actions)
endfunction

//===========================================================================
// Trigger: ST4DefenseDrone2Loss
//===========================================================================
function Trig_ST4DefenseDrone2Loss_Conditions takes nothing returns boolean
    if ( not ( GetUnitPointValue(GetTriggerUnit()) != 37 ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'h00B' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4DefenseDrone2Loss_Func004C takes nothing returns boolean
    if ( not ( GetOwningPlayer(gg_unit_h00B_0031) == GetOwningPlayer(GetTriggerUnit()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST4DefenseDrone2Loss_Actions takes nothing returns nothing
    if ( Trig_ST4DefenseDrone2Loss_Func004C() ) then
        call SetUnitOwner(gg_unit_h00B_0031, Player(PLAYER_NEUTRAL_PASSIVE), false)
    else
    endif
endfunction

//===========================================================================
function InitTrig_ST4DefenseDrone2Loss takes nothing returns nothing
    set gg_trg_ST4DefenseDrone2Loss=CreateTrigger()
    call TriggerRegisterLeaveRectSimple(gg_trg_ST4DefenseDrone2Loss, gg_rct_DD2)
    call TriggerAddCondition(gg_trg_ST4DefenseDrone2Loss, Condition(function Trig_ST4DefenseDrone2Loss_Conditions))
    call TriggerAddAction(gg_trg_ST4DefenseDrone2Loss, function Trig_ST4DefenseDrone2Loss_Actions)
endfunction

//===========================================================================
// Trigger: RepositioningDrive
//===========================================================================
function Trig_RepositioningDrive_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A074' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepositioningDrive_Func004C takes nothing returns boolean
    if ( not ( RectContainsLoc(gg_rct_Space, udg_TempPoint) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepositioningDrive_Actions takes nothing returns nothing
    set udg_TempPoint=GetSpellTargetLoc()
    if ( Trig_RepositioningDrive_Func004C() ) then
        call IssueImmediateOrderBJ(gg_unit_h009_0029, "stop")
    else
    endif
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_RepositioningDrive takes nothing returns nothing
    set gg_trg_RepositioningDrive=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_RepositioningDrive, gg_unit_h009_0029, EVENT_UNIT_SPELL_CAST)
    call TriggerAddCondition(gg_trg_RepositioningDrive, Condition(function Trig_RepositioningDrive_Conditions))
    call TriggerAddAction(gg_trg_RepositioningDrive, function Trig_RepositioningDrive_Actions)
endfunction

//===========================================================================
// Trigger: RepositioningDriveGo
//===========================================================================
//TESH.scrollpos=12
//TESH.alwaysfold=0
function Trig_RepositioningDriveGo_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A074' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepositioningDriveGo_Func002C takes nothing returns boolean
    if ( not ( RectContainsLoc(gg_rct_Space, udg_TempPoint) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepositioningDriveGo_Actions takes nothing returns nothing
local location a
local location b
    set udg_TempPoint=GetSpellTargetLoc()
    set a=udg_TempPoint
    if ( Trig_RepositioningDriveGo_Func002C() ) then
        call IssueImmediateOrderBJ(gg_unit_h009_0029, "stop")
        call RemoveLocation(udg_TempPoint)
        return
    else
    endif
    call PauseUnit(gg_unit_h009_0029, true)
    set b=GetUnitLoc(gg_unit_h009_0029)
    call CreateNUnitsAtLoc(1, 'e021', Player(PLAYER_NEUTRAL_PASSIVE), b, bj_UNIT_FACING)
    call SizeUnitOverTime(GetLastCreatedUnit() , 20.0 , 0.1 , 8 , true)
    call TintUnitOverTime(gg_unit_h009_0029 , 20.2 , 0 , 100 , 10)
    call PolledWait(16.50)
        call SetSoundPositionLocBJ(gg_snd_Poweringup, b, 0)
    call PlaySoundBJ(gg_snd_Poweringup)
        call PolledWait(3.5)
    call PauseUnit(gg_unit_h009_0029, false)
    call CreateNUnitsAtLoc(1, 'e005', Player(PLAYER_NEUTRAL_PASSIVE), a, bj_UNIT_FACING)
    call SetUnitScale(GetLastCreatedUnit(), 6, 6, 6)
    call SetUnitTimeScale(GetLastCreatedUnit(), 2.0)
    call CreateNUnitsAtLoc(1, 'e005', Player(PLAYER_NEUTRAL_PASSIVE), b, bj_UNIT_FACING)
        call SetUnitScale(GetLastCreatedUnit(), 6, 6, 6)
            call SetUnitTimeScale(GetLastCreatedUnit(), 2.0)
    call SetUnitPositionLoc(gg_unit_h009_0029, a)
        call SetSoundPositionLocBJ(gg_snd_NightElfBuildingDeathSmall1, a, 0)
    call PlaySoundBJ(gg_snd_NightElfBuildingDeathSmall1)
            call SetSoundPositionLocBJ(gg_snd_NightElfBuildingDeathSmall1, b, 0)
    call PlaySoundBJ(gg_snd_NightElfBuildingDeathSmall1)
    call RemoveLocation(a)
    call RemoveLocation(b)
    call PolledWait(2.0)
    call SetUnitVertexColor(gg_unit_h009_0029, 256, 256, 256, 256)
endfunction

//===========================================================================
function InitTrig_RepositioningDriveGo takes nothing returns nothing
    set gg_trg_RepositioningDriveGo=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_RepositioningDriveGo, gg_unit_h009_0029, EVENT_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_RepositioningDriveGo, Condition(function Trig_RepositioningDriveGo_Conditions))
    call TriggerAddAction(gg_trg_RepositioningDriveGo, function Trig_RepositioningDriveGo_Actions)
endfunction


//===========================================================================
// Trigger: ARDAcquire
//===========================================================================
function Trig_ARDAcquire_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A075' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ARDAcquire_Func003C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h00A' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ARDAcquire_Actions takes nothing returns nothing
    if ( Trig_ARDAcquire_Func003C() ) then
        set udg_TempUnit2=GetSpellTargetUnit()
        set udg_TempPoint=GetUnitLoc(GetSpellTargetUnit())
        call UnitAddAbilityBJ('A074', gg_unit_h009_0029)
        call RemoveItem(GetItemOfTypeFromUnitBJ(GetSpellAbilityUnit(), 'I01V'))
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\NightElf\\Taunt\\TauntCaster.mdl")
        call SFXThreadClean()
        call AddSpecialEffectLocBJ(udg_TempPoint, "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl")
        call SFXThreadClean()
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Other\\Awaken\\Awaken.mdl")
        call SFXThreadClean()
        call RemoveLocation(udg_TempPoint)
    else
    endif
endfunction

//===========================================================================
function InitTrig_ARDAcquire takes nothing returns nothing
    set gg_trg_ARDAcquire=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ARDAcquire, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ARDAcquire, Condition(function Trig_ARDAcquire_Conditions))
    call TriggerAddAction(gg_trg_ARDAcquire, function Trig_ARDAcquire_Actions)
endfunction

//===========================================================================
// Trigger: ResetPowerBonus
//===========================================================================
function Trig_ResetPowerBonus_Func001Func002A takes nothing returns nothing
    call RemoveUnit(GetEnumUnit())
endfunction

function Trig_ResetPowerBonus_Func001C takes nothing returns boolean
    if ( not ( udg_Power_Bonus == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ResetPowerBonus_Func002Func001Func001C takes nothing returns boolean
    if not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) ) then // INLINED!!
    return false
    endif
    return true
endfunction

function Trig_ResetPowerBonus_Func002Func001A takes nothing returns nothing
    if ( Trig_ResetPowerBonus_Func002Func001Func001C() ) then
        call UnitRemoveAbilityBJ('A06K', GetEnumUnit())
        call UnitRemoveAbilityBJ('A06J', GetEnumUnit())
        call UnitRemoveAbilityBJ('A06I', GetEnumUnit())
    else
    endif
endfunction

function Trig_ResetPowerBonus_Func002C takes nothing returns boolean
    if ( not ( udg_Power_Bonus == 2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ResetPowerBonus_Func003Func002Func001C takes nothing returns boolean
    if not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A072') == 1) ) then // INLINED!!
    return false
    endif
    return true
endfunction

function Trig_ResetPowerBonus_Func003Func002A takes nothing returns nothing
    if ( Trig_ResetPowerBonus_Func003Func002Func001C() ) then
        call UnitRemoveAbilityBJ('A06L', GetEnumUnit())
        call UnitRemoveAbilityBJ('A06M', GetEnumUnit())
    else
    endif
endfunction

function Trig_ResetPowerBonus_Func003C takes nothing returns boolean
    if ( not ( udg_Power_Bonus == 3 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ResetPowerBonus_Func004C takes nothing returns boolean
    if ( not ( udg_Power_Bonus == 4 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ResetPowerBonus_Actions takes nothing returns nothing
    if ( Trig_ResetPowerBonus_Func001C() ) then
        set udg_TempUnitGroup=GetUnitsOfTypeIdAll('e01U')
        call ForGroupBJ(udg_TempUnitGroup, function Trig_ResetPowerBonus_Func001Func002A)
            call DestroyGroup(udg_TempUnitGroup)
    else
    endif
    if ( Trig_ResetPowerBonus_Func002C() ) then
        call ForGroupBJ(GetUnitsInRectAll(GetPlayableMapRect()), function Trig_ResetPowerBonus_Func002Func001A)
    else
    endif
    if ( Trig_ResetPowerBonus_Func003C() ) then
        call DecUnitAbilityLevelSwapped('A005', gg_unit_h007_0027)
        call ForGroupBJ(GetUnitsInRectAll(GetPlayableMapRect()), function Trig_ResetPowerBonus_Func003Func002A)
    else
    endif
    if ( Trig_ResetPowerBonus_Func004C() ) then
        call DisableTrigger(gg_trg_LaboratorySpawnExperiments)
        call ResetUnitAnimation(gg_unit_h049_0139)
        set udg_TempUnit=gg_unit_h049_0139
        call PauseUnitForPeriod(udg_TempUnit , 99999999.0)
        call PacificationBotDisable()
    else
    endif
endfunction

//===========================================================================
function InitTrig_ResetPowerBonus takes nothing returns nothing
    set gg_trg_ResetPowerBonus=CreateTrigger()
    call TriggerAddAction(gg_trg_ResetPowerBonus, function Trig_ResetPowerBonus_Actions)
endfunction

//===========================================================================
// Trigger: AmbientPower
//===========================================================================
function Trig_AmbientPower_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A06G' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AmbientPower_Func005A takes nothing returns nothing
    call CreateNUnitsAtLoc(1, 'e01U', GetEnumPlayer(), udg_HoldZone, bj_UNIT_FACING)
endfunction

function Trig_AmbientPower_Actions takes nothing returns nothing
    call TriggerExecute(gg_trg_ResetPowerBonus)
    set udg_Power_Bonus=1
    call ForForce(GetPlayersAll(), function Trig_AmbientPower_Func005A)
    call CreateNUnitsAtLoc(1, 'e01U', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_HoldZone, bj_UNIT_FACING)
    call PlaySoundBJ(gg_snd_LightningShieldTarget)
endfunction

//===========================================================================
function InitTrig_AmbientPower takes nothing returns nothing
    set gg_trg_AmbientPower=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_AmbientPower, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_AmbientPower, Condition(function Trig_AmbientPower_Conditions))
    call TriggerAddAction(gg_trg_AmbientPower, function Trig_AmbientPower_Actions)
endfunction

//===========================================================================
// Trigger: ExplorerPower
//===========================================================================
function Trig_ExplorerPower_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A06D' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ExplorerPower_Func005Func001C takes nothing returns boolean
    if not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) ) then // INLINED!!
    return false
    endif
    return true
endfunction

function Trig_ExplorerPower_Func005A takes nothing returns nothing
    if ( Trig_ExplorerPower_Func005Func001C() ) then
        call UnitAddAbilityBJ('A06K', GetEnumUnit())
        call UnitAddAbilityBJ('A06J', GetEnumUnit())
        call UnitAddAbilityBJ('A06I', GetEnumUnit())
    else
    endif
endfunction

function Trig_ExplorerPower_Actions takes nothing returns nothing
    call TriggerExecute(gg_trg_ResetPowerBonus)
    set udg_Power_Bonus=2
    call ForGroupBJ(GetUnitsInRectAll(GetPlayableMapRect()), function Trig_ExplorerPower_Func005A)
    call PlaySoundBJ(gg_snd_LightningShieldTarget)
endfunction

//===========================================================================
function InitTrig_ExplorerPower takes nothing returns nothing
    set gg_trg_ExplorerPower=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ExplorerPower, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ExplorerPower, Condition(function Trig_ExplorerPower_Conditions))
    call TriggerAddAction(gg_trg_ExplorerPower, function Trig_ExplorerPower_Actions)
endfunction

//===========================================================================
// Trigger: StationPower
//===========================================================================
function Trig_StationPower_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A06E' ) ) then
        return false
    endif
    return true
endfunction

function Trig_StationPower_Func006Func001Func002Func003C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h04G' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h02B' ) ) then
        return true
    endif
    return false
endfunction

function Trig_StationPower_Func006Func001Func002C takes nothing returns boolean
    if ( not Trig_StationPower_Func006Func001Func002Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_StationPower_Func006Func001C takes nothing returns boolean
    if not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A072') == 1) ) then // INLINED!!
    return false
    endif
    return true
endfunction

function Trig_StationPower_Func006A takes nothing returns nothing
    if ( Trig_StationPower_Func006Func001C() ) then
        // If overlord or pirates, dont give the buff
        if ( Trig_StationPower_Func006Func001Func002C() ) then
        else
            call UnitAddAbilityBJ('A06M', GetEnumUnit())
            call UnitAddAbilityBJ('A06L', GetEnumUnit())
        endif
    else
    endif
endfunction

function Trig_StationPower_Actions takes nothing returns nothing
    call TriggerExecute(gg_trg_ResetPowerBonus)
    set udg_Power_Bonus=3
    // BLOAT BELOW, EVERY UNIT?! WHY NOT THE SPACE MAP ONLY REEEEEEEEEE
    call ForGroupBJ(GetUnitsInRectAll(GetPlayableMapRect()), function Trig_StationPower_Func006A)
    call IncUnitAbilityLevelSwapped('A005', gg_unit_h007_0027)
    call PlaySoundBJ(gg_snd_LightningShieldTarget)
endfunction

//===========================================================================
function InitTrig_StationPower takes nothing returns nothing
    set gg_trg_StationPower=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_StationPower, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_StationPower, Condition(function Trig_StationPower_Conditions))
    call TriggerAddAction(gg_trg_StationPower, function Trig_StationPower_Actions)
endfunction

//===========================================================================
// Trigger: LaboratoryPower
//===========================================================================
function Trig_LaboratoryPower_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A06F' ) ) then
        return false
    endif
    return true
endfunction

function Trig_LaboratoryPower_Actions takes nothing returns nothing
    call TriggerExecute(gg_trg_ResetPowerBonus)
    set udg_Power_Bonus=4
    call EnableTrigger(gg_trg_LaboratorySpawnExperiments)
    call PlaySoundBJ(gg_snd_LightningShieldTarget)
    call SetUnitAnimation(gg_unit_h049_0139, "work")
    set udg_TempUnit=gg_unit_h049_0139
    call PauseUnitBJ(false, gg_unit_h049_0139)
    call RemoveUnitPeriodPause(udg_TempUnit)
    call PacificationBotEnable()
endfunction

//===========================================================================
function InitTrig_LaboratoryPower takes nothing returns nothing
    set gg_trg_LaboratoryPower=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_LaboratoryPower, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_LaboratoryPower, Condition(function Trig_LaboratoryPower_Conditions))
    call TriggerAddAction(gg_trg_LaboratoryPower, function Trig_LaboratoryPower_Actions)
endfunction

//===========================================================================
// Trigger: LaboratorySpawnExperiments
//===========================================================================
function Trig_LaboratorySpawnExperiments_Func003C takes nothing returns boolean
    if ( not ( GetRandomInt(0, 1) == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_LaboratorySpawnExperiments_Actions takes nothing returns nothing
    set udg_TempPoint=GetRectCenter(gg_rct_ST4EscapePod)
    if ( Trig_LaboratorySpawnExperiments_Func003C() ) then
        call CreateNUnitsAtLoc(1, 'n000', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
    else
        call CreateNUnitsAtLoc(1, 'n001', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
    endif
    call CreateNUnitsAtLoc(1, 'e006', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_LaboratorySpawnExperiments takes nothing returns nothing
    set gg_trg_LaboratorySpawnExperiments=CreateTrigger()
    call DisableTrigger(gg_trg_LaboratorySpawnExperiments)
    call TriggerRegisterTimerEventPeriodic(gg_trg_LaboratorySpawnExperiments, 22.00)
    call TriggerAddAction(gg_trg_LaboratorySpawnExperiments, function Trig_LaboratorySpawnExperiments_Actions)
endfunction

//===========================================================================
// Trigger: GITDeath
//===========================================================================
function Trig_GITDeath_Actions takes nothing returns nothing
    call DestroyTrigger(gg_trg_GITDeath)
    call DestroyTrigger(gg_trg_GIT)
    call BloodTestingWipe()
    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 2.00, "ReplaceableTextures\\CameraMasks\\White_mask.blp", 0, 100.00, 0, 0)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_797")
endfunction

//===========================================================================
function InitTrig_GITDeath takes nothing returns nothing
    set gg_trg_GITDeath=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_GITDeath, gg_unit_h011_0100, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_GITDeath, function Trig_GITDeath_Actions)
endfunction

//===========================================================================
// Trigger: Niffy Lockdown
//
// -14525
// -7230
//===========================================================================
function Trig_Niffy_Lockdown_Func002C takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Niffy_Lockdown_Func003Func013A takes nothing returns nothing
    call SetUnitPositionLoc(GetEnumUnit(), GetRectCenter(gg_rct_ST10))
endfunction

function Trig_Niffy_Lockdown_Func003Func017A takes nothing returns nothing
    call SetUnitPositionLoc(GetEnumUnit(), GetRectCenter(gg_rct_ST10))
endfunction

function Trig_Niffy_Lockdown_Func003Func021A takes nothing returns nothing
    call SetUnitPositionLoc(GetEnumUnit(), GetRectCenter(gg_rct_ST10))
endfunction

function Trig_Niffy_Lockdown_Func003Func035A takes nothing returns nothing
    call SetUnitPositionLoc(GetEnumUnit(), GetRandomLocInRect(gg_rct_Niffy_Lockdown_Start))
    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetEnumUnit()), GetUnitLoc(GetEnumUnit()), 0)
endfunction

function Trig_Niffy_Lockdown_Func003Func039A takes nothing returns nothing
    call SetPlayerTechMaxAllowedSwap('h031', 0, GetEnumPlayer())
    call SetPlayerTechMaxAllowedSwap('h04G', 0, GetEnumPlayer())
    call FogModifierStop(udg_SpaceVisibility[GetConvertedPlayerId(GetEnumPlayer())])
endfunction

function Trig_Niffy_Lockdown_Func003C takes nothing returns boolean
    if ( not ( CountPlayersInForceBJ(GetPlayersAll()) <= 5 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Niffy_Lockdown_Actions takes nothing returns nothing
    if ( Trig_Niffy_Lockdown_Func002C() ) then
        return
    else
    endif
    if ( Trig_Niffy_Lockdown_Func003C() ) then
        // Niffy Lockdown!
        set udg_IsNiffyLockdownActive=true
        // ---
        // Max Evil EP
        set udg_UpgradePointsAlien=4000.00
        set udg_UpgradePointsMutant=4000.00
        // Create Solace Shop
        set udg_TempPoint=Location(- 14550.00, - 7510.00)
        call CreateNUnitsAtLoc(1, 'h017', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
        call RemoveLocation(udg_TempPoint)
        // Move all space pods away
        set udg_TempUnitGroup=GetUnitsOfTypeIdAll('h02O')
        call ForGroupBJ(udg_TempUnitGroup, function Trig_Niffy_Lockdown_Func003Func013A)
        call DestroyGroup(udg_TempUnitGroup)
        // Move all raptors away
        set udg_TempUnitGroup=GetUnitsOfTypeIdAll('h001')
        call ForGroupBJ(udg_TempUnitGroup, function Trig_Niffy_Lockdown_Func003Func017A)
        call DestroyGroup(udg_TempUnitGroup)
        // Move all obdas away
        set udg_TempUnitGroup=GetUnitsOfTypeIdAll('h02K')
        call ForGroupBJ(udg_TempUnitGroup, function Trig_Niffy_Lockdown_Func003Func021A)
        call DestroyGroup(udg_TempUnitGroup)
        // Random Events not triggering
        set udg_RandomEvent_On[2]=true
        set udg_RandomEvent_On[4]=true
        set udg_RandomEvent_On[5]=true
        set udg_RandomEvent_On[9]=true
        set udg_RandomEvent_On[10]=true
        set udg_RandomEvent_On[12]=true
        set udg_RandomEvent_On[13]=true
        // Wipe blood tests
        call BloodTestingWipe()
        // Move players to starting location (and move camera there)
        set udg_TempUnitGroup=GetUnitsOfTypeIdAll('h00H')
        call ForGroupBJ(udg_TempUnitGroup, function Trig_Niffy_Lockdown_Func003Func035A)
        call DestroyGroup(udg_TempUnitGroup)
        // Disable Space Alien and Space Overlord
        // Credits to tal for this
        call ForForce(GetPlayersAll(), function Trig_Niffy_Lockdown_Func003Func039A)
        // Say to players that its niffy lockdown
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5194")
    else
    endif
endfunction

//===========================================================================
function InitTrig_Niffy_Lockdown takes nothing returns nothing
    set gg_trg_Niffy_Lockdown=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_Niffy_Lockdown, 2.00)
    call TriggerAddAction(gg_trg_Niffy_Lockdown, function Trig_Niffy_Lockdown_Actions)
endfunction

//===========================================================================
// Trigger: ST5mInit
//===========================================================================
function Trig_ST5mInit_Func003A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST5V1)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST5V10)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST5V11)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST5V12)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST5V13)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST5V2)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST5V3)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST5V4)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST5V5)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST5V6)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST5V7)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST5V8)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST5V9)
    call DestroyFogModifier(GetLastCreatedFogModifier())
endfunction

function Trig_ST5mInit_Actions takes nothing returns nothing
       call DestroyTrigger(GetTriggeringTrigger())
    call ForForce(GetPlayersAll(), function Trig_ST5mInit_Func003A)
    call RemoveRect(gg_rct_ST5V1)
    call RemoveRect(gg_rct_ST5V10)
    call RemoveRect(gg_rct_ST5V11)
    call RemoveRect(gg_rct_ST5V12)
    call RemoveRect(gg_rct_ST5V13)
    call RemoveRect(gg_rct_ST5V2)
    call RemoveRect(gg_rct_ST5V3)
    call RemoveRect(gg_rct_ST5V4)
    call RemoveRect(gg_rct_ST5V5)
    call RemoveRect(gg_rct_ST5V6)
    call RemoveRect(gg_rct_ST5V7)
    call RemoveRect(gg_rct_ST5V8)
    call RemoveRect(gg_rct_ST5V9)
    set udg_All_Dock[17]=gg_dest_DTrx_6090
    set udg_All_Dock[18]=gg_dest_DTrx_6101
    set udg_All_Dock[19]=gg_dest_DTrx_6104
    set udg_All_Dock[20]=gg_dest_DTrx_6115
    set udg_All_Dock[39]=gg_dest_DTrx_2061
    set udg_All_Dock[40]=gg_dest_DTrx_2066
    set bj_forLoopAIndex=17
    set bj_forLoopAIndexEnd=20
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, udg_All_Dock[GetForLoopIndexA()])
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    set bj_forLoopAIndex=39
    set bj_forLoopAIndexEnd=40
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, udg_All_Dock[GetForLoopIndexA()])
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call SetUnitTimeScalePercent(gg_unit_h03O_0208, 25.00)
    call SetUnitVertexColorBJ(gg_unit_h03O_0208, 0.00, 0.00, 0.00, 100.00)
    call SetUnitVertexColorBJ(gg_unit_e012_0074, 100.00, 100.00, 100.00, 100.00)
    call SetUnitVertexColorBJ(gg_unit_e012_0092, 100.00, 100.00, 100.00, 100.00)
endfunction

//===========================================================================
function InitTrig_ST5mInit takes nothing returns nothing
    set gg_trg_ST5mInit=CreateTrigger()
    call TriggerAddAction(gg_trg_ST5mInit, function Trig_ST5mInit_Actions)
endfunction

//===========================================================================
// Trigger: ST5Death
//===========================================================================
function Trig_ST5Death_Func018A takes nothing returns nothing
    call EraseUnit(GetEnumUnit() , GetKillingUnit())
    set udg_TempPoint=GetUnitLoc(GetEnumUnit())
    call CreateNUnitsAtLoc(1, 'e001', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    call RemoveLocation(udg_TempPoint)
endfunction

function Trig_ST5Death_Func020A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_ST5)
endfunction

function Trig_ST5Death_Actions takes nothing returns nothing
       call DestroyTrigger(GetTriggeringTrigger())
    call DestroyTrigger(gg_trg_ST5Abilities)
    call DestroyTrigger(gg_trg_ST5Attack)
    call DestroyTrigger(gg_trg_ST5AttackEnd)
    call DestroyTrigger(gg_trg_SwaggerTeleportToPlanet)
    call DestroyTrigger(gg_trg_SwaggerTeleportToSwagger)
    call RemoveUnit(gg_unit_h03O_0208)
    call RemoveUnit(gg_unit_e012_0092)
    call DestroyTrigger(gg_trg_ST5Abilities)
    call DestroyTrigger(gg_trg_Autopilot)
    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 7.00, "ReplaceableTextures\\CameraMasks\\DreamFilter_Mask.blp", 100.00, 0, 0, 0)
    call PlaySoundBJ(gg_snd_NecropolisUpgrade1)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2679")
    set udg_TempPoint=GetUnitLoc(GetDyingUnit())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=4
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempPoint2=PolarProjectionBJ(udg_TempPoint, GetRandomDirectionDeg(), GetRandomDirectionDeg())
        call CreateNUnitsAtLoc(1, 'e01E', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, GetRandomDirectionDeg())
        call RemoveLocation(udg_TempPoint2)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveLocation(udg_TempPoint)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST5), function Trig_ST5Death_Func018A)
    call PolledWait(5.00)
    call ForForce(GetPlayersAll(), function Trig_ST5Death_Func020A)
    call RectOfDoom(gg_rct_ST5)
endfunction

//===========================================================================
function InitTrig_ST5Death takes nothing returns nothing
    set gg_trg_ST5Death=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST5Death, gg_unit_h00X_0049, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_ST5Death, function Trig_ST5Death_Actions)
endfunction

//===========================================================================
// Trigger: ST5Attack
//===========================================================================
function Trig_ST5Attack_Conditions takes nothing returns boolean
    if ( not ( GetEventDamage() >= 1.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST5Attack_Func004C takes nothing returns boolean
    if ( not ( udg_ST5_TakingDamage == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST5Attack_Func007Func001Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST5Attack_Func007Func001C takes nothing returns boolean
    if ( not ( GetEnumUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] ) ) then
        return false
    endif
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST5Attack_Func007A takes nothing returns nothing
    if ( Trig_ST5Attack_Func007Func001C() ) then
        if ( Trig_ST5Attack_Func007Func001Func001C() ) then
            call ForceAddPlayerSimple(udg_Parasite, udg_ST5_PGroup)
            call CameraSetEQNoiseForPlayer(udg_Parasite, 3)
        else
            call ForceAddPlayerSimple(GetOwningPlayer(GetEnumUnit()), udg_ST5_PGroup)
            call CameraSetEQNoiseForPlayer(GetOwningPlayer(GetEnumUnit()), 3)
        endif
    else
    endif
endfunction

function Trig_ST5Attack_Func008A takes nothing returns nothing
    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 5.00, "|cffFF0000U.S.I. Swagger under attack!|r")
endfunction

function Trig_ST5Attack_Func010Func001C takes nothing returns boolean
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetEnumPlayer())] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST5Attack_Func010A takes nothing returns nothing
    if ( Trig_ST5Attack_Func010Func001C() ) then
        call CameraClearNoiseForPlayer(GetEnumPlayer())
    else
    endif
endfunction

function Trig_ST5Attack_Actions takes nothing returns nothing
    call DisableTrigger(GetTriggeringTrigger())
    if ( Trig_ST5Attack_Func004C() ) then
        call SetStackedSoundBJ(true, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST5)
        set udg_ST5_TakingDamage=true
    else
    endif
    call StartTimerBJ(udg_ST5_ResetAlarm, false, 10.00)
    call ForceClear(udg_ST5_PGroup)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST5), function Trig_ST5Attack_Func007A)
    call ForForce(udg_ST5_PGroup, function Trig_ST5Attack_Func008A)
    call PolledWait(5.00)
    call ForForce(udg_ST5_PGroup, function Trig_ST5Attack_Func010A)
    call EnableTrigger(gg_trg_ST5Attack)
endfunction

//===========================================================================
function InitTrig_ST5Attack takes nothing returns nothing
    set gg_trg_ST5Attack=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST5Attack, gg_unit_h00X_0049, EVENT_UNIT_DAMAGED)
    call TriggerAddCondition(gg_trg_ST5Attack, Condition(function Trig_ST5Attack_Conditions))
    call TriggerAddAction(gg_trg_ST5Attack, function Trig_ST5Attack_Actions)
endfunction

//===========================================================================
// Trigger: ST5AttackEnd
//===========================================================================
function Trig_ST5AttackEnd_Actions takes nothing returns nothing
    set udg_ST5_TakingDamage=false
    call SetStackedSoundBJ(false, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST5)
endfunction

//===========================================================================
function InitTrig_ST5AttackEnd takes nothing returns nothing
    set gg_trg_ST5AttackEnd=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_ST5AttackEnd, udg_ST5_ResetAlarm)
    call TriggerAddAction(gg_trg_ST5AttackEnd, function Trig_ST5AttackEnd_Actions)
endfunction

//===========================================================================
// Trigger: ST5Abilities
//===========================================================================
function Trig_ST5Abilities_Func003Func001Func001C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04Q' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST5Abilities_Func003Func001C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04O' ) ) then
        return false
    endif
    if ( not ( GetSpellTargetUnit() == gg_unit_h008_0196 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST5Abilities_Func003Func005Func001Func002Func001001001 takes nothing returns boolean
    return ( GetFilterPlayer() == udg_Parasite )
endfunction

function Trig_ST5Abilities_Func003Func005Func001Func002Func002001001 takes nothing returns boolean
    return ( GetFilterPlayer() == GetOwningPlayer(GetTriggerUnit()) )
endfunction

function Trig_ST5Abilities_Func003Func005Func001Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetTriggerUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST5Abilities_Func003Func005Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_AGGRESSIVE) ) ) then
        return false
    endif
    if ( not ( RectContainsUnit(gg_rct_Space, GetEnumUnit()) == false ) ) then
        return false
    endif
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == GetEnumUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST5Abilities_Func003Func005Func002Func002Func001001001 takes nothing returns boolean
    return ( udg_Parasite == GetFilterPlayer() )
endfunction

function Trig_ST5Abilities_Func003Func005Func002Func002Func002001001 takes nothing returns boolean
    return ( GetOwningPlayer(GetSpellAbilityUnit()) == GetFilterPlayer() )
endfunction

function Trig_ST5Abilities_Func003Func005Func002Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST5Abilities_Func003Func005Func002C takes nothing returns boolean
    if not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) and ShipHasUnits(GetEnumUnit()) ) then // INLINED!!
    return false
    endif
    return true
endfunction

function Trig_ST5Abilities_Func003Func005A takes nothing returns nothing
    if ( Trig_ST5Abilities_Func003Func005Func001C() ) then
        set udg_TempPoint=GetUnitLoc(GetEnumUnit())
        if ( Trig_ST5Abilities_Func003Func005Func001Func002C() ) then
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST5Abilities_Func003Func005Func001Func002Func002001001)), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 100, 100)
        else
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST5Abilities_Func003Func005Func001Func002Func001001001)), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 100, 100)
        endif
        call RemoveLocation(udg_TempPoint)
    else
    endif
    if ( Trig_ST5Abilities_Func003Func005Func002C() ) then
        set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
        if ( Trig_ST5Abilities_Func003Func005Func002Func002C() ) then
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST5Abilities_Func003Func005Func002Func002Func002001001)), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100.00, 25.00, 50.00)
        else
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_ST5Abilities_Func003Func005Func002Func002Func001001001)), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100.00, 25.00, 50.00)
        endif
        call RemoveLocation(udg_TempPoint2)
    else
    endif
endfunction

function Trig_ST5Abilities_Func003C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A000' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST5Abilities_Actions takes nothing returns nothing
    if ( Trig_ST5Abilities_Func003C() ) then
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_727")
        set udg_TempRect=gg_rct_ST5
        set udg_TempUnitGroup=GetUnitsInRectAll(udg_TempRect)
        call ForGroupBJ(udg_TempUnitGroup, function Trig_ST5Abilities_Func003Func005A)
            call DestroyGroup(udg_TempUnitGroup)
    else
        if ( Trig_ST5Abilities_Func003Func001C() ) then
            call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2475")
            call ShowUnitHide(gg_unit_h00X_0049)
            call PauseUnitBJ(true, gg_unit_h00X_0049)
            call SetUnitVertexColorBJ(gg_unit_h03O_0208, 0.00, 0.00, 0.00, 25.00)
            call SetUnitVertexColorBJ(gg_unit_e012_0074, 100.00, 100.00, 100.00, 0.00)
            call SetUnitVertexColorBJ(gg_unit_e012_0092, 100.00, 100.00, 100.00, 0.00)
            call UnitAddAbilityBJ('A04Q', gg_unit_h00Y_0050)
            set udg_Swagger_Grounded=true
            call EnableTrigger(gg_trg_SwaggerTeleportToPlanet)
            call EnableTrigger(gg_trg_SwaggerTeleportToSwagger)
        else
            if ( Trig_ST5Abilities_Func003Func001Func001C() ) then
                call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2491")
                call UnitRemoveAbilityBJ('A04Q', GetSpellAbilityUnit())
                call StartTimerBJ(udg_SwaggerLaunchTimer, false, 45.00)
                call CreateTimerDialogBJ(GetLastCreatedTimerBJ(), "TRIGSTR_2492")
                set udg_SwaggerLaunchTimerWindow=GetLastCreatedTimerDialogBJ()
                call PolledWait(45.00)
                set udg_Swagger_Grounded=false
                call DestroyTimerDialogBJ(udg_SwaggerLaunchTimerWindow)
                call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2494")
                call ShowUnitShow(gg_unit_h00X_0049)
                call PauseUnitBJ(false, gg_unit_h00X_0049)
                set udg_TempPoint=GetUnitLoc(gg_unit_h008_0196)
                call SetUnitPositionLoc(gg_unit_h00X_0049, udg_TempPoint)
                call RemoveLocation(udg_TempPoint)
                call SetUnitVertexColorBJ(gg_unit_h03O_0208, 100.00, 100.00, 100.00, 100.00)
                call SetUnitVertexColorBJ(gg_unit_e012_0074, 100.00, 100.00, 100.00, 100.00)
                call SetUnitVertexColorBJ(gg_unit_e012_0092, 100.00, 100.00, 100.00, 100.00)
                call DisableTrigger(gg_trg_SwaggerTeleportToPlanet)
                call DisableTrigger(gg_trg_SwaggerTeleportToSwagger)
            else
            endif
        endif
    endif
endfunction

//===========================================================================
function InitTrig_ST5Abilities takes nothing returns nothing
    set gg_trg_ST5Abilities=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST5Abilities, gg_unit_h00Y_0050, EVENT_UNIT_SPELL_EFFECT)
    call TriggerRegisterUnitEvent(gg_trg_ST5Abilities, gg_unit_h00X_0049, EVENT_UNIT_SPELL_EFFECT)
    call TriggerAddAction(gg_trg_ST5Abilities, function Trig_ST5Abilities_Actions)
endfunction

//===========================================================================
// Trigger: SwaggerTeleportToPlanet
//===========================================================================
function Trig_SwaggerTeleportToPlanet_Func002Func006Func002C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'h01S' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetTriggerUnit()) == 'n003' ) ) then
        return true
    endif
    return false
endfunction

function Trig_SwaggerTeleportToPlanet_Func002Func006C takes nothing returns boolean
    if ( not Trig_SwaggerTeleportToPlanet_Func002Func006Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_SwaggerTeleportToPlanet_Func002C takes nothing returns boolean
    if ( not ( GetUnitPointValue(GetTriggerUnit()) != 37 ) ) then
        return false
    endif
    return true
endfunction

function Trig_SwaggerTeleportToPlanet_Actions takes nothing returns nothing
    if ( Trig_SwaggerTeleportToPlanet_Func002C() ) then
        call DisableTrigger(gg_trg_SwaggerTeleportToSwagger)
        set udg_TempPoint=GetRectCenter(gg_rct_SwaggerLandEnter)
        call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
        // For spammy units e.g. slugglies or overlord scarabs
        // the camera shouldnt change!
        if ( Trig_SwaggerTeleportToPlanet_Func002Func006C() ) then
        else
            call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
        endif
        call CreateNUnitsAtLoc(1, 'e006', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
        call SetUnitScalePercent(GetLastCreatedUnit(), 75.00, 75.00, 75.00)
        call RemoveLocation(udg_TempPoint)
        // Necessary, though annoying because without it units would be instantly transported between entry points.
        call TriggerSleepAction(0.20)
        call EnableTrigger(gg_trg_SwaggerTeleportToSwagger)
    else
    endif
endfunction

//===========================================================================
function InitTrig_SwaggerTeleportToPlanet takes nothing returns nothing
    set gg_trg_SwaggerTeleportToPlanet=CreateTrigger()
    call DisableTrigger(gg_trg_SwaggerTeleportToPlanet)
    call TriggerRegisterEnterRectSimple(gg_trg_SwaggerTeleportToPlanet, gg_rct_SwaggerLandExit)
    call TriggerAddAction(gg_trg_SwaggerTeleportToPlanet, function Trig_SwaggerTeleportToPlanet_Actions)
endfunction

//===========================================================================
// Trigger: SwaggerTeleportToSwagger
//===========================================================================
function Trig_SwaggerTeleportToSwagger_Func002C takes nothing returns boolean
    if ( not ( GetUnitPointValue(GetTriggerUnit()) != 37 ) ) then
        return false
    endif
    return true
endfunction

function Trig_SwaggerTeleportToSwagger_Actions takes nothing returns nothing
    if ( Trig_SwaggerTeleportToSwagger_Func002C() ) then
        call DisableTrigger(gg_trg_SwaggerTeleportToPlanet)
        set udg_TempPoint=GetRectCenter(gg_rct_SwaggerLandExit)
        call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
        call CreateNUnitsAtLoc(1, 'e006', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
        call SetUnitScalePercent(GetLastCreatedUnit(), 75.00, 75.00, 75.00)
        call RemoveLocation(udg_TempPoint)
        call TriggerSleepAction(0.20)
        call EnableTrigger(gg_trg_SwaggerTeleportToPlanet)
    else
    endif
endfunction

//===========================================================================
function InitTrig_SwaggerTeleportToSwagger takes nothing returns nothing
    set gg_trg_SwaggerTeleportToSwagger=CreateTrigger()
    call DisableTrigger(gg_trg_SwaggerTeleportToSwagger)
    call TriggerRegisterEnterRectSimple(gg_trg_SwaggerTeleportToSwagger, gg_rct_SwaggerLandEnter)
    call TriggerAddAction(gg_trg_SwaggerTeleportToSwagger, function Trig_SwaggerTeleportToSwagger_Actions)
endfunction

//===========================================================================
// Trigger: Autopilot
//===========================================================================
function Trig_Autopilot_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02P' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Autopilot_Actions takes nothing returns nothing
    call DisplayTimedTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, 30, "|cff00FF00Autopilot engaged.|r")
    set udg_TempPoint=GetRectCenter(gg_rct_ST5Control)
    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetSpellAbilityUnit()), udg_TempPoint, 0)
    call RemoveLocation(udg_TempPoint)
    call SetUnitOwner(gg_unit_h00Y_0050, Player(PLAYER_NEUTRAL_PASSIVE), true)
    call SetUnitOwner(gg_unit_h00X_0049, Player(PLAYER_NEUTRAL_PASSIVE), true)
    set udg_TempPoint2=GetUnitLoc(gg_unit_h00X_0049)
    set udg_TempPoint=PolarProjectionBJ(udg_TempPoint2, 5000.00, GetUnitFacing(gg_unit_h00X_0049))
    call IssuePointOrderLocBJ(gg_unit_h00X_0049, "move", udg_TempPoint)
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
endfunction

//===========================================================================
function InitTrig_Autopilot takes nothing returns nothing
    set gg_trg_Autopilot=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_Autopilot, gg_unit_h00X_0049, EVENT_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Autopilot, Condition(function Trig_Autopilot_Conditions))
    call TriggerAddAction(gg_trg_Autopilot, function Trig_Autopilot_Actions)
endfunction

//===========================================================================
// Trigger: ST6Init
//===========================================================================
function Trig_ST6Init_Func003A takes nothing returns nothing
    call SetUnitAnimation(GetEnumUnit(), "death")
endfunction

function Trig_ST6Init_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_LostStation), function Trig_ST6Init_Func003A)
    set udg_All_Dock[25]=gg_dest_DTrx_9308
    set udg_All_Dock[26]=gg_dest_DTrx_9425
    set bj_forLoopAIndex=25
    set bj_forLoopAIndexEnd=26
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, udg_All_Dock[GetForLoopIndexA()])
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
endfunction

//===========================================================================
function InitTrig_ST6Init takes nothing returns nothing
    set gg_trg_ST6Init=CreateTrigger()
    call TriggerAddAction(gg_trg_ST6Init, function Trig_ST6Init_Actions)
endfunction

//===========================================================================
// Trigger: ST6Console
//===========================================================================
function Trig_ST6Console_Actions takes nothing returns nothing
    call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "|cffFF8040Activation code |r" + I2S(udg_Secret_ControlCode) + "|cffFF8040. Please proceed with caution.|r")
endfunction

//===========================================================================
function InitTrig_ST6Console takes nothing returns nothing
    set gg_trg_ST6Console=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_ST6Console, gg_rct_ST6Console)
    call TriggerAddAction(gg_trg_ST6Console, function Trig_ST6Console_Actions)
endfunction

//===========================================================================
// Trigger: ST6DeathNotification
//===========================================================================
function Trig_ST6DeathNotification_Actions takes nothing returns nothing
    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 7.00, "ReplaceableTextures\\CameraMasks\\DreamFilter_Mask.blp", 100.00, 0, 0, 0)
    call PlaySoundBJ(gg_snd_NecropolisUpgrade1)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5198")
    call TriggerExecute(gg_trg_ST6Death)
endfunction

//===========================================================================
function InitTrig_ST6DeathNotification takes nothing returns nothing
    set gg_trg_ST6DeathNotification=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST6DeathNotification, gg_unit_h029_0114, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_ST6DeathNotification, function Trig_ST6DeathNotification_Actions)
endfunction

//===========================================================================
// Trigger: ST6Death
//===========================================================================
function Trig_ST6Death_Func001A takes nothing returns nothing
    call EraseUnit(GetEnumUnit() , GetKillingUnit())
    set udg_TempPoint=GetUnitLoc(GetEnumUnit())
    call CreateNUnitsAtLoc(1, 'e001', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    call RemoveLocation(udg_TempPoint)
endfunction

function Trig_ST6Death_Func002A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_LostStation)
endfunction

function Trig_ST6Death_Actions takes nothing returns nothing
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_LostStation), function Trig_ST6Death_Func001A)
    call ForForce(GetPlayersAll(), function Trig_ST6Death_Func002A)
    call RectOfDoom(gg_rct_LostStation)
endfunction

//===========================================================================
function InitTrig_ST6Death takes nothing returns nothing
    set gg_trg_ST6Death=CreateTrigger()
    call TriggerAddAction(gg_trg_ST6Death, function Trig_ST6Death_Actions)
endfunction

//===========================================================================
// Trigger: ST7Init
//===========================================================================
function Trig_ST7Init_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_All_Dock[27]=gg_dest_DTrx_9311
    set udg_All_Dock[28]=gg_dest_DTrx_9316
    set bj_forLoopAIndex=27
    set bj_forLoopAIndexEnd=28
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, udg_All_Dock[GetForLoopIndexA()])
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    set udg_All_Dock[45]=gg_dest_DTrx_2150
    set udg_All_Dock[46]=gg_dest_DTrx_2156
    set bj_forLoopAIndex=45
    set bj_forLoopAIndexEnd=46
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, udg_All_Dock[GetForLoopIndexA()])
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
endfunction

//===========================================================================
function InitTrig_ST7Init takes nothing returns nothing
    set gg_trg_ST7Init=CreateTrigger()
    call TriggerAddAction(gg_trg_ST7Init, function Trig_ST7Init_Actions)
endfunction

//===========================================================================
// Trigger: ST7Death
//===========================================================================
function Trig_ST7Death_Func008A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_PirateShip)
endfunction

function Trig_ST7Death_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1355")
    call StartTimerBJ(udg_PirateShip_DestructionTimer, false, 40.00)
    call CreateTimerDialogBJ(GetLastCreatedTimerBJ(), "TRIGSTR_1354")
    set udg_PirateShip_CountdownWindow=GetLastCreatedTimerDialogBJ()
    call PolledWait(5.00)
    call ForForce(GetPlayersAll(), function Trig_ST7Death_Func008A)
endfunction

//===========================================================================
function InitTrig_ST7Death takes nothing returns nothing
    set gg_trg_ST7Death=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST7Death, gg_unit_h02A_0115, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_ST7Death, function Trig_ST7Death_Actions)
endfunction

//===========================================================================
// Trigger: DestroyST7
//===========================================================================
function Trig_DestroyST7_Func006A takes nothing returns nothing
    call EraseUnit(GetEnumUnit() , GetKillingUnit())
endfunction

function Trig_DestroyST7_Func010A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_PirateShip)
endfunction

function Trig_DestroyST7_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call DestroyTrigger(gg_trg_ST7Death)
    call KillUnit(gg_unit_h02B_0116)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_PirateShip), function Trig_DestroyST7_Func006A)
    call DestroyTimerDialogBJ(udg_PirateShip_CountdownWindow)
    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 5.00, "ReplaceableTextures\\CameraMasks\\DreamFilter_Mask.blp", 100.00, 0, 0, 0)
    call PolledWait(5.00)
    call ForForce(GetPlayersAll(), function Trig_DestroyST7_Func010A)
    call RectOfDoom(gg_rct_PirateShip)
endfunction

//===========================================================================
function InitTrig_DestroyST7 takes nothing returns nothing
    set gg_trg_DestroyST7=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_DestroyST7, udg_PirateShip_DestructionTimer)
    call TriggerRegisterUnitEvent(gg_trg_DestroyST7, gg_unit_h02B_0116, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_DestroyST7, function Trig_DestroyST7_Actions)
endfunction

//===========================================================================
// Trigger: ST7Control
//===========================================================================
function Trig_ST7Control_Conditions takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetTriggerUnit()) != Player(PLAYER_NEUTRAL_AGGRESSIVE) ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetTriggerUnit()) != Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    if ( not ( IsUnitIllusionBJ(GetTriggerUnit()) == false ) ) then
        return false
    endif
    if ( not ( GetItemTypeId(GetItemOfTypeFromUnitBJ(GetTriggerUnit(), 'I012')) == 'I012' ) ) then
        return false
    endif
    if ( not ( GetUnitPointValue(GetTriggerUnit()) != 37 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST7Control_Actions takes nothing returns nothing
    call SetUnitOwner(gg_unit_h02B_0116, GetOwningPlayer(GetTriggerUnit()), false)
    call SelectUnitForPlayerSingle(gg_unit_h02B_0116, GetOwningPlayer(GetTriggerUnit()))
    set udg_TempPoint=GetUnitLoc(gg_unit_h02B_0116)
    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_ST7Control takes nothing returns nothing
    set gg_trg_ST7Control=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_ST7Control, gg_rct_PirateShipControl)
    call TriggerAddCondition(gg_trg_ST7Control, Condition(function Trig_ST7Control_Conditions))
    call TriggerAddAction(gg_trg_ST7Control, function Trig_ST7Control_Actions)
endfunction

//===========================================================================
// Trigger: ST7ControlLoss
//===========================================================================
function Trig_ST7ControlLoss_Conditions takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetTriggerUnit()) != Player(PLAYER_NEUTRAL_AGGRESSIVE) ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetTriggerUnit()) != Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    if ( not ( IsUnitIllusionBJ(GetTriggerUnit()) == false ) ) then
        return false
    endif
    if ( not ( GetItemTypeId(GetItemOfTypeFromUnitBJ(GetTriggerUnit(), 'I012')) == 'I012' ) ) then
        return false
    endif
    if ( not ( GetUnitPointValue(GetTriggerUnit()) != 37 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST7ControlLoss_Actions takes nothing returns nothing
    call SetUnitOwner(gg_unit_h02B_0116, Player(PLAYER_NEUTRAL_AGGRESSIVE), false)
endfunction

//===========================================================================
function InitTrig_ST7ControlLoss takes nothing returns nothing
    set gg_trg_ST7ControlLoss=CreateTrigger()
    call TriggerRegisterLeaveRectSimple(gg_trg_ST7ControlLoss, gg_rct_PirateShipControl)
    call TriggerAddCondition(gg_trg_ST7ControlLoss, Condition(function Trig_ST7ControlLoss_Conditions))
    call TriggerAddAction(gg_trg_ST7ControlLoss, function Trig_ST7ControlLoss_Actions)
endfunction

//===========================================================================
// Trigger: PirateCaptainDeath
//===========================================================================
function Trig_PirateCaptainDeath_Actions takes nothing returns nothing
    set udg_SpaceAI_PirateCaptainAlive=false
    // With this boolean, the AI won't touch the pirate ship
endfunction

//===========================================================================
function InitTrig_PirateCaptainDeath takes nothing returns nothing
    set gg_trg_PirateCaptainDeath=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_PirateCaptainDeath, gg_unit_h02C_0124, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_PirateCaptainDeath, function Trig_PirateCaptainDeath_Actions)
endfunction

//===========================================================================
// Trigger: ST8mInit
//===========================================================================
function Trig_ST8mInit_Func005A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST8)
    call DestroyFogModifier(GetLastCreatedFogModifier())
endfunction

function Trig_ST8mInit_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_TempUnit=gg_unit_h04F_0260
    set udg_TempUnit2=gg_unit_h04E_0259
    call GenConsole(udg_TempUnit , udg_TempUnit2 , gg_rct_ST8Control)
    call ForForce(GetPlayersAll(), function Trig_ST8mInit_Func005A)
endfunction

//===========================================================================
function InitTrig_ST8mInit takes nothing returns nothing
    set gg_trg_ST8mInit=CreateTrigger()
    call TriggerAddAction(gg_trg_ST8mInit, function Trig_ST8mInit_Actions)
endfunction

//===========================================================================
// Trigger: ST8Attack
//===========================================================================
function Trig_ST8Attack_Conditions takes nothing returns boolean
    if ( not ( GetEventDamage() >= 1.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST8Attack_Func004C takes nothing returns boolean
    if ( not ( udg_ST8_TakingDamage == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST8Attack_Func007Func001Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST8Attack_Func007Func001C takes nothing returns boolean
    if ( not ( GetEnumUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] ) ) then
        return false
    endif
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST8Attack_Func007A takes nothing returns nothing
    if ( Trig_ST8Attack_Func007Func001C() ) then
        if ( Trig_ST8Attack_Func007Func001Func001C() ) then
            call ForceAddPlayerSimple(udg_Parasite, udg_ST8_PGroup)
            call CameraSetEQNoiseForPlayer(udg_Parasite, 3)
        else
            call ForceAddPlayerSimple(GetOwningPlayer(GetEnumUnit()), udg_ST8_PGroup)
            call CameraSetEQNoiseForPlayer(GetOwningPlayer(GetEnumUnit()), 3)
        endif
    else
    endif
endfunction

function Trig_ST8Attack_Func008A takes nothing returns nothing
    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 5.00, "|cffFF0000Calipea station under attack!|r")
endfunction

function Trig_ST8Attack_Func010Func001C takes nothing returns boolean
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetEnumPlayer())] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST8Attack_Func010A takes nothing returns nothing
    if ( Trig_ST8Attack_Func010Func001C() ) then
        call CameraClearNoiseForPlayer(GetEnumPlayer())
    else
    endif
endfunction

function Trig_ST8Attack_Actions takes nothing returns nothing
    call DisableTrigger(GetTriggeringTrigger())
    if ( Trig_ST8Attack_Func004C() ) then
        call SetStackedSoundBJ(true, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST8)
        set udg_ST8_TakingDamage=true
    else
    endif
    call StartTimerBJ(udg_ST8_ResetAlarm, false, 10.00)
    call ForceClear(udg_ST8_PGroup)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST8), function Trig_ST8Attack_Func007A)
    call ForForce(udg_ST8_PGroup, function Trig_ST8Attack_Func008A)
    call PolledWait(5.00)
    call ForForce(udg_ST8_PGroup, function Trig_ST8Attack_Func010A)
    call EnableTrigger(gg_trg_ST8Attack)
endfunction

//===========================================================================
function InitTrig_ST8Attack takes nothing returns nothing
    set gg_trg_ST8Attack=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST8Attack, gg_unit_h04E_0259, EVENT_UNIT_DAMAGED)
    call TriggerAddCondition(gg_trg_ST8Attack, Condition(function Trig_ST8Attack_Conditions))
    call TriggerAddAction(gg_trg_ST8Attack, function Trig_ST8Attack_Actions)
endfunction

//===========================================================================
// Trigger: ST8AttackEnd
//===========================================================================
function Trig_ST8AttackEnd_Actions takes nothing returns nothing
    set udg_ST8_TakingDamage=false
    call SetStackedSoundBJ(false, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST8)
endfunction

//===========================================================================
function InitTrig_ST8AttackEnd takes nothing returns nothing
    set gg_trg_ST8AttackEnd=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_ST8AttackEnd, udg_ST8_ResetAlarm)
    call TriggerAddAction(gg_trg_ST8AttackEnd, function Trig_ST8AttackEnd_Actions)
endfunction

//===========================================================================
// Trigger: ST8Death
//===========================================================================
function Trig_ST8Death_Func010A takes nothing returns nothing
    call EraseUnit(GetEnumUnit() , GetKillingUnit())
    set udg_TempPoint=GetUnitLoc(GetEnumUnit())
    call CreateNUnitsAtLoc(1, 'e001', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    call RemoveLocation(udg_TempPoint)
endfunction

function Trig_ST8Death_Func012A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_ST8)
endfunction

function Trig_ST8Death_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call DestroyTrigger(gg_trg_CalipoaAttack)
    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 7.00, "ReplaceableTextures\\CameraMasks\\DreamFilter_Mask.blp", 100.00, 0, 0, 0)
    call PlaySoundBJ(gg_snd_NecropolisUpgrade1)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_3540")
    set udg_TempPoint=GetUnitLoc(GetDyingUnit())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=2
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempPoint2=PolarProjectionBJ(udg_TempPoint, GetRandomDirectionDeg(), GetRandomDirectionDeg())
        call CreateNUnitsAtLoc(1, 'e01E', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, GetRandomDirectionDeg())
        call SetUnitAnimation(GetLastCreatedUnit(), "death")
        call RemoveLocation(udg_TempPoint2)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveLocation(udg_TempPoint)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST8), function Trig_ST8Death_Func010A)
    call PolledWait(5.00)
    call ForForce(GetPlayersAll(), function Trig_ST8Death_Func012A)
    call RectOfDoom(gg_rct_ST8)
endfunction

//===========================================================================
function InitTrig_ST8Death takes nothing returns nothing
    set gg_trg_ST8Death=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST8Death, gg_unit_h04E_0259, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_ST8Death, function Trig_ST8Death_Actions)
endfunction

//===========================================================================
// Trigger: CalipoaAttack
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_CalipoaAttack_Conditions takes nothing returns boolean
    if ( not ( gg_unit_h04E_0259 == GetAttacker() ) ) then
        return false
    endif
    return true
endfunction

function CalipoaResetAttack takes nothing returns nothing
local timer k=GetExpiredTimer()
local lightning b=LoadLightningHandle((udg_hash), GetHandleId(gg_unit_h04E_0259), StringHash("attackLightning")) // INLINED!!
call DestroyLightning(b)
call DestroyTimer(k)
call SaveBoolean((udg_hash), GetHandleId(gg_unit_h04E_0259), StringHash("attackInt"), false) // INLINED!!
call StopSound(gg_snd_MagicLariatLoop1, false, true)
endfunction

function Trig_CalipoaAttack_Actions takes nothing returns nothing
local timer k
local lightning b
local unit m=GetTriggerUnit()
local real vb=GetUnitFacing(gg_unit_h04E_0259) * bj_DEGTORAD
if HaveSavedBoolean((udg_hash), GetHandleId(gg_unit_h04E_0259), StringHash("attackInt")) and LoadBoolean((udg_hash), GetHandleId(gg_unit_h04E_0259), StringHash("attackInt")) == true then // INLINED!!
set k=LoadTimerHandle((udg_hash), GetHandleId(gg_unit_h04E_0259), StringHash("attackResetTimer")) // INLINED!!
set b=LoadLightningHandle((udg_hash), GetHandleId(gg_unit_h04E_0259), StringHash("attackLightning")) // INLINED!!
call TimerStart(k, 0.1, false, function CalipoaResetAttack)
call MoveLightningEx(b, false, GetUnitX(gg_unit_h04E_0259) + 90.0 * Cos(vb), GetUnitY(gg_unit_h04E_0259) + 90.0 * Sin(vb), - 170.0, GetUnitX(m) + 20.0 * Cos(vb), GetUnitY(m) + 20.0 * Sin(vb), - 170.0)

else
set k=CreateTimer()
call TimerStart(k, 0.1, false, function CalipoaResetAttack)
call SaveTimerHandle((udg_hash), GetHandleId(gg_unit_h04E_0259), StringHash("attackResetTimer"), k) // INLINED!!
call SaveLightningHandle((udg_hash), GetHandleId(gg_unit_h04E_0259), StringHash("attackLightning"), AddLightningEx("AFOD", false, GetUnitX(gg_unit_h04E_0259) + 90.0 * Cos(vb), GetUnitY(gg_unit_h04E_0259) + 90.0 * Sin(vb), - 170.0, GetUnitX(m) + 20.0 * Cos(vb), GetUnitY(m) + 20.0 * Sin(vb), - 170.0)) // INLINED!!
call SaveBoolean((udg_hash), GetHandleId(gg_unit_h04E_0259), StringHash("attackInt"), true) // INLINED!!
call SetSoundPosition(gg_snd_MagicLariatLoop1, GetUnitX(gg_unit_h04E_0259), GetUnitY(gg_unit_h04E_0259), 0.0)
call PlaySoundBJ(gg_snd_MagicLariatLoop1)
endif
endfunction

//===========================================================================
function InitTrig_CalipoaAttack takes nothing returns nothing
    set gg_trg_CalipoaAttack=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_CalipoaAttack, EVENT_PLAYER_UNIT_ATTACKED)
    call TriggerAddCondition(gg_trg_CalipoaAttack, Condition(function Trig_CalipoaAttack_Conditions))
    call TriggerAddAction(gg_trg_CalipoaAttack, function Trig_CalipoaAttack_Actions)
endfunction


//===========================================================================
// Trigger: NeurotoxinStart
//===========================================================================
//TESH.scrollpos=8
//TESH.alwaysfold=0
function Trig_NeurotoxinStart_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07D' ) ) then
        return false
    endif
    return true
endfunction

function Trig_NeurotoxinStart_Func001C takes nothing returns boolean
    if ( not ( not ( (GetUnitAbilityLevel((GetSpellTargetUnit()), 'A071') == 1) or (GetUnitAbilityLevel((GetSpellTargetUnit()), 'A072') == 1) ) ) ) then // INLINED!!
        return false
    endif
    return true
endfunction

function NeurotoxicDamage2 takes nothing returns nothing
local group o
local player p

if (udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer((GetEnumUnit())))]) == GetEnumUnit() and IsUnitType(GetEnumUnit(), UNIT_TYPE_STRUCTURE) == false and udg_HiddenAndroid != GetOwningPlayer(GetEnumUnit()) and GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_PASSIVE) then // INLINED!!
call UnitDamageTarget(GetEnumUnit(), GetEnumUnit(), udg_TempReal, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
if udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] <= 0 then
set p=GetOwningPlayer(GetEnumUnit())
if p == Player(bj_PLAYER_NEUTRAL_EXTRA) then
set p=udg_Parasite
endif
  call CinematicFilterGenericForPlayer(p , 12.0 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\DreamFilter_Mask.blp" , 20 , 100 , 20 , 0 , 0 , 0 , 0 , 100)
endif
endif
if (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) then // INLINED!!
set o=GetUnitsInRectAll(udg_SpaceObject_Rect[(GetUnitUserData((GetEnumUnit())))]) // INLINED!!
call ForGroup(o, function NeurotoxicDamage2)
call DestroyGroup(o)
endif
endfunction

function NeurotoxinDamage takes nothing returns nothing
local timer k=GetExpiredTimer()
local real damage=LoadReal((udg_hash), GetHandleId(k), StringHash("damage")) // INLINED!!
local rect m=LoadRectHandle((udg_hash), GetHandleId(k), StringHash("rect")) // INLINED!!
local group o=GetUnitsInRectAll(m)
set udg_TempReal=damage
call ForGroup(o, function NeurotoxicDamage2)
call SaveReal((udg_hash), GetHandleId(k), StringHash("damage"), damage + 0.03) // INLINED!!
call DestroyGroup(o)
endfunction

function Trig_NeurotoxinStart_Actions takes nothing returns nothing
local timer k
local unit m=GetSpellTargetUnit()
local real vb=GetUnitFacing(GetSpellAbilityUnit())
    if ( Trig_NeurotoxinStart_Func001C() ) or udg_SpaceObject_Rect[(GetUnitUserData((m)))] == null then // INLINED!!
        call IssueImmediateOrderBJ(gg_unit_h04E_0259, "stop")
        return
    else
    endif
    set k=CreateTimer()
    //bizarre but there are no hashtable functions for weather effects
call SaveLightningHandle((udg_hash), GetHandleId(gg_unit_h04E_0259), StringHash("neuroLightning"), AddLightningEx("DRAL", false, GetUnitX(m) + 20.0 * Cos(vb), GetUnitY(m) + 20.0 * Sin(vb), - 170.0, GetUnitX(gg_unit_h04E_0259) + 90.0 * Cos(vb), GetUnitY(gg_unit_h04E_0259) + 90.0 * Sin(vb), - 170.0)) // INLINED!!

call TimerStart(k, 1, true, function NeurotoxinDamage)
call SaveReal((udg_hash), GetHandleId(k), StringHash("damage"), 5.0) // INLINED!!
call SaveRectHandle((udg_hash), GetHandleId(k), StringHash("rect"), udg_SpaceObject_Rect[(GetUnitUserData((m)))]) // INLINED!!
call SaveTimerHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("neurotoxin_unit"), k) // INLINED!!
    endfunction

//===========================================================================
function InitTrig_NeurotoxinStart takes nothing returns nothing
    set gg_trg_NeurotoxinStart=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_NeurotoxinStart, gg_unit_h04E_0259, EVENT_UNIT_SPELL_CHANNEL)
    call TriggerAddCondition(gg_trg_NeurotoxinStart, Condition(function Trig_NeurotoxinStart_Conditions))
    call TriggerAddAction(gg_trg_NeurotoxinStart, function Trig_NeurotoxinStart_Actions)
endfunction


//===========================================================================
// Trigger: NeurotoxinEnd
//===========================================================================
function Trig_NeurotoxinEnd_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07D' ) ) then
        return false
    endif
    return true
endfunction

function Trig_NeurotoxinEnd_Actions takes nothing returns nothing
    call DestroyTimer(LoadTimerHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("neurotoxin_unit"))) // INLINED!!
    call DestroyLightning(LoadLightningHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("neuroLightning"))) // INLINED!!
endfunction

//===========================================================================
function InitTrig_NeurotoxinEnd takes nothing returns nothing
    set gg_trg_NeurotoxinEnd=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_NeurotoxinEnd, gg_unit_h04E_0259, EVENT_UNIT_SPELL_ENDCAST)
    call TriggerAddCondition(gg_trg_NeurotoxinEnd, Condition(function Trig_NeurotoxinEnd_Conditions))
    call TriggerAddAction(gg_trg_NeurotoxinEnd, function Trig_NeurotoxinEnd_Actions)
endfunction

//===========================================================================
// Trigger: ST9Init
//===========================================================================
function Trig_ST9Init_Func002A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST9V1)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST9V2)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST9V3)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST9V4)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST9V5)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST9V6)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST9V7)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST9V8)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_Cage1)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_Cage2)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_Cage3)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_Cage4)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_Cage5)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_Cage6)
    call DestroyFogModifier(GetLastCreatedFogModifier())
endfunction

function Trig_ST9Init_Func003A takes nothing returns nothing
    call BasicAI(GetEnumUnit() , 300 , 1000.0)
endfunction

function Trig_ST9Init_Func013A takes nothing returns nothing
    set udg_TempTrigger=LoadTriggerHandle((udg_hash), GetHandleId(GetEnumDestructable()), StringHash("t1")) // INLINED!!
    call DisableTrigger(udg_TempTrigger)
    set udg_TempTrigger=LoadTriggerHandle((udg_hash), GetHandleId(GetEnumDestructable()), StringHash("t2")) // INLINED!!
    set udg_TempDoorHack=true
    call TriggerExecute(udg_TempTrigger)
    set udg_TempDoorHack=false
    call DestructableRestoreLife(LoadDestructableHandle((udg_hash), GetHandleId(udg_TempTrigger), StringHash("doorpath")), 999999, true) // INLINED!!
endfunction

function Trig_ST9Init_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call ForForce(GetPlayersAll(), function Trig_ST9Init_Func002A)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_Cage5), function Trig_ST9Init_Func003A)
    set udg_TempUnit=gg_unit_h04P_0266
    call BasicAI_Murmusk(udg_TempUnit , 160 , 700.0)
    set udg_All_Dock[47]=gg_dest_DTrx_7022
    set udg_All_Dock[48]=gg_dest_DTrx_7025
    set udg_All_Dock[49]=gg_dest_DTrx_7023
    set udg_All_Dock[50]=gg_dest_DTrx_7024
    set udg_All_Dock[51]=gg_dest_DTrx_7020
    set udg_All_Dock[52]=gg_dest_DTrx_7021
    set bj_forLoopAIndex=47
    set bj_forLoopAIndexEnd=52
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, udg_All_Dock[GetForLoopIndexA()])
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call EnumDestructablesInRectAll(gg_rct_ST9, function Trig_ST9Init_Func013A)
    set udg_TempUnit=gg_unit_h04I_0012
    call GenConsole(udg_TempUnit , udg_TempUnit , gg_rct_ST9Control)
    set udg_TempUnit=gg_unit_h04R_0258
    call GenConsole(udg_TempUnit , udg_TempUnit , gg_rct_ST9Control2)
endfunction

//===========================================================================
function InitTrig_ST9Init takes nothing returns nothing
    set gg_trg_ST9Init=CreateTrigger()
    call TriggerAddAction(gg_trg_ST9Init, function Trig_ST9Init_Actions)
endfunction

//===========================================================================
// Trigger: ST9UnInit
//===========================================================================
function Trig_ST9UnInit_Func001A takes nothing returns nothing
    call RemoveUnit(GetEnumUnit())
endfunction

function Trig_ST9UnInit_Actions takes nothing returns nothing
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST9), function Trig_ST9UnInit_Func001A)
    call RemoveUnit(gg_unit_h04T_0265)
    call DestroyTrigger(gg_trg_ST9UnInit)
    call DestroyTrigger(gg_trg_ST9Cell2AnomalyFix)
    call DestroyTrigger(gg_trg_ST9AttackEnd)
    call DestroyTrigger(gg_trg_ST9Attack)
    call DestroyTrigger(gg_trg_GravitationalPull)
    call DestroyTrigger(gg_trg_GravitationalPush)
    call DestroyTrigger(gg_trg_SyllusCageCell)
    call DestroyTrigger(gg_trg_SyllusCageCreate)
    call DestroyTrigger(gg_trg_SyllusCageDeath)
    call DestroyTrigger(gg_trg_SyllusCageOpen)
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

//===========================================================================
function InitTrig_ST9UnInit takes nothing returns nothing
    set gg_trg_ST9UnInit=CreateTrigger()
    call TriggerAddAction(gg_trg_ST9UnInit, function Trig_ST9UnInit_Actions)
endfunction

//===========================================================================
// Trigger: ST9Attack
//===========================================================================
function Trig_ST9Attack_Conditions takes nothing returns boolean
    if ( not ( GetEventDamage() >= 1.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST9Attack_Func004C takes nothing returns boolean
    if ( not ( udg_ST9_TakingDamage == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST9Attack_Func007Func001Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST9Attack_Func007Func001C takes nothing returns boolean
    if ( not ( GetEnumUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] ) ) then
        return false
    endif
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST9Attack_Func007A takes nothing returns nothing
    if ( Trig_ST9Attack_Func007Func001C() ) then
        if ( Trig_ST9Attack_Func007Func001Func001C() ) then
            call ForceAddPlayerSimple(udg_Parasite, udg_ST9_PGroup)
            call CameraSetEQNoiseForPlayer(udg_Parasite, 3)
        else
            call ForceAddPlayerSimple(GetOwningPlayer(GetEnumUnit()), udg_ST9_PGroup)
            call CameraSetEQNoiseForPlayer(GetOwningPlayer(GetEnumUnit()), 3)
        endif
    else
    endif
endfunction

function Trig_ST9Attack_Func008A takes nothing returns nothing
    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 5.00, "|cffFF0000Syllus station under attack!|r")
endfunction

function Trig_ST9Attack_Func010Func001C takes nothing returns boolean
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetEnumPlayer())] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST9Attack_Func010A takes nothing returns nothing
    if ( Trig_ST9Attack_Func010Func001C() ) then
        call CameraClearNoiseForPlayer(GetEnumPlayer())
    else
    endif
endfunction

function Trig_ST9Attack_Actions takes nothing returns nothing
    call DisableTrigger(GetTriggeringTrigger())
    if ( Trig_ST9Attack_Func004C() ) then
        call SetStackedSoundBJ(true, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST9)
        set udg_ST9_TakingDamage=true
    else
    endif
    call StartTimerBJ(udg_ST9_ResetAlarm, false, 10.00)
    call ForceClear(udg_ST9_PGroup)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST9), function Trig_ST9Attack_Func007A)
    call ForForce(udg_ST9_PGroup, function Trig_ST9Attack_Func008A)
    call PolledWait(5.00)
    call ForForce(udg_ST9_PGroup, function Trig_ST9Attack_Func010A)
    call EnableTrigger(gg_trg_ST9Attack)
endfunction

//===========================================================================
function InitTrig_ST9Attack takes nothing returns nothing
    set gg_trg_ST9Attack=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST9Attack, gg_unit_h04T_0265, EVENT_UNIT_DAMAGED)
    call TriggerAddCondition(gg_trg_ST9Attack, Condition(function Trig_ST9Attack_Conditions))
    call TriggerAddAction(gg_trg_ST9Attack, function Trig_ST9Attack_Actions)
endfunction

//===========================================================================
// Trigger: ST9AttackEnd
//===========================================================================
function Trig_ST9AttackEnd_Actions takes nothing returns nothing
    set udg_ST9_TakingDamage=false
    call SetStackedSoundBJ(false, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST9)
endfunction

//===========================================================================
function InitTrig_ST9AttackEnd takes nothing returns nothing
    set gg_trg_ST9AttackEnd=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_ST9AttackEnd, udg_ST9_ResetAlarm)
    call TriggerAddAction(gg_trg_ST9AttackEnd, function Trig_ST9AttackEnd_Actions)
endfunction

//===========================================================================
// Trigger: ST9Death
//===========================================================================
function Trig_ST9Death_Func010A takes nothing returns nothing
    call EraseUnit(GetEnumUnit() , GetKillingUnit())
    set udg_TempPoint=GetUnitLoc(GetEnumUnit())
    call CreateNUnitsAtLoc(1, 'e001', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    call RemoveLocation(udg_TempPoint)
endfunction

function Trig_ST9Death_Func012A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_ST9)
endfunction

function Trig_ST9Death_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call SetUnitPositionLoc(gg_unit_h04T_0265, udg_HoldZone)
    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 7.00, "ReplaceableTextures\\CameraMasks\\DreamFilter_Mask.blp", 100.00, 0, 0, 0)
    call PlaySoundBJ(gg_snd_NecropolisUpgrade1)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_3869")
    set udg_TempPoint=GetUnitLoc(GetDyingUnit())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=2
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempPoint2=PolarProjectionBJ(udg_TempPoint, GetRandomDirectionDeg(), GetRandomDirectionDeg())
        call CreateNUnitsAtLoc(1, 'e01E', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, GetRandomDirectionDeg())
        call SetUnitAnimation(GetLastCreatedUnit(), "death")
        call RemoveLocation(udg_TempPoint2)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveLocation(udg_TempPoint)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST9), function Trig_ST9Death_Func010A)
    call PolledWait(5.00)
    call ForForce(GetPlayersAll(), function Trig_ST9Death_Func012A)
    call RectOfDoom(gg_rct_ST9)
endfunction

//===========================================================================
function InitTrig_ST9Death takes nothing returns nothing
    set gg_trg_ST9Death=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST9Death, gg_unit_h04T_0265, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_ST9Death, function Trig_ST9Death_Actions)
endfunction

//===========================================================================
// Trigger: SyllusCageOpen
//===========================================================================
function Trig_SyllusCageOpen_Func002Func001Func001Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e02R' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageOpen_Func002Func001Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e02Q' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageOpen_Func002Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e02P' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageOpen_Func002Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e02O' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageOpen_Func002Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e02N' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageOpen_Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e02M' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageOpen_Func003Func001Func002C takes nothing returns boolean
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B000' ) ) then
        return true
    endif
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B001' ) ) then
        return true
    endif
    return false
endfunction

function Trig_SyllusCageOpen_Func003Func001C takes nothing returns boolean
    if ( not Trig_SyllusCageOpen_Func003Func001Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageOpen_Func003Func005Func001C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    if ( not ( udg_TempBool2 == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageOpen_Func003Func005C takes nothing returns boolean
    if ( not Trig_SyllusCageOpen_Func003Func005Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageOpen_Func003A takes nothing returns nothing
    if ( Trig_SyllusCageOpen_Func003Func001C() ) then
    else
        return
    endif
    set udg_TempTrigger=LoadTriggerHandle((udg_hash), GetHandleId(GetEnumDestructable()), StringHash("t1")) // INLINED!!
    set udg_TempBool=IsTriggerEnabled(udg_TempTrigger)
    set udg_TempBool2=udg_TempTrigger == null
    if ( Trig_SyllusCageOpen_Func003Func005C() ) then
        call DisableTrigger(udg_TempTrigger)
        set udg_TempTrigger=LoadTriggerHandle((udg_hash), GetHandleId(GetEnumDestructable()), StringHash("t2")) // INLINED!!
        set udg_TempDoorHack=true
        call TriggerExecute(udg_TempTrigger)
        set udg_TempDoorHack=false
        call DestructableRestoreLife(LoadDestructableHandle((udg_hash), GetHandleId(udg_TempTrigger), StringHash("doorpath")), 999999, true) // INLINED!!
        call DisplayTimedTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, 11.00, "|cffffcc00Cell locked.|r")
    else
        call EnableTrigger(udg_TempTrigger)
        call TriggerExecute(udg_TempTrigger)
        call KillDestructable(LoadDestructableHandle((udg_hash), GetHandleId(udg_TempTrigger), StringHash("doorpath"))) // INLINED!!
        call DisplayTimedTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, 11.00, "|cffffcc00Cell unlocked.|r")
    endif
endfunction

function Trig_SyllusCageOpen_Actions takes nothing returns nothing
    if ( Trig_SyllusCageOpen_Func002C() ) then
        set udg_TempPoint=GetRectCenter(gg_rct_Cage1)
    else
        if ( Trig_SyllusCageOpen_Func002Func001C() ) then
            set udg_TempPoint=GetRectCenter(gg_rct_Cage2)
            call KillDestructable(gg_dest_YTab_4373)
            call KillDestructable(gg_dest_YTab_4372)
            call KillDestructable(gg_dest_YTab_4371)
            call KillDestructable(gg_dest_YTab_4370)
            call KillDestructable(gg_dest_YTab_4369)
        else
            if ( Trig_SyllusCageOpen_Func002Func001Func001C() ) then
                set udg_TempPoint=GetRectCenter(gg_rct_Cage3)
            else
                if ( Trig_SyllusCageOpen_Func002Func001Func001Func001C() ) then
                    set udg_TempPoint=GetRectCenter(gg_rct_Cage4)
                else
                    if ( Trig_SyllusCageOpen_Func002Func001Func001Func001Func001C() ) then
                        set udg_TempPoint=GetRectCenter(gg_rct_Cage5)
                    else
                        if ( Trig_SyllusCageOpen_Func002Func001Func001Func001Func001Func001C() ) then
                            set udg_TempPoint=GetRectCenter(gg_rct_Cage6)
                        else
                            return
                        endif
                    endif
                endif
            endif
        endif
    endif
    call EnumDestructablesInCircleBJ(900.00, udg_TempPoint, function Trig_SyllusCageOpen_Func003A)
endfunction

//===========================================================================
function InitTrig_SyllusCageOpen takes nothing returns nothing
    set gg_trg_SyllusCageOpen=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SyllusCageOpen, EVENT_PLAYER_UNIT_TRAIN_FINISH)
    call TriggerAddAction(gg_trg_SyllusCageOpen, function Trig_SyllusCageOpen_Actions)
endfunction

//===========================================================================
// Trigger: SyllusCageCell
//===========================================================================
function Trig_SyllusCageCell_Func002Func002Func001Func002Func002Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e02Y' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageCell_Func002Func002Func001Func002Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e02X' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageCell_Func002Func002Func001Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e02W' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageCell_Func002Func002Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e02V' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageCell_Func002Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e02U' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageCell_Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e02T' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageCell_Func004Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetEnumUnit()) == 'h04Q' ) ) then
        return false
    endif
    if not ( LoadInteger((udg_hash), GetHandleId(GetEnumUnit()), StringHash("Cage_Weight")) <= 2 ) then // INLINED!!
    return false
    endif
    if ( not ( IsUnitHiddenBJ(GetEnumUnit()) == false ) ) then
        return false
    endif
    if ( not ( IsUnitAliveBJ(GetEnumUnit()) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageCell_Func004A takes nothing returns nothing
    if ( Trig_SyllusCageCell_Func004Func001C() ) then
        set udg_TempBool=true
        set udg_TempUnit2=GetEnumUnit()
    else
    endif
endfunction

function Trig_SyllusCageCell_Func005C takes nothing returns boolean
    if ( not ( udg_TempBool == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageCell_Func007Func001C takes nothing returns boolean
    if ( not ( GetUnitPointValue(GetEnumUnit()) != 37 ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageCell_Func007A takes nothing returns nothing
    if ( Trig_SyllusCageCell_Func007Func001C() ) then
        set udg_TempBool=true
        set udg_TempUnit=GetEnumUnit()
    else
    endif
endfunction

function Trig_SyllusCageCell_Func008C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageCell_Actions takes nothing returns nothing
    if ( Trig_SyllusCageCell_Func002C() ) then
        set udg_TempRect=gg_rct_Cage1
    else
        if ( Trig_SyllusCageCell_Func002Func002C() ) then
            set udg_TempRect=gg_rct_Cage2
        else
            if ( Trig_SyllusCageCell_Func002Func002Func001C() ) then
                set udg_TempRect=gg_rct_Cage3
            else
                if ( Trig_SyllusCageCell_Func002Func002Func001Func002C() ) then
                    set udg_TempRect=gg_rct_Cage4
                else
                    if ( Trig_SyllusCageCell_Func002Func002Func001Func002Func002C() ) then
                        set udg_TempRect=gg_rct_Cage5
                    else
                        if ( Trig_SyllusCageCell_Func002Func002Func001Func002Func002Func002C() ) then
                            set udg_TempRect=gg_rct_Cage6
                        else
                            return
                        endif
                    endif
                endif
            endif
        endif
    endif
    set udg_TempBool=false
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_Cage_Transport), function Trig_SyllusCageCell_Func004A)
    if ( Trig_SyllusCageCell_Func005C() ) then
        call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "|cffffcc00Error: Unable to find a non-full cage on the transportation platform.|r")
        return
    else
    endif
    set udg_TempBool=false
    call ForGroupBJ(GetUnitsInRectAll(udg_TempRect), function Trig_SyllusCageCell_Func007A)
    if ( Trig_SyllusCageCell_Func008C() ) then
        set udg_TempPoint=GetUnitLoc(udg_TempUnit)
        call ShowUnitHide(udg_TempUnit)
        call PauseUnitBJ(true, udg_TempUnit)
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdl")
        call SFXThreadClean()
        call GroupAddUnit(LoadGroupHandle((udg_hash), GetHandleId(udg_TempUnit2), StringHash("CageGroup")), udg_TempUnit) // INLINED!!
        call SaveInteger((udg_hash), GetHandleId(udg_TempUnit2), StringHash("Cage_Weight"), LoadInteger((udg_hash), GetHandleId(udg_TempUnit2), StringHash("Cage_Weight")) + 1) // INLINED!!
        call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "|cff00FF00Transfer successful!|r")
        call UnitShareVisionBJ(true, udg_TempUnit2, GetOwningPlayer(udg_TempUnit))
        call RemoveLocation(udg_TempPoint)
        set udg_TempPoint=GetUnitLoc(udg_TempUnit2)
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdl")
        call SFXThreadClean()
        call RemoveLocation(udg_TempPoint)
    else
        call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "|cffffcc00Error: Unable to find subject in requested cell.|r")
    endif
endfunction

//===========================================================================
function InitTrig_SyllusCageCell takes nothing returns nothing
    set gg_trg_SyllusCageCell=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SyllusCageCell, EVENT_PLAYER_UNIT_TRAIN_FINISH)
    call TriggerAddAction(gg_trg_SyllusCageCell, function Trig_SyllusCageCell_Actions)
endfunction

//===========================================================================
// Trigger: SyllusCageCreate
//===========================================================================
function Trig_SyllusCageCreate_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e02S' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageCreate_Func008A takes nothing returns nothing
    set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
    set udg_TempPoint=PolarProjectionBJ(udg_TempPoint2, 256.00, 270.00)
    call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdl")
    call SFXThreadClean()
    call AddSpecialEffectLocBJ(udg_TempPoint2, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdl")
    call SFXThreadClean()
    call SetUnitPositionLoc(GetEnumUnit(), udg_TempPoint)
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
endfunction

function Trig_SyllusCageCreate_Actions takes nothing returns nothing
    call PauseUnitBJ(true, gg_unit_h04R_0258)
    set udg_TempUnit=gg_unit_h04R_0258
    set udg_CountUpBarColor="|cffFF0080"
    call CountUpBar(udg_TempUnit , 30 , 0.333 , "DoNothing")
    call PauseUnitBJ(false, gg_unit_h04R_0258)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_Cage_Transport), function Trig_SyllusCageCreate_Func008A)
    set udg_TempPoint2=GetRectCenter(gg_rct_Cage_Transport)
    call AddSpecialEffectLocBJ(udg_TempPoint2, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdl")
    call SFXThreadClean()
    call CreateNUnitsAtLoc(1, 'h04Q', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, 45.00)
    call SaveGroupHandle((udg_hash), GetHandleId(GetLastCreatedUnit()), StringHash("CageGroup"), CreateGroup()) // INLINED!!
    call SaveInteger((udg_hash), GetHandleId(GetLastCreatedUnit()), StringHash("Cage_Weight"), 0) // INLINED!!
    call RemoveLocation(udg_TempPoint2)
endfunction

//===========================================================================
function InitTrig_SyllusCageCreate takes nothing returns nothing
    set gg_trg_SyllusCageCreate=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SyllusCageCreate, EVENT_PLAYER_UNIT_TRAIN_FINISH)
    call TriggerAddCondition(gg_trg_SyllusCageCreate, Condition(function Trig_SyllusCageCreate_Conditions))
    call TriggerAddAction(gg_trg_SyllusCageCreate, function Trig_SyllusCageCreate_Actions)
endfunction

//===========================================================================
// Trigger: SyllusCageDeath
//===========================================================================
function Trig_SyllusCageDeath_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'h04Q' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SyllusCageDeath_Func005A takes nothing returns nothing
    call SetUnitPositionLoc(GetEnumUnit(), udg_TempPoint4)
    call ShowUnitShow(GetEnumUnit())
    call PauseUnitBJ(false, GetEnumUnit())
    call UnitRemoveAbilityBJ('Awan', GetEnumUnit())
endfunction

function Trig_SyllusCageDeath_Actions takes nothing returns nothing
    set udg_TempUnitGroup=LoadGroupHandle((udg_hash), GetHandleId(GetDyingUnit()), StringHash("CageGroup")) // INLINED!!
    set udg_TempPoint4=GetUnitLoc(GetDyingUnit())
    call ForGroupBJ(udg_TempUnitGroup, function Trig_SyllusCageDeath_Func005A)
    call RemoveLocation(udg_TempPoint)
        call DestroyGroup(udg_TempUnitGroup)
endfunction

//===========================================================================
function InitTrig_SyllusCageDeath takes nothing returns nothing
    set gg_trg_SyllusCageDeath=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SyllusCageDeath, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_SyllusCageDeath, Condition(function Trig_SyllusCageDeath_Conditions))
    call TriggerAddAction(gg_trg_SyllusCageDeath, function Trig_SyllusCageDeath_Actions)
endfunction

//===========================================================================
// Trigger: ST9Cell2AnomalyFix
//===========================================================================
function Trig_ST9Cell2AnomalyFix_Func003Func001C takes nothing returns boolean
    if ( ( RectContainsUnit(gg_rct_FreeAnomalyRect, GetTriggerUnit()) == false ) ) then
        return true
    endif
    if ( ( IsDestructableDeadBJ(gg_dest_YTab_4371) == false ) ) then
        return true
    endif
    return false
endfunction

function Trig_ST9Cell2AnomalyFix_Func003C takes nothing returns boolean
    if ( not Trig_ST9Cell2AnomalyFix_Func003Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_ST9Cell2AnomalyFix_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'n00A' ) ) then
        return false
    endif
    if ( not ( IsUnitHiddenBJ(GetTriggerUnit()) == false ) ) then
        return false
    endif
    if ( not Trig_ST9Cell2AnomalyFix_Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_ST9Cell2AnomalyFix_Actions takes nothing returns nothing
    set udg_TempPoint=GetRectCenter(gg_rct_Cage2)
    call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_ST9Cell2AnomalyFix takes nothing returns nothing
    set gg_trg_ST9Cell2AnomalyFix=CreateTrigger()
    call TriggerRegisterLeaveRectSimple(gg_trg_ST9Cell2AnomalyFix, gg_rct_Cage2)
    call TriggerAddCondition(gg_trg_ST9Cell2AnomalyFix, Condition(function Trig_ST9Cell2AnomalyFix_Conditions))
    call TriggerAddAction(gg_trg_ST9Cell2AnomalyFix, function Trig_ST9Cell2AnomalyFix_Actions)
endfunction

//===========================================================================
// Trigger: GravitationalPull
//===========================================================================
function Trig_GravitationalPull_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07Z' ) ) then
        return false
    endif
    if ( not ( GetUnitAbilityLevelSwapped('A079', GetSpellTargetUnit()) == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_GravitationalPull_Actions takes nothing returns nothing
    call Push2(GetSpellTargetUnit() , 250.0 , 300.0 , AngleBetweenUnits(GetSpellTargetUnit() , GetSpellAbilityUnit()))
endfunction

//===========================================================================
function InitTrig_GravitationalPull takes nothing returns nothing
    set gg_trg_GravitationalPull=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_GravitationalPull, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_GravitationalPull, Condition(function Trig_GravitationalPull_Conditions))
    call TriggerAddAction(gg_trg_GravitationalPull, function Trig_GravitationalPull_Actions)
endfunction

//===========================================================================
// Trigger: GravitationalPush
//===========================================================================
function Trig_GravitationalPush_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A080' ) ) then
        return false
    endif
    if ( not ( GetUnitAbilityLevelSwapped('A079', GetSpellTargetUnit()) == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_GravitationalPush_Actions takes nothing returns nothing
    call Push2(GetSpellTargetUnit() , 250.0 , 300.0 , AngleBetweenUnits(GetSpellAbilityUnit() , GetSpellTargetUnit()))
endfunction

//===========================================================================
function InitTrig_GravitationalPush takes nothing returns nothing
    set gg_trg_GravitationalPush=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_GravitationalPush, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_GravitationalPush, Condition(function Trig_GravitationalPush_Conditions))
    call TriggerAddAction(gg_trg_GravitationalPush, function Trig_GravitationalPush_Actions)
endfunction

//===========================================================================
// Trigger: ST10Init
//===========================================================================
function Trig_ST10Init_Func002A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST10V1)
    call DestroyFogModifier(GetLastCreatedFogModifier())
endfunction

function Trig_ST10Init_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call ForForce(GetPlayersAll(), function Trig_ST10Init_Func002A)
    set udg_TempUnit=gg_unit_h04U_0252
    set udg_TempUnit2=gg_unit_h04V_0253
    call GenConsole(udg_TempUnit , udg_TempUnit2 , gg_rct_ST10Control)
endfunction

//===========================================================================
function InitTrig_ST10Init takes nothing returns nothing
    set gg_trg_ST10Init=CreateTrigger()
    call TriggerAddAction(gg_trg_ST10Init, function Trig_ST10Init_Actions)
endfunction

//===========================================================================
// Trigger: ST10UnInit
//===========================================================================
function Trig_ST10UnInit_Func001A takes nothing returns nothing
    call RemoveUnit(GetEnumUnit())
endfunction

function Trig_ST10UnInit_Actions takes nothing returns nothing
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST10V1), function Trig_ST10UnInit_Func001A)
    call RemoveUnit(gg_unit_h04V_0253)
    call DestroyTrigger(GetTriggeringTrigger())
    call DestroyTrigger(gg_trg_ST10Abilities)
    call DestroyTrigger(gg_trg_ST10Death)
    call DestroyTrigger(gg_trg_ST10Init)
    call DestroyTrigger(gg_trg_ST10ViewLast)
    call DestroyTrigger(gg_trg_ST10ViewLast)
    call DestroyTrigger(gg_trg_ST10Abilities)
    call DestroyTrigger(gg_trg_ST10Attack)
    call DestroyTrigger(gg_trg_ST10AttackEnd)
endfunction

//===========================================================================
function InitTrig_ST10UnInit takes nothing returns nothing
    set gg_trg_ST10UnInit=CreateTrigger()
    call TriggerAddAction(gg_trg_ST10UnInit, function Trig_ST10UnInit_Actions)
endfunction

//===========================================================================
// Trigger: ST10Attack
//===========================================================================
function Trig_ST10Attack_Conditions takes nothing returns boolean
    if ( not ( GetEventDamage() >= 1.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10Attack_Func004C takes nothing returns boolean
    if ( not ( udg_ST10_TakingDamage == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10Attack_Func007Func001Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10Attack_Func007Func001C takes nothing returns boolean
    if ( not ( GetEnumUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] ) ) then
        return false
    endif
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10Attack_Func007A takes nothing returns nothing
    if ( Trig_ST10Attack_Func007Func001C() ) then
        if ( Trig_ST10Attack_Func007Func001Func001C() ) then
            call ForceAddPlayerSimple(udg_Parasite, udg_ST10_PGroup)
            call CameraSetEQNoiseForPlayer(udg_Parasite, 3)
        else
            call ForceAddPlayerSimple(GetOwningPlayer(GetEnumUnit()), udg_ST10_PGroup)
            call CameraSetEQNoiseForPlayer(GetOwningPlayer(GetEnumUnit()), 3)
        endif
    else
    endif
endfunction

function Trig_ST10Attack_Func008A takes nothing returns nothing
    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 5.00, "|cffFF0000Pown station under attack!|r")
endfunction

function Trig_ST10Attack_Func010Func001C takes nothing returns boolean
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetEnumPlayer())] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10Attack_Func010A takes nothing returns nothing
    if ( Trig_ST10Attack_Func010Func001C() ) then
        call CameraClearNoiseForPlayer(GetEnumPlayer())
    else
    endif
endfunction

function Trig_ST10Attack_Actions takes nothing returns nothing
    call DisableTrigger(GetTriggeringTrigger())
    if ( Trig_ST10Attack_Func004C() ) then
        call SetStackedSoundBJ(true, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST10)
        set udg_ST10_TakingDamage=true
    else
    endif
    call StartTimerBJ(udg_ST10_ResetAlarm, false, 10.00)
    call ForceClear(udg_ST10_PGroup)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST10), function Trig_ST10Attack_Func007A)
    call ForForce(udg_ST10_PGroup, function Trig_ST10Attack_Func008A)
    call PolledWait(5.00)
    call ForForce(udg_ST10_PGroup, function Trig_ST10Attack_Func010A)
    call EnableTrigger(gg_trg_ST10Attack)
endfunction

//===========================================================================
function InitTrig_ST10Attack takes nothing returns nothing
    set gg_trg_ST10Attack=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST10Attack, gg_unit_h04V_0253, EVENT_UNIT_DAMAGED)
    call TriggerAddCondition(gg_trg_ST10Attack, Condition(function Trig_ST10Attack_Conditions))
    call TriggerAddAction(gg_trg_ST10Attack, function Trig_ST10Attack_Actions)
endfunction

//===========================================================================
// Trigger: ST10AttackEnd
//===========================================================================
function Trig_ST10AttackEnd_Actions takes nothing returns nothing
    set udg_ST10_TakingDamage=false
    call SetStackedSoundBJ(false, gg_snd_WWII_submarine_dive_klaxon, gg_rct_ST10)
endfunction

//===========================================================================
function InitTrig_ST10AttackEnd takes nothing returns nothing
    set gg_trg_ST10AttackEnd=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_ST10AttackEnd, udg_ST10_ResetAlarm)
    call TriggerAddAction(gg_trg_ST10AttackEnd, function Trig_ST10AttackEnd_Actions)
endfunction

//===========================================================================
// Trigger: ST10Death
//===========================================================================
function Trig_ST10Death_Func009A takes nothing returns nothing
    call EraseUnit(GetEnumUnit() , GetKillingUnit())
    set udg_TempPoint=GetUnitLoc(GetEnumUnit())
    call CreateNUnitsAtLoc(1, 'e001', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    call RemoveLocation(udg_TempPoint)
endfunction

function Trig_ST10Death_Func011A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_ST10)
endfunction

function Trig_ST10Death_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 7.00, "ReplaceableTextures\\CameraMasks\\DreamFilter_Mask.blp", 100.00, 0, 0, 0)
    call PlaySoundBJ(gg_snd_NecropolisUpgrade1)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_3870")
    set udg_TempPoint=GetUnitLoc(GetDyingUnit())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=2
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempPoint2=PolarProjectionBJ(udg_TempPoint, GetRandomDirectionDeg(), GetRandomDirectionDeg())
        call CreateNUnitsAtLoc(1, 'e01E', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, GetRandomDirectionDeg())
        call SetUnitAnimation(GetLastCreatedUnit(), "death")
        call RemoveLocation(udg_TempPoint2)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveLocation(udg_TempPoint)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_ST10), function Trig_ST10Death_Func009A)
    call PolledWait(5.00)
    call ForForce(GetPlayersAll(), function Trig_ST10Death_Func011A)
    call RectOfDoom(gg_rct_ST10)
endfunction

//===========================================================================
function InitTrig_ST10Death takes nothing returns nothing
    set gg_trg_ST10Death=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_ST10Death, gg_unit_h04V_0253, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_ST10Death, function Trig_ST10Death_Actions)
endfunction

//===========================================================================
// Trigger: ST10Abilities
//===========================================================================
function Trig_ST10Abilities_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'h04U' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10Abilities_Func001Func001Func004C takes nothing returns boolean
    if ( not ( GetSector(udg_TempPoint4) != 0 ) ) then
        return false
    endif
    if ( not ( IsUnitAliveBJ(udg_Sector_Space[GetSector(udg_TempPoint4)]) ) ) then
        return false
    endif
    if ( not ( GetTerrainType(GetLocationX(udg_TempPoint4), GetLocationY(udg_TempPoint4)) != 'Vcbp' ) ) then
        return false
    endif
    if ( not ( GetTerrainCliffLevelBJ(udg_TempPoint4) <= GetTerrainCliffLevelBJ(udg_TempPoint3) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10Abilities_Func001Func001Func029Func003C takes nothing returns boolean
    if ( not ( GetEnumUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10Abilities_Func001Func001Func029A takes nothing returns nothing
    call SetUnitPositionLoc(GetEnumUnit(), udg_TempPoint4)
    
    //If you get invulnerability from where you are going, it gets removed when you teleport and so it fucks you up
    //Though it is kinda strange, as teleporting to arbi evolution or using phase shift AFTER you teleport, removes the invulnerability -_-
    //Optimally there would be tags for each invulnerability, tags meaning the origin of invulnerability.
    //So yeah, with many tags, differentiating invulnerabilities would help, but right now
    //It would mean I have to make a timer-tag for each invulnerability spell and function LMAO (yet another meta restriction.)
    if GetUnitAbilityLevel(GetEnumUnit(), 'Avul') == 0 then
        call UnitAddAbilityForPeriod(GetEnumUnit() , 'Avul' , 1.7)
    endif
    
    if ( Trig_ST10Abilities_Func001Func001Func029Func003C() ) then
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetEnumUnit()), udg_TempPoint4, 0)
    else
    endif
endfunction

function Trig_ST10Abilities_Func001Func001C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A081' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10Abilities_Func001Func004C takes nothing returns boolean
local integer o=GetSector(udg_TempPoint4)
local unit s= udg_Sector_Space[o]
    if ( not ( o != 0 ) ) then
        return false
    endif
    if not ( IsUnitAliveBJ(s) ) then
    return false
    endif
    if (GetUnitAbilityLevel((s), 'A071') == 1) then // INLINED!!
        if not ( RectContainsUnit(gg_rct_Space, s) ) and GetUnitSector(udg_SS_Landed[(GetUnitUserData((s)))]) <= 0 then // INLINED!!
            return false
        endif
    else
        if IsUnitHidden(s) or not ( RectContainsUnit(gg_rct_Space, s) ) then
            return false
        endif
    endif
    
    if ( not ( GetTerrainType(GetLocationX(udg_TempPoint4), GetLocationY(udg_TempPoint4)) != 'Vcbp' ) ) then
        return false
    endif
    if ( not ( GetTerrainCliffLevelBJ(udg_TempPoint4) <= GetTerrainCliffLevelBJ(udg_TempPoint3) ) ) then
        return false
    endif
    if ( not ( IsPointPathable(GetLocationX(udg_TempPoint4) , GetLocationY(udg_TempPoint4) , true) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10Abilities_Func001C takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A082' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10Abilities_Actions takes nothing returns nothing
local location a4
local location a3
local unit s=GetSpellAbilityUnit()
local sound r
local sound q
local player o=GetOwningPlayer(s)
    if o == Player(14) then
        set o=udg_Parasite
    endif
    
    if ( Trig_ST10Abilities_Func001C() ) then
        set a4=GetSpellTargetLoc()
        set a3=GetRectCenter(gg_rct_TransportationPlatform)
        set udg_TempPoint4=a4
        set udg_TempPoint3=a3
        if ( Trig_ST10Abilities_Func001Func004C() ) then
            call SaveLocationHandle((udg_hash), GetHandleId(s), StringHash("PortPlace"), a4) // INLINED!!
            call DisplayTimedTextToPlayer(o, 0, 0, 15.00, ( "|cff00FFFFTeleportation location set." ))
        else
            call RemoveLocation(a3)
            call DisplayTimedTextToPlayer(o, 0, 0, 15.00, "TRIGSTR_3872 Or the target location may not be pathable.")
        endif
        call RemoveLocation(a3)
    else
        if ( Trig_ST10Abilities_Func001Func001C() ) then

            call IssueImmediateOrderBJ(s, "stop")
            set a4=LoadLocationHandle((udg_hash), GetHandleId(s), StringHash("PortPlace")) // INLINED!!
            set a3=GetRectCenter(gg_rct_TransportationPlatform)
            set udg_TempPoint4=a4
            set udg_TempPoint3=a3
            
            if ( Trig_ST10Abilities_Func001Func001Func004C() ) then
            else
                call RemoveLocation(udg_TempPoint3)
                call DisplayTimedTextToPlayer(o, 0, 0, 15.00, "TRIGSTR_3875")
                return
            endif
set r=CreateSound("Sound\\Ambient\\DoodadEffects\\StoneBridgeRise.wav", true, true, true, 126, 126, "")
call SetSoundPitch(r, 1.3)
call SetSoundPosition(r, GetLocationX(a4), GetLocationY(a4), 0.0)
call SoundVolumeOverPeriod(r , 40 , 127 , 19.0)
call PlaySoundBJ(r)
set q=CreateSound("Sound\\Ambient\\DoodadEffects\\StoneBridgeRise.wav", true, true, true, 126, 126, "")
call SetSoundPitch(q, 1.3)
call SetSoundPosition(q, GetLocationX(a3), GetLocationY(a3), 0.0)
call SoundVolumeOverPeriod(q , 40 , 127 , 19.0)
call PlaySoundBJ(q)
            call CreateNUnitsAtLoc(1, 'e01K', Player(PLAYER_NEUTRAL_PASSIVE), a3, bj_UNIT_FACING)
            call SetUnitScalePercent(GetLastCreatedUnit(), 60.00, 60.00, 60.00)
            call CreateNUnitsAtLoc(1, 'e02Z', Player(PLAYER_NEUTRAL_PASSIVE), a4, bj_UNIT_FACING)
            call SizeUnitOverTime(GetLastCreatedUnit() , 20.1 , 0.1 , 8 , true)
            call CreateNUnitsAtLoc(1, 'e02Z', Player(PLAYER_NEUTRAL_PASSIVE), a4, bj_UNIT_FACING)
            call SizeUnitOverTime(GetLastCreatedUnit() , 20.1 , 0.1 , 8 , true)
            call CreateNUnitsAtLoc(1, 'e02Z', Player(PLAYER_NEUTRAL_PASSIVE), a3, bj_UNIT_FACING)
            call SizeUnitOverTime(GetLastCreatedUnit() , 20.1 , 0.1 , 8 , true)
            call CreateNUnitsAtLoc(1, 'e02Z', Player(PLAYER_NEUTRAL_PASSIVE), a3, bj_UNIT_FACING)
            call SizeUnitOverTime(GetLastCreatedUnit() , 20.1 , 0.1 , 8 , true)
            call CreateNUnitsAtLoc(1, 'e02Z', Player(PLAYER_NEUTRAL_PASSIVE), a3, bj_UNIT_FACING)
            call SizeUnitOverTime(GetLastCreatedUnit() , 20.1 , 0.1 , 8 , true)
            call CreateNUnitsAtLoc(1, 'e02Z', Player(PLAYER_NEUTRAL_PASSIVE), a3, bj_UNIT_FACING)
            call SizeUnitOverTime(GetLastCreatedUnit() , 20.1 , 0.1 , 8 , true)
            set udg_TempUnit=GetLastCreatedUnit()
            set udg_CountUpBarColor="|cffFF0080"
            call PauseUnitBJ(true, s)
            call CountUpBar(udg_TempUnit , 20 , 0.975 , "DoNothing")
            call StopSound(r, true, true)
            call StopSound(q, true, true)
            set r=CreateSound("Sound\\Buildings\\Death\\NightElfBuildingDeathSmall1.wav", false, true, true, 126, 126, "")
call SetSoundPosition(r, GetLocationX(a3), GetLocationY(a3), 0.0)
call PlaySoundBJ(r)
            set r=CreateSound("Sound\\Buildings\\Death\\NightElfBuildingDeathSmall1.wav", false, true, true, 126, 126, "")
call SetSoundPosition(r, GetLocationX(a4), GetLocationY(a4), 0.0)
call PlaySoundBJ(r)
                       set udg_TempPoint4=a4
            call ForGroupBJ(GetUnitsInRectAll(gg_rct_TransportationPlatform), function Trig_ST10Abilities_Func001Func001Func029A)
            call PauseUnitBJ(false, s)
             call CreateNUnitsAtLoc(1, 'e005', Player(PLAYER_NEUTRAL_PASSIVE), a3, GetRandomDirectionDeg())
            call CreateNUnitsAtLoc(1, 'e005', Player(PLAYER_NEUTRAL_PASSIVE), a3, GetRandomDirectionDeg())
            call CreateNUnitsAtLoc(1, 'e005', Player(PLAYER_NEUTRAL_PASSIVE), a3, GetRandomDirectionDeg())
            call CreateNUnitsAtLoc(1, 'e005', Player(PLAYER_NEUTRAL_PASSIVE), a4, GetRandomDirectionDeg())
            call CreateNUnitsAtLoc(1, 'e005', Player(PLAYER_NEUTRAL_PASSIVE), a4, GetRandomDirectionDeg())
            call CreateNUnitsAtLoc(1, 'e005', Player(PLAYER_NEUTRAL_PASSIVE), a4, GetRandomDirectionDeg())

            call RemoveLocation(a3)
            //call RemoveLocation( a4 )
        else
        endif
    endif
endfunction

//===========================================================================
function InitTrig_ST10Abilities takes nothing returns nothing
    set gg_trg_ST10Abilities=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ST10Abilities, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ST10Abilities, Condition(function Trig_ST10Abilities_Conditions))
    call TriggerAddAction(gg_trg_ST10Abilities, function Trig_ST10Abilities_Actions)
endfunction


//===========================================================================
// Trigger: ST10ExplorerAid
//===========================================================================
function Trig_ST10ExplorerAid_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A083' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10ExplorerAid_Func004C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10ExplorerAid_Actions takes nothing returns nothing
    set udg_TempPoint=GetRectCenter(udg_SpaceObject_Rect[GetUnitUserData(GetSpellTargetUnit())])
    if ( Trig_ST10ExplorerAid_Func004C() ) then
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetSpellAbilityUnit()), udg_TempPoint, 0.25)
    else
        call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TempPoint, 0.25)
    endif
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_ST10ExplorerAid takes nothing returns nothing
    set gg_trg_ST10ExplorerAid=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ST10ExplorerAid, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ST10ExplorerAid, Condition(function Trig_ST10ExplorerAid_Conditions))
    call TriggerAddAction(gg_trg_ST10ExplorerAid, function Trig_ST10ExplorerAid_Actions)
endfunction

//===========================================================================
// Trigger: ST10ViewLast
//===========================================================================
function Trig_ST10ViewLast_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A084' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10ViewLast_Func004C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST10ViewLast_Actions takes nothing returns nothing
    set udg_TempPoint=LoadLocationHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("PortPlace")) // INLINED!!
    if ( Trig_ST10ViewLast_Func004C() ) then
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetSpellAbilityUnit()), udg_TempPoint, 0.25)
    else
        call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TempPoint, 0.25)
    endif
endfunction

//===========================================================================
function InitTrig_ST10ViewLast takes nothing returns nothing
    set gg_trg_ST10ViewLast=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ST10ViewLast, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ST10ViewLast, Condition(function Trig_ST10ViewLast_Conditions))
    call TriggerAddAction(gg_trg_ST10ViewLast, function Trig_ST10ViewLast_Actions)
endfunction

//===========================================================================
// Trigger: ST11Init
//===========================================================================
function Trig_ST11Init_Func016A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V1)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V10)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V11)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V12)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V13)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V14)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V15)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V16)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V17)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V18)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V19)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V2)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V20)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V21)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V22)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V23)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V24)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V3)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V4)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V5)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V6)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V7)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V8)
    call DestroyFogModifier(GetLastCreatedFogModifier())
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_ST11V9)
    call DestroyFogModifier(GetLastCreatedFogModifier())
endfunction

function Trig_ST11Init_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call EnableTrigger(gg_trg_ST11BloodEffect)
    call EnableTrigger(gg_trg_ST11HivesDie)
    call EnableTrigger(gg_trg_ST11DieNatural)
    set udg_Sector_Space[27]=GetLastCreatedUnit()
    set udg_All_Dock[53]=gg_dest_B009_5548
    set udg_All_Dock[54]=gg_dest_B009_5547
    set udg_All_Dock[55]=gg_dest_B009_5543
    set udg_All_Dock[56]=gg_dest_B009_5542
    set udg_All_Dock[57]=gg_dest_B009_5540
    set udg_SectorId[27]=gg_rct_OverlordRect
    set udg_TempUnit=GetLastCreatedUnit()
    call GroupAddUnitSimple(udg_TempUnit, udg_SpaceObject_CollideGroup)
    call NewUnitRegister(udg_TempUnit)
    set udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)]=150.00
    call ForForce(GetPlayersAll(), function Trig_ST11Init_Func016A)
    call PlaySoundBJ(gg_snd_SargerasRoar02)
    call UnitRemoveAbilityBJ('Avul', gg_unit_h04X_0172)
    call UnitRemoveAbilityBJ('Avul', gg_unit_h04X_0148)
    call UnitRemoveAbilityBJ('Avul', gg_unit_h04X_0173)
endfunction

//===========================================================================
function InitTrig_ST11Init takes nothing returns nothing
    set gg_trg_ST11Init=CreateTrigger()
    call TriggerAddAction(gg_trg_ST11Init, function Trig_ST11Init_Actions)
endfunction

//===========================================================================
// Trigger: ST11BloodEffect
//===========================================================================
function Trig_ST11BloodEffect_Actions takes nothing returns nothing
    set udg_TempPoint=GetRandomLocInRect(gg_rct_OverlordRect)
    call AddSpecialEffectLocBJ(udg_TempPoint, "Objects\\Spawnmodels\\Human\\HumanLargeDeathExplode\\HumanLargeDeathExplode.mdl")
    call RemoveLocation(udg_TempPoint)
    call SFXThreadClean()
endfunction

//===========================================================================
function InitTrig_ST11BloodEffect takes nothing returns nothing
    set gg_trg_ST11BloodEffect=CreateTrigger()
    call DisableTrigger(gg_trg_ST11BloodEffect)
    call TriggerRegisterTimerEventPeriodic(gg_trg_ST11BloodEffect, 0.20)
    call TriggerAddAction(gg_trg_ST11BloodEffect, function Trig_ST11BloodEffect_Actions)
endfunction

//===========================================================================
// Trigger: ST11HivesDie
//===========================================================================
function Trig_ST11HivesDie_Func004Func003A takes nothing returns nothing
    call DisplayTextToPlayer(GetEnumPlayer(), 0, 0, "The Overlord has been slain! Flee his body or BE DOOMED TO A HORRIBLE DEATH.")
endfunction

function Trig_ST11HivesDie_Func004Func008C takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(gg_unit_h04X_0172) == false ) ) then
        return false
    endif
    if ( not ( IsUnitAliveBJ(gg_unit_h04X_0148) == false ) ) then
        return false
    endif
    if ( not ( IsUnitAliveBJ(gg_unit_h04X_0173) == false ) ) then
        return false
    endif
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST11HivesDie_Func004C takes nothing returns boolean
    if ( not Trig_ST11HivesDie_Func004Func008C() ) then
        return false
    endif
    return true
endfunction

function Trig_ST11HivesDie_Actions takes nothing returns nothing
    if ( Trig_ST11HivesDie_Func004C() ) then
        call DestroyTrigger(GetTriggeringTrigger())
        call SetUnitOwner(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)], Player(PLAYER_NEUTRAL_PASSIVE), false)
        call ForForce(GetPlayersAll(), function Trig_ST11HivesDie_Func004Func003A)
        call DisplayTextToForce(GetForceOfPlayer(udg_Mutant), "\nDONT Panic.\nYou have 35 seconds to kill every invader and win the game!")
        call StartTimerBJ(udg_OverlordDeath_DestructionTimer, false, 35.00)
        call CreateTimerDialogBJ(GetLastCreatedTimerBJ(), "TRIGSTR_4087")
        set udg_OverlordDeath_TimerWindow=GetLastCreatedTimerDialogBJ()
    else
    endif
endfunction

//===========================================================================
function InitTrig_ST11HivesDie takes nothing returns nothing
    set gg_trg_ST11HivesDie=CreateTrigger()
    call DisableTrigger(gg_trg_ST11HivesDie)
    call TriggerRegisterUnitEvent(gg_trg_ST11HivesDie, gg_unit_h04X_0173, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(gg_trg_ST11HivesDie, gg_unit_h04X_0148, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(gg_trg_ST11HivesDie, gg_unit_h04X_0172, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_ST11HivesDie, function Trig_ST11HivesDie_Actions)
endfunction

//===========================================================================
// Trigger: ST11DieNatural
//===========================================================================
function Trig_ST11DieNatural_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'h04G' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST11DieNatural_Func006Func002Func001Func003C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h02L' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h02H' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h02Q' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h03J' ) ) then
        return true
    endif
    return false
endfunction

function Trig_ST11DieNatural_Func006Func002Func001C takes nothing returns boolean
    if ( not Trig_ST11DieNatural_Func006Func002Func001Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_ST11DieNatural_Func006Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetEnumUnit()) != 'h04G' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ST11DieNatural_Func006A takes nothing returns nothing
    // If not equal to space overlord unit, then change ownership
    if ( Trig_ST11DieNatural_Func006Func002C() ) then
        if ( Trig_ST11DieNatural_Func006Func002Func001C() ) then
            call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_PASSIVE), false)
        else
            call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_AGGRESSIVE), false)
        endif
    else
    endif
endfunction

function Trig_ST11DieNatural_Func011A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_OverlordRect)
endfunction

function Trig_ST11DieNatural_Func012A takes nothing returns nothing
    call EraseUnit(GetEnumUnit() , GetKillingUnit())
endfunction

function Trig_ST11DieNatural_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    // NewStuff
    set udg_TempUnitGroup=GetUnitsOfPlayerAll(udg_Mutant)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_ST11DieNatural_Func006A)
    call DestroyGroup(udg_TempUnitGroup)
    call SetUnitOwner(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)], udg_Mutant, false)
    // NewStuff
    call KillUnit(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)])
    call ForForce(GetPlayersAll(), function Trig_ST11DieNatural_Func011A)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_OverlordRect), function Trig_ST11DieNatural_Func012A)
    call RectOfDoom(gg_rct_OverlordRect)
endfunction

//===========================================================================
function InitTrig_ST11DieNatural takes nothing returns nothing
    set gg_trg_ST11DieNatural=CreateTrigger()
    call DisableTrigger(gg_trg_ST11DieNatural)
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ST11DieNatural, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_ST11DieNatural, Condition(function Trig_ST11DieNatural_Conditions))
    call TriggerAddAction(gg_trg_ST11DieNatural, function Trig_ST11DieNatural_Actions)
endfunction

//===========================================================================
// Trigger: ST11DoomTimerExpired
//===========================================================================
function Trig_ST11DoomTimerExpired_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call DestroyTimerDialogBJ(udg_OverlordDeath_TimerWindow)
    call TriggerExecute(gg_trg_ST11DieNatural)
endfunction

//===========================================================================
function InitTrig_ST11DoomTimerExpired takes nothing returns nothing
    set gg_trg_ST11DoomTimerExpired=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_ST11DoomTimerExpired, udg_OverlordDeath_DestructionTimer)
    call TriggerAddAction(gg_trg_ST11DoomTimerExpired, function Trig_ST11DoomTimerExpired_Actions)
endfunction

//===========================================================================
// Trigger: Overlord Pods
//===========================================================================
function Trig_Overlord_Pods_Conditions takes nothing returns boolean
    if ( GetSpellAbilityId() != 'A08H' ) then
        return false
    endif
    return true
endfunction

function TransportedDestruction takes nothing returns nothing
if IsUnitInTransport(GetEnumUnit(), udg_TempUnit) then
call KillUnit(GetEnumUnit())
endif
endfunction

function Trig_Overlord_Pods_Actions takes nothing returns nothing

    local unit a= GetSpellAbilityUnit()
    local unit b= GetSpellTargetUnit()
    local player qrqr=GetOwningPlayer(a)
    local unit c
    local rect r
    local location loc
    local location loc2
    local real d
    local real targetX= GetUnitX(b)
    local real targetY= GetUnitY(b)
    local real currentX
    local real currentY
    local real d2
    local boolean flag
    local group g
    local group g2
    local group g3

    set loc=GetUnitLoc(udg_Sector_Space[GetUnitSector(a)])
    set flag=false
    set d=udg_SpaceObject_CollideRadius[(GetUnitUserData((b)))] * 1.2 // INLINED!!
    set d2=d * d
    
    if ( d < 150 ) then
        set d=150
        set d2=d * d
    endif
    
    if ( GetUnitTypeId(b) == 'h03T' ) then
        set r=gg_rct_MoonEscapePod
    else
        if ( GetUnitTypeId(b) == 'h007' ) then
            set r=gg_rct_ST3EscapePod
        else
            if ( GetUnitTypeId(b) == 'h008' ) then
                set r=gg_rct_PlanetEscapePod
            else
                if ( GetUnitTypeId(b) == 'h003' ) then
                    set r=gg_rct_ST1EscapePod
                else
                    if ( GetUnitTypeId(b) == 'h009' ) then
                        set r=gg_rct_ST4EscapePod
                    else
                        if ( GetUnitTypeId(b) == 'h00X' ) then
                            set r=gg_rct_ST5EscapePod
                        else
                            if ( GetUnitTypeId(b) == 'h04T' ) then
                                set r=gg_rct_ST9EscapePod
                            else
                                if ( GetUnitTypeId(b) == 'h04V' ) then
                                   set r=gg_rct_ST10EscapePod
                                else
                                    if ( GetUnitTypeId(b) == 'h04E' ) then
                                        set r=gg_rct_ST8EscapePod
                                    else
                                    if (GetUnitAbilityLevel((b), 'A071') == 1) then // INLINED!!
                                     set r=udg_Spaceship_EnterExit[(GetUnitUserData((b)))] // INLINED!!
                                    else
                                        call DisplayTextToPlayer(GetOwningPlayer(a), 0, 0, "|cffFF0000INVALID TARGET|r")
                                        set flag=true
                                        //return null
                                        endif
                                    endif
                                endif
                            endif
                        endif
                    endif
                endif
            endif
        endif
    endif
    
    if ( not ( flag ) ) then
    
        set c=CreateUnitAtLoc(Player(PLAYER_NEUTRAL_PASSIVE), 'h04Z', loc, 0)

        call SetUnitX(a, GetRectCenterX(gg_rct_Timeout))
        call SetUnitY(a, GetRectCenterY(gg_rct_Timeout))
        //call SetUnitOwner(a, Player(PLAYER_NEUTRAL_PASSIVE), true)
        call UnitAddAbility(a, 'A08I')
        call UnitAddAbility(a, 'Aloc')
        
        //call DisplayTextToPlayer(Player(0), 0, 0, GetUnitName(c))
        //call DisplayTextToPlayer(Player(0), 0, 0, GetLocationX(loc2) + "," + GetLocationY(loc2) + " " + GetUnitX(c) + " " + GetUnitY(c))
    
    
        loop
            exitwhen flag
            set currentX=GetUnitX(c)
            set currentY=GetUnitY(c)
            set targetX=GetUnitX(b)
            set targetY=GetUnitY(b)
            set flag=( ( Pow(targetX - currentX, 2) + Pow(targetY - currentY, 2) ) <= d2 )
        set loc2=Location(targetX, targetY)
            set loc2=Location(targetX, targetY)
            call IssuePointOrderLocBJ(c, "move", loc2)
            call IssuePointOrderLoc(c, "move", loc2)
            call RemoveLocation(loc2)
            if ( GetUnitLifePercent(c) == 0 ) then
                //call RemoveUnit(a)
                set g3=GetUnitsOfPlayerAll(qrqr)
                set udg_TempUnit=a
                call ForGroup(g3, function TransportedDestruction)
                call DestroyGroup(g3)
                call KillUnit(a)
                call KillUnit(c)
                return
            endif
            if GetUnitLifePercent(b) == 0 then
            set b=gg_unit_h008_0196
            set r=gg_rct_PlanetEscapePod
            endif
            
            call PolledWait(0.2)
        endloop
        call RemoveLocation(loc2)
        //call SetUnitOwner(a, udg_Mutant, true)
        //call PolledWait(0.01)
        call UnitRemoveAbility(a, 'A08I')
        call UnitRemoveAbility(a, 'Aloc')
        call SetUnitX(a, GetRectCenterX(r))
        call SetUnitY(a, GetRectCenterY(r))
        call UnitDamageTarget(a, b, 10000, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
        call KillUnit(a)
        call KillUnit(c)
        call RemoveLocation(loc)
        call PolledWait(0.001)
        set g=GetUnitsInRectOfPlayer(r, udg_Mutant)
        set g2=CreateGroup()
        loop
            set a=FirstOfGroup(g)
            exitwhen a == null
            if ( UnitHasBuffBJ(a, 'B01C') ) then
                call UnitRemoveBuffBJ('B01C', a)
                call UnitAddAbility(a, 'Avul')
                call GroupAddUnit(g2, a)
            endif
            call GroupRemoveUnit(g, a)
        endloop
        call PolledWait(2.0)
        loop
            set a=FirstOfGroup(g2)
            exitwhen a == null
            call UnitRemoveAbility(a, 'Avul')
        endloop
    endif
endfunction

//===========================================================================
function InitTrig_Overlord_Pods takes nothing returns nothing
    set gg_trg_Overlord_Pods=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Overlord_Pods, EVENT_PLAYER_UNIT_SPELL_CAST)
    call TriggerAddCondition(gg_trg_Overlord_Pods, Condition(function Trig_Overlord_Pods_Conditions))
    call TriggerAddAction(gg_trg_Overlord_Pods, function Trig_Overlord_Pods_Actions)
endfunction


//===========================================================================
// Trigger: ViewIntestines
//===========================================================================
function Trig_ViewIntestines_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A08M' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ViewIntestines_Actions takes nothing returns nothing
    set udg_TempPoint=GetRectCenter(gg_rct_OverlordRect)
    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetSpellAbilityUnit()), udg_TempPoint, 0)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_ViewIntestines takes nothing returns nothing
    set gg_trg_ViewIntestines=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ViewIntestines, EVENT_PLAYER_UNIT_SPELL_CAST)
    call TriggerAddCondition(gg_trg_ViewIntestines, Condition(function Trig_ViewIntestines_Conditions))
    call TriggerAddAction(gg_trg_ViewIntestines, function Trig_ViewIntestines_Actions)
endfunction

//===========================================================================
// Trigger: Overlorddockbug
//
// Check if range appropriatel
// If it doesnt work: Then - Actions
//                                Unit - Order (triggering unit) to Neutral Alchemist - Acid Bomb U.S.I. Queen Niffy (SPACE) 0029 <gen>
// Add Then  - Actions
//                  Sound - PLAY DOOOOOOOOOOOM
//===========================================================================
function Trig_Overlorddockbug_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A001' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h04G' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Overlorddockbug_Func006C takes nothing returns boolean
    if ( not ( DistanceBetweenPoints(udg_Spaceship_Overlordcomparison, udg_Overlord_Spaceshipcomparison) <= 200.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Overlorddockbug_Actions takes nothing returns nothing
    set udg_Spaceship_Overlordcomparison=GetUnitLoc(GetTriggerUnit())
    set udg_Overlord_Spaceshipcomparison=GetUnitLoc(GetEventTargetUnit())
    if ( Trig_Overlorddockbug_Func006C() ) then
        call PauseUnitBJ(true, GetTriggerUnit())
        call TriggerSleepAction(1.00)
        call PauseUnitBJ(false, GetTriggerUnit())
    else
    endif
endfunction

//===========================================================================
function InitTrig_Overlorddockbug takes nothing returns nothing
    set gg_trg_Overlorddockbug=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Overlorddockbug, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Overlorddockbug, Condition(function Trig_Overlorddockbug_Conditions))
    call TriggerAddAction(gg_trg_Overlorddockbug, function Trig_Overlorddockbug_Actions)
endfunction

//===========================================================================
// Trigger: HoldZoneMask
//===========================================================================
function Trig_HoldZoneMask_Func002A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_Timeout)
    call DestroyFogModifier(GetLastCreatedFogModifier())
endfunction

function Trig_HoldZoneMask_Actions takes nothing returns nothing
    call ForForce(GetPlayersAll(), function Trig_HoldZoneMask_Func002A)
endfunction

//===========================================================================
function InitTrig_HoldZoneMask takes nothing returns nothing
    set gg_trg_HoldZoneMask=CreateTrigger()
    call TriggerRegisterTimerEventPeriodic(gg_trg_HoldZoneMask, 5.00)
    call TriggerAddAction(gg_trg_HoldZoneMask, function Trig_HoldZoneMask_Actions)
endfunction

//===========================================================================
// Trigger: RadarSweepPlanet
//===========================================================================
function Trig_RadarSweepPlanet_Func004Func001Func002Func001001001 takes nothing returns boolean
    return ( GetFilterPlayer() == udg_Parasite )
endfunction

function Trig_RadarSweepPlanet_Func004Func001Func002Func002001001 takes nothing returns boolean
    return ( GetFilterPlayer() == GetOwningPlayer(GetBuyingUnit()) )
endfunction

function Trig_RadarSweepPlanet_Func004Func001Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetBuyingUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_RadarSweepPlanet_Func004Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_AGGRESSIVE) ) ) then
        return false
    endif
    if ( not ( GetUnitPointValue(GetEnumUnit()) != 37 ) ) then
        return false
    endif
    if ( not ( GetUnitAbilityLevelSwapped('Aloc', GetEnumUnit()) == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_RadarSweepPlanet_Func004Func002Func002Func002001001 takes nothing returns boolean
    return ( udg_Parasite == GetFilterPlayer() )
endfunction

function Trig_RadarSweepPlanet_Func004Func002Func002Func003001001 takes nothing returns boolean
    return ( GetOwningPlayer(GetBuyingUnit()) == GetFilterPlayer() )
endfunction

function Trig_RadarSweepPlanet_Func004Func002Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetBuyingUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_RadarSweepPlanet_Func004Func002C takes nothing returns boolean
    if not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) and ShipHasUnits(GetEnumUnit()) ) then // INLINED!!
    return false
    endif
    return true
endfunction

function Trig_RadarSweepPlanet_Func004A takes nothing returns nothing
    if ( Trig_RadarSweepPlanet_Func004Func001C() ) then
        set udg_TempPoint=GetUnitLoc(GetEnumUnit())
        if ( Trig_RadarSweepPlanet_Func004Func001Func002C() ) then
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_RadarSweepPlanet_Func004Func001Func002Func002001001)), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 100, 100)
        else
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_RadarSweepPlanet_Func004Func001Func002Func001001001)), udg_TempPoint, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 100, 100)
        endif
        call RemoveLocation(udg_TempPoint)
    else
    endif
    if ( Trig_RadarSweepPlanet_Func004Func002C() ) then
        set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
        if ( Trig_RadarSweepPlanet_Func004Func002Func002C() ) then
            call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5736")
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_RadarSweepPlanet_Func004Func002Func002Func003001001)), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100.00, 25.00, 50.00)
        else
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_RadarSweepPlanet_Func004Func002Func002Func002001001)), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100.00, 25.00, 50.00)
        endif
        call RemoveLocation(udg_TempPoint2)
    else
    endif
endfunction

function Trig_RadarSweepPlanet_Actions takes nothing returns nothing
    call RemoveItem(GetSoldItem())
    call DisplayTextToPlayer(GetOwningPlayer(GetBuyingUnit()), 0, 0, "|cffffcc00Planetary sweep complete.|r")
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_Planet), function Trig_RadarSweepPlanet_Func004A)
endfunction

//===========================================================================
function InitTrig_RadarSweepPlanet takes nothing returns nothing
    set gg_trg_RadarSweepPlanet=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_RadarSweepPlanet, gg_unit_h019_0154, EVENT_UNIT_SELL_ITEM)
    call TriggerAddAction(gg_trg_RadarSweepPlanet, function Trig_RadarSweepPlanet_Actions)
endfunction

//===========================================================================
// Trigger: PlanetmInit
//===========================================================================
function Trig_PlanetmInit_Func003A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_Planet)
    call DestroyFogModifier(GetLastCreatedFogModifier())
endfunction

function Trig_PlanetmInit_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call ForForce(GetPlayersAll(), function Trig_PlanetmInit_Func003A)
    set udg_PlanetRotatePoint=GetRectCenter(gg_rct_Space)
    set udg_All_Dock[21]=gg_dest_DTrx_1992
    set udg_All_Dock[22]=gg_dest_DTrx_1993
    set udg_All_Dock[23]=gg_dest_DTrx_1994
    set udg_All_Dock[24]=gg_dest_DTrx_1995
    set udg_All_Dock[35]=gg_dest_DTrx_1991
    set udg_All_Dock[36]=gg_dest_DTrx_1997
    set udg_All_Dock[37]=gg_dest_DTrx_1998
    set udg_All_Dock[38]=gg_dest_DTrx_1996
    set bj_forLoopAIndex=21
    set bj_forLoopAIndexEnd=24
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, udg_All_Dock[GetForLoopIndexA()])
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    set bj_forLoopAIndex=35
    set bj_forLoopAIndexEnd=38
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, udg_All_Dock[GetForLoopIndexA()])
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
endfunction

//===========================================================================
function InitTrig_PlanetmInit takes nothing returns nothing
    set gg_trg_PlanetmInit=CreateTrigger()
    call TriggerAddAction(gg_trg_PlanetmInit, function Trig_PlanetmInit_Actions)
endfunction

//===========================================================================
// Trigger: PlanetMovement
//===========================================================================
function Trig_PlanetMovement_Conditions takes nothing returns boolean
    if ( not ( UnitHasBuffBJ(gg_unit_h008_0196, 'B000') == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlanetMovement_Func003C takes nothing returns boolean
    if ( not ( udg_PlanetAngle >= 360.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlanetMovement_Actions takes nothing returns nothing
    if ( Trig_PlanetMovement_Func003C() ) then
        set udg_PlanetAngle=0.00
    else
    endif
    set udg_PlanetAngle=( udg_PlanetAngle + 0.02 )
    set udg_PlanetTempPoint=PolarProjectionBJ(udg_PlanetRotatePoint, 2300.00, udg_PlanetAngle)
    call SetUnitPositionLoc(gg_unit_h008_0196, udg_PlanetTempPoint)
    call RemoveLocation(udg_PlanetTempPoint)
endfunction

//===========================================================================
function InitTrig_PlanetMovement takes nothing returns nothing
    set gg_trg_PlanetMovement=CreateTrigger()
    call TriggerRegisterTimerEventPeriodic(gg_trg_PlanetMovement, 0.08)
    call TriggerAddCondition(gg_trg_PlanetMovement, Condition(function Trig_PlanetMovement_Conditions))
    call TriggerAddAction(gg_trg_PlanetMovement, function Trig_PlanetMovement_Actions)
endfunction

//===========================================================================
// Trigger: Snoeglay Death
//===========================================================================
function Trig_Snoeglay_Death_Func001C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetDyingUnit()) == 'n003' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetDyingUnit()) == 'h02E' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Snoeglay_Death_Conditions takes nothing returns boolean
    if ( not Trig_Snoeglay_Death_Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Snoeglay_Death_Func003C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetKillingUnitBJ()) == Player(PLAYER_NEUTRAL_AGGRESSIVE) ) ) then
        return false
    endif
    return true
endfunction

function Trig_Snoeglay_Death_Func004C takes nothing returns boolean
    if ( not ( udg_DeadSnoeglays == 15 ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetKillingUnitBJ()) != Player(PLAYER_NEUTRAL_AGGRESSIVE) ) ) then
        return false
    endif
    if ( not ( GetRandomInt(1, 2) == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Snoeglay_Death_Actions takes nothing returns nothing
    if ( Trig_Snoeglay_Death_Func003C() ) then
        set udg_TempPoint=GetRandomLocInRect(gg_rct_Planet)
        call CreateNUnitsAtLoc(1, 'n003', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
        call RemoveLocation(udg_TempPoint)
    else
        set udg_DeadSnoeglays=( udg_DeadSnoeglays + 1 )
    endif
    if ( Trig_Snoeglay_Death_Func004C() ) then
        set udg_TempPoint=GetUnitLoc(GetDyingUnit())
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Human\\MarkOfChaos\\MarkOfChaosTarget.mdl")
        call SFXThreadClean()
        call CreateNUnitsAtLoc(1, 'n005', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
        call UnitAddAbilityBJ('Arav', GetLastCreatedUnit())
        call SetUnitFlyHeightBJ(GetLastCreatedUnit(), 2000.00, 0.00)
        call SetUnitFlyHeightBJ(GetLastCreatedUnit(), 0.00, 1000.00)
        call RemoveLocation(udg_TempPoint)
        call DestroyTrigger(GetTriggeringTrigger())
    else
        call DoNothing()
    endif
endfunction

//===========================================================================
function InitTrig_Snoeglay_Death takes nothing returns nothing
    set gg_trg_Snoeglay_Death=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Snoeglay_Death, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_Snoeglay_Death, Condition(function Trig_Snoeglay_Death_Conditions))
    call TriggerAddAction(gg_trg_Snoeglay_Death, function Trig_Snoeglay_Death_Actions)
endfunction

//===========================================================================
// Trigger: PlanetDeath
//===========================================================================
function Trig_PlanetDeath_Func015A takes nothing returns nothing
    call EraseUnit(GetEnumUnit() , GetKillingUnit())
    set udg_TempPoint=GetUnitLoc(GetEnumUnit())
    call CreateNUnitsAtLoc(1, 'e001', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    call RemoveLocation(udg_TempPoint)
endfunction

function Trig_PlanetDeath_Func016C takes nothing returns boolean
    if ( not ( udg_Swagger_Grounded == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlanetDeath_Func018A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_Planet)
endfunction

function Trig_PlanetDeath_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call DestroyTrigger(gg_trg_PlanetDamage)
    call DestroyTrigger(gg_trg_PlanetDamagePerSecond)
    call DestroyTrigger(gg_trg_MoonMovement)
    call DestroyTrigger(gg_trg_Snoeglays)
    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 7.00, "ReplaceableTextures\\CameraMasks\\DreamFilter_Mask.blp", 100.00, 0, 0, 0)
    call PlaySoundBJ(gg_snd_NecropolisUpgrade1)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2973")
    set udg_TempPoint=GetUnitLoc(GetDyingUnit())
    call CreateNUnitsAtLoc(1, 'e00E', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
    call RemoveLocation(udg_TempPoint)
    call SetUnitPositionLoc(gg_unit_h008_0196, udg_HoldZone)
    call SetUnitVertexColorBJ(gg_unit_h008_0196, 100, 100, 100, 100.00)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_Planet), function Trig_PlanetDeath_Func015A)
    if ( Trig_PlanetDeath_Func016C() ) then
        call KillUnit(gg_unit_h00X_0049)
    else
    endif
    call PolledWait(5.00)
    call ForForce(GetPlayersAll(), function Trig_PlanetDeath_Func018A)
    call RectOfDoom(gg_rct_Planet)
endfunction

//===========================================================================
function InitTrig_PlanetDeath takes nothing returns nothing
    set gg_trg_PlanetDeath=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_PlanetDeath, gg_unit_h008_0196, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_PlanetDeath, function Trig_PlanetDeath_Actions)
endfunction

//===========================================================================
// Trigger: PlanetDamage
//===========================================================================
function RedoArray takes integer start,integer end,integer hashid returns integer
local integer i=start
local integer b=start
local location eval
loop
exitwhen i > end
set eval=LoadLocationHandle((udg_hash), hashid, i) // INLINED!!
if eval != null then
call SaveLocationHandle((udg_hash), hashid, b, eval) // INLINED!!
set b=b + 1
endif
set i=i + 1
endloop
return b
endfunction



//===========================================================================
// Trigger: PlanetDamagePerSecond
//===========================================================================
function Trig_PlanetDamagePerSecond_Conditions takes nothing returns boolean
    if ( not ( udg_MinerthaDPS > 0.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlanetDamagePerSecond_Func005Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetEnumUnit()) != 'n003' ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlanetDamagePerSecond_Func005A takes nothing returns nothing
    if ( Trig_PlanetDamagePerSecond_Func005Func001C() ) then
        call UnitDamageTargetBJ(GetEnumUnit(), GetEnumUnit(), udg_MinerthaDPS, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
    else
    endif
endfunction

function Trig_PlanetDamagePerSecond_Actions takes nothing returns nothing
    set udg_MinerthaDPS=( udg_MinerthaDPS * 0.99 )
    set udg_TempUnitGroup=GetUnitsInRectAll(gg_rct_Planet)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_PlanetDamagePerSecond_Func005A)
        call DestroyGroup(udg_TempUnitGroup)
endfunction

//===========================================================================
function InitTrig_PlanetDamagePerSecond takes nothing returns nothing
    set gg_trg_PlanetDamagePerSecond=CreateTrigger()
    call TriggerRegisterTimerEventPeriodic(gg_trg_PlanetDamagePerSecond, 1.00)
    call TriggerAddCondition(gg_trg_PlanetDamagePerSecond, Condition(function Trig_PlanetDamagePerSecond_Conditions))
    call TriggerAddAction(gg_trg_PlanetDamagePerSecond, function Trig_PlanetDamagePerSecond_Actions)
endfunction

//===========================================================================
// Trigger: MoonmInit
//===========================================================================
function Trig_MoonmInit_Func003A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_MoonRect)
    call DestroyFogModifier(GetLastCreatedFogModifier())
endfunction

function Trig_MoonmInit_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call ForForce(GetPlayersAll(), function Trig_MoonmInit_Func003A)
    set udg_PlanetRotatePoint=GetRectCenter(gg_rct_Space)
    set udg_All_Dock[41]=gg_dest_DTrx_3136
    set udg_All_Dock[42]=gg_dest_DTrx_3141
    set udg_All_Dock[43]=gg_dest_DTrx_3126
    set udg_All_Dock[44]=gg_dest_DTrx_3131
    set bj_forLoopAIndex=41
    set bj_forLoopAIndexEnd=44
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, udg_All_Dock[GetForLoopIndexA()])
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
endfunction

//===========================================================================
function InitTrig_MoonmInit takes nothing returns nothing
    set gg_trg_MoonmInit=CreateTrigger()
    call TriggerAddAction(gg_trg_MoonmInit, function Trig_MoonmInit_Actions)
endfunction

//===========================================================================
// Trigger: MoonMovement
//===========================================================================
function Trig_MoonMovement_Conditions takes nothing returns boolean
    if ( not ( UnitHasBuffBJ(gg_unit_h03T_0209, 'B000') == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_MoonMovement_Func003C takes nothing returns boolean
    if ( not ( udg_MoonAngle >= 360.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_MoonMovement_Actions takes nothing returns nothing
    if ( Trig_MoonMovement_Func003C() ) then
        set udg_MoonAngle=0.00
    else
    endif
    set udg_MoonAngle=( udg_MoonAngle + 0.06 )
    set udg_PlanetTempPoint=GetUnitLoc(gg_unit_h008_0196)
    set udg_MoonTempPoint=PolarProjectionBJ(udg_PlanetTempPoint, 800.00, udg_MoonAngle)
    call SetUnitPositionLoc(gg_unit_h03T_0209, udg_MoonTempPoint)
    call RemoveLocation(udg_PlanetTempPoint)
    call RemoveLocation(udg_MoonTempPoint)
endfunction

//===========================================================================
function InitTrig_MoonMovement takes nothing returns nothing
    set gg_trg_MoonMovement=CreateTrigger()
    call TriggerRegisterTimerEventPeriodic(gg_trg_MoonMovement, 0.04)
    call TriggerAddCondition(gg_trg_MoonMovement, Condition(function Trig_MoonMovement_Conditions))
    call TriggerAddAction(gg_trg_MoonMovement, function Trig_MoonMovement_Actions)
endfunction

//===========================================================================
// Trigger: MoonDeath
//===========================================================================
function Trig_MoonDeath_Func017A takes nothing returns nothing
    call EraseUnit(GetEnumUnit() , GetKillingUnit())
    set udg_TempPoint=GetUnitLoc(GetEnumUnit())
    call CreateNUnitsAtLoc(1, 'e001', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    call RemoveLocation(udg_TempPoint)
endfunction

function Trig_MoonDeath_Func019A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_MoonRect)
endfunction

function Trig_MoonDeath_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call DestroyTrigger(gg_trg_MoonMovement)
    call DestroyTrigger(gg_trg_GravitationalControl)
    call DestroyTrigger(gg_trg_GravitationalControlAngle)
    call DestroyTrigger(gg_trg_GravitationalControlTarget)
    call DestroyTrigger(gg_trg_MoonAttack)
    call DestroyTrigger(gg_trg_MoonAttackEnd)
    call DestroyTrigger(gg_trg_MoonDamage)
    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 7.00, "ReplaceableTextures\\CameraMasks\\DreamFilter_Mask.blp", 100.00, 0, 0, 0)
    call PlaySoundBJ(gg_snd_NecropolisUpgrade1)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2739")
    set udg_TempPoint=GetUnitLoc(GetDyingUnit())
    call CreateNUnitsAtLoc(1, 'e00E', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
    call RemoveLocation(udg_TempPoint)
    call SetUnitVertexColorBJ(gg_unit_h03T_0209, 100, 100, 100, 100.00)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_MoonRect), function Trig_MoonDeath_Func017A)
    call PolledWait(5.00)
    call ForForce(GetPlayersAll(), function Trig_MoonDeath_Func019A)
    call RectOfDoom(gg_rct_MoonRect)
endfunction

//===========================================================================
function InitTrig_MoonDeath takes nothing returns nothing
    set gg_trg_MoonDeath=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_MoonDeath, gg_unit_h03T_0209, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_MoonDeath, function Trig_MoonDeath_Actions)
endfunction

//===========================================================================
// Trigger: GravitationalControl
//===========================================================================


function Trig_GravitationalControl_Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetBuyingUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_GravitationalControl_Actions takes nothing returns nothing
local player d
    if ( Trig_GravitationalControl_Func001C() ) then
        set udg_TempPlayer=udg_Parasite
    else
        set udg_TempPlayer=GetOwningPlayer(GetBuyingUnit())
    endif
    set udg_TempPoint=GetUnitLoc(gg_unit_h03T_0209)
    call CreateNUnitsAtLoc(1, 'e017', udg_TempPlayer, udg_TempPoint, bj_UNIT_FACING)
    call PanCameraToTimedLocForPlayer(udg_TempPlayer, udg_TempPoint, 0)
    call RemoveLocation(udg_TempPoint)
    set d=udg_TempPlayer
    call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_TempPlayer)
    call PolledWait(0.01)
    call ForceUIKeyBJ(d, "J")
endfunction

//===========================================================================
function InitTrig_GravitationalControl takes nothing returns nothing
    set gg_trg_GravitationalControl=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_GravitationalControl, gg_unit_h012_0217, EVENT_UNIT_SELL_ITEM)
 
    call TriggerAddAction(gg_trg_GravitationalControl, function Trig_GravitationalControl_Actions)
endfunction


//===========================================================================
// Trigger: GravitationalControlTarget
//===========================================================================
function Trig_GravitationalControlTarget_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02V' ) ) then
        return false
    endif
    return true
endfunction

function Trig_GravitationalControlTarget_Func004Func001C takes nothing returns boolean
    if ( ( RectContainsLoc(gg_rct_Space, udg_TempPoint) == false ) ) then
        return true
    endif
    if ( ( IsUnitIdType(GetUnitTypeId(GetSpellTargetUnit()), UNIT_TYPE_STRUCTURE) == true ) ) then
        return true
    endif
    if ( ( GetSpellTargetUnit() == gg_unit_h03T_0209 ) ) then
        return true
    endif
    if ( ( GetSpellTargetUnit() == gg_unit_h008_0196 ) ) then
        return true
    endif
    return false
endfunction

function Trig_GravitationalControlTarget_Func004C takes nothing returns boolean
    if ( not Trig_GravitationalControlTarget_Func004Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_GravitationalControlTarget_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellTargetUnit())
    if ( Trig_GravitationalControlTarget_Func004C() ) then
        call DisplayTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, "|cffFF0000ERROR: Invalid target.|r")
        call IssueImmediateOrderBJ(GetSpellAbilityUnit(), "stop")
        call ForceUIKeyBJ(GetOwningPlayer(GetSpellAbilityUnit()), "J")
        call RemoveLocation(udg_TempPoint)
        return
    else
    endif
    set udg_GravitationalControl_Target=GetSpellTargetUnit()
    call ForceUIKeyBJ(GetOwningPlayer(GetSpellAbilityUnit()), "K")
    call DisplayTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, "|cff00FF00Target accepted. Select correction angle.|r")
endfunction

//===========================================================================
function InitTrig_GravitationalControlTarget takes nothing returns nothing
    set gg_trg_GravitationalControlTarget=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_GravitationalControlTarget, EVENT_PLAYER_UNIT_SPELL_CAST)
    call TriggerAddCondition(gg_trg_GravitationalControlTarget, Condition(function Trig_GravitationalControlTarget_Conditions))
    call TriggerAddAction(gg_trg_GravitationalControlTarget, function Trig_GravitationalControlTarget_Actions)
endfunction

//===========================================================================
// Trigger: GravitationalControlAngle
//===========================================================================
function Trig_GravitationalControlTarget_Copy_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A052' ) ) then
        return false
    endif
    return true
endfunction

function GC_Move takes nothing returns nothing
local timer i=GetExpiredTimer()
local real angle=LoadReal((udg_hash), GetHandleId(i), StringHash("angle")) // INLINED!!
local lightning handofgod=LoadLightningHandle((udg_hash), GetHandleId(i), StringHash("lightning")) // INLINED!!
local real tforce=LoadReal((udg_hash), GetHandleId(i), StringHash("force")) // INLINED!!
local unit target=LoadUnitHandle((udg_hash), GetHandleId(i), StringHash("target")) // INLINED!!

set udg_TempPoint=GetUnitLoc(target)
set udg_TempPoint2=PolarProjectionBJ(udg_TempPoint, tforce, angle)
call SetUnitPositionLoc(target, udg_TempPoint2)
call RemoveLocation(udg_TempPoint)
set udg_TempPoint=GetUnitLoc(gg_unit_h03T_0209)
if RectContainsLoc(gg_rct_Space, udg_TempPoint) == true then
call MoveLightningEx(handofgod, false, GetLocationX(udg_TempPoint), GetLocationY(udg_TempPoint), 0.0, GetLocationX(udg_TempPoint2), GetLocationY(udg_TempPoint2), 0.0)
    endif
call RemoveLocation(udg_TempPoint)
call RemoveLocation(udg_TempPoint2)
call SaveReal((udg_hash), GetHandleId(i), StringHash("force"), tforce + 0.25) // INLINED!!
endfunction
function Trig_GravitationalControlTarget_Copy_Actions takes nothing returns nothing
local timer i
local lightning handofgod
local real duration
if udg_GravitationalControl_Target != null then
set i=CreateTimer()
call SaveUnitHandle((udg_hash), GetHandleId(i), StringHash("target"), udg_GravitationalControl_Target) // INLINED!!
set udg_TempPoint=GetUnitLoc(gg_unit_h03T_0209)
set udg_TempPoint2=GetUnitLoc(udg_GravitationalControl_Target)
set handofgod=AddLightningEx("LEAS", false, GetLocationX(udg_TempPoint), GetLocationY(udg_TempPoint), 0, GetLocationX(udg_TempPoint2), GetLocationY(udg_TempPoint2), 0)
call SaveLightningHandle((udg_hash), GetHandleId(i), StringHash("lightning"), handofgod) // INLINED!!
call SaveReal((udg_hash), GetHandleId(i), StringHash("force"), 0) // INLINED!!
call RemoveLocation(udg_TempPoint)
set udg_TempPoint=GetSpellTargetLoc()
call SaveReal((udg_hash), GetHandleId(i), StringHash("angle"), AngleBetweenPoints(udg_TempPoint2, udg_TempPoint)) // INLINED!!
set duration=4
if GetUnitTypeId(udg_GravitationalControl_Target) != 'h031' and GetUnitTypeId(udg_GravitationalControl_Target) != 'h032' then
//The point value of units in space divided by 100 is the factor by which they can be pushed. For space alien, special exception.
//Lower point values = harder to push
set duration=duration * I2R(GetUnitPointValue(udg_GravitationalControl_Target)) / 100.0
endif
call RemoveLocation(udg_TempPoint)
call RemoveLocation(udg_TempPoint2)
    call RemoveUnit(GetSpellAbilityUnit())
    call DisplayTextToForce(GetPlayersAll(), "|cffFF8000GRAVITATIONAL CORRECTIONS ACTIVATED FOR " + StringCase(GetUnitName(udg_GravitationalControl_Target), true) + ".|r")
    call PlaySoundBJ(gg_snd_CharmTarget1)
   // call PolledWait(2.0)

call TimerStart(i, 0.04, true, function GC_Move)


    call PolledWait(duration)
    call FlushChildHashtable((udg_hash), GetHandleId(i)) // INLINED!!
    call PauseTimer(i)
    call DestroyTimer(i)
        call DestroyLightning(handofgod)
endif
endfunction

//===========================================================================
function InitTrig_GravitationalControlAngle takes nothing returns nothing
    set gg_trg_GravitationalControlAngle=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_GravitationalControlAngle, EVENT_PLAYER_UNIT_SPELL_CAST)
    call TriggerAddCondition(gg_trg_GravitationalControlAngle, Condition(function Trig_GravitationalControlTarget_Copy_Conditions))
    call TriggerAddAction(gg_trg_GravitationalControlAngle, function Trig_GravitationalControlTarget_Copy_Actions)
endfunction


//===========================================================================
// Trigger: MoonAttack
//===========================================================================
function Trig_MoonAttack_Conditions takes nothing returns boolean
    if ( not ( GetEventDamage() >= 1.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_MoonAttack_Func004C takes nothing returns boolean
    if ( not ( udg_Moon_TakingDamage == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_MoonAttack_Func008Func001C takes nothing returns boolean
    if ( not ( GetEnumUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] ) ) then
        return false
    endif
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_MoonAttack_Func008A takes nothing returns nothing
    if ( Trig_MoonAttack_Func008Func001C() ) then
        call ForceAddPlayerSimple(GetOwningPlayer(GetEnumUnit()), udg_Moon_PGroup)
        call CameraSetEQNoiseForPlayer(GetOwningPlayer(GetEnumUnit()), 3)
    else
    endif
endfunction

function Trig_MoonAttack_Func010A takes nothing returns nothing
    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 5.00, "|cffFF0000Errun under attack!|r")
endfunction

function Trig_MoonAttack_Func012Func001C takes nothing returns boolean
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetEnumPlayer())] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_MoonAttack_Func012A takes nothing returns nothing
    if ( Trig_MoonAttack_Func012Func001C() ) then
        call CameraClearNoiseForPlayer(GetEnumPlayer())
    else
    endif
endfunction

function Trig_MoonAttack_Actions takes nothing returns nothing
    call DisableTrigger(GetTriggeringTrigger())
    if ( Trig_MoonAttack_Func004C() ) then
        call SetStackedSoundBJ(true, gg_snd_WWII_submarine_dive_klaxon, gg_rct_MoonRect)
        set udg_Moon_TakingDamage=true
    else
    endif
    call StartTimerBJ(udg_Moon_ResetAlarm, false, 10.00)
    call ForceClear(udg_Moon_PGroup)
    set udg_TempUnitGroup=GetUnitsInRectAll(gg_rct_MoonRect)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_MoonRect), function Trig_MoonAttack_Func008A)
        call DestroyGroup(udg_TempUnitGroup)
    call ForForce(udg_Moon_PGroup, function Trig_MoonAttack_Func010A)
    call PolledWait(5.00)
    call ForForce(udg_Moon_PGroup, function Trig_MoonAttack_Func012A)
    call EnableTrigger(gg_trg_MoonAttack)
endfunction

//===========================================================================
function InitTrig_MoonAttack takes nothing returns nothing
    set gg_trg_MoonAttack=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_MoonAttack, gg_unit_h03T_0209, EVENT_UNIT_DAMAGED)
    call TriggerAddCondition(gg_trg_MoonAttack, Condition(function Trig_MoonAttack_Conditions))
    call TriggerAddAction(gg_trg_MoonAttack, function Trig_MoonAttack_Actions)
endfunction

//===========================================================================
// Trigger: MoonAttackEnd
//===========================================================================
function Trig_MoonAttackEnd_Actions takes nothing returns nothing
    set udg_Moon_TakingDamage=false
    call SetStackedSoundBJ(false, gg_snd_WWII_submarine_dive_klaxon, gg_rct_MoonRect)
endfunction

//===========================================================================
function InitTrig_MoonAttackEnd takes nothing returns nothing
    set gg_trg_MoonAttackEnd=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_MoonAttackEnd, udg_Moon_ResetAlarm)
    call TriggerAddAction(gg_trg_MoonAttackEnd, function Trig_MoonAttackEnd_Actions)
endfunction

//===========================================================================
// Trigger: MoonShieldFailure
//===========================================================================
function Trig_MoonShieldFailure_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call PlaySoundBJ(gg_snd_Warning01)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2741")
    call AddWeatherEffectSaveLast(gg_rct_MoonRect, 'WOcw')
    call EnableWeatherEffect(GetLastCreatedWeatherEffect(), true)
    call SetStackedSoundBJ(true, gg_snd_War3XMainGlueScreen, gg_rct_MoonRect)
    call StartTimerBJ(udg_MoonDamageTimer, true, 0.50)
endfunction

//===========================================================================
function InitTrig_MoonShieldFailure takes nothing returns nothing
    set gg_trg_MoonShieldFailure=CreateTrigger()
    call TriggerRegisterUnitManaEvent(gg_trg_MoonShieldFailure, gg_unit_h03T_0209, LESS_THAN_OR_EQUAL, 0.00)
    call TriggerAddAction(gg_trg_MoonShieldFailure, function Trig_MoonShieldFailure_Actions)
endfunction

//===========================================================================
// Trigger: MoonDamage
//===========================================================================
function Trig_MoonDamage_Func003A takes nothing returns nothing
    call UnitDamageTargetBJ(gg_unit_h03T_0209, GetEnumUnit(), 5.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
endfunction

function Trig_MoonDamage_Actions takes nothing returns nothing
    set udg_TempUnitGroup=GetUnitsInRectAll(gg_rct_MoonRect)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_MoonDamage_Func003A)
        call DestroyGroup(udg_TempUnitGroup)
endfunction

//===========================================================================
function InitTrig_MoonDamage takes nothing returns nothing
    set gg_trg_MoonDamage=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_MoonDamage, udg_MoonDamageTimer)
    call TriggerAddAction(gg_trg_MoonDamage, function Trig_MoonDamage_Actions)
endfunction

//===========================================================================
// Trigger: AssemblyPlant
//===========================================================================


function AP_LoopVisibilityAndTime takes texttag l,string production,real startx,real starty,timer m returns nothing
local integer i
local integer r=GetHandleId(l)
local boolean k=false
call SaveBoolean(AP_Hash, r, StringHash("w"), true)
loop
exitwhen LoadBoolean(AP_Hash, r, StringHash("w")) != true or k
set i=0
loop
exitwhen i > 11
if IsVisibleToPlayer(startx, starty, Player(i)) then
if GetLocalPlayer() == Player(i) then
call SetTextTagVisibility(l, true)
endif
else
if GetLocalPlayer() == Player(i) then
call SetTextTagVisibility(l, false)
endif
endif
set i=i + 1
endloop
call SetTextTagTextBJ(l, production + " (" + I2S(R2I(TimerGetRemaining(m))) + ")", 10.0)
if TimerGetRemaining(m) == 0 then
set k=true
else
call PolledWait(0.2)
endif
endloop
call DestroyTextTag(l)
endfunction

function DestroyLoopedTextTag takes texttag t returns nothing
if t != null then
call SaveBoolean(AP_Hash, GetHandleId(t), StringHash("w"), false)
endif
endfunction


function BLARGH takes nothing returns nothing
endfunction
function BeginProduction takes string text,real duration,string ExecuteWhenDone returns nothing
local integer ProductionID
local location bm=Location(11345.9, - 1960)
local texttag j=CreateTextTagLocBJ(text, bm, 90.0, 10.0, 50, 100, 100, 0)
local timer m=CreateTimer()
set AP_InfoTag=j
call SetTextTagVisibility(j, true)
call RemoveLocation(bm)
set bm=null
call TimerStart(m, duration, false, function BLARGH)
set AssemblyPlant_ProductionNumber=AssemblyPlant_ProductionNumber + 1
set ProductionID=AssemblyPlant_ProductionNumber
call SaveBoolean(AP_Hash, GetHandleId(AP_HashStore), ProductionID, true)
call AP_LoopVisibilityAndTime(j , text , 11345.9 , - 1960 , m)
call DestroyTextTag(j)
if LoadBoolean(AP_Hash, GetHandleId(AP_HashStore), ProductionID) == true and TimerGetRemaining(m) == 0 then
call ExecuteFunc(ExecuteWhenDone)
endif
call DestroyTimer(m)
endfunction

function CancelProduction takes nothing returns nothing
call SaveBoolean(AP_Hash, GetHandleId(AP_HashStore), AssemblyPlant_ProductionNumber, false)
call DestroyLoopedTextTag(AP_InfoTag)
endfunction

function RollOutItem_Slide takes nothing returns nothing
local timer k=GetExpiredTimer()
local item j=LoadItemHandle(AP_Hash, GetHandleId(k), StringHash("j"))
call SetItemPosition(j, 11074.8, GetItemY(j) - 2)
if RectContainsItem(j, gg_rct_AssemblyDropoff) then
call PauseTimer(k)
call FlushChildHashtable(AP_Hash, GetHandleId(k))
call DestroyTimer(k)
endif
endfunction

function RollOutItem takes item j returns nothing
local timer k=CreateTimer()
call SetItemPosition(j, 11074.8, - 1904)
call SaveItemHandle(AP_Hash, GetHandleId(k), StringHash("j"), j)
call TimerStart(k, 0.04, true, function RollOutItem_Slide)
endfunction
//===========================================================================
function InitTrig_AssemblyPlant takes nothing returns nothing
endfunction


//===========================================================================
// Trigger: CancelProductionGo
//===========================================================================
function Trig_CancelProductionGo_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e01V' ) ) then
        return false
    endif
    return true
endfunction

function Trig_CancelProductionGo_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(gg_unit_h04B_0165, "stop")
    call CancelProduction()
endfunction

//===========================================================================
function InitTrig_CancelProductionGo takes nothing returns nothing
    set gg_trg_CancelProductionGo=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_CancelProductionGo, EVENT_PLAYER_UNIT_TRAIN_FINISH)
    call TriggerAddCondition(gg_trg_CancelProductionGo, Condition(function Trig_CancelProductionGo_Conditions))
    call TriggerAddAction(gg_trg_CancelProductionGo, function Trig_CancelProductionGo_Actions)
endfunction

//===========================================================================
// Trigger: ASAD
//===========================================================================
function Trig_ASAD_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e01W' ) ) then
        return false
    endif
    return true
endfunction

function ASAD_Finish takes nothing returns nothing
local item v=CreateItem('I01S', 0, 0)
call RollOutItem(v)
endfunction

function Trig_ASAD_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(gg_unit_h04B_0165, "stop")
    call CancelProduction()
    call BeginProduction("Arbitress Scan Augmentation Device" , 300 , "ASAD_Finish")
endfunction

//===========================================================================
function InitTrig_ASAD takes nothing returns nothing
    set gg_trg_ASAD=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ASAD, EVENT_PLAYER_UNIT_TRAIN_FINISH)
    call TriggerAddCondition(gg_trg_ASAD, Condition(function Trig_ASAD_Conditions))
    call TriggerAddAction(gg_trg_ASAD, function Trig_ASAD_Actions)
endfunction


//===========================================================================
// Trigger: ATM
//===========================================================================
function Trig_ATM_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e01X' ) ) then
        return false
    endif
    return true
endfunction

function ATM_Finish takes nothing returns nothing
local item v=CreateItem('I01T', 0, 0)
call RollOutItem(v)
endfunction

function Trig_ATM_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(gg_unit_h04B_0165, "stop")
    call CancelProduction()
    call BeginProduction("Antimatter Teleportation Matrix" , 700 , "ATM_Finish")
endfunction

//===========================================================================
function InitTrig_ATM takes nothing returns nothing
    set gg_trg_ATM=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ATM, EVENT_PLAYER_UNIT_TRAIN_FINISH)
    call TriggerAddCondition(gg_trg_ATM, Condition(function Trig_ATM_Conditions))
    call TriggerAddAction(gg_trg_ATM, function Trig_ATM_Actions)
endfunction


//===========================================================================
// Trigger: RUM
//===========================================================================
//TESH.scrollpos=3
//TESH.alwaysfold=0
function Trig_RUM_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e01Z' ) ) then
        return false
    endif
    return true
endfunction

function RUM_Finish takes nothing returns nothing
local item v=CreateItem('I01U', 0, 0)
call RollOutItem(v)
endfunction

function Trig_RUM_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(gg_unit_h04B_0165, "stop")
    call CancelProduction()
    call BeginProduction("Raptor Upgrade Module" , 340 , "RUM_Finish")
endfunction

//===========================================================================
function InitTrig_RUM takes nothing returns nothing
    set gg_trg_RUM=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_RUM, EVENT_PLAYER_UNIT_TRAIN_FINISH)
    call TriggerAddCondition(gg_trg_RUM, Condition(function Trig_RUM_Conditions))
    call TriggerAddAction(gg_trg_RUM, function Trig_RUM_Actions)
endfunction


//===========================================================================
// Trigger: ARD
//===========================================================================
function Trig_ARD_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e022' ) ) then
        return false
    endif
    return true
endfunction

function ARD_Finish takes nothing returns nothing
local item v=CreateItem('I01V', 0, 0)
call RollOutItem(v)
endfunction

function Trig_ARD_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(gg_unit_h04B_0165, "stop")
    call CancelProduction()
    call BeginProduction("Auxiliary Repositioning Drive" , 600 , "ARD_Finish")
endfunction

//===========================================================================
function InitTrig_ARD takes nothing returns nothing
    set gg_trg_ARD=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ARD, EVENT_PLAYER_UNIT_TRAIN_FINISH)
    call TriggerAddCondition(gg_trg_ARD, Condition(function Trig_ARD_Conditions))
    call TriggerAddAction(gg_trg_ARD, function Trig_ARD_Actions)
endfunction


//===========================================================================
// Trigger: Ore
//===========================================================================
function Trig_Ore_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e025' ) ) then
        return false
    endif
    return true
endfunction

function Ore_Finish takes nothing returns nothing
local item v=CreateItem('I01W', 0, 0)
call RollOutItem(v)
endfunction

function Trig_Ore_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(gg_unit_h04B_0165, "stop")
    call CancelProduction()
    call BeginProduction("Refined Ore" , 70 , "Ore_Finish")
endfunction

//===========================================================================
function InitTrig_Ore takes nothing returns nothing
    set gg_trg_Ore=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Ore, EVENT_PLAYER_UNIT_TRAIN_FINISH)
    call TriggerAddCondition(gg_trg_Ore, Condition(function Trig_Ore_Conditions))
    call TriggerAddAction(gg_trg_Ore, function Trig_Ore_Actions)
endfunction


//===========================================================================
// Trigger: Neurotoxin
//===========================================================================
function Trig_Neurotoxin_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'e026' ) ) then
        return false
    endif
    return true
endfunction

function Neurotoxin_Finish takes nothing returns nothing
local item v=CreateItem('I01X', 0, 0)
call RollOutItem(v)
endfunction

function Trig_Neurotoxin_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(gg_unit_h04B_0165, "stop")
    call CancelProduction()
    call BeginProduction("Neurotoxin Module" , 300 , "Neurotoxin_Finish")
endfunction

//===========================================================================
function InitTrig_Neurotoxin takes nothing returns nothing
    set gg_trg_Neurotoxin=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Neurotoxin, EVENT_PLAYER_UNIT_TRAIN_FINISH)
    call TriggerAddCondition(gg_trg_Neurotoxin, Condition(function Trig_Neurotoxin_Conditions))
    call TriggerAddAction(gg_trg_Neurotoxin, function Trig_Neurotoxin_Actions)
endfunction


//===========================================================================
// Trigger: RUMAcquire
//===========================================================================
function Trig_RUMAcquire_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A06V' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RUMAcquire_Func003Func002C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A06W', udg_TempUnit) == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_RUMAcquire_Func003C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h001' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RUMAcquire_Actions takes nothing returns nothing
    if ( Trig_RUMAcquire_Func003C() ) then
        set udg_TempUnit=udg_SS_Space[GetUnitUserData(GetSpellTargetUnit())]
        if ( Trig_RUMAcquire_Func003Func002C() ) then
            call DisplayTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, "This raptor has already been upgraded!")
            return
        else
        endif
        set udg_TempUnit2=GetSpellTargetUnit()
        set udg_TempPoint=GetUnitLoc(GetSpellTargetUnit())
        call RemoveItem(GetItemOfTypeFromUnitBJ(GetSpellAbilityUnit(), 'I01U'))
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\NightElf\\Taunt\\TauntCaster.mdl")
        call SFXThreadClean()
        call AddSpecialEffectLocBJ(udg_TempPoint, "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl")
        call SFXThreadClean()
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Other\\Awaken\\Awaken.mdl")
        call SFXThreadClean()
        call RemoveLocation(udg_TempPoint)
        call SetUnitAbilityLevelSwapped('A003', udg_TempUnit, 2)
        call SetUnitVertexColorBJ(udg_TempUnit2, 100.00, 60.00, 40.00, 0)
        call SetUnitAbilityLevelSwapped('A002', udg_TempUnit, 2)
        call SetUnitVertexColorBJ(udg_TempUnit, 100.00, 50.00, 40.00, 0)
        call UnitAddAbilityBJ('A06W', udg_TempUnit)
        call UnitAddAbilityBJ('A06X', udg_TempUnit)
        call UnitAddAbilityBJ('A06Y', udg_TempUnit)
        call UnitAddAbilityBJ('A06Z', udg_TempUnit)
    else
    endif
endfunction

//===========================================================================
function InitTrig_RUMAcquire takes nothing returns nothing
    set gg_trg_RUMAcquire=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_RUMAcquire, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_RUMAcquire, Condition(function Trig_RUMAcquire_Conditions))
    call TriggerAddAction(gg_trg_RUMAcquire, function Trig_RUMAcquire_Actions)
endfunction

//===========================================================================
// Trigger: OreAcquire
//===========================================================================
function Trig_OreAcquire_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07B' ) ) then
        return false
    endif
    return true
endfunction

function Trig_OreAcquire_Func003C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h04F' ) ) then
        return false
    endif
    return true
endfunction

function Trig_OreAcquire_Actions takes nothing returns nothing
    if ( Trig_OreAcquire_Func003C() ) then
        set udg_TempUnit2=GetSpellTargetUnit()
        set udg_TempPoint=GetUnitLoc(GetSpellTargetUnit())
        call RemoveItem(GetItemOfTypeFromUnitBJ(GetSpellAbilityUnit(), 'I01W'))
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\NightElf\\Taunt\\TauntCaster.mdl")
        call SFXThreadClean()
        call AddSpecialEffectLocBJ(udg_TempPoint, "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl")
        call SFXThreadClean()
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl")
        call SetUnitManaBJ(gg_unit_h04E_0259, ( GetUnitStateSwap(UNIT_STATE_MANA, gg_unit_h04E_0259) + 150.00 ))
        call SFXThreadClean()
        call RemoveLocation(udg_TempPoint)
    else
    endif
endfunction

//===========================================================================
function InitTrig_OreAcquire takes nothing returns nothing
    set gg_trg_OreAcquire=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_OreAcquire, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_OreAcquire, Condition(function Trig_OreAcquire_Conditions))
    call TriggerAddAction(gg_trg_OreAcquire, function Trig_OreAcquire_Actions)
endfunction

//===========================================================================
// Trigger: NeurotoxinAcquire
//===========================================================================
function Trig_NeurotoxinAcquire_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07C' ) ) then
        return false
    endif
    return true
endfunction

function Trig_NeurotoxinAcquire_Func003C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h04F' ) ) then
        return false
    endif
    return true
endfunction

function Trig_NeurotoxinAcquire_Actions takes nothing returns nothing
    if ( Trig_NeurotoxinAcquire_Func003C() ) then
        set udg_TempUnit2=GetSpellTargetUnit()
        set udg_TempPoint=GetUnitLoc(GetSpellTargetUnit())
        call RemoveItem(GetItemOfTypeFromUnitBJ(GetSpellAbilityUnit(), 'I01X'))
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl")
        call SFXThreadClean()
        call AddSpecialEffectLocBJ(udg_TempPoint, "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl")
        call SFXThreadClean()
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl")
        call UnitAddAbilityBJ('A07D', gg_unit_h04E_0259)
        call SFXThreadClean()
        call RemoveLocation(udg_TempPoint)
    else
    endif
endfunction

//===========================================================================
function InitTrig_NeurotoxinAcquire takes nothing returns nothing
    set gg_trg_NeurotoxinAcquire=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_NeurotoxinAcquire, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_NeurotoxinAcquire, Condition(function Trig_NeurotoxinAcquire_Conditions))
    call TriggerAddAction(gg_trg_NeurotoxinAcquire, function Trig_NeurotoxinAcquire_Actions)
endfunction

//===========================================================================
// Trigger: SunUnitInRange
//===========================================================================
function Trig_SunUnitInRange_Conditions takes nothing returns boolean
    if ( not ( GetUnitPointValue(GetTriggerUnit()) != 37 ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetTriggerUnit()) != 'h02P' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SunUnitInRange_Actions takes nothing returns nothing
    call SunLoop(GetTriggerUnit())
endfunction

//===========================================================================
function InitTrig_SunUnitInRange takes nothing returns nothing
    set gg_trg_SunUnitInRange=CreateTrigger()
    call TriggerRegisterUnitInRangeSimple(gg_trg_SunUnitInRange, 600.00, gg_unit_h01A_0197)
    call TriggerAddCondition(gg_trg_SunUnitInRange, Condition(function Trig_SunUnitInRange_Conditions))
    call TriggerAddAction(gg_trg_SunUnitInRange, function Trig_SunUnitInRange_Actions)
endfunction

//===========================================================================
// Trigger: Sunpod apocalypse
//===========================================================================
function Trig_Sunpod_apocalypse_Conditions takes nothing returns boolean
    if ( not ( GetUnitPointValue(GetTriggerUnit()) != 37 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Sunpod_apocalypse_Actions takes nothing returns nothing
    call SunLoop(GetTriggerUnit())
endfunction

//===========================================================================
function InitTrig_Sunpod_apocalypse takes nothing returns nothing
    set gg_trg_Sunpod_apocalypse=CreateTrigger()
    call DisableTrigger(gg_trg_Sunpod_apocalypse)
    call TriggerRegisterUnitInRangeSimple(gg_trg_Sunpod_apocalypse, 600.00, gg_unit_h01A_0197)
    call TriggerAddCondition(gg_trg_Sunpod_apocalypse, Condition(function Trig_Sunpod_apocalypse_Conditions))
    call TriggerAddAction(gg_trg_Sunpod_apocalypse, function Trig_Sunpod_apocalypse_Actions)
endfunction

//===========================================================================
// Trigger: SpaceshipFuncs
//
// Contains the spaceship generic building routine, and a few others.
//===========================================================================

function SSEnter takes nothing returns nothing
//set udg_TempUnit=GetHandleUnit(GetTriggeringTrigger(), "q")
set udg_TempUnit=LoadUnitHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("q")) // INLINED!!
call ConditionalTriggerExecute(gg_trg_SSGenEnter)
endfunction
function SSControl takes nothing returns nothing
set udg_TempUnit=LoadUnitHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("q")) // INLINED!!
call ConditionalTriggerExecute(gg_trg_SSGenControl)
endfunction
function SSControlLoss takes nothing returns nothing
set udg_TempUnit=LoadUnitHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("q")) // INLINED!!
call ConditionalTriggerExecute(gg_trg_SSGenControlLoss)
endfunction
function SSExit takes nothing returns nothing
set udg_TempUnit=LoadUnitHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("q")) // INLINED!!
call ConditionalTriggerExecute(gg_trg_SSGenExit)
endfunction
function SSDeath takes nothing returns nothing
set udg_TempUnit=LoadUnitHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("q")) // INLINED!!
call ConditionalTriggerExecute(gg_trg_SSGenDeath)
endfunction

function SSDamage_Reset takes nothing returns nothing
local timer t=GetExpiredTimer()
local trigger m=LoadTriggerHandle((udg_hash), GetHandleId(t), StringHash("trig")) // INLINED!!
set udg_TempUnit=LoadUnitHandle((udg_hash), GetHandleId(m), StringHash("q")) // INLINED!!
call SetStackedSoundBJ(false, gg_snd_WWII_submarine_dive_klaxon, udg_SpaceObject_Rect[(GetUnitUserData((udg_TempUnit)))]) // INLINED!!
call SaveBoolean((udg_hash), GetHandleId(m), StringHash("underattack"), false) // INLINED!!
endfunction

function SSDamage takes nothing returns nothing
local trigger m=GetTriggeringTrigger()
local timer t=LoadTimerHandle((udg_hash), GetHandleId(m), StringHash("timer")) // INLINED!!
set udg_TempUnit=LoadUnitHandle((udg_hash), GetHandleId(m), StringHash("q")) // INLINED!!
    call DisableTrigger(m)
    if LoadBoolean((udg_hash), GetHandleId(m), StringHash("underattack")) == false then // INLINED!!
        call SetStackedSoundBJ(true, gg_snd_WWII_submarine_dive_klaxon, udg_SpaceObject_Rect[(GetUnitUserData((udg_TempUnit)))]) // INLINED!!
        call SaveBoolean((udg_hash), GetHandleId(m), StringHash("underattack"), true) // INLINED!!
    endif
    call TimerStart(t, 10.0, false, function SSDamage_Reset)
    call PolledWait(5.00)
    call EnableTrigger(m)
endfunction


function Spaceship_Build takes unit landed,unit space,unit console,rect mainsrect,rect enterexit,rect controlrect,integer sector returns nothing
    
    local trigger enter=CreateTrigger()
    local trigger exit=CreateTrigger()
    local trigger control=CreateTrigger()
    local trigger controlLoss=CreateTrigger()
    local trigger death=CreateTrigger()
    local integer i
    local trigger damage=CreateTrigger()
    local timer DamageTimer=CreateTimer()

    set udg_Sector_Space[sector]=space
    set SpaceshipID=SpaceshipID + 1
    set udg_SpaceshipID_Space[SpaceshipID]=space

    call TriggerRegisterUnitInRangeSimple(enter, 128.00, landed)
    call TriggerRegisterEnterRectSimple(control, controlrect)
    call TriggerRegisterLeaveRectSimple(controlLoss, controlrect)
    call TriggerRegisterEnterRectSimple(exit, enterexit)
    call TriggerRegisterUnitEvent(death, landed, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(death, space, EVENT_UNIT_DEATH)
    call TriggerRegisterUnitEvent(damage, landed, EVENT_UNIT_DAMAGED)
    call TriggerRegisterUnitEvent(damage, space, EVENT_UNIT_DAMAGED)
    call TriggerAddAction(enter, function SSEnter)
    call TriggerAddAction(control, function SSControl)
    call TriggerAddAction(controlLoss, function SSControlLoss)
    call TriggerAddAction(exit, function SSExit)
    call TriggerAddAction(death, function SSDeath)
    call TriggerAddAction(damage, function SSDamage)

    //call SetHandleHandle(enter, "q", landed) 
    //call SetHandleHandle(exit, "q", landed) 
    //call SetHandleHandle(control, "q", landed) 
    //call SetHandleHandle(controlLoss, "q", landed) 
    //call SetHandleHandle(death, "q", landed)

    call SaveUnitHandle((udg_hash), GetHandleId(enter), StringHash("q"), landed) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(exit), StringHash("q"), landed) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(control), StringHash("q"), landed) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(controlLoss), StringHash("q"), landed) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(death), StringHash("q"), landed) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(damage), StringHash("q"), landed) // INLINED!!
    call SaveBoolean((udg_hash), GetHandleId(damage), StringHash("underattack"), false) // INLINED!!
    call SaveTimerHandle((udg_hash), GetHandleId(damage), StringHash("timer"), DamageTimer) // INLINED!!
    call SaveTriggerHandle((udg_hash), GetHandleId(DamageTimer), StringHash("trig"), damage) // INLINED!!
    
    //NewUnitRegister, gives the spaceship its own new and unique custom unit value!
    call NewUnitRegister(landed)
    call NewUnitRegister(space)
    
    //Note that the custom value for each spaceship is different
    //Landed and Space equivalent, have different custom values!

    set i=(GetUnitUserData((landed))) //Literally i = GetUnitUserData(landed) // INLINED!!
    set udg_SpaceObject_Rect[i]=mainsrect
    set udg_SpaceObject_Rect[(GetUnitUserData((space)))]=mainsrect // INLINED!!
    set udg_Spaceship_Console[i]=console
    set udg_Spaceship_ControlLossTrig[i]=controlLoss
    set udg_Spaceship_ControlRect[i]=controlrect
    set udg_Spaceship_ControlTrig[i]=control
    set udg_Spaceship_Death[i]=death
    set udg_Spaceship_EnterExit[i]=enterexit
    set udg_Spaceship_EnterTrig[i]=enter
    set udg_Spaceship_ExitTrig[i]=exit
    set udg_Spaceship_Rect[i]=mainsrect
    set udg_SS_Landed[i]=landed
    set udg_SS_Space[i]=space

    set i=(GetUnitUserData((space))) //Literally i = GetUnitUserData(space) // INLINED!!
    set udg_Spaceship_Console[i]=console
    set udg_Spaceship_ControlLossTrig[i]=controlLoss
    set udg_Spaceship_ControlRect[i]=controlrect
    set udg_Spaceship_ControlTrig[i]=control
    set udg_Spaceship_Death[i]=death
    set udg_Spaceship_EnterExit[i]=enterexit
    set udg_Spaceship_EnterTrig[i]=enter
    set udg_Spaceship_ExitTrig[i]=exit
    set udg_Spaceship_Rect[i]=mainsrect
    set udg_SS_Landed[i]=landed
    set udg_SS_Space[i]=space
    
    call SetUnitTimeScalePercent(landed, 0.00)
endfunction
//===========================================================================
function InitTrig_SpaceshipFuncs takes nothing returns nothing
endfunction


//===========================================================================
// Trigger: SSInit
//
// Initializes all spaceships and changes the animation speed for the Swagger and minertha.
//===========================================================================
function Trig_SSInit_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call SetUnitTimeScalePercent(gg_unit_h00X_0049, 15.00)
    call SetUnitTimeScalePercent(gg_unit_h008_0196, 15.00)
    set udg_TempUnit=gg_unit_h001_0042
    set udg_TempUnit2=gg_unit_h002_0046
    set udg_TempUnit3=gg_unit_h004_0048
    set udg_TempRect=gg_rct_SS4
    set udg_TempRect2=gg_rct_SS4EE
    set udg_TempRect3=gg_rct_SS4Control
    set udg_SS_Harbor[GetUnitUserData(gg_unit_h001_0042)]=gg_unit_h009_0029
    set udg_All_Dock_Filled[14]=true
    set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h001_0042)]=14
    set udg_TempInt=12
    call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , udg_TempInt)
    set udg_TempUnit=gg_unit_h001_0041
    set udg_TempUnit2=gg_unit_h002_0020
    set udg_TempUnit3=gg_unit_h004_0023
    set udg_TempRect=gg_rct_SS1
    set udg_TempRect2=gg_rct_SS1EE
    set udg_TempRect3=gg_rct_SS1Control
    set udg_SS_Harbor[GetUnitUserData(gg_unit_h001_0041)]=gg_unit_h009_0029
    set udg_All_Dock_Filled[9]=true
    set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h001_0041)]=9
    set udg_TempInt=9
    call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , udg_TempInt)
    set udg_TempUnit=gg_unit_h001_0043
    set udg_TempUnit2=gg_unit_h002_0021
    set udg_TempUnit3=gg_unit_h004_0019
    set udg_TempRect=gg_rct_SS2
    set udg_TempRect2=gg_rct_SS2EE
    set udg_TempRect3=gg_rct_SS2Control
    set udg_SS_Harbor[GetUnitUserData(gg_unit_h001_0043)]=gg_unit_h009_0029
    set udg_All_Dock_Filled[12]=true
    set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h001_0043)]=12
    set udg_TempInt=10
    call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , udg_TempInt)
    set udg_TempUnit=gg_unit_h001_0044
    set udg_TempUnit2=gg_unit_h002_0045
    set udg_TempUnit3=gg_unit_h004_0047
    set udg_TempRect=gg_rct_SS3
    set udg_TempRect2=gg_rct_SS3EE
    set udg_TempRect3=gg_rct_SS3Control
    set udg_SS_Harbor[GetUnitUserData(gg_unit_h001_0044)]=gg_unit_h009_0029
    set udg_All_Dock_Filled[16]=true
    set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h001_0044)]=16
    set udg_TempInt=11
    call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , udg_TempInt)
    set udg_TempUnit=gg_unit_h001_0016
    set udg_TempUnit2=gg_unit_h002_0138
    set udg_TempUnit3=gg_unit_h004_0156
    set udg_TempRect=gg_rct_SS5
    set udg_TempRect2=gg_rct_SS5EE
    set udg_TempRect3=gg_rct_SS5Control
    set udg_SS_Harbor[GetUnitUserData(gg_unit_h001_0016)]=gg_unit_h003_0018
    set udg_All_Dock_Filled[1]=true
    set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h001_0016)]=1
    set udg_TempInt=13
    call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , udg_TempInt)
    set udg_TempUnit=gg_unit_h001_0002
    set udg_TempUnit2=gg_unit_h002_0153
    set udg_TempUnit3=gg_unit_h004_0157
    set udg_TempRect=gg_rct_SS6
    set udg_TempRect2=gg_rct_SS6EE
    set udg_TempRect3=gg_rct_SS6Control
    set udg_SS_Harbor[GetUnitUserData(gg_unit_h001_0002)]=gg_unit_h003_0018
    set udg_All_Dock_Filled[4]=true
    set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h001_0002)]=4
    set udg_TempInt=14
    call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , udg_TempInt)
    set udg_TempUnit=gg_unit_h001_0163
    set udg_TempUnit2=gg_unit_h002_0158
    set udg_TempUnit3=gg_unit_h004_0160
    set udg_TempRect=gg_rct_SS7
    set udg_TempRect2=gg_rct_SS7EE
    set udg_TempRect3=gg_rct_SS7Control
    set udg_SS_Harbor[GetUnitUserData(gg_unit_h001_0163)]=gg_unit_h00X_0049
    set udg_All_Dock_Filled[17]=true
    set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h001_0163)]=17
    set udg_TempInt=15
    call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , udg_TempInt)
    set udg_TempUnit=gg_unit_h001_0162
    set udg_TempUnit2=gg_unit_h002_0159
    set udg_TempUnit3=gg_unit_h004_0161
    set udg_TempRect=gg_rct_SS8
    set udg_TempRect2=gg_rct_SS8EE
    set udg_TempRect3=gg_rct_SS8Control
    set udg_SS_Harbor[GetUnitUserData(gg_unit_h001_0162)]=gg_unit_h00X_0049
    set udg_All_Dock_Filled[19]=true
    set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h001_0162)]=19
    set udg_TempInt=16
    call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , udg_TempInt)
    set udg_TempUnit=gg_unit_h02I_0183
    set udg_TempUnit2=gg_unit_h02H_0198
    set udg_TempUnit3=gg_unit_h004_0199
    set udg_TempRect=gg_rct_SS9
    set udg_TempRect2=gg_rct_SS9EE
    set udg_TempRect3=gg_rct_SS9Control
    set udg_SS_Harbor[GetUnitUserData(gg_unit_h02I_0183)]=gg_unit_h008_0196
    set udg_All_Dock_Filled[36]=true
    set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h02I_0183)]=36
    set udg_TempInt=17
    call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , udg_TempInt)
    set udg_TempUnit=gg_unit_h02K_0203
    set udg_TempUnit2=gg_unit_h02L_0205
    set udg_TempUnit3=gg_unit_h004_0221
    set udg_TempRect=gg_rct_SS10
    set udg_TempRect2=gg_rct_SS10EE
    set udg_TempRect3=gg_rct_SS10Control
    set udg_SS_Harbor[GetUnitUserData(gg_unit_h02K_0203)]=gg_unit_h009_0029
    set udg_All_Dock_Filled[29]=true
    set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h02K_0203)]=29
    set udg_TempInt=18
    call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , udg_TempInt)
    set udg_TempUnit=gg_unit_h02K_0204
    set udg_TempUnit2=gg_unit_h02L_0202
    set udg_TempUnit3=gg_unit_h004_0206
    set udg_TempRect=gg_rct_SS11
    set udg_TempRect2=gg_rct_SS11EE
    set udg_TempRect3=gg_rct_SS11Control
    set udg_SS_Harbor[GetUnitUserData(gg_unit_h02K_0204)]=gg_unit_h009_0029
    set udg_All_Dock_Filled[33]=true
    set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h02K_0204)]=33
    set udg_TempInt=19
    call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , udg_TempInt)
    set udg_TempUnit=gg_unit_h02S_0215
    set udg_TempUnit2=gg_unit_h02Q_0212
    set udg_TempUnit3=gg_unit_h004_0213
    set udg_TempRect=gg_rct_SS12
    set udg_TempRect2=gg_rct_SS12EE
    set udg_TempRect3=gg_rct_SS12Control
    set udg_SS_Harbor[GetUnitUserData(gg_unit_h02S_0215)]=null
    set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h02S_0215)]=0
    set udg_TempInt=20
    call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , udg_TempInt)
    set udg_TempUnit=gg_unit_h04E_0259
    set udg_TempUnit2=gg_unit_h04E_0259
    set udg_TempUnit3=null
    set udg_TempRect=null
    set udg_TempRect2=gg_rct_ST8EE
    set udg_TempRect3=null
    set udg_SS_Harbor[GetUnitUserData(gg_unit_h04E_0259)]=null
    set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h04E_0259)]=0
    set udg_TempInt=23
    call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , udg_TempInt)
    set udg_TempUnit=gg_unit_h04V_0253
    set udg_TempUnit2=gg_unit_h04V_0253
    set udg_TempUnit3=null
    set udg_TempRect=null
    set udg_TempRect2=gg_rct_ST10EE
    set udg_TempRect3=null
    set udg_SS_Harbor[GetUnitUserData(gg_unit_h04V_0253)]=null
    set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h04V_0253)]=0
    set udg_TempInt=25
    call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , udg_TempInt)
    call LaunchInit()
    call TriggerExecute(gg_trg_Knockback_2D_Config)
    call RegisterUnitEvent(gg_unit_h007_0027 , EVENT_UNIT_SPELL_EFFECT , function CannonProjectile__KyoCannon) // INLINED!!
endfunction

//===========================================================================
function InitTrig_SSInit takes nothing returns nothing
    set gg_trg_SSInit=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_SSInit, 0.01)
    call TriggerAddAction(gg_trg_SSInit, function Trig_SSInit_Actions)
endfunction

//===========================================================================
// Trigger: SSThorlarInit
//
// I made this because Fel seems to have some rare-case mis-indexing in his ships, which I cannot find.
// For example, go into version Test385 and go to niffy right docks -> Put bhd inside left-most raptor. Go out. The bhd should work perfectly BUT for the right-most raptor!!!
// I made 3 new variables for this btw.
// SpaceshipGround[14]
// SpaceshipSpace[14]
// SpaceshipRect[14]
//===========================================================================
function Trig_SSThorlarInit_Actions takes nothing returns nothing
    set udg_SpaceshipRect[1]=gg_rct_SS1
    set udg_SpaceshipGround[1]=gg_unit_h001_0041
    set udg_SpaceshipSpace[1]=gg_unit_h002_0020
    
    set udg_SpaceshipRect[2]=gg_rct_SS2
    set udg_SpaceshipGround[2]=gg_unit_h001_0043
    set udg_SpaceshipSpace[2]=gg_unit_h002_0021
    
    set udg_SpaceshipRect[3]=gg_rct_SS3
    set udg_SpaceshipGround[3]=gg_unit_h001_0044
    set udg_SpaceshipSpace[3]=gg_unit_h002_0045
    
    set udg_SpaceshipRect[4]=gg_rct_SS4
    set udg_SpaceshipGround[4]=gg_unit_h001_0042
    set udg_SpaceshipSpace[4]=gg_unit_h002_0046
    
    set udg_SpaceshipRect[5]=gg_rct_SS5
    set udg_SpaceshipGround[5]=gg_unit_h001_0016
    set udg_SpaceshipSpace[5]=gg_unit_h002_0138
    
    set udg_SpaceshipRect[6]=gg_rct_SS6
    set udg_SpaceshipGround[6]=gg_unit_h001_0002
    set udg_SpaceshipSpace[6]=gg_unit_h002_0153
    
    set udg_SpaceshipRect[7]=gg_rct_SS7
    set udg_SpaceshipGround[7]=gg_unit_h001_0163
    set udg_SpaceshipSpace[7]=gg_unit_h002_0158
    
    set udg_SpaceshipRect[8]=gg_rct_SS8
    set udg_SpaceshipGround[8]=gg_unit_h001_0162
    set udg_SpaceshipSpace[8]=gg_unit_h002_0159
    
    //Hunter
    set udg_SpaceshipRect[9]=gg_rct_SS9
    set udg_SpaceshipGround[9]=gg_unit_h02I_0183
    set udg_SpaceshipSpace[9]=gg_unit_h02H_0198
    
    //Obda
    set udg_SpaceshipRect[10]=gg_rct_SS10
    set udg_SpaceshipGround[10]=gg_unit_h02K_0203
    set udg_SpaceshipSpace[10]=gg_unit_h02L_0205
    
    //Obda
    set udg_SpaceshipRect[11]=gg_rct_SS11
    set udg_SpaceshipGround[11]=gg_unit_h02K_0204
    set udg_SpaceshipSpace[11]=gg_unit_h02L_0202
    
    //Albadar
    set udg_SpaceshipRect[12]=gg_rct_SS12
    set udg_SpaceshipGround[12]=gg_unit_h02S_0215
    set udg_SpaceshipSpace[12]=gg_unit_h02Q_0212
    
    //Unused 13th craft
    set udg_SpaceshipRect[13]=gg_rct_SS13
    set udg_SpaceshipGround[13]=null
    set udg_SpaceshipSpace[13]=null
endfunction

//===========================================================================
function InitTrig_SSThorlarInit takes nothing returns nothing
    set gg_trg_SSThorlarInit=CreateTrigger()
    call TriggerAddAction(gg_trg_SSThorlarInit, function Trig_SSThorlarInit_Actions)
endfunction


//===========================================================================
// Trigger: SSThorlarFunctions
//===========================================================================
//===========================================================================
// Trigger: SSGenEnter
//===========================================================================
function Trig_SSGenEnter_Conditions takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetTriggerUnit()) != Player(PLAYER_NEUTRAL_PASSIVE) or GetUnitTypeId(GetTriggerUnit()) == 'h04Q' ) ) then
        return false
    endif
    if ( not ( GetUnitFlyHeight(udg_SS_Landed[GetUnitUserData(udg_TempUnit)]) <= 101.00 ) ) then
        return false
    endif
    if ( not ( GetUnitPointValue(GetTriggerUnit()) != 37 ) ) then
        return false
    endif
    return true
endfunction

function Trig_SSGenEnter_Func004Func001001001 takes nothing returns boolean
    return ( GetFilterPlayer() == GetOwningPlayer(GetTriggerUnit()) )
endfunction

function Trig_SSGenEnter_Actions takes nothing returns nothing
    local unit a=udg_TempUnit
    local real t=TimerGetElapsed(udg_GameTimer)
    local unit b=GetTriggerUnit()

    if (GetUnitAbilityLevel((b), 'A071') == 1) and GetOwningPlayer(b) == Player(PLAYER_NEUTRAL_PASSIVE) then // INLINED!!
        return
    endif

    if t < udg_Unit_ShipEnterCooldown[(GetUnitUserData((b)))] + 8.0 then // INLINED!!
        call DisplayTextToPlayer(GetOwningPlayer(b), 0, 0, "|cFFFF0000Please wait " + R2S(udg_Unit_ShipEnterCooldown[(GetUnitUserData((b)))] + 8.0 - t) + " seconds before entering this ship.") // INLINED!!
        return
    endif

    set udg_Unit_ShipEnterCooldown[(GetUnitUserData((b)))]=t // INLINED!!
    
    if RectContainsUnit(gg_rct_Space, a) == false then
        call DisableTrigger(udg_Spaceship_ExitTrig[GetUnitUserData(udg_TempUnit)])
        set udg_TempPoint=GetRectCenter(udg_Spaceship_EnterExit[GetUnitUserData(udg_TempUnit)])
        call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
        
        if ( GetTriggerUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] ) then
            if GetOwningPlayer(GetTriggerUnit()) != Player(26) then
                call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
            else
                call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TempPoint, 0)
            endif
        else
            call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_SSGenEnter_Func004Func001001001)), udg_TempPoint, 2.00, bj_MINIMAPPINGSTYLE_SIMPLE, 0.00, 0.00, 100)
        endif
        
        call RemoveLocation(udg_TempPoint)
        call PolledWait(0.01)
        call EnableTrigger(udg_Spaceship_ExitTrig[GetUnitUserData(a)])
    endif
endfunction

//===========================================================================
function InitTrig_SSGenEnter takes nothing returns nothing
    set gg_trg_SSGenEnter=CreateTrigger()
    call TriggerAddCondition(gg_trg_SSGenEnter, Condition(function Trig_SSGenEnter_Conditions))
    call TriggerAddAction(gg_trg_SSGenEnter, function Trig_SSGenEnter_Actions)
endfunction


//===========================================================================
// Trigger: SSGenExit
//
// if t<udg_Unit_ShipEnterCooldown[GetUnitAN(GetTriggerUnit())]+6.0 then
// if GetOwningPlayer(GetTriggerUnit())!=Player(bj_PLAYER_NEUTRAL_EXTRA) then
// call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()),0,0,"|cFFFF0000Please wait " + R2S(udg_Unit_ShipEnterCooldown[GetUnitAN(GetTriggerUnit())]+6.0-t) + " seconds before using the boarding airlock.")
// else
// call DisplayTextToPlayer(udg_Parasite,0,0,"|cFFFF0000Please wait " + R2S(udg_Unit_ShipEnterCooldown[GetUnitAN(GetTriggerUnit())]+6.0-t) + " seconds before using the boarding airlock.")
// endif
// return
// endif
//===========================================================================
function Trig_SSGenExit_Conditions takes nothing returns boolean
    if ( not ( RectContainsUnit(gg_rct_Space, udg_SS_Space[GetUnitUserData(udg_TempUnit)]) == false ) ) then
        return false
    endif
    if ( not ( udg_SS_LaunchCountdown[GetUnitUserData(udg_TempUnit)] == false ) ) then
        return false
    endif
    if ( not ( GetUnitPointValue(GetTriggerUnit()) != 37 ) ) then
        return false
    endif
    if RectContainsUnit(gg_rct_Space, udg_SS_Landed[GetUnitUserData(udg_TempUnit)]) == true then
    return false
    endif
    return true
endfunction

function Trig_SSGenExit_Actions takes nothing returns nothing
local unit a=udg_TempUnit
local unit b
local real t=TimerGetElapsed(udg_GameTimer)
set udg_Unit_ShipEnterCooldown[(GetUnitUserData((GetTriggerUnit())))]=t // INLINED!!

if GetUnitPointValue(GetTriggerUnit()) == 37 then
    return
endif

if GetOwningPlayer(GetTriggerUnit()) != Player(PLAYER_NEUTRAL_PASSIVE) or GetUnitTypeId(GetTriggerUnit()) == 'h04Q' then
    if udg_SS_LaunchCountdown[GetUnitUserData(udg_TempUnit)] == false then
        if RectContainsUnit(gg_rct_Space, udg_SS_Space[GetUnitUserData(udg_TempUnit)]) == false then
            call DisableTrigger(udg_Spaceship_EnterTrig[GetUnitUserData(udg_TempUnit)])
            set udg_TempPoint=GetUnitLoc(udg_SS_Landed[GetUnitUserData(udg_TempUnit)])
            if RectContainsLoc(gg_rct_Timeout, udg_TempPoint) == false then
                call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
            endif
            
            if GetOwningPlayer(GetTriggerUnit()) != Player(26) then
                call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
            else
                call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TempPoint, 0)
            endif
            
            call RemoveLocation(udg_TempPoint)
            call PolledWait(0.01)
            call EnableTrigger(udg_Spaceship_EnterTrig[GetUnitUserData(a)])
        else
            if udg_SS_IsBoarded[GetUnitUserData(udg_SS_Landed[(GetUnitUserData((a)))])] then // INLINED!!
                if IsUnitDeadBJ(udg_SS_Space[GetUnitUserData(udg_SS_BoardingTarget[GetUnitUserData(udg_SS_Landed[GetUnitUserData(udg_TempUnit)])])]) then
                    return
                endif
                
                set b=udg_SS_BoardingTarget[(GetUnitUserData((a)))] // INLINED!!
                call DisableTrigger(udg_Spaceship_ExitTrig[GetUnitUserData(b)])
                set udg_TempPoint=GetRectCenter(udg_Spaceship_EnterExit[GetUnitUserData(b)])
                call SetUnitPositionLoc(GetTriggerUnit(), udg_TempPoint)
                if GetOwningPlayer(GetTriggerUnit()) != Player(26) then
                    call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
                else
                    call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TempPoint, 0)
                endif
                
                call RemoveLocation(udg_TempPoint)
                call PolledWait(0.01)
                call EnableTrigger(udg_Spaceship_ExitTrig[GetUnitUserData(b)])
            endif
        endif
    endif
endif
endfunction

//===========================================================================
function InitTrig_SSGenExit takes nothing returns nothing
    set gg_trg_SSGenExit=CreateTrigger()

    call TriggerAddAction(gg_trg_SSGenExit, function Trig_SSGenExit_Actions)
endfunction


//===========================================================================
// Trigger: SSGenControl
//===========================================================================
function Trig_SSGenControl_Conditions takes nothing returns boolean
    if ( not ( GetOwningPlayer(udg_Spaceship_Console[GetUnitUserData(udg_TempUnit)]) == Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    if ( not ( IsUnitIllusionBJ(GetTriggerUnit()) == false ) ) then
        return false
    endif
    if ( not ( GetUnitPointValue(GetTriggerUnit()) != 37 ) ) then
        return false
    endif
    return true
endfunction


//function CheckMaintainSpaceshipControl_Child takes nothing returns nothing
//if GetOwningPlayer(GetEnumUnit())==GetOwningPlayer(udg_TempUnit) and SubStringBJ(I2S(GetUnitPointValue(GetEnumUnit())), 1, 1) == "2" and IsUnitIllusion(GetEnumUnit()) == false then
//set udg_TempBool=true
//endif
//endfunction

//function CheckMaintainSpaceshipControl takes nothing returns nothing
//local timer t=GetExpiredTimer()
//local unit p=LoadUnitHandle(LS(),GetHandleId(t),StringHash("ship"))
//local rect r=udg_Spaceship_ControlRect[GetUnitAN(p)]
//local group g=GetUnitsInRectAll(r)
//set udg_TempBool=false
//set udg_TempUnit=p
//call ForGroup(g,function CheckMaintainSpaceshipControl_Child)
//call DestroyGroup(g)
//if udg_TempBool==false then
//call FlushChildHashtable(LS(),GetHandleId(t))
//call PauseTimer(t)
//call DestroyTimer(t)
//call SetUnitOwner( udg_Spaceship_Console[GetUnitUserData(p)], Player(PLAYER_NEUTRAL_PASSIVE), false )
//call SetUnitOwner( udg_SS_Space[GetUnitUserData(p)], Player(PLAYER_NEUTRAL_PASSIVE), false )
//endif
//endfunction


function CheckLaunchProceed takes nothing returns nothing
    if SubStringBJ(I2S(GetUnitPointValue(GetEnumUnit())), 1, 1) == "2" and IsUnitIllusion(GetEnumUnit()) == false then
        set udg_TempBool=true
    endif
endfunction

function Trig_SSGenControl_Actions takes nothing returns nothing
    local unit a
    local unit d=GetTriggerUnit()
    local group k

    if udg_Blackout then
        return
    endif

    if ( SubStringBJ(I2S(GetUnitPointValue(GetTriggerUnit())), 1, 1) == "1" ) then
        call DisplayTimedTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, 10.00, "TRIGSTR_1376") //This unit cannot pilot spaceships
        return
    endif
    
    if ( RectContainsUnit(gg_rct_Space, udg_SS_Space[GetUnitUserData(udg_TempUnit)]) == true ) then
        if GetOwningPlayer(GetTriggerUnit()) != Player(26) then
            call CheckConsoleControl(udg_Spaceship_Console[(GetUnitUserData((udg_TempUnit)))] , udg_SS_Space[(GetUnitUserData((udg_TempUnit)))] , udg_Spaceship_Rect[(GetUnitUserData((udg_TempUnit)))]) // INLINED!!
            call SetUnitOwner(udg_Spaceship_Console[GetUnitUserData(udg_TempUnit)], GetOwningPlayer(GetTriggerUnit()), false)
            call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, ( "|cff8000FFU.S.I. Explorer Class|r" ))
            call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, ( " |cff00FF00Access Granted|r" ))
            call SelectUnitForPlayerSingle(udg_SS_Space[GetUnitUserData(udg_TempUnit)], GetOwningPlayer(GetTriggerUnit()))
            call SetUnitOwner(udg_SS_Space[GetUnitUserData(udg_TempUnit)], GetOwningPlayer(GetTriggerUnit()), false)
            set udg_TempPoint=GetUnitLoc(udg_SS_Space[GetUnitUserData(udg_TempUnit)])
            if udg_Unit_VendorDisabling[(GetUnitUserData((GetTriggerUnit())))] == false then // INLINED!!
                call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, 0)
            endif
            call RemoveLocation(udg_TempPoint)
            
            //If Ace, add Ace attack speed ability
            if ( GetUnitAbilityLevel(udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))], udg_RoleAbility[11]) == 1 ) then
                call UnitAddAbility(udg_SS_Space[GetUnitUserData(udg_TempUnit)], 'A0A5')
            endif
        else
            call SetUnitOwner(udg_Spaceship_Console[GetUnitUserData(udg_TempUnit)], GetOwningPlayer(GetTriggerUnit()), false)
            call DisplayTextToPlayer(udg_Parasite, 0, 0, ( "|cff8000FFU.S.I. Explorer Class|r" ))
            call DisplayTextToPlayer(udg_Parasite, 0, 0, ( " |cff00FF00Access Granted|r" ))
            call SelectUnitForPlayerSingle(udg_SS_Space[GetUnitUserData(udg_TempUnit)], udg_Parasite)
            call SetUnitOwner(udg_SS_Space[GetUnitUserData(udg_TempUnit)], GetOwningPlayer(GetTriggerUnit()), false)
            set udg_TempPoint=GetUnitLoc(udg_SS_Space[GetUnitUserData(udg_TempUnit)])
            if udg_Unit_VendorDisabling[(GetUnitUserData((GetTriggerUnit())))] == false then // INLINED!!
                call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TempPoint, 0)
            endif
            call RemoveLocation(udg_TempPoint)
        endif
    else
        if IsTriggerEnabled(gg_trg_SwaggerTeleportToPlanet) and udg_SS_Harbor[GetUnitUserData(udg_TempUnit)] == gg_unit_h00X_0049 then
            return
        endif
        set a=udg_TempUnit
        call DisableTrigger(udg_Spaceship_ControlTrig[GetUnitUserData(a)])
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1370")
        
            set udg_TempUnit=udg_SS_Landed[GetUnitUserData(udg_TempUnit)]
            set udg_TempInt=80
            set udg_TempReal=1 / 8.0
            set udg_TempString="DoNothing"
            
        set udg_CountUpBarColor="|cff80FFFF"
        call ExecuteFunc("BarLocal_RunDummy")
        call SaveBoolean((udg_hash), GetHandleId(udg_TempUnit), StringHash("LaunchCleared"), true) // INLINED!!
        
        call PolledWait(7.00)
        set k=GetUnitsInRectAll(udg_Spaceship_Rect[GetUnitUserData(a)])
        set udg_TempBool=false
        call ForGroup(k, function CheckLaunchProceed)
        call DestroyGroup(k)
        set k=null
        if LoadBoolean((udg_hash), GetHandleId(udg_SS_Landed[GetUnitUserData(a)]), StringHash("LaunchCleared")) == false then // INLINED!!
            set udg_TempBool=false
        endif
        if udg_TempBool == false then
            call DisplayTextToForce(GetPlayersAll(), "|cff008040Explorer launch cancelled.|r")
            call EnableTrigger(udg_Spaceship_ControlTrig[GetUnitUserData(a)])
            return
        else
            set udg_SS_LaunchCountdown[GetUnitUserData(a)]=true
        endif
        
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1373")
        call PolledWait(1.00)
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1377")
        call ChangeElevatorWalls(false, bj_ELEVATOR_WALL_TYPE_ALL, udg_All_Dock[udg_SS_DockGroundedAt[GetUnitUserData(a)]])
        call PolledWait(0.20)
        call ChangeElevatorHeight(udg_All_Dock[udg_SS_DockGroundedAt[GetUnitUserData(a)]], 3)
        call PolledWait(1.20)
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1378")
        call SetUnitFlyHeightBJ(udg_SS_Landed[GetUnitUserData(a)], 2000.00, 1500.00)
        call PolledWait(1.00)
        
        if GetUnitState(a, UNIT_STATE_LIFE) == 0 then
            call DisplayTextToForce(GetPlayersAll(), "ERROR: Explorer vessel not responsive.")
            return
        endif
        
        if RectContainsUnit(udg_Spaceship_ControlRect[GetUnitUserData(a)], d) then
            set udg_TempPoint=GetUnitLoc(d)
            call SetUnitPositionLoc(d, udg_HoldZone)
            call SetUnitPositionLoc(d, udg_TempPoint)
            call RemoveLocation(udg_TempPoint)
        endif
        
        call SetUnitLifePercentBJ(udg_SS_Space[(GetUnitUserData((a)))], GetUnitLifePercent(a)) // INLINED!!
        set udg_SS_LaunchCountdown[GetUnitUserData(a)]=false
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1374")
        set udg_TempPoint=GetUnitLoc(udg_SS_Harbor[GetUnitUserData(a)])
        call SetUnitPositionLoc(udg_SS_Space[GetUnitUserData(a)], udg_TempPoint)
        call SetUnitPositionLoc(udg_SS_Landed[GetUnitUserData(a)], udg_HoldZone)
        call RemoveLocation(udg_TempPoint)
        call RemoveLocation(udg_TempPoint2)
        call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, udg_All_Dock[udg_SS_DockGroundedAt[GetUnitUserData(a)]])
        call ChangeElevatorHeight(udg_All_Dock[udg_SS_DockGroundedAt[GetUnitUserData(a)]], 1)
        set udg_All_Dock_Filled[udg_SS_DockGroundedAt[GetUnitUserData(a)]]=false
        set udg_SS_DockGroundedAt[GetUnitUserData(a)]=0
        call EnableTrigger(udg_Spaceship_ControlTrig[GetUnitUserData(a)])
    endif
endfunction

//===========================================================================
function InitTrig_SSGenControl takes nothing returns nothing
    set gg_trg_SSGenControl=CreateTrigger()
    call TriggerAddCondition(gg_trg_SSGenControl, Condition(function Trig_SSGenControl_Conditions))
    call TriggerAddAction(gg_trg_SSGenControl, function Trig_SSGenControl_Actions)
endfunction


//===========================================================================
// Trigger: SSGenControlLoss
//===========================================================================
function Trig_SSGenControlLoss_Conditions takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetTriggerUnit()) == GetOwningPlayer(udg_Spaceship_Console[GetUnitUserData(udg_TempUnit)]) ) ) then
        return false
    endif
    if ( not ( GetUnitPointValue(GetTriggerUnit()) != 37 ) ) then
        return false
    endif
    return true
endfunction

function Trig_SSGenControlLoss_Func006C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A0A5', udg_SS_Space[GetUnitUserData(udg_TempUnit)]) == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_SSGenControlLoss_Actions takes nothing returns nothing
    call SetUnitOwner(udg_Spaceship_Console[GetUnitUserData(udg_TempUnit)], Player(PLAYER_NEUTRAL_PASSIVE), false)
    call SetUnitOwner(udg_SS_Space[GetUnitUserData(udg_TempUnit)], Player(PLAYER_NEUTRAL_PASSIVE), false)
    // If Ace -> Remove atk speed buff
    if ( Trig_SSGenControlLoss_Func006C() ) then
        call UnitRemoveAbilityBJ('A0A5', udg_SS_Space[GetUnitUserData(udg_TempUnit)])
    else
    endif
endfunction

//===========================================================================
function InitTrig_SSGenControlLoss takes nothing returns nothing
    set gg_trg_SSGenControlLoss=CreateTrigger()
    call TriggerAddCondition(gg_trg_SSGenControlLoss, Condition(function Trig_SSGenControlLoss_Conditions))
    call TriggerAddAction(gg_trg_SSGenControlLoss, function Trig_SSGenControlLoss_Actions)
endfunction

//===========================================================================
// Trigger: SSGenDock
//===========================================================================
function Trig_SSGenDock_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A001' ) ) then
        return false
    endif
    return true
endfunction



function EvaluateDock takes integer a,integer b returns integer
    if GetRandomInt(1, a) == a then
        set udg_TempDestruct=udg_All_Dock[b]
        set udg_TempInt=b
    endif
    return a + 1
endfunction

function Trig_SSGenDock_Actions takes nothing returns nothing
local unit a=GetSpellAbilityUnit()
local unit b=GetSpellTargetUnit()
local player q=GetOwningPlayer(a)
local integer i=1
local string onr
call UnitAddAbilityForPeriod(a , 'Avul' , 0.2)
call PolledWait(0.1)
    set udg_TempUnit=udg_SS_Landed[GetUnitUserData(a)]
    set a=udg_TempUnit
    set udg_TempUnit2=b
    set udg_TempDestruct=null
    set udg_SS_Harbor[GetUnitUserData(udg_TempUnit)]=b
    if udg_TempUnit2 == gg_unit_h003_0018 then
    //Arbitress
        set udg_TempBool=false
        set bj_forLoopAIndex=1
        set bj_forLoopAIndexEnd=4
        loop
            exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
            if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
            set i=EvaluateDock(i , GetForLoopIndexA())
              //  set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
            endif
            set bj_forLoopAIndex=bj_forLoopAIndex + 1
        endloop
    else
        if udg_TempUnit2 == gg_unit_h005_0281 then
        //Defunct
            set udg_TempBool=false
            set bj_forLoopAIndex=5
            set bj_forLoopAIndexEnd=6
            loop
                exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                set i=EvaluateDock(i , GetForLoopIndexA())
                   // set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                else
                endif
                set bj_forLoopAIndex=bj_forLoopAIndex + 1
            endloop
        else
            if udg_TempUnit2 == gg_unit_h007_0027 then
            //Kyo station
                set udg_TempBool=false
                set bj_forLoopAIndex=7
                set bj_forLoopAIndexEnd=8
                loop
                    exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                    if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                    set i=EvaluateDock(i , GetForLoopIndexA())
                        //set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                    endif
                    set bj_forLoopAIndex=bj_forLoopAIndex + 1
                endloop
                set bj_forLoopAIndex=34
                if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                set i=EvaluateDock(i , GetForLoopIndexA())
                       // set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                endif
            else
                if udg_TempUnit2 == gg_unit_h009_0029 then
                //U.S.I. Queen Niffy
                    set udg_TempBool=false
                    set bj_forLoopAIndex=29
                    set bj_forLoopAIndexEnd=33
                    loop
                        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                        if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                            //set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                            set i=EvaluateDock(i , GetForLoopIndexA())
                        else
                        endif
                        set bj_forLoopAIndex=bj_forLoopAIndex + 1
                    endloop
                    set bj_forLoopAIndex=9
                    set bj_forLoopAIndexEnd=16
                    if udg_TempDestruct == null then
                    loop
                        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                        if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                            //set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                            set i=EvaluateDock(i , GetForLoopIndexA())
                        else
                        endif
                        set bj_forLoopAIndex=bj_forLoopAIndex + 1
                    endloop
                    endif
                else
                    if udg_TempUnit2 == gg_unit_h00X_0049 then
                    //U.S.I. Swagger
                        set udg_TempBool=false
                        set bj_forLoopAIndex=17
                        set bj_forLoopAIndexEnd=20
                        loop
                            exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                            if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                                //set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                                set i=EvaluateDock(i , GetForLoopIndexA())
                            else
                            endif
                            set bj_forLoopAIndex=bj_forLoopAIndex + 1
                        endloop
                        set bj_forLoopAIndex=39
                        set bj_forLoopAIndexEnd=40
                        loop
                            exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                            if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                                //set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                                set i=EvaluateDock(i , GetForLoopIndexA())
                            else
                            endif
                            set bj_forLoopAIndex=bj_forLoopAIndex + 1
                        endloop
                    else
                        if udg_TempUnit2 == gg_unit_h008_0196 then
                        //Minertha
                            set udg_TempBool=false
                            set bj_forLoopAIndex=35
                            set bj_forLoopAIndexEnd=38
                            loop
                                exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                                if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                                    //set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                                    set i=EvaluateDock(i , GetForLoopIndexA())
                                else
                                endif
                                set bj_forLoopAIndex=bj_forLoopAIndex + 1
                            endloop

                            set bj_forLoopAIndex=21
                            set bj_forLoopAIndexEnd=24
                            loop
                                exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                                if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                                    //set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                                    set i=EvaluateDock(i , GetForLoopIndexA())
                                else
                                endif
                                set bj_forLoopAIndex=bj_forLoopAIndex + 1
                            endloop
                        
                        else
                            if udg_TempUnit2 == gg_unit_h029_0114 then
                            //Lost station
                                set udg_TempBool=false
                                set bj_forLoopAIndex=25
                                set bj_forLoopAIndexEnd=26
                                loop
                                    exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                                    if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                                        //set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                                        set i=EvaluateDock(i , GetForLoopIndexA())
                                    else
                                    endif
                                    set bj_forLoopAIndex=bj_forLoopAIndex + 1
                                endloop
                            else
                                if udg_TempUnit2 == gg_unit_h02B_0116 then
                                //Pirate vessel
                                    set udg_TempBool=false
                                    set bj_forLoopAIndex=27
                                    set bj_forLoopAIndexEnd=28
                                    loop
                                        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                                        if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                                            //set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                                            set i=EvaluateDock(i , GetForLoopIndexA())
                                        else
                                        endif
                                        set bj_forLoopAIndex=bj_forLoopAIndex + 1
                                    endloop
                                    set bj_forLoopAIndex=45
                                    set bj_forLoopAIndexEnd=46
                                    loop
                                        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                                        if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                                            //set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                                            set i=EvaluateDock(i , GetForLoopIndexA())
                                        else
                                        endif
                                        set bj_forLoopAIndex=bj_forLoopAIndex + 1
                                    endloop
                                else
                                if ( udg_TempUnit2 == gg_unit_h03T_0209 ) then
                                //Errun
                                    set udg_TempBool=false
                                    set bj_forLoopAIndex=41
                                    set bj_forLoopAIndexEnd=44
                                    loop
                                        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                                        if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                                            //set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                                            set i=EvaluateDock(i , GetForLoopIndexA())
                                        else
                                        endif
                                        set bj_forLoopAIndex=bj_forLoopAIndex + 1
                                    endloop
                                else
                                if udg_TempUnit2 == gg_unit_h04T_0265 then
                                //Syllus
                                    set udg_TempBool=false
                                    set bj_forLoopAIndex=47
                                    set bj_forLoopAIndexEnd=52
                                    loop
                                        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                                        if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                                            //set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                                            set i=EvaluateDock(i , GetForLoopIndexA())
                                        endif
                                        set bj_forLoopAIndex=bj_forLoopAIndex + 1
                                    endloop
                                else
                                
                                if GetUnitTypeId(udg_TempUnit2) == 'h04G' then
                                    //MRZCODE: IF OVERLORD
                                    set udg_TempBool=false
                                    set bj_forLoopAIndex=53
                                    set bj_forLoopAIndexEnd=58
                                    loop
                                        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                                        if udg_All_Dock_Filled[GetForLoopIndexA()] != true then
                                            //set udg_TempDestruct = udg_All_Dock[GetForLoopIndexA()]
                                            set i=EvaluateDock(i , GetForLoopIndexA())
                                        endif
                                        set bj_forLoopAIndex=bj_forLoopAIndex + 1
                                    endloop
                                    
                                    
                                endif
                                
                                endif
                                endif
                                endif
                            endif
                        endif
                    endif
                endif
            endif
        endif
    endif
    
    if udg_TempDestruct != null then
        set udg_SS_LaunchCountdown[GetUnitUserData(udg_TempUnit)]=true
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1379")
        set udg_TempPoint=GetDestructableLoc(udg_TempDestruct)
        call UnitAddAbility(udg_SS_Space[GetUnitUserData(udg_TempUnit)], 'Avul')
        call SetUnitPositionLoc(udg_SS_Space[GetUnitUserData(udg_TempUnit)], udg_HoldZone)
                call UnitRemoveAbility(udg_SS_Space[GetUnitUserData(udg_TempUnit)], 'Avul')
        call SetUnitPositionLoc(udg_SS_Landed[GetUnitUserData(udg_TempUnit)], udg_TempPoint)
        call ChangeElevatorHeight(udg_TempDestruct, 3)
        call ChangeElevatorWalls(false, bj_ELEVATOR_WALL_TYPE_ALL, udg_TempDestruct)
        call SetUnitFlyHeightBJ(udg_SS_Landed[GetUnitUserData(udg_TempUnit)], 100.00, 500.00)
        set udg_SS_DockGroundedAt[GetUnitUserData(udg_TempUnit)]=udg_TempInt
        set udg_All_Dock_Filled[udg_SS_DockGroundedAt[GetUnitUserData(udg_TempUnit)]]=true
        call SetUnitOwner(udg_SS_Space[GetUnitUserData(udg_TempUnit)], Player(PLAYER_NEUTRAL_PASSIVE), false)
        call RemoveLocation(udg_TempPoint)
        set udg_TempPoint=GetRectCenter(udg_Spaceship_Rect[GetUnitUserData(udg_TempUnit)])
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(a), udg_TempPoint, 0)
        call RemoveLocation(udg_TempPoint)
        set udg_TempUnit3=udg_TempUnit
        call PolledWait(4.00)
        call SetUnitLifePercentBJ(a, GetUnitLifePercent(udg_SS_Space[(GetUnitUserData((a)))])) // INLINED!!
        set udg_TempUnit=a
        call ChangeElevatorHeight(udg_All_Dock[udg_SS_DockGroundedAt[GetUnitUserData(udg_TempUnit)]], 1)
        call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, udg_All_Dock[udg_SS_DockGroundedAt[GetUnitUserData(udg_TempUnit)]])
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1380")
        set udg_SS_LaunchCountdown[GetUnitUserData(udg_TempUnit)]=false
    else
        set onr="|cffFF0000No landing pads are available.|r"
        if GetUnitTypeId(b) == 'h04V' or GetUnitTypeId(b) == 'h04E' then
            set onr="|cffFF0000This station does not use standard docking procedures; please apply standard boarding procedures instead.|r"
        endif
        if q == Player(14) then
            call DisplayTextToPlayer(udg_Parasite, 0, 0, onr)
        else
            call DisplayTextToPlayer(q, 0, 0, onr)
        endif
        
        set udg_TempPoint=GetUnitLoc(a)
        call SetUnitPositionLoc(a, udg_TempPoint)
        call RemoveLocation(udg_TempPoint)
    endif
endfunction

//===========================================================================
function InitTrig_SSGenDock takes nothing returns nothing
    set gg_trg_SSGenDock=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SSGenDock, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_SSGenDock, Condition(function Trig_SSGenDock_Conditions))
    call TriggerAddAction(gg_trg_SSGenDock, function Trig_SSGenDock_Actions)
endfunction


//===========================================================================
// Trigger: SSGenDeath
//===========================================================================
function Trig_SSGenDeath_Conditions takes nothing returns boolean
    if ( not ( GetDyingUnit() != gg_unit_h04E_0259 ) ) then
        return false
    endif
    if ( not ( GetDyingUnit() != gg_unit_h04V_0253 ) ) then
        return false
    endif
    return true
endfunction

function Trig_SSGenDeath_Func016A takes nothing returns nothing
    call EraseUnit(GetEnumUnit() , GetKillingUnit())
endfunction

function Trig_SSGenDeath_Func018A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, udg_Spaceship_Rect[GetUnitUserData(udg_TempUnit)])
endfunction

function Trig_SSGenDeath_Actions takes nothing returns nothing
    local unit a=GetDyingUnit()
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4368")
    set udg_TempUnit2=GetKillingUnitBJ()
    set udg_TempUnit=GetDyingUnit()
    call PlaySoundBJ(gg_snd_CreepAggroWhat1)
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=5
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call CreateNUnitsAtLoc(1, 'e001', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
        set udg_TempPoint=GetRandomLocInRect(udg_Spaceship_Rect[GetUnitUserData(udg_TempUnit)])
        call SetUnitAnimation(GetLastCreatedUnit(), "death")
        call CreateNUnitsAtLoc(1, 'e002', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
        call RemoveLocation(udg_TempPoint)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    set udg_TempUnit=a
        call DestroyTrigger(udg_Spaceship_Death[GetUnitUserData(udg_TempUnit)])
        call DestroyTrigger(udg_Spaceship_ControlTrig[GetUnitUserData(udg_TempUnit)])
        call DestroyTrigger(udg_Spaceship_EnterTrig[GetUnitUserData(udg_TempUnit)])
        call DestroyTrigger(udg_Spaceship_ExitTrig[GetUnitUserData(udg_TempUnit)])
        call DestroyTrigger(udg_Spaceship_ControlLossTrig[GetUnitUserData(udg_TempUnit)])
    call SetUnitTimeScalePercent(udg_SS_Landed[GetUnitUserData(udg_TempUnit)], 100)
    call ForGroupBJ(GetUnitsInRectAll(udg_Spaceship_Rect[GetUnitUserData(udg_TempUnit)]), function Trig_SSGenDeath_Func016A)
    set udg_TempUnit=a
    call ForForce(GetPlayersAll(), function Trig_SSGenDeath_Func018A)
    call RectOfDoom(udg_Spaceship_Rect[(GetUnitUserData((udg_TempUnit)))]) // INLINED!!
endfunction

//===========================================================================
function InitTrig_SSGenDeath takes nothing returns nothing
    set gg_trg_SSGenDeath=CreateTrigger()
    call TriggerAddCondition(gg_trg_SSGenDeath, Condition(function Trig_SSGenDeath_Conditions))
    call TriggerAddAction(gg_trg_SSGenDeath, function Trig_SSGenDeath_Actions)
endfunction

//===========================================================================
// Trigger: SSGenBoard
//===========================================================================
function Trig_SSGenBoard_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02J' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SSGenBoard_Actions takes nothing returns nothing
local unit a=GetSpellAbilityUnit()
local unit b=GetSpellTargetUnit()
local lightning d

call IssueImmediateOrder(a, "stop")

    if udg_SS_IsBoarded[GetUnitUserData(udg_SS_Landed[GetUnitUserData(b)])] then
        return
    endif

    if (GetUnitAbilityLevel((b), 'A071') == 1) then // INLINED!!
        call PauseUnitBJ(true, a)
        call PauseUnitBJ(true, b)

        set udg_SS_BoardingTarget[GetUnitUserData(udg_SS_Landed[GetUnitUserData(a)])]=udg_SS_Landed[GetUnitUserData(b)]
        set udg_SS_BoardingTarget[GetUnitUserData(udg_SS_Landed[GetUnitUserData(b)])]=udg_SS_Landed[GetUnitUserData(a)]
        set udg_SS_IsBoarded[GetUnitUserData(udg_SS_Landed[GetUnitUserData(a)])]=true
        set udg_SS_IsBoarded[GetUnitUserData(udg_SS_Landed[GetUnitUserData(b)])]=true
        set udg_TempPoint=GetUnitLoc(a)
        set udg_TempPoint2=GetUnitLoc(b)
        set d=AddLightningEx("MFPB", true, GetLocationX(udg_TempPoint), GetLocationY(udg_TempPoint), - 156, GetLocationX(udg_TempPoint2), GetLocationY(udg_TempPoint2), - 156)
        call RemoveLocation(udg_TempPoint)
        call RemoveLocation(udg_TempPoint2)
        set udg_CountUpBarColor="|cff00FFFF"
        call CountUpBar(a , 20 , 1.0 , "DoNothing") //Includes a polled wait of 20 seconds here
        call PauseUnitBJ(false, a)
        call PauseUnitBJ(false, b)
        set udg_SS_IsBoarded[GetUnitUserData(udg_SS_Landed[GetUnitUserData(a)])]=false
        set udg_SS_IsBoarded[GetUnitUserData(udg_SS_Landed[GetUnitUserData(b)])]=false
        call DestroyLightning(d)
    endif
endfunction

//===========================================================================
function InitTrig_SSGenBoard takes nothing returns nothing
    set gg_trg_SSGenBoard=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SSGenBoard, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_SSGenBoard, Condition(function Trig_SSGenBoard_Conditions))
    call TriggerAddAction(gg_trg_SSGenBoard, function Trig_SSGenBoard_Actions)
endfunction


//===========================================================================
// Trigger: Raptor0
//===========================================================================
function Trig_Raptor0_Actions takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_SS1))
endfunction

//===========================================================================
function InitTrig_Raptor0 takes nothing returns nothing
    set gg_trg_Raptor0=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor0, null)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor0, null)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor0, null)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor0, null)
    call TriggerAddAction(gg_trg_Raptor0, function Trig_Raptor0_Actions)
endfunction

//===========================================================================
// Trigger: Raptor1
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Actions1 takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_SS1))
endfunction

//===========================================================================
function InitTrig_Raptor1 takes nothing returns nothing
    set gg_trg_Raptor1=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor1, gg_rct_SS1RightDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor1, gg_rct_SS1LeftDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor1, gg_rct_SS1TopDebug)
    call TriggerAddAction(gg_trg_Raptor1, function Actions1)
endfunction


//===========================================================================
// Trigger: Raptor2
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Actions2 takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_SS2))
endfunction

//===========================================================================
function InitTrig_Raptor2 takes nothing returns nothing
    set gg_trg_Raptor2=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor2, gg_rct_SS2RightDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor2, gg_rct_SS2LeftDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor2, gg_rct_SS2BottomDebug)
    call TriggerAddAction(gg_trg_Raptor2, function Actions2)
endfunction


//===========================================================================
// Trigger: Raptor3
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Actions3 takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_SS3))
endfunction

//===========================================================================
function InitTrig_Raptor3 takes nothing returns nothing
    set gg_trg_Raptor3=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor3, gg_rct_SS3RightDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor3, gg_rct_SS3LeftDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor3, gg_rct_SS3TopDebug)
    call TriggerAddAction(gg_trg_Raptor3, function Actions3)
endfunction


//===========================================================================
// Trigger: Raptor4
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Actions4 takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_SS4))
endfunction

//===========================================================================
function InitTrig_Raptor4 takes nothing returns nothing
    set gg_trg_Raptor4=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor4, gg_rct_SS4RightDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor4, gg_rct_SS4LeftDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor4, gg_rct_SS4BottomDebug)
    call TriggerAddAction(gg_trg_Raptor4, function Actions4)
endfunction


//===========================================================================
// Trigger: Raptor5
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Actions5 takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_SS5))
endfunction

//===========================================================================
function InitTrig_Raptor5 takes nothing returns nothing
    set gg_trg_Raptor5=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor5, gg_rct_SS5RightDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor5, gg_rct_SS5LeftDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor5, gg_rct_SS5TopDebug)
    call TriggerAddAction(gg_trg_Raptor5, function Actions5)
endfunction


//===========================================================================
// Trigger: Raptor6
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Actions6 takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_SS6))
endfunction

//===========================================================================
function InitTrig_Raptor6 takes nothing returns nothing
    set gg_trg_Raptor6=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor6, gg_rct_SS6RightDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor6, gg_rct_SS6LeftDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor6, gg_rct_SS6BottomDebug)
    call TriggerAddAction(gg_trg_Raptor6, function Actions6)
endfunction


//===========================================================================
// Trigger: Raptor7
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Actions7 takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_SS7))
endfunction

//===========================================================================
function InitTrig_Raptor7 takes nothing returns nothing
    set gg_trg_Raptor7=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor7, gg_rct_SS7RightDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor7, gg_rct_SS7LeftDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor7, gg_rct_SS7TopDebug)
    call TriggerAddAction(gg_trg_Raptor7, function Actions7)
endfunction


//===========================================================================
// Trigger: Raptor8
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Actions8 takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_SS8))
endfunction

//===========================================================================
function InitTrig_Raptor8 takes nothing returns nothing
    set gg_trg_Raptor8=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor8, gg_rct_SS8RightDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor8, gg_rct_SS8LeftDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor8, gg_rct_SS8BottomDebug)
    call TriggerAddAction(gg_trg_Raptor8, function Actions8)
endfunction


//===========================================================================
// Trigger: Hunter9
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Actions9 takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_SS9))
endfunction

//===========================================================================
function InitTrig_Hunter9 takes nothing returns nothing
    set gg_trg_Hunter9=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Hunter9, gg_rct_SS9RightDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Hunter9, gg_rct_SS9LeftDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Hunter9, gg_rct_SS9TopDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Hunter9, gg_rct_SS9BottomDebug)
    call TriggerAddAction(gg_trg_Hunter9, function Actions9)
endfunction


//===========================================================================
// Trigger: Obda10
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Actions10 takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_SS10))
endfunction

//===========================================================================
function InitTrig_Obda10 takes nothing returns nothing
    set gg_trg_Obda10=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Obda10, gg_rct_SS10RightDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Obda10, gg_rct_SS10LeftDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Obda10, gg_rct_SS10TopDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Obda10, gg_rct_SS10BottomDebug)
    call TriggerAddAction(gg_trg_Obda10, function Actions10)
endfunction


//===========================================================================
// Trigger: Obda11
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Actions11 takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_SS11))
endfunction

//===========================================================================
function InitTrig_Obda11 takes nothing returns nothing
    set gg_trg_Obda11=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Obda11, gg_rct_SS11RightDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Obda11, gg_rct_SS11LeftDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Obda11, gg_rct_SS11TopDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Obda11, gg_rct_SS11BottomDebug)
    call TriggerAddAction(gg_trg_Obda11, function Actions11)
endfunction


//===========================================================================
// Trigger: Albadar12
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Actions12 takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_SS12))
endfunction

//===========================================================================
function InitTrig_Albadar12 takes nothing returns nothing
    set gg_trg_Albadar12=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Albadar12, gg_rct_SS12RightDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Albadar12, gg_rct_SS12LeftDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Albadar12, gg_rct_SS12TopDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Albadar12, gg_rct_SS12BottomDebug)
    call TriggerAddAction(gg_trg_Albadar12, function Actions12)
endfunction


//===========================================================================
// Trigger: Raptor13
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Actions13 takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_SS13))
endfunction

//===========================================================================
function InitTrig_Raptor13 takes nothing returns nothing
    set gg_trg_Raptor13=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor13, gg_rct_SS13RightDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor13, gg_rct_SS13LeftDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor13, gg_rct_SS13TopDebug)
    call TriggerRegisterEnterRectSimple(gg_trg_Raptor13, gg_rct_SS13BottomDebug)
    call TriggerAddAction(gg_trg_Raptor13, function Actions13)
endfunction


//===========================================================================
// Trigger: Barrels Explosion
//
// 300 range -> 150 dmg
// 150 range -> 150 dmg + 150 dmg
//===========================================================================
function Trig_Barrels_Explosion_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'n00J' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Barrels_Explosion_Func005A takes nothing returns nothing
    call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), 150.00, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL)
endfunction

function Trig_Barrels_Explosion_Func008A takes nothing returns nothing
    call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), 150.00, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL)
endfunction

function Trig_Barrels_Explosion_Actions takes nothing returns nothing
    set udg_TempLoc=GetUnitLoc(GetTriggerUnit())
    set udg_TempUnitGroup=GetUnitsInRangeOfLocAll(300.00, udg_TempLoc)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_Barrels_Explosion_Func005A)
    call DestroyGroup(udg_TempUnitGroup)
    set udg_TempUnitGroup=GetUnitsInRangeOfLocAll(150.00, udg_TempLoc)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_Barrels_Explosion_Func008A)
    call AddSpecialEffectLocBJ(udg_TempLoc, "Objects\\Spawnmodels\\Other\\NeutralBuildingExplosion\\NeutralBuildingExplosion.mdl")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call AddSpecialEffectLocBJ(udg_TempLoc, "Abilities\\Spells\\Other\\Incinerate\\FireLordDeathExplode.mdl")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call DestroyGroup(udg_TempUnitGroup)
    call RemoveUnit(GetTriggerUnit())
    call RemoveLocation(udg_TempLoc)
endfunction

//===========================================================================
function InitTrig_Barrels_Explosion takes nothing returns nothing
    set gg_trg_Barrels_Explosion=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Barrels_Explosion, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_Barrels_Explosion, Condition(function Trig_Barrels_Explosion_Conditions))
    call TriggerAddAction(gg_trg_Barrels_Explosion, function Trig_Barrels_Explosion_Actions)
endfunction

//===========================================================================
// Trigger: Gargoyle Easter Egg
//===========================================================================
function Trig_Gargoyle_Easter_Egg_Conditions takes nothing returns boolean
    if ( not ( GetTriggerUnit() == gg_unit_u000_0150 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Gargoyle_Easter_Egg_Actions takes nothing returns nothing
    call CreateTextTagUnitBJ("TRIGSTR_4794", gg_unit_u000_0150, 0, 10, 100, 100, 100, 0)
    call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 32.00, 90)
    call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
    call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 5)
    call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 4)
    call RemoveUnit(gg_unit_u000_0150)
endfunction

//===========================================================================
function InitTrig_Gargoyle_Easter_Egg takes nothing returns nothing
    set gg_trg_Gargoyle_Easter_Egg=CreateTrigger()
    call TriggerRegisterPlayerSelectionEventBJ(gg_trg_Gargoyle_Easter_Egg, Player(0), true)
    call TriggerRegisterPlayerSelectionEventBJ(gg_trg_Gargoyle_Easter_Egg, Player(1), true)
    call TriggerRegisterPlayerSelectionEventBJ(gg_trg_Gargoyle_Easter_Egg, Player(2), true)
    call TriggerRegisterPlayerSelectionEventBJ(gg_trg_Gargoyle_Easter_Egg, Player(3), true)
    call TriggerRegisterPlayerSelectionEventBJ(gg_trg_Gargoyle_Easter_Egg, Player(4), true)
    call TriggerRegisterPlayerSelectionEventBJ(gg_trg_Gargoyle_Easter_Egg, Player(5), true)
    call TriggerRegisterPlayerSelectionEventBJ(gg_trg_Gargoyle_Easter_Egg, Player(6), true)
    call TriggerRegisterPlayerSelectionEventBJ(gg_trg_Gargoyle_Easter_Egg, Player(7), true)
    call TriggerRegisterPlayerSelectionEventBJ(gg_trg_Gargoyle_Easter_Egg, Player(8), true)
    call TriggerRegisterPlayerSelectionEventBJ(gg_trg_Gargoyle_Easter_Egg, Player(9), true)
    call TriggerRegisterPlayerSelectionEventBJ(gg_trg_Gargoyle_Easter_Egg, Player(10), true)
    call TriggerRegisterPlayerSelectionEventBJ(gg_trg_Gargoyle_Easter_Egg, Player(11), true)
    call TriggerAddCondition(gg_trg_Gargoyle_Easter_Egg, Condition(function Trig_Gargoyle_Easter_Egg_Conditions))
    call TriggerAddAction(gg_trg_Gargoyle_Easter_Egg, function Trig_Gargoyle_Easter_Egg_Actions)
endfunction

//===========================================================================
// Trigger: SCD Shut Down
//===========================================================================
function Trig_SCD_Shut_Down_Func003A takes nothing returns nothing
    call SetUnitAnimation(GetEnumUnit(), "death")
endfunction

function Trig_SCD_Shut_Down_Actions takes nothing returns nothing
    set udg_TempUnitGroup=GetUnitsOfTypeIdAll('n00x')
    call ForGroupBJ(udg_TempUnitGroup, function Trig_SCD_Shut_Down_Func003A)
    call DestroyGroup(udg_TempUnitGroup)
endfunction

//===========================================================================
function InitTrig_SCD_Shut_Down takes nothing returns nothing
    set gg_trg_SCD_Shut_Down=CreateTrigger()
    call TriggerAddAction(gg_trg_SCD_Shut_Down, function Trig_SCD_Shut_Down_Actions)
endfunction

//===========================================================================
// Trigger: Alodimensional1
//===========================================================================
function Trig_Alodimensional1_Actions takes nothing returns nothing
    set udg_HP_Comparison[( 2 + udg_HP_Index )]=GetUnitStateSwap(UNIT_STATE_LIFE, udg_Alodimensional_Being)
    set udg_HP_Comparison[( 3 + udg_HP_Index )]=( udg_HP_Comparison[( 1 + udg_HP_Index )] - udg_HP_Comparison[( 2 + udg_HP_Index )] )
    call SetUnitLifeBJ(udg_Alodimensional_Being, ( GetUnitStateSwap(UNIT_STATE_LIFE, udg_Alodimensional_Being) + udg_HP_Comparison[( 3 + udg_HP_Index )] ))
    call SetUnitManaBJ(udg_Alodimensional_Being, ( GetUnitStateSwap(UNIT_STATE_MANA, udg_Alodimensional_Being) - udg_HP_Comparison[( 3 + udg_HP_Index )] ))
    set udg_HP_Index=( udg_HP_Index + 1 )
    set udg_HP_Comparison[( 1 + udg_HP_Index )]=GetUnitStateSwap(UNIT_STATE_LIFE, udg_Alodimensional_Being)
endfunction

//===========================================================================
function InitTrig_Alodimensional1 takes nothing returns nothing
    set gg_trg_Alodimensional1=CreateTrigger()
    call DisableTrigger(gg_trg_Alodimensional1)
    call TriggerRegisterTimerEventPeriodic(gg_trg_Alodimensional1, 1.00)
    call TriggerAddAction(gg_trg_Alodimensional1, function Trig_Alodimensional1_Actions)
endfunction

//===========================================================================
// Trigger: Alodimensional A I
//
// --move attack maybe?
// also make an fbomb dodge.(polar offset point)
// DONT MAKE CREATE UNIT,PLACE AND TP FROM HOLD ZONE
// Must Make: Move at random point from unit:Extraterrestial unit
//===========================================================================
function Trig_Alodimensional_A_I_Func002A takes nothing returns nothing
endfunction

function Trig_Alodimensional_A_I_Func006C takes nothing returns boolean
    if ( not ( IsUnitGroupEmptyBJ(GetLastCreatedGroup()) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Alodimensional_A_I_Actions takes nothing returns nothing
    call ForGroupBJ(GetUnitsInRangeOfLocAll(600.00, GetUnitLoc(udg_Extraterrestial_unit)), function Trig_Alodimensional_A_I_Func002A)
    set udg_TempUnitGroup=GetLastCreatedGroup()
    call GroupRemoveUnitSimple(udg_Extraterrestial_unit, GetLastCreatedGroup())
    set udg_TempPoint=OffsetLocation(GetUnitLoc(udg_Extraterrestial_unit), GetRandomReal(0, 360.00), GetRandomReal(0, 360.00))
    if ( Trig_Alodimensional_A_I_Func006C() ) then
        call IssueTargetOrderBJ(udg_Extraterrestial_unit, "attack", GroupPickRandomUnit(udg_TempUnitGroup))
    else
        call SetUnitPositionLocFacingLocBJ(udg_Extraterrestial_unit, udg_TempPoint, udg_TempPoint)
    endif
    call RemoveLocation(udg_TempPoint)
    call DestroyGroup(udg_TempUnitGroup)
endfunction

//===========================================================================
function InitTrig_Alodimensional_A_I takes nothing returns nothing
    set gg_trg_Alodimensional_A_I=CreateTrigger()
    call DisableTrigger(gg_trg_Alodimensional_A_I)
    call TriggerRegisterTimerEventPeriodic(gg_trg_Alodimensional_A_I, 6.00)
    call TriggerAddAction(gg_trg_Alodimensional_A_I, function Trig_Alodimensional_A_I_Actions)
endfunction

//===========================================================================
// Trigger: Water shield Effect
//===========================================================================
function Trig_Water_shield_Effect_Func003Func007Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetEnumUnit()) != 'n00I' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Water_shield_Effect_Func003Func007A takes nothing returns nothing
    if ( Trig_Water_shield_Effect_Func003Func007Func001C() ) then
        call UnitDamageTargetBJ(udg_Alodimensional_Being, GetEnumUnit(), 5.00, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL)
    else
    endif
endfunction

function Trig_Water_shield_Effect_Func003C takes nothing returns boolean
    if ( not ( IsUnitDeadBJ(udg_Alodimensional_Being) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Water_shield_Effect_Func004C takes nothing returns boolean
    if ( not ( GetUnitStateSwap(UNIT_STATE_MANA, udg_Alodimensional_Being) <= 5.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Water_shield_Effect_Actions takes nothing returns nothing
    set udg_TempLoc3=GetUnitLoc(udg_Alodimensional_Being)
    if ( Trig_Water_shield_Effect_Func003C() ) then
        call AddSpecialEffectLocBJ(PolarProjectionBJ(udg_TempLoc3, 100.00, udg_Water_Shield_Number), "Abilities\\Spells\\Other\\CrushingWave\\CrushingWaveDamage.mdl")
        call DestroyEffectBJ(GetLastCreatedEffectBJ())
        set udg_Water_Shield_Number=( udg_Water_Shield_Number + 20.00 )
        set udg_TempUnitGroup2=GetUnitsInRangeOfLocAll(280.00, udg_TempLoc3)
        call ForGroupBJ(udg_TempUnitGroup2, function Trig_Water_shield_Effect_Func003Func007A)
        call DestroyGroup(udg_TempUnitGroup2)
        call RemoveLocation(udg_TempLoc3)
    else
        call DisableTrigger(GetTriggeringTrigger())
        return
    endif
    if ( Trig_Water_shield_Effect_Func004C() ) then
        call RemoveUnit(udg_Alodimensional_Being)
        call DisableTrigger(gg_trg_Alodimensional1)
        call DisableTrigger(GetTriggeringTrigger())
    else
    endif
endfunction

//===========================================================================
function InitTrig_Water_shield_Effect takes nothing returns nothing
    set gg_trg_Water_shield_Effect=CreateTrigger()
    call DisableTrigger(gg_trg_Water_shield_Effect)
    call TriggerRegisterTimerEventPeriodic(gg_trg_Water_shield_Effect, 0.03)
    call TriggerAddAction(gg_trg_Water_shield_Effect, function Trig_Water_shield_Effect_Actions)
endfunction

//===========================================================================
// Trigger: Item drop
//
// do the drain mana and release it at abilities.
// triggger - turn off extraterrestial manacheck
//===========================================================================
function Trig_Item_drop_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'n00I' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Item_drop_Actions takes nothing returns nothing
    set udg_TempLoc=GetUnitLoc(GetTriggerUnit())
    call CreateItemLoc('I02X', udg_TempLoc)
    call DisableTrigger(gg_trg_Alodimensional_A_I)
    call RemoveLocation(udg_TempLoc)
endfunction

//===========================================================================
function InitTrig_Item_drop takes nothing returns nothing
    set gg_trg_Item_drop=CreateTrigger()
    call TriggerRegisterPlayerUnitEventSimple(gg_trg_Item_drop, Player(PLAYER_NEUTRAL_AGGRESSIVE), EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_Item_drop, Condition(function Trig_Item_drop_Conditions))
    call TriggerAddAction(gg_trg_Item_drop, function Trig_Item_drop_Actions)
endfunction

//===========================================================================
// Trigger: Mirror A I
//
// --skills left
// also i might need to replacae: unit - order picked unit to move to position of temp unit,in place of order picked unit to attack temp unit.
//===========================================================================
function Trig_Mirror_A_I_Func005Func002Func001Func003C takes nothing returns boolean
    if ( not ( GetItemTypeId(udg_TempItem) == 'I01D' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_A_I_Func005Func002Func001C takes nothing returns boolean
    return true
endfunction

function Trig_Mirror_A_I_Func005Func002Func002Func003C takes nothing returns boolean
    if ( not ( DistanceBetweenPoints(GetUnitLoc(GetEnumUnit()), GetOrderPointLoc()) >= 300.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_A_I_Func005Func002Func002Func004Func003C takes nothing returns boolean
    if ( not ( UnitItemInSlotBJ(GetEnumUnit(), udg_TempInt2) == null ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_A_I_Func005Func002Func002Func004C takes nothing returns boolean
    if ( not ( udg_TempInt2 == 3 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_A_I_Func005Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempInt2 == 2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_A_I_Func005Func002C takes nothing returns boolean
    if ( not ( udg_TempInt2 == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_A_I_Func005A takes nothing returns nothing
    set udg_TempInt2=GetRandomInt(1, 5)
    if ( Trig_Mirror_A_I_Func005Func002C() ) then
        if ( (true) ) then // INLINED!!
            call IssueImmediateOrderBJ(GetEnumUnit(), "stop")
            call IssueTargetOrderBJ(GetEnumUnit(), "attack", udg_TempUnit)
        else
            set udg_TempInt=GetRandomInt(1, 6)
            set udg_TempItem=UnitItemInSlotBJ(GetEnumUnit(), udg_TempInt)
            if ( Trig_Mirror_A_I_Func005Func002Func001Func003C() ) then
                call IssueTargetOrderBJ(GetEnumUnit(), "attack", udg_TempUnit)
            else
                call UnitUseItemTarget(GetEnumUnit(), udg_TempItem, udg_TempUnit)
            endif
        endif
    else
        if ( Trig_Mirror_A_I_Func005Func002Func002C() ) then
            set udg_TempInt2=GetRandomInt(1, 6)
            call UnitUseItemPointLoc(GetEnumUnit(), UnitItemInSlotBJ(GetEnumUnit(), udg_TempInt2), GetUnitLoc(udg_TempUnit))
            if ( Trig_Mirror_A_I_Func005Func002Func002Func003C() ) then
                call IssueImmediateOrderBJ(GetEnumUnit(), "stop")
                call IssueTargetOrderBJ(GetEnumUnit(), "attack", udg_TempUnit)
            else
            endif
        else
            if ( Trig_Mirror_A_I_Func005Func002Func002Func004C() ) then
                set udg_TempInt2=GetRandomInt(1, 6)
                if ( Trig_Mirror_A_I_Func005Func002Func002Func004Func003C() ) then
                    call IssueImmediateOrderBJ(GetEnumUnit(), "stop")
                    call IssueTargetOrderBJ(GetEnumUnit(), "attack", udg_TempUnit)
                else
                    call UnitUseItem(GetEnumUnit(), UnitItemInSlotBJ(GetEnumUnit(), udg_TempInt2))
                endif
            else
                call IssueTargetOrderBJ(GetEnumUnit(), "attack", udg_TempUnit)
            endif
        endif
    endif
endfunction

function Trig_Mirror_A_I_Actions takes nothing returns nothing
    set udg_TempUnitGroup=GetUnitsInRectAll(gg_rct_Mirror_Arena)
    call GroupRemoveGroup(GetUnitsInRectOfPlayer(gg_rct_Mirror_Arena, Player(PLAYER_NEUTRAL_PASSIVE)), udg_TempUnitGroup)
    set udg_TempUnit=GroupPickRandomUnit(udg_TempUnitGroup)
    call ForGroupBJ(udg_Mirror_Hostilegroup, function Trig_Mirror_A_I_Func005A)
    call DestroyGroup(udg_TempUnitGroup)
endfunction

//===========================================================================
function InitTrig_Mirror_A_I takes nothing returns nothing
    set gg_trg_Mirror_A_I=CreateTrigger()
    call DisableTrigger(gg_trg_Mirror_A_I)
    call TriggerRegisterTimerEventPeriodic(gg_trg_Mirror_A_I, 1.10)
    call TriggerAddAction(gg_trg_Mirror_A_I, function Trig_Mirror_A_I_Actions)
endfunction

//===========================================================================
// Trigger: Warp Artificial Intelligence
//
// --
//===========================================================================
function Trig_Warp_Artificial_Intelligence_Func005A takes nothing returns nothing
    call IssueTargetOrderBJ(GetEnumUnit(), "attack", GroupPickRandomUnit(udg_TempUnitGroup))
endfunction

function Trig_Warp_Artificial_Intelligence_Actions takes nothing returns nothing
    set udg_TempUnitGroup2=GetUnitsInRectOfPlayer(gg_rct_Warp, Player(PLAYER_NEUTRAL_AGGRESSIVE))
    set udg_TempUnitGroup=GetUnitsInRectAll(gg_rct_Warp)
    call GroupRemoveGroup(udg_TempUnitGroup2, udg_TempUnitGroup)
    call ForGroupBJ(udg_TempUnitGroup2, function Trig_Warp_Artificial_Intelligence_Func005A)
    call DestroyGroup(udg_TempUnitGroup2)
    call DestroyGroup(udg_TempUnitGroup)
endfunction

//===========================================================================
function InitTrig_Warp_Artificial_Intelligence takes nothing returns nothing
    set gg_trg_Warp_Artificial_Intelligence=CreateTrigger()
    call DisableTrigger(gg_trg_Warp_Artificial_Intelligence)
    call TriggerRegisterTimerEventPeriodic(gg_trg_Warp_Artificial_Intelligence, 1.20)
    call TriggerAddAction(gg_trg_Warp_Artificial_Intelligence, function Trig_Warp_Artificial_Intelligence_Actions)
endfunction

//===========================================================================
// Trigger: The Warp Start
//
// --ez
//===========================================================================
function Trig_The_Warp_Start_Conditions takes nothing returns boolean
    if ( not ( udg_Warp_enabled == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_The_Warp_Start_Func003A takes nothing returns nothing
    call ForceAddPlayerSimple(GetOwningPlayer(GetEnumUnit()), udg_Warp_PG)
    call DisplayTextToPlayer(GetOwningPlayer(GetEnumUnit()), 0, 0, "|CFFE55BB0Error: Teleportation UN-SUCCESFUL.\r\n\r\nLocation: U.N.K.N.O.W.N.\r\n\r\nRelocation initiating in 30 seconds.")
endfunction

function Trig_The_Warp_Start_Func007A takes nothing returns nothing
    call TimerDialogDisplayForPlayerBJ(true, GetLastCreatedTimerDialogBJ(), GetEnumPlayer())
endfunction

function Trig_The_Warp_Start_Actions takes nothing returns nothing
    set udg_TempUnitGroup2=GetUnitsInRectAll(gg_rct_Warp)
    call ForGroupBJ(udg_TempUnitGroup2, function Trig_The_Warp_Start_Func003A)
    call StartTimerBJ(udg_WarpTimer, false, 30.00)
    call CreateTimerDialogBJ(udg_WarpTimer, "TRIGSTR_4649")
    call TimerDialogDisplayBJ(false, GetLastCreatedTimerDialogBJ())
    call ForForce(udg_Warp_PG, function Trig_The_Warp_Start_Func007A)
    call DestroyGroup(udg_TempUnitGroup2)
    set udg_Warp_Timer_Window=GetLastCreatedTimerDialogBJ()
    call PlaySoundAtPointBJ(gg_snd_MarkOfChaos, 100, GetRectCenter(gg_rct_Warp), 0)
    set udg_Warp_Effect=GetRandomLocInRect(gg_rct_Warp)
    call AddSpecialEffectLocBJ(udg_Warp_Effect, "Abilities\\Spells\\Human\\Feedback\\ArcaneTowerAttack.mdl")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call AddSpecialEffectLocBJ(udg_Warp_Effect, "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeTarget.mdl")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call CreateNUnitsAtLocFacingLocBJ(1, 'n00H', Player(PLAYER_NEUTRAL_AGGRESSIVE), GetRandomLocInRect(gg_rct_Warp), GetRandomLocInRect(gg_rct_Warp))
    call RemoveLocation(udg_Warp_Effect)
    call EnableTrigger(gg_trg_The_Warp_ongoing)
    call EnableTrigger(gg_trg_The_Warp_relocation)
    call EnableTrigger(gg_trg_The_Warp_ongoing_spawn)
    call DisableTrigger(GetTriggeringTrigger())
endfunction

//===========================================================================
function InitTrig_The_Warp_Start takes nothing returns nothing
    set gg_trg_The_Warp_Start=CreateTrigger()
    call DisableTrigger(gg_trg_The_Warp_Start)
    call TriggerAddCondition(gg_trg_The_Warp_Start, Condition(function Trig_The_Warp_Start_Conditions))
    call TriggerAddAction(gg_trg_The_Warp_Start, function Trig_The_Warp_Start_Actions)
endfunction

//===========================================================================
// Trigger: The Warp ongoing
//
// I CAN FEEL THE WARP OVERTAKING MEH!!
// warpeffect is useless
//===========================================================================
function Trig_The_Warp_ongoing_Actions takes nothing returns nothing
    set udg_Warp7=1
    loop
        exitwhen udg_Warp7 > 7
        set udg_Warp_Effect=GetRandomLocInRect(gg_rct_Warp)
        call AddSpecialEffectLocBJ(udg_Warp_Effect, "Abilities\\Spells\\NightElf\\Blink\\BlinkTarget.mdl")
        call DestroyEffectBJ(GetLastCreatedEffectBJ())
        call AddSpecialEffectLocBJ(udg_Warp_Effect, "Abilities\\Spells\\Human\\Feedback\\ArcaneTowerAttack.mdl")
        call DestroyEffectBJ(GetLastCreatedEffectBJ())
        call AddSpecialEffectLocBJ(udg_Warp_Effect, "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeTarget.mdl")
        call DestroyEffectBJ(GetLastCreatedEffectBJ())
        call RemoveLocation(udg_Warp_Effect)
        set udg_Warp7=udg_Warp7 + 1
    endloop
endfunction

//===========================================================================
function InitTrig_The_Warp_ongoing takes nothing returns nothing
    set gg_trg_The_Warp_ongoing=CreateTrigger()
    call DisableTrigger(gg_trg_The_Warp_ongoing)
    call TriggerRegisterTimerEventPeriodic(gg_trg_The_Warp_ongoing, 0.50)
    call TriggerAddAction(gg_trg_The_Warp_ongoing, function Trig_The_Warp_ongoing_Actions)
endfunction

//===========================================================================
// Trigger: The Warp ongoing spawn
//===========================================================================
function Trig_The_Warp_ongoing_spawn_Actions takes nothing returns nothing
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=2
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call CreateNUnitsAtLocFacingLocBJ(1, 'n00H', Player(PLAYER_NEUTRAL_AGGRESSIVE), GetRandomLocInRect(gg_rct_Warp), GetRandomLocInRect(gg_rct_Warp))
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
endfunction

//===========================================================================
function InitTrig_The_Warp_ongoing_spawn takes nothing returns nothing
    set gg_trg_The_Warp_ongoing_spawn=CreateTrigger()
    call DisableTrigger(gg_trg_The_Warp_ongoing_spawn)
    call TriggerRegisterTimerEventPeriodic(gg_trg_The_Warp_ongoing_spawn, 2.50)
    call TriggerAddAction(gg_trg_The_Warp_ongoing_spawn, function Trig_The_Warp_ongoing_spawn_Actions)
endfunction

//===========================================================================
// Trigger: The Warp relocation
//===========================================================================
function Trig_The_Warp_relocation_Func005A takes nothing returns nothing
    call RemoveUnit(GetEnumUnit())
endfunction

function Trig_The_Warp_relocation_Func009Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetEnumUnit()) == 'H03I' ) ) then
        return false
    endif
    return true
endfunction

function Trig_The_Warp_relocation_Func009A takes nothing returns nothing
    if ( Trig_The_Warp_relocation_Func009Func001C() ) then
    else
        call SetUnitPositionLoc(GetEnumUnit(), udg_TempPoint2)
        call DisplayTextToPlayer(GetOwningPlayer(GetEnumUnit()), 0, 0, "Relocation Succesful.")
    endif
endfunction

function Trig_The_Warp_relocation_Func013A takes nothing returns nothing
    call RemoveItem(GetEnumItem())
endfunction

function Trig_The_Warp_relocation_Func014A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_Warp)
endfunction

function Trig_The_Warp_relocation_Actions takes nothing returns nothing
    call PauseTimerBJ(true, udg_WarpTimer)
    set udg_TempPoint2=GetRectCenter(gg_rct_BombTeleport)
    set udg_TempUnitGroup=GetUnitsInRectOfPlayer(gg_rct_Warp, Player(PLAYER_NEUTRAL_AGGRESSIVE))
    call ForGroupBJ(udg_TempUnitGroup, function Trig_The_Warp_relocation_Func005A)
    call DestroyGroup(udg_TempUnitGroup)
    // csa\c\a
    set udg_TempUnitGroup=GetUnitsInRectAll(gg_rct_Warp)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_The_Warp_relocation_Func009A)
    call DestroyTimerDialogBJ(udg_Warp_Timer_Window)
    set udg_TPareafail=0
    call DestroyGroup(udg_TempUnitGroup)
    call EnumItemsInRectBJ(gg_rct_Warp, function Trig_The_Warp_relocation_Func013A)
    call ForForce(GetPlayersAll(), function Trig_The_Warp_relocation_Func014A)
    call AddSpecialEffectLocBJ(GetRectCenter(gg_rct_BombTeleport), "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdl")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call DestroyGroup(udg_TempUnitGroup)
    call RemoveLocation(udg_TempPoint2)
    call DisableTrigger(gg_trg_Warp_Artificial_Intelligence)
    call DisableTrigger(gg_trg_The_Warp_ongoing)
    call DisableTrigger(gg_trg_The_Warp_ongoing_spawn)
endfunction

//===========================================================================
function InitTrig_The_Warp_relocation takes nothing returns nothing
    set gg_trg_The_Warp_relocation=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_The_Warp_relocation, udg_WarpTimer)
    call TriggerAddAction(gg_trg_The_Warp_relocation, function Trig_The_Warp_relocation_Actions)
endfunction

//===========================================================================
// Trigger: Mirror start
//
// --neutral hostile to neutral passive-necessary asf
// testing rofl
//===========================================================================
function Trig_Mirror_start_Conditions takes nothing returns boolean
    if ( not ( udg_Mirror_Enabled == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_start_Func006A takes nothing returns nothing
    call CreateNUnitsAtLoc(1, GetUnitTypeId(GetEnumUnit()), Player(PLAYER_NEUTRAL_PASSIVE), GetRandomLocInRect(gg_rct_Mirror_Arena), bj_UNIT_FACING)
    call UnitAddItemByIdSwapped(GetItemTypeId(UnitItemInSlotBJ(GetEnumUnit(), 1)), GetLastCreatedUnit())
    call UnitAddItemByIdSwapped(GetItemTypeId(UnitItemInSlotBJ(GetEnumUnit(), 2)), GetLastCreatedUnit())
    call UnitAddItemByIdSwapped(GetItemTypeId(UnitItemInSlotBJ(GetEnumUnit(), 3)), GetLastCreatedUnit())
    call UnitAddItemByIdSwapped(GetItemTypeId(UnitItemInSlotBJ(GetEnumUnit(), 4)), GetLastCreatedUnit())
    call UnitAddItemByIdSwapped(GetItemTypeId(UnitItemInSlotBJ(GetEnumUnit(), 5)), GetLastCreatedUnit())
    call UnitAddItemByIdSwapped(GetItemTypeId(UnitItemInSlotBJ(GetEnumUnit(), 6)), GetLastCreatedUnit())
    call GroupAddUnitSimple(GetLastCreatedUnit(), udg_Mirror_Hostilegroup)
    // Cache the playerhero units, so as to exit when they are dead
    if IsUnitPlayerhero(GetEnumUnit()) then
    call GroupAddUnitSimple(GetLastCreatedUnit(), udg_Mirror_KillExitGroup)
    endif
endfunction

function Trig_Mirror_start_Func007Func001C takes nothing returns boolean
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == GetEnumUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_start_Func007A takes nothing returns nothing
    if ( Trig_Mirror_start_Func007Func001C() ) then
        call DisplayTextToPlayer(GetOwningPlayer(GetEnumUnit()), 0, 0, "|CFFE55BB0You have just intervened with yourself from an alternative dimension!\r\n\r\nVictory might bring you to U.S.I. Niffy")
    else
    endif
endfunction

function Trig_Mirror_start_Actions takes nothing returns nothing
    call StartTimerBJ(udg_Mirror_Timer, false, 60.00)
    call TriggerSleepAction(0.30)
    set udg_Mirror_Enabled=true
    set udg_TempUnitGroup=GetUnitsInRectAll(gg_rct_Mirror_Arena)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_Mirror_start_Func006A)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_Mirror_start_Func007A)
    call DestroyGroup(udg_TempUnitGroup)
    call EnableTrigger(gg_trg_Mirror_relocation)
    call EnableTrigger(gg_trg_Mirror_un_abuse)
    call EnableTrigger(gg_trg_Mirror_A_I)
    call DisableTrigger(GetTriggeringTrigger())
endfunction

//===========================================================================
function InitTrig_Mirror_start takes nothing returns nothing
    set gg_trg_Mirror_start=CreateTrigger()
    call DisableTrigger(gg_trg_Mirror_start)
    call TriggerAddCondition(gg_trg_Mirror_start, Condition(function Trig_Mirror_start_Conditions))
    call TriggerAddAction(gg_trg_Mirror_start, function Trig_Mirror_start_Actions)
endfunction

//===========================================================================
// Trigger: Mirror relocation
//===========================================================================
function Trig_Mirror_relocation_Conditions takes nothing returns boolean
    if ( not ( RectContainsUnit(gg_rct_Mirror_Arena, GetTriggerUnit()) == true ) ) then
        return false
    endif
    if ( not ( IsUnitGroupDeadBJ(udg_Mirror_KillExitGroup) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_relocation_Func007Func001Func002Func003C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_relocation_Func007Func001Func002C takes nothing returns boolean
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == GetEnumUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_relocation_Func007Func001C takes nothing returns boolean
    if ( not ( IsUnitInGroup(GetEnumUnit(), udg_Mirror_Hostilegroup) == false ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetEnumUnit()) != 'h056' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_relocation_Func007A takes nothing returns nothing
    if ( Trig_Mirror_relocation_Func007Func001C() ) then
        call SetUnitPositionLoc(GetEnumUnit(), udg_TeleportBombMirrorExitPoint)
        if ( Trig_Mirror_relocation_Func007Func001Func002C() ) then
            call DisplayTextToPlayer(GetOwningPlayer(GetEnumUnit()), 0, 0, "|CFF7EBFF1\r\nAlternative Dimension shattered!\r\n\r\nOriginal Dimension recovered.")
            if ( Trig_Mirror_relocation_Func007Func001Func002Func003C() ) then
                call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TeleportBombMirrorExitPoint, 0)
            else
                call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetEnumUnit()), udg_TeleportBombMirrorExitPoint, 0)
            endif
        else
        endif
    else
    endif
endfunction

function Trig_Mirror_relocation_Func008A takes nothing returns nothing
    call KillUnit(GetEnumUnit())
    call RemoveUnit(GetEnumUnit())
endfunction

function Trig_Mirror_relocation_Func009A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_Mirror_Arena)
endfunction

function Trig_Mirror_relocation_Func010A takes nothing returns nothing
    call RemoveItem(GetEnumItem())
endfunction

function Trig_Mirror_relocation_Actions takes nothing returns nothing
    set udg_Mirror_Enabled=false
    call RemoveLocation(udg_TempPoint2)
    set udg_TempUnitGroup=GetUnitsInRectAll(gg_rct_Mirror_Arena)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_Mirror_relocation_Func007A)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_Mirror_Arena), function Trig_Mirror_relocation_Func008A)
    call ForForce(GetPlayersAll(), function Trig_Mirror_relocation_Func009A)
    call EnumItemsInRectBJ(gg_rct_Mirror_Arena, function Trig_Mirror_relocation_Func010A)
    call SetSoundPositionLocBJ(gg_snd_NightElfBuildingDeathSmall1, udg_TeleportBombMirrorExitPoint, 0)
    call PlaySoundBJ(gg_snd_NightElfBuildingDeathSmall1)
    call CreateNUnitsAtLoc(1, 'e006', Player(PLAYER_NEUTRAL_PASSIVE), udg_TeleportBombMirrorExitPoint, bj_UNIT_FACING)
    call DestroyEffectBJ(udg_Mirror_EntranceVisual)
    call DestroyGroup(udg_TempUnitGroup)
    call GroupClear(udg_Mirror_KillExitGroup)
    call GroupClear(udg_AI_group)
    call DisableTrigger(gg_trg_Mirror_A_I)
    call DisableTrigger(gg_trg_Mirror_un_abuse)
    call DisableTrigger(GetTriggeringTrigger())
endfunction

//===========================================================================
function InitTrig_Mirror_relocation takes nothing returns nothing
    set gg_trg_Mirror_relocation=CreateTrigger()
    call DisableTrigger(gg_trg_Mirror_relocation)
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Mirror_relocation, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_Mirror_relocation, Condition(function Trig_Mirror_relocation_Conditions))
    call TriggerAddAction(gg_trg_Mirror_relocation, function Trig_Mirror_relocation_Actions)
endfunction

//===========================================================================
// Trigger: Mirror un abuse
//
// --This trigger is for dem fags who will sit in a corner and shout TP RIGGED
//===========================================================================
function Trig_Mirror_un_abuse_Func006Func001Func002Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_un_abuse_Func006Func001Func002C takes nothing returns boolean
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == GetEnumUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_un_abuse_Func006Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetEnumUnit()) == 'h056' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Mirror_un_abuse_Func006A takes nothing returns nothing
    if ( Trig_Mirror_un_abuse_Func006Func001C() ) then
    else
        call SetUnitPositionLoc(GetEnumUnit(), udg_TeleportBombMirrorExitPoint)
        if ( Trig_Mirror_un_abuse_Func006Func001Func002C() ) then
            call DisplayTextToPlayer(GetOwningPlayer(GetEnumUnit()), 0, 0, "|CFF7EBFF1\r\nAlternative Dimension shifted away!\r\n\r\nOriginal Dimension recovered.")
            if ( Trig_Mirror_un_abuse_Func006Func001Func002Func002C() ) then
                call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TeleportBombMirrorExitPoint, 0)
            else
                call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetEnumUnit()), udg_TeleportBombMirrorExitPoint, 0)
            endif
        else
        endif
    endif
endfunction

function Trig_Mirror_un_abuse_Func007A takes nothing returns nothing
    call KillUnit(GetEnumUnit())
    call RemoveUnit(GetEnumUnit())
endfunction

function Trig_Mirror_un_abuse_Func008A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_MASKED, gg_rct_Mirror_Arena)
endfunction

function Trig_Mirror_un_abuse_Func009A takes nothing returns nothing
    call RemoveItem(GetEnumItem())
endfunction

function Trig_Mirror_un_abuse_Actions takes nothing returns nothing
    call PauseTimerBJ(true, udg_Mirror_Timer)
    set udg_Mirror_Enabled=false
    set udg_TempUnitGroup=GetUnitsInRectAll(gg_rct_Mirror_Arena)
    call GroupRemoveGroup(GetUnitsInRectOfPlayer(gg_rct_Mirror_Arena, Player(PLAYER_NEUTRAL_PASSIVE)), udg_TempUnitGroup)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_Mirror_un_abuse_Func006A)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_Mirror_Arena), function Trig_Mirror_un_abuse_Func007A)
    call ForForce(GetPlayersAll(), function Trig_Mirror_un_abuse_Func008A)
    call EnumItemsInRectBJ(gg_rct_Mirror_Arena, function Trig_Mirror_un_abuse_Func009A)
    call SetSoundPositionLocBJ(gg_snd_NightElfBuildingDeathSmall1, udg_TeleportBombMirrorExitPoint, 0)
    call PlaySoundBJ(gg_snd_NightElfBuildingDeathSmall1)
    call CreateNUnitsAtLoc(1, 'e006', Player(PLAYER_NEUTRAL_PASSIVE), udg_TeleportBombMirrorExitPoint, bj_UNIT_FACING)
    call DestroyEffectBJ(udg_Mirror_EntranceVisual)
    call DestroyGroup(udg_TempUnitGroup)
    call GroupClear(udg_Mirror_KillExitGroup)
    call GroupClear(udg_AI_group)
    call DisableTrigger(gg_trg_Mirror_relocation)
    call DisableTrigger(gg_trg_Mirror_A_I)
    call DisableTrigger(GetTriggeringTrigger())
endfunction

//===========================================================================
function InitTrig_Mirror_un_abuse takes nothing returns nothing
    set gg_trg_Mirror_un_abuse=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_Mirror_un_abuse, udg_Mirror_Timer)
    call TriggerAddAction(gg_trg_Mirror_un_abuse, function Trig_Mirror_un_abuse_Actions)
endfunction

//===========================================================================
// Trigger: SpaceAILogicTick
//===========================================================================
//TESH.scrollpos=27
//TESH.alwaysfold=0
function RunSpaceFleetLogic takes nothing returns nothing
    call IssuePointOrder(GetEnumUnit(), "attack", udg_TempReal, udg_TempReal2)
endfunction

function FilterEnum takes nothing returns boolean
    if GetOwningPlayer(GetFilterUnit()) != Player(PLAYER_NEUTRAL_AGGRESSIVE) and IsUnitAliveBJ(GetFilterUnit()) then
    return true
    endif
    return false
endfunction

function Trig_SpaceAILogicTick_Actions takes nothing returns nothing
            
    //Get all non-player-hostile units who are alive
    set udg_SpaceAI_FocusTargets=GetUnitsInRectMatching(gg_rct_Space, Condition(function FilterEnum))
    
    
    
    
    //If Minertha is alive, start the sapper logic
    if IsUnitDeadBJ(gg_unit_h008_0196) == false then
    
        //TempInt = The amount of units in space to be focused by AI
        set udg_TempInt=CountUnitsInGroup(udg_SpaceAI_FocusTargets)
        
        //If Minertha has sapper tag, and it's the only unit in space -> Remove the sapper tag
        if IsUnitType(gg_unit_h008_0196, UNIT_TYPE_SAPPER) and udg_TempInt == 1 then
            call UnitRemoveTypeBJ(UNIT_TYPE_SAPPER, gg_unit_h008_0196)
        endif
        
        //If minertha doesn't have sapper tag, check if there are more space units now, so as to add it to minertha
        if IsUnitType(gg_unit_h008_0196, UNIT_TYPE_SAPPER) == false and udg_TempInt > 1 then
            call UnitAddTypeBJ(UNIT_TYPE_SAPPER, gg_unit_h008_0196)
        endif
        
        //Unrelated to sapper, but removing Minertha completely from being focused if its not alone plz
        if udg_TempInt > 1 then
            call GroupRemoveUnit(udg_SpaceAI_FocusTargets, gg_unit_h008_0196)
        endif
    endif
    
    //Get First unit to target ((unrelated with distance lmao))
    set udg_TempReal=GetUnitX(FirstOfGroup(udg_SpaceAI_FocusTargets))
    set udg_TempReal2=GetUnitY(FirstOfGroup(udg_SpaceAI_FocusTargets))
    
    //Run USI Fleet Logic on each ship in the group
    call ForGroup(udg_SpaceAI_USIFleet, function RunSpaceFleetLogic)
    
    //Run Pirate Ship Logic
    if udg_SpaceAI_PirateCaptainAlive then
        call IssuePointOrder(gg_unit_h02B_0116, "attack", udg_TempReal, udg_TempReal2)
    endif
    
    call DestroyGroup(udg_SpaceAI_FocusTargets)
        
    //Run Drones Logic
    //Ytrec's code copypasta has made them run by themselves, and its better that way since they don't focus one point but locally closest
    //Could use some cleaning for sure, as they are not optimized for sure and conflict with this (checking sapper minertha for each drone -_-)
    
    //Run Misc
    //No idea, but I was thinking of snoeglays or hostile raptors/ships in general - very rare.
endfunction

//===========================================================================
function InitTrig_SpaceAILogicTick takes nothing returns nothing
    set gg_trg_SpaceAILogicTick=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_SpaceAILogicTick, udg_SpaceAI_Timer)
    call TriggerAddAction(gg_trg_SpaceAILogicTick, function Trig_SpaceAILogicTick_Actions)
endfunction


//===========================================================================
// Trigger: LifeformScan
//===========================================================================
function Trig_LifeformScan_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04X' ) ) then
        return false
    endif
    return true
endfunction


function DeterminePlayerheroIncrease takes nothing returns nothing
    if udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == GetEnumUnit() then
        set udg_TempInt=udg_TempInt + 1
    endif
endfunction

function DetermineExplorerIncrease takes nothing returns nothing
    if (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) then // INLINED!!
        set udg_TempInt=udg_TempInt + 1
    endif
endfunction
//Could "optimize" the above, by having only one group, since first function takes only ships and units
//and so, i could enumerate them together. But it will be a bit harder to read, and also should take time to bugfix -_-


function Trig_LifeformScan_Actions takes nothing returns nothing
local unit a=GetSpellTargetUnit()
local player b=GetOwningPlayer(GetSpellAbilityUnit())
local rect stationRect=udg_SpaceObject_Rect[(GetUnitUserData((GetSpellTargetUnit())))] // INLINED!!
local real scanDelay=( ( GetRectWidthBJ(stationRect) * GetRectHeightBJ(stationRect) ) / 15000000.00 )
local group unitsWithinRect
local integer lifeformCount
local integer explorerCount

    if b == Player(bj_PLAYER_NEUTRAL_EXTRA) then
        set b=udg_Parasite
    endif

    if stationRect != null then
        //Players inside
        call DisplayTextToPlayer(b, 0, 0, "|cff00FFFFScanning...Estimated time " + R2S(scanDelay) + " seconds.")
        set udg_TempInt=0
        set unitsWithinRect=GetUnitsInRectAndShips(stationRect)
        call ForGroupBJ(unitsWithinRect, function DeterminePlayerheroIncrease)
        call DestroyGroup(unitsWithinRect)
        set lifeformCount=udg_TempInt
        
        if (GetUnitAbilityLevel((a), 'A071') == 1) == false and RectContainsUnit(gg_rct_SpaceSound, gg_unit_h003_0018) then //h003_0018 is arbitress // INLINED!!
            //Ships inside
            set udg_TempInt=0
            set unitsWithinRect=GetUnitsInRectAll(stationRect)
            call ForGroupBJ(unitsWithinRect, function DetermineExplorerIncrease)
            call DestroyGroup(unitsWithinRect)
            set explorerCount=udg_TempInt
            
            call PolledWait(scanDelay)
            call DisplayTextToPlayer(b, 0, 0, "|cff00FFFFSensors have detected |r|cffFF0000" + I2S(lifeformCount) + " |r|cff00FFFFlifeforms, and |r|cffF4A460" + I2S(explorerCount) + " |r|cff00FFFFexplorers within target.")
        else
            call PolledWait(scanDelay)
            call DisplayTextToPlayer(b, 0, 0, "|cff00FFFFSensors have detected |r|cffFF0000" + I2S(lifeformCount) + " |r|cff00FFFFlifeforms within target.")
        endif
        
        
    
    else
        call DisplayTextToPlayer(b, 0, 0, "An error has occurred.")
    endif
endfunction

//===========================================================================
function InitTrig_LifeformScan takes nothing returns nothing
    set gg_trg_LifeformScan=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_LifeformScan, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_LifeformScan, Condition(function Trig_LifeformScan_Conditions))
    call TriggerAddAction(gg_trg_LifeformScan, function Trig_LifeformScan_Actions)
endfunction


//===========================================================================
// Trigger: Force Dock
//===========================================================================
function Trig_Force_Dock_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04D' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Force_Dock_Func003Func003C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02Q' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02H' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02L' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h03J' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Force_Dock_Func003C takes nothing returns boolean
    if ( not Trig_Force_Dock_Func003Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_Force_Dock_Actions takes nothing returns nothing
    if ( Trig_Force_Dock_Func003C() ) then
        call IssueTargetOrderBJ(GetSpellTargetUnit(), "acidbomb", gg_unit_h009_0029)
    else
        call IssueImmediateOrderBJ(GetSpellAbilityUnit(), "stop")
    endif
endfunction

//===========================================================================
function InitTrig_Force_Dock takes nothing returns nothing
    set gg_trg_Force_Dock=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Force_Dock, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Force_Dock, Condition(function Trig_Force_Dock_Conditions))
    call TriggerAddAction(gg_trg_Force_Dock, function Trig_Force_Dock_Actions)
endfunction

//===========================================================================
// Trigger: FocusedWave
//===========================================================================
function Trig_FocusedWave_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A05D' ) ) then
        return false
    endif
    return true
endfunction

function FocusedWave_Slide takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit l=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
local location a=GetUnitLoc(l)
local location b=PolarProjectionBJ(a, 20.0, GetUnitFacing(l))
call RemoveLocation(a)
call SetUnitPositionLoc(l, b)
call RemoveLocation(b)
if IsUnitDeadBJ(l) then
call DestroyTrigger(LoadTriggerHandle((udg_hash), GetHandleId(k), StringHash("trig"))) // INLINED!!
call PauseTimer(k)
call DestroyTimer(k)
endif
endfunction

function FocusedWave_Damage takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
if GetUnitAbilityLevel(GetTriggerUnit(), 'Avul') == 0 and IsUnitAliveBJ(GetTriggerUnit()) and GetUnitPointValue(GetTriggerUnit()) != 37 and LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("caster")) != GetTriggerUnit() then // INLINED!!
if (GetUnitAbilityLevel((GetTriggerUnit()), 'A071') == 1) then // INLINED!!
call UnitDamageTarget(a, GetTriggerUnit(), 15000, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, WEAPON_TYPE_WHOKNOWS)
else
call UnitDamageTarget(a, GetTriggerUnit(), 60000, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, WEAPON_TYPE_WHOKNOWS)
endif
call KillUnit(a)
call DestroyTrigger(t)
call CreateUnit(Player(15), 'e01E', GetUnitX(a), GetUnitY(a), GetRandomDirectionDeg())
endif
endfunction

function Trig_FocusedWave_Actions takes nothing returns nothing
local timer k=CreateTimer()
local trigger t=CreateTrigger()
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPoint2=GetSpellTargetLoc()
    set udg_TempBool=false
    call CreateNUnitsAtLoc(1, 'e01D', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    call RemoveLocation(udg_TempPoint3)
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), GetLastCreatedUnit()) // INLINED!!
    call TimerStart(k, 0.04, true, function FocusedWave_Slide)
        call SaveTriggerHandle((udg_hash), GetHandleId(k), StringHash("trig"), t) // INLINED!!
    call TriggerRegisterUnitInRangeSimple(t, 100.0, GetLastCreatedUnit())
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), GetLastCreatedUnit()) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("caster"), GetSpellAbilityUnit()) // INLINED!!
    call TriggerAddAction(t, function FocusedWave_Damage)
endfunction

//===========================================================================
function InitTrig_FocusedWave takes nothing returns nothing
    set gg_trg_FocusedWave=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_FocusedWave, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_FocusedWave, Condition(function Trig_FocusedWave_Conditions))
    call TriggerAddAction(gg_trg_FocusedWave, function Trig_FocusedWave_Actions)
endfunction


//===========================================================================
// Trigger: CordoningBeacon
//
// Required for Import: (Scroll down for full list.)
// -This trigger.
// -The Tripwire ability.
// -Kattanna's LHV (also requires global gamecache handlevars) (see the comment on the trigger for details)
//===========================================================================
//TESH.scrollpos=178
//TESH.alwaysfold=0
//Spell by: FelFox
// Tripwire
//Functions below are used for configuration of this spell.
//Sidenote: I had to gut most of my own spell to make it work for Metastasis.
function Cord_AbilCode takes nothing returns integer
return 'A07A'
//The rawcode of the spell.
endfunction

function Cord_Damage takes nothing returns real
return 160.0
//The damage the tripping unit takes.
endfunction

function Cord_CordDuration takes nothing returns real
return 2.0
//The duration for which the unit that trips the wire lies on the ground.
endfunction


function Cord_LightningCode takes nothing returns string
return "AWES"
//The lightning's code.
endfunction

function Cord_MaxDist takes nothing returns real
return 3100.0
//Maximum distance between two trees that can be wired.
endfunction


//Spell Engine
//Do not edit beyond this point on pain of death.
//
//

function Cord_RegionAddLineSeg takes region whichRegion,real x1,real y1,real x2,real y2 returns nothing
    local real dist= SquareRoot(( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ))
    local real xdist= x2 - x1
    local real ydist= y2 - y1
    loop
        exitwhen x1 > x2 and xdist > 0
        exitwhen x2 > x1 and xdist < 0
        exitwhen y1 > y2 and ydist > 0
        exitwhen y2 > y1 and ydist < 0
        call RegionAddCell(whichRegion, x1, y1)
        exitwhen dist == 0
        set x1=x1 + 16 * ( xdist / dist )
        set y1=y1 + 16 * ( ydist / dist )
    endloop
//Function by Shvegait. [http://wc3jass.com/viewtopic.php?t=282]
endfunction

function Cord_AbilCheck takes nothing returns boolean
if GetSpellAbilityId() == ('A07A') then // INLINED!!
     return true
endif
     return false
endfunction

function CordPush_Determine takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit f=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("f")) // INLINED!!
local location r=LoadLocationHandle((udg_hash), GetHandleId(k), StringHash("r")) // INLINED!!
local location b=GetUnitLoc(f)
call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
call DestroyTimer(k)
call IssueImmediateOrder(f, "stop")
call PauseUnitForPeriod(f , 2)
call Push(f , 20 , 10.0 , AngleBetweenPoints(b, r))
call RemoveLocation(b)
call RemoveLocation(r)
set r=null
set b=null
set k=null
endfunction

function CordCollide takes nothing returns nothing
  local unit targetone=LoadUnitHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("target1")) // INLINED!!
  local unit targettwo=LoadUnitHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("target2")) // INLINED!!
  //local hashtable h=LoadLightningHandle(LS(), GetHandleId(targettwo),StringHash("lightning"))
  local unit f=GetTriggerUnit()
  local player p=LoadPlayerHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("wo")) // INLINED!!
  local timer k
  local location r1=GetUnitLoc(f)
  local real angle=LoadReal((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("angle")) // INLINED!!
  local real startx=LoadReal((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("startx")) // INLINED!!
    local real starty=LoadReal((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("starty")) // INLINED!!
  local real pushangle
  if GetUnitY(f) < ( TanBJ(angle) * ( GetUnitX(f) - startx ) + starty ) then
  set pushangle=angle + 90
  else
  set pushangle=angle - 90
  endif
  if (GetUnitAbilityLevel((f), 'A071') == 1) and GetUnitTypeId(f) != 'h02Q' and GetUnitTypeId(f) != 'h04E' then // INLINED!!
      // set k=CreateTimer()
//call SaveUnitHandle(LS(),GetHandleId(k),StringHash("f"),f)
//call SaveLocationHandle(LS(),GetHandleId(k),StringHash("r"),GetUnitLoc(f))
//call TimerStart(k,0.01,false, function CordPush_Determine)
call IssueImmediateOrder(f, "stop")
call PauseUnitForPeriod(f , 1.5)
call Push(f , 200 , 150.0 , pushangle)
endif
set targetone=null
set targettwo=null
set f=null
set p=null
endfunction

function CordDisable takes nothing returns nothing
local trigger g=LoadTriggerHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("t")) // INLINED!!
  local unit targetone=LoadUnitHandle((udg_hash), GetHandleId(g), StringHash("target1")) // INLINED!!
  local unit targettwo=LoadUnitHandle((udg_hash), GetHandleId(g), StringHash("target2")) // INLINED!!
  local hashtable h=LoadHashtableHandle((udg_hash), GetHandleId(targettwo), StringHash("lightning")) // INLINED!!
  call DestroyTrigger(GetTriggeringTrigger())
call KillUnit(targetone)
call KillUnit(targettwo)
     call RemoveRegion(LoadRegionHandle((udg_hash), GetHandleId(g), StringHash("region"))) // INLINED!!
     call FlushChildHashtable((udg_hash), GetHandleId(GetTriggeringTrigger())) // INLINED!!
call Delightningize(h)
call FlushParentHashtable(h)
     call FlushChildHashtable((udg_hash), GetHandleId(targetone)) // INLINED!!
     call FlushChildHashtable((udg_hash), GetHandleId(targettwo)) // INLINED!!
     endfunction
function CordAct2 takes nothing returns nothing
local unit q=GetSpellAbilityUnit()
  local unit targetone=LoadUnitHandle((udg_hash), GetHandleId(q), StringHash("target1")) // INLINED!!
  local unit targettwo=CreateUnit(Player(15), 'e024', GetSpellTargetX(), GetSpellTargetY(), GetRandomDirectionDeg())
    local location a=GetUnitLoc(targetone)
  local location b=GetUnitLoc(targettwo)
  local hashtable h=InitHashtable()
  local trigger Cordtrigger=CreateTrigger()
  local region hitrect=CreateRegion()
  local trigger disabletrigger=CreateTrigger()
  local real angle
  local real startx
  local real starty
  if GetLocationX(a) < GetLocationX(b) then
  set starty=GetLocationY(a)
  set startx=GetLocationX(a)
  set angle=AngleBetweenPoints(b, a)
  else
  set startx=GetLocationX(b)
  set starty=GetLocationY(b)
  set angle=AngleBetweenPoints(a, b)
  endif
  call LightningizeLocs(("AWES") , a , b , 500.0 , h) // INLINED!!
  call RemoveLocation(a)
  call RemoveLocation(b)
  set a=null
  set b=null
  call TriggerRegisterUnitEvent(disabletrigger, targetone, EVENT_UNIT_DEATH)
call TriggerRegisterUnitEvent(disabletrigger, targettwo, EVENT_UNIT_DEATH)
call TriggerAddAction(disabletrigger, function CordDisable)
call SaveTriggerHandle((udg_hash), GetHandleId(disabletrigger), StringHash("t"), Cordtrigger) // INLINED!!
     call Cord_RegionAddLineSeg(hitrect , GetUnitX(targettwo) , GetUnitY(targettwo) , GetUnitX(targetone) , GetUnitY(targetone))
     call SaveUnitHandle((udg_hash), GetHandleId(Cordtrigger), StringHash("target1"), targetone) // INLINED!!
     call SaveUnitHandle((udg_hash), GetHandleId(Cordtrigger), StringHash("target2"), targettwo) // INLINED!!
          call SaveReal((udg_hash), GetHandleId(Cordtrigger), StringHash("angle"), angle) // INLINED!!
                    call SaveReal((udg_hash), GetHandleId(Cordtrigger), StringHash("startx"), startx) // INLINED!!
                              call SaveReal((udg_hash), GetHandleId(Cordtrigger), StringHash("starty"), starty) // INLINED!!
     call SaveHashtableHandle((udg_hash), GetHandleId(targettwo), StringHash("lightning"), h) // INLINED!!
     call SaveUnitHandle((udg_hash), GetHandleId(q), StringHash("target1"), udg_TheNullUnit) // INLINED!!
     call SaveRegionHandle((udg_hash), GetHandleId(Cordtrigger), StringHash("region"), hitrect) // INLINED!!
     call SavePlayerHandle((udg_hash), GetHandleId(Cordtrigger), StringHash("wo"), GetOwningPlayer(GetSpellAbilityUnit())) // INLINED!!
     call TriggerAddAction(Cordtrigger, function CordCollide)
     call TriggerRegisterEnterRegion(Cordtrigger, hitrect, null)
set Cordtrigger=null
set hitrect=null

endfunction

function CordAct takes nothing returns nothing
local unit q=GetSpellAbilityUnit()
  local unit targetone=CreateUnit(Player(15), 'e024', GetSpellTargetX(), GetSpellTargetY(), GetRandomDirectionDeg())
     call SaveUnitHandle((udg_hash), GetHandleId(q), StringHash("target1"), targetone) // INLINED!!
endfunction

function CordDirectAct takes nothing returns nothing
  local unit v=LoadUnitHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("target1")) // INLINED!!
  local location a=GetUnitLoc(v)
  local location b=GetSpellTargetLoc()
  local player o=GetOwningPlayer(GetSpellAbilityUnit())
  if o == Player(14) then
  set o=udg_Parasite
  endif
if v == udg_TheNullUnit or v == null then
     call CordAct()
else
     call CordAct2()
endif
     call RemoveLocation(a)
     call RemoveLocation(b)
     set a=null
     set b=null
endfunction
//===========================================================================
function InitTrig_CordoningBeacon takes nothing returns nothing
    set gg_trg_CordoningBeacon=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_CordoningBeacon, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_CordoningBeacon, Condition(function Cord_AbilCheck))
    call TriggerAddAction(gg_trg_CordoningBeacon, function CordDirectAct)
endfunction


//===========================================================================
// Trigger: PrismRocketsAlbadar
//===========================================================================
//TESH.scrollpos=27
//TESH.alwaysfold=0
function Trig_PrismRocketsAlbadar_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07L' ) ) then
        return false
    endif
    return true
endfunction



function PrismRocketAlbadar_Slide takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit l=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
local location a=GetUnitLoc(l)
local location b=PolarProjectionBJ(a, 80.0, GetUnitFacing(l))
local real c=LoadReal((udg_hash), GetHandleId(l), StringHash("angle")) // INLINED!!
if GetLocationZ(b) > GetLocationZ(a) + GetUnitFlyHeight(l) then
call KillUnit(l)
endif
//if IsPointPathable(GetLocationX(b), GetLocationY(b), false) == false then
//call KillUnit(l)
//endif
call SetUnitPositionLoc(l, b)
call SetUnitFacing(l, c)
call RemoveLocation(b)
call RemoveLocation(a)
if IsUnitDeadBJ(l) then
call PauseTimer(k)
call DestroyTimer(k)
endif
endfunction

function PrismRocketAlbadar_Damage takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
if GetUnitAbilityLevel(GetTriggerUnit(), 'Avul') == 0 and IsUnitAliveBJ(GetTriggerUnit()) and LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("caster")) != GetTriggerUnit() then // INLINED!!
call UnitDamageTarget(a, GetTriggerUnit(), 450, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
call KillUnit(a)
call DestroyTrigger(t)

endif
endfunction
function PrismRocketAlbadar_Dies takes nothing returns nothing
local trigger q=GetTriggeringTrigger()
local trigger t=LoadTriggerHandle((udg_hash), GetHandleId(q), StringHash("t")) // INLINED!!
local trigger o=LoadTriggerHandle((udg_hash), GetHandleId(q), StringHash("o")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(GetTriggerUnit())) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(q)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(o)) // INLINED!!
call DestroyTrigger(q)
call DestroyTrigger(t)
call DestroyTrigger(o)
endfunction

function FirePrismRocketAlbadar takes real x1,real y2,real z1,real angle returns nothing
local timer k=CreateTimer()
local trigger t=CreateTrigger()
local trigger q=CreateTrigger()
set udg_TempPoint=Location(x1, y2)
    set udg_TempPoint3=PolarProjectionBJ(udg_TempPoint, 160.0, angle)
    set udg_TempBool=false
    call CreateNUnitsAtLoc(1, 'e02J', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, angle)
 call SaveReal((udg_hash), GetHandleId(GetLastCreatedUnit()), StringHash("angle"), angle) // INLINED!!
   call TriggerRegisterUnitEvent(q, GetLastCreatedUnit(), EVENT_UNIT_DEATH)
   call TriggerAddAction(q, function PrismRocketAlbadar_Dies)
   call SaveTriggerHandle((udg_hash), GetHandleId(q), StringHash("t"), t) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), GetLastCreatedUnit()) // INLINED!!
    call RemoveLocation(udg_TempPoint)
    call TimerStart(k, 0.04, true, function PrismRocketAlbadar_Slide)
    call TriggerRegisterUnitInRangeSimple(t, 150.0, GetLastCreatedUnit())
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), GetLastCreatedUnit()) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("caster"), GetSpellAbilityUnit()) // INLINED!!
    call TriggerAddAction(t, function PrismRocketAlbadar_Damage)
    call SetUnitPathing(GetLastCreatedUnit(), false)
endfunction




function PrismRocketsAlbadar_Fire takes nothing returns nothing
local timer t=GetExpiredTimer()
local unit b=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
local real x=LoadReal((udg_hash), GetHandleId(t), StringHash("x")) // INLINED!!
local real y=LoadReal((udg_hash), GetHandleId(t), StringHash("y")) // INLINED!!
local location o=Location(x, y)
local location c=PolarProjectionBJ(o, GetRandomReal(0, 300.0), GetRandomDirectionDeg())
local location n=GetUnitLoc(b)
local location m=PolarProjectionBJ(n, 80.0, AngleBetweenPoints(c, n))
local real omnomnom=AngleBetweenPoints(m, c)
call RemoveLocation(n)
set n=null
call FirePrismRocketAlbadar(GetLocationX(m) , GetLocationY(m) , GetLocationZ(o) + 130.0 , omnomnom)
call RemoveLocation(o)
set o=null
call RemoveLocation(m)
set m=null
call RemoveLocation(c)
set c=null
endfunction

function Trig_PrismRocketsAlbadar_Actions takes nothing returns nothing
local timer t=CreateTimer()
local unit b=GetSpellAbilityUnit()
local location d=GetSpellTargetLoc()
local real x=GetLocationX(d)
local real y=GetLocationY(d)
call RemoveLocation(d)
set d=null
call SaveTimerHandle((udg_hash), GetHandleId(b), StringHash("PrismRocket_Timer"), t) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), b) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("x"), x) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("y"), y) // INLINED!!
call TimerStart(t, 0.1, true, function PrismRocketsAlbadar_Fire)
endfunction

//===========================================================================
function InitTrig_PrismRocketsAlbadar takes nothing returns nothing
    set gg_trg_PrismRocketsAlbadar=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_PrismRocketsAlbadar, EVENT_PLAYER_UNIT_SPELL_CHANNEL)
    call TriggerAddCondition(gg_trg_PrismRocketsAlbadar, Condition(function Trig_PrismRocketsAlbadar_Conditions))
    call TriggerAddAction(gg_trg_PrismRocketsAlbadar, function Trig_PrismRocketsAlbadar_Actions)
endfunction


//===========================================================================
// Trigger: PrismRocketsEndAlbadar
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_PrismRocketsEndAlbadar_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07L' ) ) then
        return false
    endif
    return true
endfunction

function Trig_PrismRocketsEndAlbadar_Actions takes nothing returns nothing
local timer t=LoadTimerHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("PrismRocket_Timer")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call DestroyTimer(t)
call PauseTimer(t)
endfunction

//===========================================================================
function InitTrig_PrismRocketsEndAlbadar takes nothing returns nothing
    set gg_trg_PrismRocketsEndAlbadar=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_PrismRocketsEndAlbadar, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
    call TriggerAddCondition(gg_trg_PrismRocketsEndAlbadar, Condition(function Trig_PrismRocketsEndAlbadar_Conditions))
    call TriggerAddAction(gg_trg_PrismRocketsEndAlbadar, function Trig_PrismRocketsEndAlbadar_Actions)
endfunction


//===========================================================================
// Trigger: RotaryDodge
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_RotaryDodge_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A065' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RotaryDodge_Actions takes nothing returns nothing
local unit a=GetSpellAbilityUnit()
    call UnitAddAbilityForPeriod(a , 'Avul' , 5.0)
    call DamageAreaForPlayer(GetOwningPlayer(a) , 225.0 , 100.0 , GetUnitX(GetSpellAbilityUnit()) , GetUnitY(GetSpellAbilityUnit()))
   
    call UnitAddAbilityBJ('Amrf', a)
    call SetUnitTimeScale(a, 2.0)
    call h__SetUnitMoveSpeed(a, 420.0)
    call SetUnitFlyHeightBJ(a, 450.00, 250.00)
    call UnitRemoveAbilityBJ('Amrf', a)
    call PolledWait(4.20)
    call UnitAddAbilityBJ('Amrf', a)
    call SetUnitFlyHeightBJ(a, 0.00, 587.50)
    call UnitRemoveAbilityBJ('Amrf', a)
    call PolledWait(0.70)
        call h__SetUnitMoveSpeed(a, 310.0)
    call SetUnitTimeScale(a, 1.0)
set bj_lastCreatedEffect=AddSpecialEffect("Abilities\\Spells\\Human\\Thunderclap\\ThunderClapCaster.mdl", GetUnitX(a), GetUnitY(a))
call SFXThreadClean()
    call DamageAreaForPlayer(GetOwningPlayer(a) , 225.0 , 100.0 , GetUnitX(a) , GetUnitY(a))
endfunction

//===========================================================================
function InitTrig_RotaryDodge takes nothing returns nothing
    set gg_trg_RotaryDodge=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_RotaryDodge, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_RotaryDodge, Condition(function Trig_RotaryDodge_Conditions))
    call TriggerAddAction(gg_trg_RotaryDodge, function Trig_RotaryDodge_Actions)
endfunction


//===========================================================================
// Trigger: PulseWave
//===========================================================================
function Trig_PulseWave_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A068' ) ) then
        return false
    endif
    return true
endfunction

function PulseWave_Slide takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit l=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
local location a=GetUnitLoc(l)
local location b=PolarProjectionBJ(a, 40.0, GetUnitFacing(l))
call RemoveLocation(a)
call SetUnitPositionLoc(l, b)
call RemoveLocation(b)
if IsUnitDeadBJ(l) then
call DestroyTrigger(LoadTriggerHandle((udg_hash), GetHandleId(k), StringHash("trig"))) // INLINED!!
call PauseTimer(k)
call DestroyTimer(k)

endif
endfunction

function PulseWave_Damage takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
local unit b=GetTriggerUnit()
if GetUnitAbilityLevel(GetTriggerUnit(), 'Avul') == 0 and IsUnitAliveBJ(GetTriggerUnit()) and GetUnitPointValue(GetTriggerUnit()) != 37 and LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("caster")) != GetTriggerUnit() then // INLINED!!
call UnitDamageTarget(a, GetTriggerUnit(), 75, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
if IsUnitType(b, UNIT_TYPE_STRUCTURE) != true then
call SetUnitAnimation(b, "death")
endif
call PauseUnit(b, true)
call PolledWait(0.8)
call PauseUnit(b, false)
if not ( (GetUnitAbilityLevel((b), 'A070') == 1) or GetUnitTypeId(b) == 'h00H' ) then // INLINED!!
call SetUnitAnimation(b, "stand")
endif
//call KillUnit(a)
//call DestroyTrigger(t)
endif
endfunction

function Trig_PulseWave_Actions takes nothing returns nothing
local timer k=CreateTimer()
local trigger t=CreateTrigger()
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPoint2=GetSpellTargetLoc()
    set udg_TempBool=false
    call CreateNUnitsAtLoc(1, 'e01R', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    call RemoveLocation(udg_TempPoint3)
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), GetLastCreatedUnit()) // INLINED!!
    call TimerStart(k, 0.04, true, function PulseWave_Slide)
    call SaveTriggerHandle((udg_hash), GetHandleId(k), StringHash("trig"), t) // INLINED!!
    call TriggerRegisterUnitInRangeSimple(t, 100.0, GetLastCreatedUnit())
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), GetLastCreatedUnit()) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("caster"), GetSpellAbilityUnit()) // INLINED!!
    call TriggerAddAction(t, function PulseWave_Damage)
endfunction

//===========================================================================
function InitTrig_PulseWave takes nothing returns nothing
    set gg_trg_PulseWave=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_PulseWave, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_PulseWave, Condition(function Trig_PulseWave_Conditions))
    call TriggerAddAction(gg_trg_PulseWave, function Trig_PulseWave_Actions)
endfunction


//===========================================================================
// Trigger: PrismRockets
//===========================================================================
function Trig_PrismRockets_Conditions takes nothing returns boolean
    if ( GetSpellAbilityId() == 'A05U' or GetSpellAbilityId() == 'A0AH' ) then
        return true
    endif
    return false
endfunction



function PrismRocket_Slide takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit l=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
local location a=GetUnitLoc(l)
local location b=PolarProjectionBJ(a, 40.0, GetUnitFacing(l))
local real c=LoadReal((udg_hash), GetHandleId(l), StringHash("angle")) // INLINED!!
local real height=LoadReal((udg_hash), GetHandleId(l), StringHash("height")) // INLINED!!
local real d=LoadReal((udg_hash), GetHandleId(l), StringHash("zdecay")) // INLINED!!
call SetUnitFlyHeight(l, height + d - GetLocationZ(b), 0.0)
call SaveReal((udg_hash), GetHandleId(l), StringHash("height"), height + d) // INLINED!!
if GetLocationZ(b) > GetLocationZ(a) + GetUnitFlyHeight(l) then
call KillUnit(l)
endif
//if IsPointPathable(GetLocationX(b), GetLocationY(b), false) == false then
//call KillUnit(l)
//endif
call SetUnitPositionLoc(l, b)
call SetUnitFacing(l, c)
call RemoveLocation(b)
call RemoveLocation(a)
if IsUnitDeadBJ(l) then
call PauseTimer(k)
call DestroyTimer(k)
endif
endfunction

function PrismRocket_Damage takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
if GetUnitAbilityLevel(GetTriggerUnit(), 'Avul') == 0 and IsUnitAliveBJ(GetTriggerUnit()) and GetUnitPointValue(GetTriggerUnit()) != 37 and LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("caster")) != GetTriggerUnit() then // INLINED!!
call KillUnit(a)
call DestroyTrigger(t)
endif
endfunction
function PrismRocket_Dies takes nothing returns nothing
local trigger q=GetTriggeringTrigger()
local trigger t=LoadTriggerHandle((udg_hash), GetHandleId(q), StringHash("t")) // INLINED!!
local trigger o=LoadTriggerHandle((udg_hash), GetHandleId(q), StringHash("o")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(GetTriggerUnit())) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(q)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(o)) // INLINED!!
call DestroyTrigger(q)
call DestroyTrigger(t)
call DestroyTrigger(o)
endfunction

function FirePrismRocket takes real x1,real y2,real z1,real zdecay,real angle returns nothing
local timer k=CreateTimer()
local trigger t=CreateTrigger()
local trigger q=CreateTrigger()
set udg_TempPoint=Location(x1, y2)
    set udg_TempPoint3=PolarProjectionBJ(udg_TempPoint, 160.0, angle)
    set udg_TempBool=false
    call CreateNUnitsAtLoc(1, 'e01M', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, angle)
 call SaveReal((udg_hash), GetHandleId(GetLastCreatedUnit()), StringHash("angle"), angle) // INLINED!!
  call SaveReal((udg_hash), GetHandleId(GetLastCreatedUnit()), StringHash("height"), z1) // INLINED!!
  call SetUnitFlyHeight(GetLastCreatedUnit(), z1 - GetLocationZ(udg_TempPoint), 0.0)
    call SaveReal((udg_hash), GetHandleId(GetLastCreatedUnit()), StringHash("zdecay"), zdecay) // INLINED!!
   call TriggerRegisterUnitEvent(q, GetLastCreatedUnit(), EVENT_UNIT_DEATH)
   call TriggerAddAction(q, function PrismRocket_Dies)
   call SaveTriggerHandle((udg_hash), GetHandleId(q), StringHash("t"), t) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), GetLastCreatedUnit()) // INLINED!!
    call RemoveLocation(udg_TempPoint)
    call TimerStart(k, 0.04, true, function PrismRocket_Slide)
    call TriggerRegisterUnitInRangeSimple(t, 50.0, GetLastCreatedUnit())
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), GetLastCreatedUnit()) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("caster"), GetSpellAbilityUnit()) // INLINED!!
    call TriggerAddAction(t, function PrismRocket_Damage)
    call SetUnitPathing(GetLastCreatedUnit(), false)
endfunction




function PrismRockets_Fire takes nothing returns nothing
local timer t=GetExpiredTimer()
local unit b=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
local integer port=LoadInteger((udg_hash), GetHandleId(t), StringHash("PrismRocket_Port")) + 1 // INLINED!!
local real x=LoadReal((udg_hash), GetHandleId(t), StringHash("x")) // INLINED!!
local real y=LoadReal((udg_hash), GetHandleId(t), StringHash("y")) // INLINED!!
local location o=Location(x, y)
local location c=PolarProjectionBJ(o, GetRandomReal(0, 200.0), GetRandomDirectionDeg())
local location m=GetUnitLoc(b)
local real omnomnom=AngleBetweenPoints(m, c)
if port > 4 then
set port=1
call SaveInteger((udg_hash), GetHandleId(t), StringHash("PrismRocket_Port"), 1) // INLINED!!
else
call SaveInteger((udg_hash), GetHandleId(t), StringHash("PrismRocket_Port"), port) // INLINED!!
endif
if port > 2 then
set port=port + 1
endif
call FirePrismRocket(GetUnitX(b) + ( - 128 + 64 * ( port - 1 ) ) * CosBJ(omnomnom + 90) + 110.8 * CosBJ(omnomnom) , GetUnitY(b) + ( - 128 + 64 * ( port - 1 ) ) * SinBJ(omnomnom + 90) + 110.8 * SinBJ(omnomnom) , GetLocationZ(o) + 200.0 , - 10.0 , omnomnom)
call RemoveLocation(o)
set o=null
call RemoveLocation(m)
set m=null
call RemoveLocation(c)
set c=null
endfunction

function Trig_PrismRockets_Actions takes nothing returns nothing
local timer t=CreateTimer()
local unit b=GetSpellAbilityUnit()
local location d=GetSpellTargetLoc()
local real x=GetLocationX(d)
local real y=GetLocationY(d)
call RemoveLocation(d)
set d=null
call SaveTimerHandle((udg_hash), GetHandleId(b), StringHash("PrismRocket_Timer"), t) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), b) // INLINED!!
call SaveInteger((udg_hash), GetHandleId(t), StringHash("PrismRocket_Port"), 0) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("x"), x) // INLINED!!
call SaveReal((udg_hash), GetHandleId(t), StringHash("y"), y) // INLINED!!
call TimerStart(t, 0.25, true, function PrismRockets_Fire)
endfunction

//===========================================================================
function InitTrig_PrismRockets takes nothing returns nothing
    set gg_trg_PrismRockets=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_PrismRockets, EVENT_PLAYER_UNIT_SPELL_CHANNEL)
    call TriggerAddCondition(gg_trg_PrismRockets, Condition(function Trig_PrismRockets_Conditions))
    call TriggerAddAction(gg_trg_PrismRockets, function Trig_PrismRockets_Actions)
endfunction


//===========================================================================
// Trigger: PrismRocketsEnd
//===========================================================================
function Trig_PrismRocketsEnd_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A05U' or GetSpellAbilityId() == 'A0AH' ) ) then
        return false
    endif
    return true
endfunction

function Trig_PrismRocketsEnd_Actions takes nothing returns nothing
local timer t=LoadTimerHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("PrismRocket_Timer")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call DestroyTimer(t)
call PauseTimer(t)
endfunction

//===========================================================================
function InitTrig_PrismRocketsEnd takes nothing returns nothing
    set gg_trg_PrismRocketsEnd=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_PrismRocketsEnd, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
    call TriggerAddCondition(gg_trg_PrismRocketsEnd, Condition(function Trig_PrismRocketsEnd_Conditions))
    call TriggerAddAction(gg_trg_PrismRocketsEnd, function Trig_PrismRocketsEnd_Actions)
endfunction


//===========================================================================
// Trigger: TacticalNuclearWarhead
//===========================================================================
function Trig_TacticalNuclearWarhead_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02D' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TacticalNuclearWarhead_Actions takes nothing returns nothing
    call PauseUnitBJ(true, GetSpellAbilityUnit())
    call AddSpecialEffectTargetUnitBJ("origin", GetSpellAbilityUnit(), "Abilities\\Spells\\Other\\ImmolationRed\\ImmolationRedDamage.mdl")
    call SFXThreadClean()
    set udg_TempUnit=GetSpellAbilityUnit()
    set udg_CountUpBarColor="|cffFF80C0"
    call UnitAddAbilityForPeriod(GetSpellAbilityUnit() , 'Avul' , 7)
    call PauseUnitForPeriod(GetSpellAbilityUnit() , 7.0)
    call CountUpBar(udg_TempUnit , 40 , 0.16 , "TacNukeExplosion")
endfunction

//===========================================================================
function InitTrig_TacticalNuclearWarhead takes nothing returns nothing
    set gg_trg_TacticalNuclearWarhead=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_TacticalNuclearWarhead, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_TacticalNuclearWarhead, Condition(function Trig_TacticalNuclearWarhead_Conditions))
    call TriggerAddAction(gg_trg_TacticalNuclearWarhead, function Trig_TacticalNuclearWarhead_Actions)
endfunction

//===========================================================================
// Trigger: TacticalNuclearExplosion
//===========================================================================
function Trig_TacticalNuclearExplosion_Func006A takes nothing returns nothing
    set udg_TempBool=UnitInSector(GetEnumUnit() , udg_TempInt)
    
    //If in same sector and has lord of flames ability
    if ( udg_TempBool == true and GetUnitAbilityLevel(GetEnumUnit(), 'A03U') == 1 ) then
        call UnitDamageTargetBJ(udg_TempUnit4, GetEnumUnit(), 7000.00, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL)
    endif
endfunction

function Trig_TacticalNuclearExplosion_Func007Func001Func001C takes nothing returns boolean
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'DTrx' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT40' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT16' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT06' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT30' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TacticalNuclearExplosion_Func007Func001C takes nothing returns boolean
    if ( not Trig_TacticalNuclearExplosion_Func007Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_TacticalNuclearExplosion_Func007A takes nothing returns nothing
    if ( Trig_TacticalNuclearExplosion_Func007Func001C() ) then
        call KillDestructable(GetEnumDestructable())
    else
    endif
endfunction

function Trig_TacticalNuclearExplosion_Actions takes nothing returns nothing
local unit a=udg_CountupBarTemp

    
    if udg_Android_Deactivated == true and udg_HiddenAndroid == GetOwningPlayer(a) then
        return
    endif
    
    set udg_TempUnit4=udg_CountupBarTemp
    set udg_TempPoint=GetUnitLoc(udg_TempUnit4)
    call CreateNUnitsAtLoc(1, 'e00E', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
    call SetUnitTimeScalePercent(GetLastCreatedUnit(), 50.00)
    set udg_TempInt=GetSector(udg_TempPoint)
    call ForGroupBJ(GetUnitsInRangeOfLocAll(850.00, udg_TempPoint), function Trig_TacticalNuclearExplosion_Func006A)
    call EnumDestructablesInCircleBJ(900.00, udg_TempPoint, function Trig_TacticalNuclearExplosion_Func007A)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_TacticalNuclearExplosion takes nothing returns nothing
    set gg_trg_TacticalNuclearExplosion=CreateTrigger()
    call TriggerAddAction(gg_trg_TacticalNuclearExplosion, function Trig_TacticalNuclearExplosion_Actions)
endfunction


//===========================================================================
// Trigger: AshenDeath
//===========================================================================
function Trig_AshenDeath_Conditions takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A0A9', GetTriggerUnit()) == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_AshenDeath_Func017Func001Func002C takes nothing returns boolean
    if IsPlayerMainInfected(GetEnumPlayer()) then
    return true
    endif
    if GetPlayerSlotState(GetEnumPlayer()) != PLAYER_SLOT_STATE_PLAYING then
    return true
    endif
    if udg_Player_Left[GetConvertedPlayerId(GetEnumPlayer())] == true then
    return true
    endif
    if ( ( udg_DeadPhoenixPlayer == GetEnumPlayer() ) ) then
        return true
    endif
    return false
endfunction

function Trig_AshenDeath_Func017Func001C takes nothing returns boolean
    if ( not Trig_AshenDeath_Func017Func001Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_AshenDeath_Func017A takes nothing returns nothing
    if ( Trig_AshenDeath_Func017Func001C() ) then
    else
        set udg_TempInt=( udg_TempInt + 1 )
    endif
endfunction

function Trig_AshenDeath_Func018C takes nothing returns boolean
    if ( not ( udg_TempInt == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_AshenDeath_Func020Func002Func028C takes nothing returns boolean
    if ( ( udg_Mutant == GetEnumPlayer() ) ) then
        return true
    endif
    if ( ( udg_Parasite == GetEnumPlayer() ) ) then
        return true
    endif
    if ( ( udg_RogueAndroid == GetEnumPlayer() ) ) then
        return true
    endif
    if ( ( udg_DeadPhoenixPlayer == GetEnumPlayer() ) ) then
        return true
    endif
    return false
endfunction

function Trig_AshenDeath_Func020Func002C takes nothing returns boolean
    if ( not Trig_AshenDeath_Func020Func002Func028C() ) then
        return false
    endif
    return true
endfunction

function Trig_AshenDeath_Func020A takes nothing returns nothing
    // Do not revive alien and mutant and cyborg
    if ( Trig_AshenDeath_Func020Func002C() ) then
    else
        // Determining spawn point via angle
        set udg_TempPoint=PolarProjectionBJ(udg_TempPoint2, 240.00, udg_TempReal)
        // Close the dead chat board
        if GetLocalPlayer() == GetEnumPlayer() then
        call MultiboardDisplay(ChatBoard, false)
        endif
        call CreateNUnitsAtLoc(1, 'n00L', GetEnumPlayer(), udg_TempPoint, udg_TempReal)
        call GroupAddUnitSimple(GetLastCreatedUnit(), udg_AshenMarineGroup)
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Human\\Resurrect\\ResurrectTarget.mdl")
        call DestroyEffectBJ(GetLastCreatedEffectBJ())
        set udg_TempReal=( udg_TempReal + ( 360.00 / I2R(udg_TempInt) ) )
        set udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetEnumPlayer())]=false
        set udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetEnumPlayer())]=false
        set udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetEnumPlayer())]=false
        call DisplayTextToPlayer(GetOwningPlayer(GetLastCreatedUnit()), 0, 0, "|cffff3909The Android brought you back to life - one last chance to carry mankind, since he crumbled under the burden. Make sure you do not die alone again, but tak/*\n        */e all of your enemies with you.|r")
        call SetUnitLifePercentBJ(GetLastCreatedUnit(), 50.00)
        set udg_Playerhero[GetConvertedPlayerId(GetEnumPlayer())]=GetLastCreatedUnit()
        call SetPlayerName(GetEnumPlayer(), udg_Player_NameBeforeDead[GetConvertedPlayerId(GetEnumPlayer())])
        call ShowInterfaceForceOn(GetForceOfPlayer(GetEnumPlayer()), 0.25)
        call PanCameraToTimedLocForPlayer(GetEnumPlayer(), udg_TempPoint, 0)
        call SelectUnitForPlayerSingle(GetLastCreatedUnit(), GetEnumPlayer())
        call RemoveLocation(udg_TempPoint)
        call SetPlayerAllianceStateBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), GetEnumPlayer(), bj_ALLIANCE_ALLIED)
        call SetPlayerAllianceStateBJ(GetEnumPlayer(), Player(bj_PLAYER_NEUTRAL_EXTRA), bj_ALLIANCE_ALLIED)
        call ForceAddPlayerSimple(GetEnumPlayer(), udg_AshenMarinePlayerGroup)
        call ForceRemovePlayerSimple(GetEnumPlayer(), udg_DeadGroup)
    endif
endfunction

function Trig_AshenDeath_Actions takes nothing returns nothing
    local location a=GetUnitLoc(GetTriggerUnit())
    set udg_TempPoint=a
    set udg_DeadPhoenixPlayer=GetOwningPlayer(GetTriggerUnit())
    call CreateNUnitsAtLoc(1, 'e00R', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    set udg_TempUnit=GetLastCreatedUnit()
    set udg_CountUpBarColor="|cffFF0000"
    call BasicAI_IssueDangerArea(a , 800.0 , 3.1)
    call CountUpBar(udg_TempUnit , 60 , 0.05 , "FusionBombExplosion2")
    call TriggerSleepAction(3.00)
    // ---
    set udg_TempPoint2=a
    set udg_TempReal=0.00
    // TempInt = amount of players to revive
    set udg_TempInt=0
    call ForForce(udg_DeadGroup, function Trig_AshenDeath_Func017A)
    if ( Trig_AshenDeath_Func018C() ) then
        return
    else
    endif
    call ForceClear(udg_TempPlayerGroup)
    call ForForce(udg_DeadGroup, function Trig_AshenDeath_Func020A)
    call StartTimerBJ(udg_AshenMarineFadeTimer, true, 1.12)
    call StartTimerBJ(udg_AshenMarineAllianceTimer, false, 2.00)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_AshenDeath takes nothing returns nothing
    set gg_trg_AshenDeath=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_AshenDeath, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_AshenDeath, Condition(function Trig_AshenDeath_Conditions))
    call TriggerAddAction(gg_trg_AshenDeath, function Trig_AshenDeath_Actions)
endfunction

//===========================================================================
// Trigger: AshenDeathTimerAlliances
//===========================================================================
function Trig_AshenDeathTimerAlliances_Func002Func002A takes nothing returns nothing
    call SetPlayerAllianceStateBJ(GetEnumPlayer(), udg_TempPlayer, bj_ALLIANCE_ALLIED)
    call SetPlayerAllianceStateBJ(udg_TempPlayer, GetEnumPlayer(), bj_ALLIANCE_ALLIED)
endfunction

function Trig_AshenDeathTimerAlliances_Func002A takes nothing returns nothing
    set udg_TempPlayer=GetEnumPlayer()
    call ForForce(GetPlayersAll(), function Trig_AshenDeathTimerAlliances_Func002Func002A)
endfunction

function Trig_AshenDeathTimerAlliances_Actions takes nothing returns nothing
    call ForForce(udg_AshenMarinePlayerGroup, function Trig_AshenDeathTimerAlliances_Func002A)
    call ForceClear(udg_AshenMarinePlayerGroup)
endfunction

//===========================================================================
function InitTrig_AshenDeathTimerAlliances takes nothing returns nothing
    set gg_trg_AshenDeathTimerAlliances=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_AshenDeathTimerAlliances, udg_AshenMarineAllianceTimer)
    call TriggerAddAction(gg_trg_AshenDeathTimerAlliances, function Trig_AshenDeathTimerAlliances_Actions)
endfunction

//===========================================================================
// Trigger: AshenFade
//
// Cannot have negative health regen because of healing ward/medical regenerator
// So, I do it via trigger
//===========================================================================
function Trig_AshenFade_Func002Func001C takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(GetEnumUnit()) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AshenFade_Func002A takes nothing returns nothing
    if ( Trig_AshenFade_Func002Func001C() ) then
        // Damage it for 1 dmg
        call UnitDamageTarget(GetEnumUnit(), GetEnumUnit(), 1, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
    else
    endif
endfunction

function Trig_AshenFade_Actions takes nothing returns nothing
    call ForGroupBJ(udg_AshenMarineGroup, function Trig_AshenFade_Func002A)
endfunction

//===========================================================================
function InitTrig_AshenFade takes nothing returns nothing
    set gg_trg_AshenFade=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_AshenFade, udg_AshenMarineFadeTimer)
    call TriggerAddAction(gg_trg_AshenFade, function Trig_AshenFade_Actions)
endfunction

//===========================================================================
// Trigger: DuplicateMedPack
//===========================================================================
//TESH.scrollpos=1
//TESH.alwaysfold=0
function Trig_DuplicateMedPack_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0AA' ) ) then
        return false
    endif
    return true
endfunction


function Trig_DuplicateMedPack_Actions takes nothing returns nothing
    if ( GetItemOfTypeFromUnitBJ(GetTriggerUnit(), 'I002') != null ) then
        //Create medpack at caster location
        call CreateItemLoc('I002', GetUnitLoc(GetTriggerUnit()))
        
        //If less than 6, aka free inventory slot, give it straight to the unit!
        if ( UnitInventoryCount(GetTriggerUnit()) < 6 ) then
            call UnitAddItem(GetTriggerUnit(), GetLastCreatedItem())
        endif
    else //No medpack to duplicate, so, refund the mana
        call SetUnitManaBJ(GetTriggerUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetTriggerUnit()) + 50.00 ))
    endif
endfunction

//===========================================================================
function InitTrig_DuplicateMedPack takes nothing returns nothing
    set gg_trg_DuplicateMedPack=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_DuplicateMedPack, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_DuplicateMedPack, Condition(function Trig_DuplicateMedPack_Conditions))
    call TriggerAddAction(gg_trg_DuplicateMedPack, function Trig_DuplicateMedPack_Actions)
endfunction


//===========================================================================
// Trigger: DuplicateAntibodies
//===========================================================================
function Trig_DuplicateAntibodies_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0AB' ) ) then
        return false
    endif
    return true
endfunction


function Trig_DuplicateAntibodies_Actions takes nothing returns nothing
    if ( GetItemOfTypeFromUnitBJ(GetTriggerUnit(), 'I004') != null ) then
        //Create medpack at caster location
        call CreateItemLoc('I004', GetUnitLoc(GetTriggerUnit()))
        
        //If less than 6, aka free inventory slot, give it straight to the unit!
        if ( UnitInventoryCount(GetTriggerUnit()) < 6 ) then
            call UnitAddItem(GetTriggerUnit(), GetLastCreatedItem())
        endif
    else //No antibodies to duplicate, so, refund the mana
        call SetUnitManaBJ(GetTriggerUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetTriggerUnit()) + 100.00 ))
    endif
endfunction

//===========================================================================
function InitTrig_DuplicateAntibodies takes nothing returns nothing
    set gg_trg_DuplicateAntibodies=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_DuplicateAntibodies, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_DuplicateAntibodies, Condition(function Trig_DuplicateAntibodies_Conditions))
    call TriggerAddAction(gg_trg_DuplicateAntibodies, function Trig_DuplicateAntibodies_Actions)
endfunction


//===========================================================================
// Trigger: DuplicateMedicalRegenerator
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_DuplicateMedicalRegenerator_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0AC' ) ) then
        return false
    endif
    return true
endfunction


function Trig_DuplicateMedicalRegenerator_Actions takes nothing returns nothing
    if ( GetItemOfTypeFromUnitBJ(GetTriggerUnit(), 'I01N') != null ) then
        //Create medpack at caster location
        call CreateItemLoc('I01N', GetUnitLoc(GetTriggerUnit()))
        
        //If less than 6, aka free inventory slot, give it straight to the unit!
        if ( UnitInventoryCount(GetTriggerUnit()) < 6 ) then
            call UnitAddItem(GetTriggerUnit(), GetLastCreatedItem())
        endif
    else //No antibodies to duplicate, so, refund the mana
        call SetUnitManaBJ(GetTriggerUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetTriggerUnit()) + 100.00 ))
    endif
endfunction

//===========================================================================
function InitTrig_DuplicateMedicalRegenerator takes nothing returns nothing
    set gg_trg_DuplicateMedicalRegenerator=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_DuplicateMedicalRegenerator, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_DuplicateMedicalRegenerator, Condition(function Trig_DuplicateMedicalRegenerator_Conditions))
    call TriggerAddAction(gg_trg_DuplicateMedicalRegenerator, function Trig_DuplicateMedicalRegenerator_Actions)
endfunction


//===========================================================================
// Trigger: Global Infection
//===========================================================================
function Trig_Global_Infection_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A067' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Global_Infection_Func007Func002Func001C takes nothing returns boolean
    if ( not ( GetEnumUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] ) ) then
        return false
    endif
    if ( not ( udg_RogueAndroid != GetOwningPlayer(GetEnumUnit()) ) ) then
        return false
    endif
    if ( not ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Global_Infection_Func007Func002A takes nothing returns nothing
    if ( Trig_Global_Infection_Func007Func002Func001C() ) then
        set udg_TempLoc3=GetUnitLoc(GetEnumUnit())
        call CreateNUnitsAtLoc(1, 'e03N', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempLoc3, bj_CAMERA_DEFAULT_ROLL)
        call UnitApplyTimedLifeBJ(2.00, 'BTLF', GetLastCreatedUnit())
        call IssueTargetOrderBJ(GetLastCreatedUnit(), "parasite", GetEnumUnit())
    else
    endif
endfunction

function Trig_Global_Infection_Func007Func004Func001C takes nothing returns boolean
    if ( not ( GetEnumUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] ) ) then
        return false
    endif
    if ( not ( udg_Mutant != GetOwningPlayer(GetEnumUnit()) ) ) then
        return false
    endif
    if ( not ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Global_Infection_Func007Func004A takes nothing returns nothing
    if ( Trig_Global_Infection_Func007Func004Func001C() ) then
        set udg_TempLoc3=GetUnitLoc(GetEnumUnit())
        call CreateNUnitsAtLoc(1, 'e03H', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempLoc3, bj_CAMERA_DEFAULT_ROLL)
        call UnitApplyTimedLifeBJ(2.00, 'BTLF', GetLastCreatedUnit())
        call IssueTargetOrderBJ(GetLastCreatedUnit(), "parasite", GetEnumUnit())
    else
    endif
endfunction

function Trig_Global_Infection_Func007Func005C takes nothing returns boolean
    if ( ( GetOwningPlayer(GetTriggerUnit()) == udg_RogueAndroid ) ) then
        return true
    endif
    if ( ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_Global_Infection_Func007C takes nothing returns boolean
    if ( not Trig_Global_Infection_Func007Func005C() ) then
        return false
    endif
    return true
endfunction

function Trig_Global_Infection_Actions takes nothing returns nothing
    set udg_TempUnitGroup=GetUnitsInRectAll(GetPlayableMapRect())
    // Get if its mutant or cyborg using this ability
    // TempBool = false -> Means Mutant (default)
    set udg_TempBool=false
    if ( Trig_Global_Infection_Func007C() ) then
        // Rogue Android
        call ForGroupBJ(udg_TempUnitGroup, function Trig_Global_Infection_Func007Func002A)
    else
        // Default Mutant
        call ForGroupBJ(udg_TempUnitGroup, function Trig_Global_Infection_Func007Func004A)
    endif
    call DestroyGroup(udg_TempUnitGroup)
    call RemoveLocation(udg_TempLoc3)
endfunction

//===========================================================================
function InitTrig_Global_Infection takes nothing returns nothing
    set gg_trg_Global_Infection=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Global_Infection, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Global_Infection, Condition(function Trig_Global_Infection_Conditions))
    call TriggerAddAction(gg_trg_Global_Infection, function Trig_Global_Infection_Actions)
endfunction

//===========================================================================
// Trigger: Smash
//===========================================================================
function Trig_Smash_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A098' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Smash_Func006C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellAbilityUnit()) == 'h01G' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Smash_Func040Func001Func001C takes nothing returns boolean
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'DTrx' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT40' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT16' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT06' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT30' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Smash_Func040Func001C takes nothing returns boolean
    if ( not Trig_Smash_Func040Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Smash_Func040A takes nothing returns nothing
    if ( Trig_Smash_Func040Func001C() ) then
        call UnitDamageTarget(udg_TempUnit, GetEnumDestructable(), 1500.0, true, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
    else
    endif
endfunction

function Trig_Smash_Actions takes nothing returns nothing
    local unit a=GetSpellAbilityUnit()
    local location b=GetSpellTargetLoc()
    local trigger t=CreateTrigger()
    if ( Trig_Smash_Func006C() ) then
        call SetUnitTimeScalePercent(GetSpellAbilityUnit(), 5.50)
    else
        call SetUnitTimeScalePercent(GetSpellAbilityUnit(), 9.70)
    endif
    call SmashEnsureNoOrders(a)
    call TriggerSleepAction(0.00)
    if not ( SmashCheckEnsure(a) ) then
    call SmashCheckCleanup(a)
    set udg_TempUnit=a
    call SetUnitTimeScalePercent(udg_TempUnit, 100.00)
    return
    endif
    call SetUnitAnimation(GetSpellAbilityUnit(), "attack")
    call TriggerSleepAction(3.50)
    if not ( SmashCheckEnsure(a) ) then
    call SmashCheckCleanup(a)
    set udg_TempUnit=a
    call SetUnitTimeScalePercent(udg_TempUnit, 175.00)
    return
    endif
    call SetUnitTimeScalePercent(GetSpellAbilityUnit(), 0.00)
    set udg_TempUnit=a
    call SetUnitTimeScalePercent(udg_TempUnit, 175.00)
    call TriggerSleepAction(0.00)
    if not ( SmashCheckEnsure(a) ) then
    call SmashCheckCleanup(a)
    set udg_TempUnit=a
    call SetUnitTimeScalePercent(udg_TempUnit, 175.00)
    return
    endif
    call SmashCheckCleanup(a)
    set udg_TempUnit=a
    set udg_TempPoint2=b
    call SetUnitTimeScalePercent(udg_TempUnit, 100.00)
    call AddSpecialEffectLocBJ(udg_TempPoint2, "Abilities\\Spells\\Human\\ThunderClap\\ThunderClapCaster.mdl")
    call SFXThreadClean()
    call DamageAreaForPlayer(GetOwningPlayer(a) , 120.0 , 1500 , GetLocationX(udg_TempPoint2) , GetLocationY(udg_TempPoint2))
    call EnumDestructablesInCircleBJ(120.00, udg_TempPoint2, function Trig_Smash_Func040A)
    call RemoveLocation(udg_TempPoint2)
endfunction

//===========================================================================
function InitTrig_Smash takes nothing returns nothing
    set gg_trg_Smash=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Smash, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Smash, Condition(function Trig_Smash_Conditions))
    call TriggerAddAction(gg_trg_Smash, function Trig_Smash_Actions)
endfunction

//===========================================================================
// Trigger: Sludge
//===========================================================================
function Trig_Sludge_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A012' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Sludge_Func006C takes nothing returns boolean
    if ( not ( IsPlayerEnemy(GetOwningPlayer(GetSpellAbilityUnit()), Player(PLAYER_NEUTRAL_AGGRESSIVE)) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Sludge_Func009C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Sludge_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPoint2=GetSpellTargetLoc()
    set udg_TempBool=false
    if ( Trig_Sludge_Func006C() ) then
        set udg_TempBool=true
        call SetPlayerAllianceStateBJ(Player(PLAYER_NEUTRAL_AGGRESSIVE), GetOwningPlayer(GetSpellAbilityUnit()), bj_ALLIANCE_ALLIED)
    else
    endif
    call CreateNUnitsAtLoc(1, 'e000', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
    call IssuePointOrderLocBJ(GetLastCreatedUnit(), "carrionswarm", udg_TempPoint2)
    if ( Trig_Sludge_Func009C() ) then
        call SetPlayerAllianceStateBJ(Player(PLAYER_NEUTRAL_AGGRESSIVE), GetOwningPlayer(GetSpellAbilityUnit()), bj_ALLIANCE_UNALLIED)
    else
    endif
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
endfunction

//===========================================================================
function InitTrig_Sludge takes nothing returns nothing
    set gg_trg_Sludge=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Sludge, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Sludge, Condition(function Trig_Sludge_Conditions))
    call TriggerAddAction(gg_trg_Sludge, function Trig_Sludge_Actions)
endfunction

//===========================================================================
// Trigger: Carrier
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_Carrier_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A05I' ) ) then
        return false
    endif
    return true
endfunction

function Carrier_Infect takes nothing returns nothing
local unit a=GetTriggerUnit()
local unit b
if GetUnitPointValue(a) != 37 and IsUnitType(a, UNIT_TYPE_MECHANICAL) == false then
set b=CreateUnit(udg_Mutant, 'e00D', GetUnitX(a), GetUnitY(a), 0.0)
call PolledWait(0.0)
call IssueTargetOrderBJ(b, "parasite", a)
endif
endfunction

function Trig_Carrier_Actions takes nothing returns nothing
local trigger t=CreateTrigger()
call TriggerRegisterUnitInRangeSimple(t, 350.0, GetSpellTargetUnit())
call TriggerAddAction(t, function Carrier_Infect)
set udg_Unit_CarrierTrigger[(GetUnitUserData((GetSpellTargetUnit())))]=t // INLINED!!
endfunction

//===========================================================================
function InitTrig_Carrier takes nothing returns nothing
    set gg_trg_Carrier=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Carrier, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Carrier, Condition(function Trig_Carrier_Conditions))
    call TriggerAddAction(gg_trg_Carrier, function Trig_Carrier_Actions)
endfunction


//===========================================================================
// Trigger: Vector
//===========================================================================
//TESH.scrollpos=30
//TESH.alwaysfold=0
function Trig_Vector_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A05J' ) ) then
        return false
    endif
    return true
endfunction
function Vector_Slide takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit l=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
local location a=GetUnitLoc(l)
local location i=GetUnitLoc(LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("target"))) // INLINED!!
local real q=AngleBetweenPoints(a, i)
local location b=PolarProjectionBJ(a, 15.0, GetUnitFacing(l))
if GetLocationZ(b) > GetLocationZ(a) + 60.0 then
call KillUnit(l)
endif
if IsPointPathable(GetLocationX(b) , GetLocationY(b) , false) == false then
call KillUnit(l)
endif
call SetUnitPositionLoc(l, b)
call SetUnitFacingTimed(l, q, 0.75)
call RemoveLocation(b)
call RemoveLocation(a)
call RemoveLocation(i)
if IsUnitDeadBJ(l) then
call PauseTimer(k)
call DestroyTimer(k)
endif
endfunction

function Vector_Damage takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
local integer i=0
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
local unit b=GetTriggerUnit()
if GetUnitAbilityLevel(GetTriggerUnit(), 'Avul') == 0 and IsUnitAliveBJ(GetTriggerUnit()) and GetUnitPointValue(GetTriggerUnit()) != 37 and LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("caster")) != GetTriggerUnit() and udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == false then // INLINED!!
call KillUnit(a)
call DestroyTrigger(t)
loop
exitwhen i > 9
call PauseUnit(b, true)
call SetUnitAnimation(b, "death")
call PolledWait(0.3)
call PauseUnit(b, false)
call PolledWait(( 2 + i ) / 2)
set i=i + 1
endloop
endif
endfunction

function Vector_Dies takes nothing returns nothing
local trigger q=GetTriggeringTrigger()
local trigger t=LoadTriggerHandle((udg_hash), GetHandleId(q), StringHash("t")) // INLINED!!
local trigger o=LoadTriggerHandle((udg_hash), GetHandleId(q), StringHash("o")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(GetTriggerUnit())) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(q)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(o)) // INLINED!!
call DestroyTrigger(q)
call DestroyTrigger(t)
call DestroyTrigger(o)
endfunction

function Trig_Vector_Actions takes nothing returns nothing
local timer k=CreateTimer()
local trigger t=CreateTrigger()
local trigger q=CreateTrigger()

    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPoint2=GetUnitLoc(GetSpellTargetUnit())
    set udg_TempPoint3=PolarProjectionBJ(udg_TempPoint, 160.0, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
    set udg_TempBool=false
    call CreateNUnitsAtLoc(1, 'e01G', Player(15), udg_TempPoint3, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
 call SaveReal((udg_hash), GetHandleId(GetLastCreatedUnit()), StringHash("angle"), AngleBetweenPoints(udg_TempPoint, udg_TempPoint2)) // INLINED!!
   call TriggerRegisterUnitEvent(q, GetLastCreatedUnit(), EVENT_UNIT_DEATH)
   call TriggerAddAction(q, function Vector_Dies)
   call SaveTriggerHandle((udg_hash), GetHandleId(q), StringHash("t"), t) // INLINED!!
   call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    call RemoveLocation(udg_TempPoint3)
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), GetLastCreatedUnit()) // INLINED!!
    call TimerStart(k, 0.04, true, function Vector_Slide)
    call TriggerRegisterUnitInRangeSimple(t, 50.0, GetLastCreatedUnit())
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("target"), GetSpellTargetUnit()) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), GetLastCreatedUnit()) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("caster"), GetSpellAbilityUnit()) // INLINED!!
    call TriggerAddAction(t, function Vector_Damage)
    call SetUnitPathing(GetLastCreatedUnit(), false)
endfunction

//===========================================================================
function InitTrig_Vector takes nothing returns nothing
    set gg_trg_Vector=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Vector, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Vector, Condition(function Trig_Vector_Conditions))
    call TriggerAddAction(gg_trg_Vector, function Trig_Vector_Actions)
endfunction


//===========================================================================
// Trigger: RaininRocks
//===========================================================================
//TESH.scrollpos=4
//TESH.alwaysfold=0
function Trig_RaininRocks_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A05F' ) ) then
        return false
    endif
    return true
endfunction

function RaininRocks_Debris takes nothing returns nothing
local timer t=GetExpiredTimer()
local real x=LoadReal((udg_hash), GetHandleId(t), StringHash("x")) // INLINED!!
local real y=LoadReal((udg_hash), GetHandleId(t), StringHash("y")) // INLINED!!
local integer i=0
call DestroyTimer(t)
loop
exitwhen i > 2
call CreateDestructable('B007', x + GetRandomReal(- 100, 100), y + GetRandomReal(- 100, 100), GetRandomDirectionDeg(), 1, GetRandomInt(1, 6))
set i=i + 1
endloop
endfunction

function Trig_RaininRocks_Actions takes nothing returns nothing
local timer t=CreateTimer()
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPoint2=GetSpellTargetLoc()
    call AddSpecialEffectLocBJ(udg_TempPoint, "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl")
    call SaveReal((udg_hash), GetHandleId(t), StringHash("x"), GetLocationX(udg_TempPoint2)) // INLINED!!
    call SaveReal((udg_hash), GetHandleId(t), StringHash("y"), GetLocationY(udg_TempPoint2)) // INLINED!!
    call TimerStart(t, 0.5, false, function RaininRocks_Debris)
call SFXThreadClean()
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
endfunction

//===========================================================================
function InitTrig_RaininRocks takes nothing returns nothing
    set gg_trg_RaininRocks=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_RaininRocks, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_RaininRocks, Condition(function Trig_RaininRocks_Conditions))
    call TriggerAddAction(gg_trg_RaininRocks, function Trig_RaininRocks_Actions)
endfunction


//===========================================================================
// Trigger: SwarmTraining
//===========================================================================
function Trig_SwarmTraining_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTrainedUnit()) == 'h01S' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SwarmTraining_Actions takes nothing returns nothing
    call IssueTrainOrderByIdBJ(GetTriggerUnit(), 'h01S')
endfunction

//===========================================================================
function InitTrig_SwarmTraining takes nothing returns nothing
    set gg_trg_SwarmTraining=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SwarmTraining, EVENT_PLAYER_UNIT_TRAIN_FINISH)
    call TriggerAddCondition(gg_trg_SwarmTraining, Condition(function Trig_SwarmTraining_Conditions))
    call TriggerAddAction(gg_trg_SwarmTraining, function Trig_SwarmTraining_Actions)
endfunction

//===========================================================================
// Trigger: TaintedVendor
//===========================================================================
function Trig_TaintedVendor_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A01T' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TaintedVendor_Func004Func003C takes nothing returns boolean
    if ( ( udg_Mutant == GetOwningPlayer(GetTriggerUnit()) ) ) then
        return true
    endif
    if ( ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_TaintedVendor_Func004C takes nothing returns boolean
    if ( not Trig_TaintedVendor_Func004Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_TaintedVendor_Actions takes nothing returns nothing
    call RemoveItemFromStockBJ('I004', GetSpellTargetUnit())
    if ( Trig_TaintedVendor_Func004C() ) then
        call UnitAddAbilityBJ('A01U', GetSpellTargetUnit())
    else
        call UnitAddAbilityBJ('A09K', GetSpellTargetUnit())
    endif
endfunction

//===========================================================================
function InitTrig_TaintedVendor takes nothing returns nothing
    set gg_trg_TaintedVendor=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_TaintedVendor, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_TaintedVendor, Condition(function Trig_TaintedVendor_Conditions))
    call TriggerAddAction(gg_trg_TaintedVendor, function Trig_TaintedVendor_Actions)
endfunction

//===========================================================================
// Trigger: TaintedVendorBuy
//===========================================================================
function Trig_TaintedVendorBuy_Conditions takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A01U', GetTriggerUnit()) != 0 ) ) then
        return false
    endif
    if ( not ( udg_Mutant != GetOwningPlayer(GetBuyingUnit()) ) ) then
        return false
    endif
    if ( not ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetBuyingUnit()))] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_TaintedVendorBuy_Func005C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetSoldItem()) == 'I004' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TaintedVendorBuy_Actions takes nothing returns nothing
    if ( Trig_TaintedVendorBuy_Func005C() ) then
        call RemoveItem(GetSoldItem())
    else
    endif
    set udg_TempPoint=GetUnitLoc(GetBuyingUnit())
    call CreateNUnitsAtLoc(1, 'e000', udg_Mutant, udg_TempPoint, bj_UNIT_FACING)
    call RemoveLocation(udg_TempPoint)
    call IssueTargetOrderBJ(GetLastCreatedUnit(), "parasite", GetBuyingUnit())
endfunction

//===========================================================================
function InitTrig_TaintedVendorBuy takes nothing returns nothing
    set gg_trg_TaintedVendorBuy=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_TaintedVendorBuy, EVENT_PLAYER_UNIT_SELL_ITEM)
    call TriggerAddCondition(gg_trg_TaintedVendorBuy, Condition(function Trig_TaintedVendorBuy_Conditions))
    call TriggerAddAction(gg_trg_TaintedVendorBuy, function Trig_TaintedVendorBuy_Actions)
endfunction

//===========================================================================
// Trigger: TaintedVendorBuyCyborg
//===========================================================================
function Trig_TaintedVendorBuyCyborg_Conditions takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A09K', GetTriggerUnit()) != 0 ) ) then
        return false
    endif
    if ( not ( udg_RogueAndroid != GetOwningPlayer(GetBuyingUnit()) ) ) then
        return false
    endif
    if ( not ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetOwningPlayer(GetBuyingUnit()))] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_TaintedVendorBuyCyborg_Func005C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetSoldItem()) == 'I004' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TaintedVendorBuyCyborg_Actions takes nothing returns nothing
    if ( Trig_TaintedVendorBuyCyborg_Func005C() ) then
        call RemoveItem(GetSoldItem())
    else
    endif
    set udg_TempPoint=GetUnitLoc(GetBuyingUnit())
    call CreateNUnitsAtLoc(1, 'e03O', udg_RogueAndroid, udg_TempPoint, bj_UNIT_FACING)
    call RemoveLocation(udg_TempPoint)
    call IssueTargetOrderBJ(GetLastCreatedUnit(), "parasite", GetBuyingUnit())
endfunction

//===========================================================================
function InitTrig_TaintedVendorBuyCyborg takes nothing returns nothing
    set gg_trg_TaintedVendorBuyCyborg=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_TaintedVendorBuyCyborg, EVENT_PLAYER_UNIT_SELL_ITEM)
    call TriggerAddCondition(gg_trg_TaintedVendorBuyCyborg, Condition(function Trig_TaintedVendorBuyCyborg_Conditions))
    call TriggerAddAction(gg_trg_TaintedVendorBuyCyborg, function Trig_TaintedVendorBuyCyborg_Actions)
endfunction

//===========================================================================
// Trigger: RocksFallEveryoneDies
//===========================================================================
function Trig_RocksFallEveryoneDies_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A01Q' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RocksFallEveryoneDies_Func005C takes nothing returns boolean
    if ( not ( udg_TempReal >= - 600.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_RocksFallEveryoneDies_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempReal=GetLocationZ(udg_TempPoint)
    if ( Trig_RocksFallEveryoneDies_Func005C() ) then
        call TerrainDeformationCraterBJ(0.5, true, udg_TempPoint, 512, 150.00)
    else
    endif
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=36
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempPoint2=PolarProjectionBJ(udg_TempPoint, 512.00, ( I2R(GetForLoopIndexA()) * 10.00 ))
        call CreateDestructableLoc('B007', udg_TempPoint2, GetRandomDirectionDeg(), 1.00, 0)
        call AddSpecialEffectLocBJ(udg_TempPoint2, "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl")
        call SFXThreadClean()
        call RemoveLocation(udg_TempPoint2)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_RocksFallEveryoneDies takes nothing returns nothing
    set gg_trg_RocksFallEveryoneDies=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_RocksFallEveryoneDies, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_RocksFallEveryoneDies, Condition(function Trig_RocksFallEveryoneDies_Conditions))
    call TriggerAddAction(gg_trg_RocksFallEveryoneDies, function Trig_RocksFallEveryoneDies_Actions)
endfunction

//===========================================================================
// Trigger: Roar
//===========================================================================
function Trig_Roar_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A01J' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Roar_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    call SetSoundPositionLocBJ(gg_snd_SargerasRoar, udg_TempPoint, 0)
    call PlaySoundBJ(gg_snd_SargerasRoar)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_Roar takes nothing returns nothing
    set gg_trg_Roar=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Roar, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Roar, Condition(function Trig_Roar_Conditions))
    call TriggerAddAction(gg_trg_Roar, function Trig_Roar_Actions)
endfunction

//===========================================================================
// Trigger: SpatialBurst
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_SpatialBurst_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02M' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SpatialBurst_Actions takes nothing returns nothing
local unit a=GetSpellAbilityUnit()
local unit b=GetSpellTargetUnit()
call PolledWait(0.1)

    set udg_TempPoint=GetUnitLoc(b)
    set udg_TempPoint2=GetUnitLoc(a)
    if TerrainLineCheck(udg_TempPoint , udg_TempPoint2 , 30) then
    if RectContainsLoc(gg_rct_Timeout, udg_TempPoint) == false then
    call SetUnitPositionLoc(a, udg_TempPoint)
    endif
    endif
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
endfunction

//===========================================================================
function InitTrig_SpatialBurst takes nothing returns nothing
    set gg_trg_SpatialBurst=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SpatialBurst, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_SpatialBurst, Condition(function Trig_SpatialBurst_Conditions))
    call TriggerAddAction(gg_trg_SpatialBurst, function Trig_SpatialBurst_Actions)
endfunction


//===========================================================================
// Trigger: CarrierExplode
//===========================================================================
function Trig_CarrierExplode_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A020' ) ) then
        return false
    endif
    return true
endfunction

function Trig_CarrierExplode_Actions takes nothing returns nothing
    set udg_TempUnit=GetSpellAbilityUnit()
    set udg_CountUpBarColor="|cffFF0000"
    call CountUpBar(udg_TempUnit , 60 , 0.05 , "CarrierSackExplosion")
endfunction

//===========================================================================
function InitTrig_CarrierExplode takes nothing returns nothing
    set gg_trg_CarrierExplode=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_CarrierExplode, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_CarrierExplode, Condition(function Trig_CarrierExplode_Conditions))
    call TriggerAddAction(gg_trg_CarrierExplode, function Trig_CarrierExplode_Actions)
endfunction

//===========================================================================
// Trigger: CarrierSackExplode
//===========================================================================
function Trig_CarrierSackExplode_Func004A takes nothing returns nothing
    call UnitDamageTargetBJ(udg_TempUnit4, GetEnumUnit(), 1000.00, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL)
endfunction

function Trig_CarrierSackExplode_Func005A takes nothing returns nothing
    call UnitDamageTargetBJ(udg_TempUnit4, GetEnumUnit(), 125.00, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL)
endfunction

function Trig_CarrierSackExplode_Func006Func001C takes nothing returns boolean
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'DTrx' ) ) then
        return false
    endif
    return true
endfunction

function Trig_CarrierSackExplode_Func006A takes nothing returns nothing
    if ( Trig_CarrierSackExplode_Func006Func001C() ) then
        call KillDestructable(GetEnumDestructable())
    else
    endif
endfunction

function Trig_CarrierSackExplode_Func008A takes nothing returns nothing
    set udg_TempPlayer=GetOwningPlayer(GetEnumUnit())
    call CinematicFilterGenericForPlayer(GetOwningPlayer(GetEnumUnit()) , 2.0 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\White_mask.blp" , 100 , 0 , 0 , 0 , 0 , 0 , 0 , 100)
endfunction

function Trig_CarrierSackExplode_Actions takes nothing returns nothing
    set udg_TempUnit4=udg_CountupBarTemp
    set udg_TempPoint=GetUnitLoc(udg_TempUnit4)
    call CreateNUnitsAtLoc(1, 'e00A', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
    call ForGroupBJ(GetUnitsInRangeOfLocAll(200.00, udg_TempPoint), function Trig_CarrierSackExplode_Func004A)
    call ForGroupBJ(GetUnitsInRangeOfLocAll(400.00, udg_TempPoint), function Trig_CarrierSackExplode_Func005A)
    call EnumDestructablesInCircleBJ(300.00, udg_TempPoint, function Trig_CarrierSackExplode_Func006A)
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=5
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempPoint2=PolarProjectionBJ(udg_TempPoint, GetRandomReal(0, 400.00), GetRandomDirectionDeg())
        call CreateNUnitsAtLoc(1, 'e00A', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, bj_UNIT_FACING)
        call CreateDestructableLoc('B003', udg_TempPoint2, GetRandomDirectionDeg(), 1.00, 0)
        call RemoveLocation(udg_TempPoint2)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call ForGroupBJ(GetUnitsInRangeOfLocAll(900.00, udg_TempPoint), function Trig_CarrierSackExplode_Func008A)
    call SetSoundPositionLocBJ(gg_snd_EggSackDeath1, udg_TempPoint, 0)
    call PlaySoundBJ(gg_snd_EggSackDeath1)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_CarrierSackExplode takes nothing returns nothing
    set gg_trg_CarrierSackExplode=CreateTrigger()
    call TriggerAddAction(gg_trg_CarrierSackExplode, function Trig_CarrierSackExplode_Actions)
endfunction

//===========================================================================
// Trigger: SlyTentacles
//===========================================================================
function Trig_SlyTentacles_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A044' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SlyTentacles_Actions takes nothing returns nothing
    set udg_TempInt=GetRandomInt(1, 6)
    call UnitAddItemSwapped(UnitItemInSlotBJ(GetSpellTargetUnit(), udg_TempInt), GetSpellAbilityUnit())
endfunction

//===========================================================================
function InitTrig_SlyTentacles takes nothing returns nothing
    set gg_trg_SlyTentacles=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SlyTentacles, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_SlyTentacles, Condition(function Trig_SlyTentacles_Conditions))
    call TriggerAddAction(gg_trg_SlyTentacles, function Trig_SlyTentacles_Actions)
endfunction

//===========================================================================
// Trigger: TotalInfection
//
// i should make an:pick every unit in the map-> conditions:only if suited,peasant alien---> ''You now succesfully got AIDS from an kobold''
//===========================================================================
//TESH.scrollpos=4
//TESH.alwaysfold=0
function Trig_TotalInfection_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A01V' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TotalInfection_Actions takes nothing returns nothing
local integer a
local integer b
    set a=1
    set b=12
    loop
        exitwhen a > b
       if ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(udg_Playerhero[a]))] == false ) then
    if ( GetOwningPlayer(udg_Playerhero[a]) != udg_Mutant ) then
        set udg_TempPoint=GetUnitLoc(udg_Playerhero[a])
        call CreateNUnitsAtLoc(1, 'e000', udg_Mutant, udg_TempPoint, bj_UNIT_FACING)
        call RemoveLocation(udg_TempPoint)
        call IssueTargetOrderBJ(GetLastCreatedUnit(), "parasite", udg_Playerhero[a])
       endif
       endif
        set a=a + 1
    endloop
endfunction

//===========================================================================
function InitTrig_TotalInfection takes nothing returns nothing
    set gg_trg_TotalInfection=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_TotalInfection, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_TotalInfection, Condition(function Trig_TotalInfection_Conditions))
    call TriggerAddAction(gg_trg_TotalInfection, function Trig_TotalInfection_Actions)
endfunction
//===========================================================================
// Trigger: Panic
//===========================================================================
function Trig_Panic_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07G' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Panic_Func004C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetItemOfTypeFromUnitBJ(GetTriggerUnit(), 'I00L')) == 'I00L' ) ) then
        return false
    endif
    if ( not ( GetUnitStateSwap(UNIT_STATE_LIFE, GetTriggerUnit()) <= 700.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Panic_Actions takes nothing returns nothing
    // If will die and has ccs, the game will be bugged
    if ( Trig_Panic_Func004C() ) then
        return
    else
    endif
    call SetUnitManaPercentBJ(GetTriggerUnit(), 100)
    call UnitAddAbilityBJ('A07H', GetTriggerUnit())
    call UnitRemoveAbilityBJ('A07G', GetTriggerUnit())
endfunction

//===========================================================================
function InitTrig_Panic takes nothing returns nothing
    set gg_trg_Panic=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Panic, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Panic, Condition(function Trig_Panic_Conditions))
    call TriggerAddAction(gg_trg_Panic, function Trig_Panic_Actions)
endfunction

//===========================================================================
// Trigger: Fleshies
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_Fleshies_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'h01F' ) ) then
        return false
    endif
    return true
endfunction


function FleshyFilter takes nothing returns nothing
if IsPlayerMutant(GetOwningPlayer(GetEnumUnit())) == true or GetOwningPlayer(GetEnumUnit()) == Player(PLAYER_NEUTRAL_PASSIVE) or GetUnitPointValue(GetEnumUnit()) == 37 or IsUnitDeadBJ(GetEnumUnit()) or GetUnitAbilityLevel(GetEnumUnit(), 'Avul') == 1 or GetUnitTypeId(GetEnumUnit()) == 'h01E' then
call GroupRemoveUnit(udg_TempUnitGroup, GetEnumUnit())
endif
endfunction

function Trig_Fleshies_Actions takes nothing returns nothing
local unit a=GetSummonedUnit()
local location b
local group g
call SetUnitOwner(a, Player(PLAYER_NEUTRAL_PASSIVE), false)
loop
exitwhen IsUnitDeadBJ(a)
set b=GetUnitLoc(a)
set g=GetUnitsInRangeOfLocAll(650.0, b)
set udg_TempUnitGroup=g
call ForGroup(g, function FleshyFilter)
if CountUnitsInGroup(g) == 0 then
call UnitAddAbility(a, 'Atwa')
else
call UnitRemoveAbility(a, 'Atwa')
call IssueTargetOrder(a, "attack", FirstOfGroup(g))
endif
call RemoveLocation(b)
call DestroyGroup(g)
call PolledWait(2.0)
endloop
set a=null
endfunction

//===========================================================================
function InitTrig_Fleshies takes nothing returns nothing
    set gg_trg_Fleshies=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Fleshies, EVENT_PLAYER_UNIT_SUMMON)
    call TriggerAddCondition(gg_trg_Fleshies, Condition(function Trig_Fleshies_Conditions))
    call TriggerAddAction(gg_trg_Fleshies, function Trig_Fleshies_Actions)
endfunction


//===========================================================================
// Trigger: Shockwave
//===========================================================================
//TESH.scrollpos=1
//TESH.alwaysfold=0
function Trig_Shockwave_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A08U' ) ) then
        return false
    endif
    return true
endfunction

function Shockwave_Slide takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit l=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
local location a=GetUnitLoc(l)
local location b=PolarProjectionBJ(a, 35.0, GetUnitFacing(l))
call RemoveLocation(a)
if IsPointPathable(GetLocationX(b) , GetLocationY(b) , false) then
call SetUnitPositionLoc(l, b)
else
call KillUnit(l)
endif
call RemoveLocation(b)
if IsUnitDeadBJ(l) then
call DestroyTrigger(LoadTriggerHandle((udg_hash), GetHandleId(k), StringHash("trig"))) // INLINED!!
call PauseTimer(k)
call DestroyTimer(k)

endif
endfunction

function Shockwave_Damage takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
local unit b=GetTriggerUnit()
if GetUnitAbilityLevel(GetTriggerUnit(), 'Avul') == 0 and IsUnitAliveBJ(GetTriggerUnit()) and GetUnitPointValue(GetTriggerUnit()) != 37 and LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("caster")) != GetTriggerUnit() then // INLINED!!
call UnitDamageTarget(a, GetTriggerUnit(), 75, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
call Push2(b , 300.0 , 200.0 , GetUnitFacing(a))
set bj_lastCreatedEffect=AddSpecialEffectTarget("Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl", b, "origin")
call SFXThreadClean()
endif
endfunction

function Trig_Shockwave_Actions takes nothing returns nothing
local timer k=CreateTimer()
local trigger t=CreateTrigger()
local location b=GetUnitLoc(GetSpellAbilityUnit())
call PlaySound3D("Abilities\\Spells\\Orc\\Shockwave\\Shockwave.wav" , GetLocationX(b) , GetLocationY(b))
    set udg_TempPoint2=GetSpellTargetLoc()
    set udg_TempPoint=PolarProjectionBJ(b, 85.0, AngleBetweenPoints(b, udg_TempPoint2))
    call RemoveLocation(b)
    set udg_TempBool=false
    call CreateNUnitsAtLoc(1, 'e035', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    call RemoveLocation(udg_TempPoint3)
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), GetLastCreatedUnit()) // INLINED!!
    call TimerStart(k, 0.04, true, function Shockwave_Slide)
    call SaveTriggerHandle((udg_hash), GetHandleId(k), StringHash("trig"), t) // INLINED!!
    call TriggerRegisterUnitInRangeSimple(t, 100.0, GetLastCreatedUnit())
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), GetLastCreatedUnit()) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("caster"), GetSpellAbilityUnit()) // INLINED!!
    call TriggerAddAction(t, function Shockwave_Damage)
endfunction

//===========================================================================
function InitTrig_Shockwave takes nothing returns nothing
    set gg_trg_Shockwave=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Shockwave, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Shockwave, Condition(function Trig_Shockwave_Conditions))
    call TriggerAddAction(gg_trg_Shockwave, function Trig_Shockwave_Actions)
endfunction


//===========================================================================
// Trigger: RollingThunder
//===========================================================================
function Trig_RollingThunder_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A08T' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RollingThunder_Actions takes nothing returns nothing
    local unit a=GetSpellAbilityUnit()
    set udg_TempUnit=a
    call UnitRemoveAbilityBJ('A08T', udg_TempUnit)
    call UnitAddAbilityBJ('A08U', udg_TempUnit)
    call TriggerSleepAction(15.00)
    set udg_TempUnit=a
    call UnitRemoveAbilityBJ('A08U', udg_TempUnit)
    call UnitAddAbilityBJ('A08T', udg_TempUnit)
endfunction

//===========================================================================
function InitTrig_RollingThunder takes nothing returns nothing
    set gg_trg_RollingThunder=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_RollingThunder, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_RollingThunder, Condition(function Trig_RollingThunder_Conditions))
    call TriggerAddAction(gg_trg_RollingThunder, function Trig_RollingThunder_Actions)
endfunction

//===========================================================================
// Trigger: Charge
//===========================================================================
//TESH.scrollpos=86
//TESH.alwaysfold=0
function Trig_Charge_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A08R' ) ) then
        return false
    endif
    return true
endfunction

function Charge_DragAlong takes nothing returns nothing
local real x
local real y
if LoadBoolean((udg_hash), GetHandleId(GetEnumUnit()), StringHash("DragGroupDraggable_" + I2S((GetUnitUserData((udg_TempUnit2)))))) then // INLINED!!
set x=GetUnitX(udg_TempUnit2) + LoadReal((udg_hash), GetHandleId(GetEnumUnit()), StringHash("DragGroupXOffset_" + I2S((GetUnitUserData((udg_TempUnit2)))))) // INLINED!!
set y=GetUnitY(udg_TempUnit2) + LoadReal((udg_hash), GetHandleId(GetEnumUnit()), StringHash("DragGroupYOffset_" + I2S((GetUnitUserData((udg_TempUnit2)))))) // INLINED!!
if IsPointPathable(x , y , false) then
call SetUnitX(GetEnumUnit(), x)
call SetUnitY(GetEnumUnit(), y)
else
call UnitDamageTarget(udg_TempUnit2, GetEnumUnit(), 155, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
set bj_lastCreatedEffect=AddSpecialEffectTarget("Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl", GetEnumUnit(), "origin")
call SFXThreadClean()
call SaveBoolean((udg_hash), GetHandleId(GetEnumUnit()), StringHash("DragGroupDraggable_" + I2S((GetUnitUserData((udg_TempUnit2))))), false) // INLINED!!
endif
endif
endfunction

function Charge_Slide takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit l=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
local location a=GetUnitLoc(l)
local location b=PolarProjectionBJ(a, 25.0, GetUnitFacing(l))
local group g=LoadGroupHandle((udg_hash), GetHandleId(k), StringHash("draggroup")) // INLINED!!
local integer i=LoadInteger((udg_hash), GetHandleId(k), StringHash("i")) // INLINED!!
//local integer r=LoadInteger(LS(),GetHandleId(k),StringHash("r"))
call PauseUnit(l, true)
if i == 0 then
call PlaySound3D("Sound\\Units\\Footsteps\\Step1.wav" , GetLocationX(b) , GetLocationY(b))
set i=10
endif
//if r == 0 then

//et r=12
//endif
call SaveInteger((udg_hash), GetHandleId(k), StringHash("i"), i - 1) // INLINED!!
//call SaveInteger(LS(),GetHandleId(k),StringHash("r"),r-1)
call EnumDestructablesInCircleBJ(150.0, b, function RubbleDestroy)

if IsPointPathable(GetLocationX(b) , GetLocationY(b) , false) == false or LoadBoolean((udg_hash), GetHandleId(k), StringHash("over")) then // INLINED!!
call DestroyTrigger(LoadTriggerHandle((udg_hash), GetHandleId(k), StringHash("trig"))) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
call PauseTimer(k)
call DestroyTimer(k)
call DestroyGroup(g)
call PauseUnit(l, false)
call SetUnitTimeScale(l, 1.0)
call SetUnitAnimation(l, "stand")
endif

call RemoveLocation(a)
call SetUnitX(l, GetLocationX(b))
call SetUnitY(l, GetLocationY(b))
call RemoveLocation(b)
set udg_TempUnit2=l
call ForGroup(g, function Charge_DragAlong)
endfunction

function Charge_Damage takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
local unit b=GetTriggerUnit()
local group g= LoadGroupHandle((udg_hash), GetHandleId(t), StringHash("draggroup")) // INLINED!!
if not ( IsUnitInGroup(b, g) ) and GetUnitAbilityLevel(GetTriggerUnit(), 'Avul') == 0 and IsUnitAliveBJ(GetTriggerUnit()) and GetUnitPointValue(GetTriggerUnit()) != 37 then
call UnitDamageTarget(a, GetTriggerUnit(), 155, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
call GroupAddUnit(g, b)
call SaveReal((udg_hash), GetHandleId(b), StringHash("DragGroupXOffset_" + I2S((GetUnitUserData((a))))), GetUnitX(b) - GetUnitX(a)) // INLINED!!
call SaveReal((udg_hash), GetHandleId(b), StringHash("DragGroupYOffset_" + I2S((GetUnitUserData((a))))), GetUnitY(b) - GetUnitY(a)) // INLINED!!
call SaveBoolean((udg_hash), GetHandleId(b), StringHash("DragGroupDraggable_" + I2S((GetUnitUserData((a))))), true) // INLINED!!
set bj_lastCreatedEffect=AddSpecialEffectTarget("Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl", b, "origin")
call SFXThreadClean()
endif
endfunction

function Trig_Charge_Actions takes nothing returns nothing
local unit b=GetSpellAbilityUnit()
local timer k=CreateTimer()
local trigger t=CreateTrigger()
local group g=CreateGroup()
    set udg_TempPoint=GetUnitLoc(b)
    set udg_TempPoint2=GetSpellTargetLoc()
    set udg_TempBool=false
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    call RemoveLocation(udg_TempPoint3)
    call SaveInteger((udg_hash), GetHandleId(k), StringHash("i"), 0) // INLINED!!
   // call SaveInteger(LS(),GetHandleId(k),StringHash("r"),0)
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), b) // INLINED!!
    call SaveGroupHandle((udg_hash), GetHandleId(k), StringHash("draggroup"), g) // INLINED!!
    call SaveGroupHandle((udg_hash), GetHandleId(t), StringHash("draggroup"), g) // INLINED!!
    call TimerStart(k, 0.04, true, function Charge_Slide)
    call SaveTriggerHandle((udg_hash), GetHandleId(k), StringHash("trig"), t) // INLINED!!
    call TriggerRegisterUnitInRangeSimple(t, 100.0, b)
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), b) // INLINED!!
    call TriggerAddAction(t, function Charge_Damage)
    call SaveBoolean((udg_hash), GetHandleId(k), StringHash("over"), false) // INLINED!!
    call PauseUnitForPeriod(b , 3.5)
    call SetUnitTimeScale(b, 2.0)
    call SetUnitAnimationByIndex(b, 3)
    call PolledWait(3.5)
    call SaveBoolean((udg_hash), GetHandleId(k), StringHash("over"), true) // INLINED!!
endfunction

//===========================================================================
function InitTrig_Charge takes nothing returns nothing
    set gg_trg_Charge=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Charge, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Charge, Condition(function Trig_Charge_Conditions))
    call TriggerAddAction(gg_trg_Charge, function Trig_Charge_Actions)
endfunction


//===========================================================================
// Trigger: CrabMutant
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_CrabMutant_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetAttacker()) == 'h01C' ) ) then
        return false
    endif
    return true
endfunction

function Trig_CrabMutant_Actions takes nothing returns nothing
local location q=GetUnitLoc(GetAttacker())
local location a=PolarProjectionBJ(q, 90.0, GetUnitFacing(GetAttacker()))
local unit b=GetAttackedUnitBJ()

    //First Attack
    call CreateNUnitsAtLoc(1, 'n009', Player(PLAYER_NEUTRAL_PASSIVE), a, bj_UNIT_FACING)
    call IssueTargetOrderBJ(GetLastCreatedUnit(), "attack", b)
    set bj_lastCreatedEffect=AddSpecialEffectLoc("Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl", a)
    call SFXThreadClean()
    call PolledWait(0.25)
    
    //Second Attack
    call CreateNUnitsAtLoc(1, 'n009', Player(PLAYER_NEUTRAL_PASSIVE), a, bj_UNIT_FACING)
    call IssueTargetOrderBJ(GetLastCreatedUnit(), "attack", b)
    set bj_lastCreatedEffect=AddSpecialEffectLoc("Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl", a)
    call SFXThreadClean()
        
    //Third Attack Checks for Panic
    if GetUnitAbilityLevel(GetAttacker(), 'A07G') == 1 then
        call PolledWait(0.25)
        
        call CreateNUnitsAtLoc(1, 'n009', Player(PLAYER_NEUTRAL_PASSIVE), a, bj_UNIT_FACING)
        call IssueTargetOrderBJ(GetLastCreatedUnit(), "attack", b)
        set bj_lastCreatedEffect=AddSpecialEffectLoc("Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl", a)
        call SFXThreadClean()
    endif
    
    call RemoveLocation(a)
    call RemoveLocation(q)
endfunction

//===========================================================================
function InitTrig_CrabMutant takes nothing returns nothing
    set gg_trg_CrabMutant=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_CrabMutant, EVENT_PLAYER_UNIT_ATTACKED)
    call TriggerAddCondition(gg_trg_CrabMutant, Condition(function Trig_CrabMutant_Conditions))
    call TriggerAddAction(gg_trg_CrabMutant, function Trig_CrabMutant_Actions)
    call DisableTrigger(gg_trg_CrabMutant)
endfunction


//===========================================================================
// Trigger: GroundOverlordDoubleTraining
//===========================================================================
function Trig_GroundOverlordDoubleTraining_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'h04W' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetTrainedUnit()) != 'h01T' ) ) then
        return false
    endif
    return true
endfunction

function Trig_GroundOverlordDoubleTraining_Actions takes nothing returns nothing
    call CreateNUnitsAtLoc(1, GetUnitTypeId(GetTrainedUnit()), udg_Mutant, GetUnitLoc(GetTrainedUnit()), bj_UNIT_FACING)
    call IssuePointOrderLocBJ(GetLastCreatedUnit(), "move", GetUnitRallyPoint(GetTriggerUnit()))
endfunction

//===========================================================================
function InitTrig_GroundOverlordDoubleTraining takes nothing returns nothing
    set gg_trg_GroundOverlordDoubleTraining=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_GroundOverlordDoubleTraining, EVENT_PLAYER_UNIT_TRAIN_FINISH)
    call TriggerAddCondition(gg_trg_GroundOverlordDoubleTraining, Condition(function Trig_GroundOverlordDoubleTraining_Conditions))
    call TriggerAddAction(gg_trg_GroundOverlordDoubleTraining, function Trig_GroundOverlordDoubleTraining_Actions)
endfunction

//===========================================================================
// Trigger: Tripwire
//
// Required for Import: (Scroll down for full list.)
// -This trigger.
// -The Tripwire ability.
// -Kattanna's LHV (also requires global gamecache handlevars) (see the comment on the trigger for details)
//===========================================================================
//TESH.scrollpos=102
//TESH.alwaysfold=0
//Spell by: FelFox
// Tripwire
//Functions below are used for configuration of this spell.
//Sidenote: I had to gut most of my own spell to make it work for Metastasis.
function Trip_AbilCode takes nothing returns integer
return 'A05B'
//The rawcode of the spell.
endfunction

function Trip_Damage takes nothing returns real
return 160.0
//The damage the tripping unit takes.
endfunction

function Trip_TripDuration takes nothing returns real
return 2.0
//The duration for which the unit that trips the wire lies on the ground.
endfunction


function Trip_LightningCode takes nothing returns string
return "DRAL"
//The lightning's code.
endfunction

function Trip_MaxDist takes nothing returns real
return 900.0
//Maximum distance between two trees that can be wired.
endfunction


//Spell Engine
//Do not edit beyond this point on pain of death.
//
//

function Trip_RegionAddLineSeg takes region whichRegion,real x1,real y1,real x2,real y2 returns nothing
    local real dist= SquareRoot(( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ))
    local real xdist= x2 - x1
    local real ydist= y2 - y1
    loop
        exitwhen x1 > x2 and xdist > 0
        exitwhen x2 > x1 and xdist < 0
        exitwhen y1 > y2 and ydist > 0
        exitwhen y2 > y1 and ydist < 0
        call RegionAddCell(whichRegion, x1, y1)
        exitwhen dist == 0
        set x1=x1 + 32 * ( xdist / dist )
        set y1=y1 + 32 * ( ydist / dist )
    endloop
//Function by Shvegait. [http://wc3jass.com/viewtopic.php?t=282]
endfunction

function Trip_AbilCheck takes nothing returns boolean
if GetSpellAbilityId() == ('A05B') then // INLINED!!
     return true
endif
     return false
endfunction

function TripCollide takes nothing returns nothing
  local unit targetone=LoadUnitHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("target1")) // INLINED!!
  local unit targettwo=LoadUnitHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("target2")) // INLINED!!
  local lightning d=LoadLightningHandle((udg_hash), GetHandleId(targettwo), StringHash("lightning")) // INLINED!!
  local unit f=GetTriggerUnit()
  local player p=LoadPlayerHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("wo")) // INLINED!!
  if GetUnitPointValue(f) != 37 and GetUnitState(f, UNIT_STATE_LIFE) > 0.00 and GetUnitAbilityLevel(f, 'Avul') == 0 and IsUnitType(f, UNIT_TYPE_MAGIC_IMMUNE) == false and udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(f))] == false and GetOwningPlayer(f) != Player(14) and GetOwningPlayer(f) != udg_Parasite and IsUnitType(f, UNIT_TYPE_FLYING) == false then
        call UnitDamageTarget(udg_Playerhero[GetConvertedPlayerId(p)], f, (160.0), true, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS) // INLINED!!
     call PauseUnit(GetTriggerUnit(), true)
     call SetUnitAnimation(GetTriggerUnit(), "death")
     call KillUnit(targetone)
     call PolledWait((2.0)) // INLINED!!
     call PauseUnit(f, false)

if GetUnitState(f, UNIT_STATE_LIFE) > 0.00 then
     call SetUnitAnimation(f, "stand")
endif
endif
set targetone=null
set targettwo=null
set f=null
set d=null
set p=null
endfunction

function TripDisable takes nothing returns nothing
local trigger g=LoadTriggerHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("t")) // INLINED!!
  local unit targetone=LoadUnitHandle((udg_hash), GetHandleId(g), StringHash("target1")) // INLINED!!
  local unit targettwo=LoadUnitHandle((udg_hash), GetHandleId(g), StringHash("target2")) // INLINED!!
  local lightning d=LoadLightningHandle((udg_hash), GetHandleId(targettwo), StringHash("lightning")) // INLINED!!
  call DestroyTrigger(GetTriggeringTrigger())
call KillUnit(targetone)
call KillUnit(targettwo)
     call RemoveRegion(LoadRegionHandle((udg_hash), GetHandleId(g), StringHash("region"))) // INLINED!!
     call FlushChildHashtable((udg_hash), GetHandleId(GetTriggeringTrigger())) // INLINED!!
     call FlushChildHashtable((udg_hash), GetHandleId(d)) // INLINED!!
     call DestroyLightning(d)
     call FlushChildHashtable((udg_hash), GetHandleId(targetone)) // INLINED!!
     call FlushChildHashtable((udg_hash), GetHandleId(targettwo)) // INLINED!!
     endfunction
function TripAct2 takes nothing returns nothing
local unit q=GetSpellAbilityUnit()
  local unit targetone=LoadUnitHandle((udg_hash), GetHandleId(q), StringHash("target1")) // INLINED!!
  local unit targettwo=CreateUnit(Player(15), 'e01B', GetSpellTargetX(), GetSpellTargetY(), GetRandomDirectionDeg())
    local location a=GetUnitLoc(targetone)
  local location b=GetUnitLoc(targettwo)
  local lightning d=AddLightningEx(("DRAL"), false, GetUnitX(targetone), GetUnitY(targetone), GetLocationZ(a) + 20.0, GetUnitX(targettwo), GetUnitY(targettwo), GetLocationZ(b) + 20.0) // INLINED!!
  local trigger triptrigger=CreateTrigger()
  local region hitrect=CreateRegion()
  local trigger disabletrigger=CreateTrigger()
  call SaveBoolean((udg_hash), GetHandleId(d), StringHash("w"), true) // INLINED!!
  call RemoveLocation(a)
  call RemoveLocation(b)
  set a=null
  set b=null
  call TriggerRegisterUnitEvent(disabletrigger, targetone, EVENT_UNIT_DEATH)
call TriggerRegisterUnitEvent(disabletrigger, targettwo, EVENT_UNIT_DEATH)
call TriggerAddAction(disabletrigger, function TripDisable)
call SaveTriggerHandle((udg_hash), GetHandleId(disabletrigger), StringHash("t"), triptrigger) // INLINED!!
     call Trip_RegionAddLineSeg(hitrect , GetUnitX(targettwo) , GetUnitY(targettwo) , GetUnitX(targetone) , GetUnitY(targetone))
     call SaveUnitHandle((udg_hash), GetHandleId(triptrigger), StringHash("target1"), targetone) // INLINED!!
     call SaveUnitHandle((udg_hash), GetHandleId(triptrigger), StringHash("target2"), targettwo) // INLINED!!
     call SaveLightningHandle((udg_hash), GetHandleId(targettwo), StringHash("lightning"), d) // INLINED!!
     call SaveUnitHandle((udg_hash), GetHandleId(q), StringHash("target1"), udg_TheNullUnit) // INLINED!!
     call SaveRegionHandle((udg_hash), GetHandleId(triptrigger), StringHash("region"), hitrect) // INLINED!!
     call SavePlayerHandle((udg_hash), GetHandleId(triptrigger), StringHash("wo"), GetOwningPlayer(GetSpellAbilityUnit())) // INLINED!!
     call TriggerAddAction(triptrigger, function TripCollide)
     call TriggerRegisterEnterRegion(triptrigger, hitrect, null)
set triptrigger=null
set hitrect=null
call LoopDynamicLightningVisibility(d , GetUnitX(targetone) , GetUnitY(targetone) , GetUnitX(targettwo) , GetUnitY(targettwo))
endfunction

function TripAct takes nothing returns nothing
local unit q=GetSpellAbilityUnit()
  local unit targetone=CreateUnit(Player(15), 'e01B', GetSpellTargetX(), GetSpellTargetY(), GetRandomDirectionDeg())
     call SaveUnitHandle((udg_hash), GetHandleId(q), StringHash("target1"), targetone) // INLINED!!
endfunction

function TripDirectAct takes nothing returns nothing
  local unit v=LoadUnitHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("target1")) // INLINED!!
  local location a=GetUnitLoc(v)
  local location b=GetSpellTargetLoc()
  local player o=GetOwningPlayer(GetSpellAbilityUnit())
  if o == Player(14) then
  set o=udg_Parasite
  endif
if v == udg_TheNullUnit or v == null then
     call TripAct()
elseif DistanceBetweenPoints(a, b) <= (900.0) then // INLINED!!
     call TripAct2()
else
     call SetUnitState(GetSpellAbilityUnit(), UNIT_STATE_MANA, GetUnitState(GetSpellAbilityUnit(), UNIT_STATE_MANA) + 15)
     call DisplayTextToPlayer(o, 0.0, 0.0, "|cffffcc00The selected points are too far apart.")
     call PingMinimapForPlayer(o, GetUnitX(v), GetUnitY(v), 4.0)
     endif
     call RemoveLocation(a)
     call RemoveLocation(b)
     set a=null
     set b=null
endfunction
//===========================================================================
function InitTrig_Tripwire takes nothing returns nothing
    set gg_trg_Tripwire=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Tripwire, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Tripwire, Condition(function Trip_AbilCheck))
    call TriggerAddAction(gg_trg_Tripwire, function TripDirectAct)
endfunction


//===========================================================================
// Trigger: Blackness
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_Blackness_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A041' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Blackness_Func001C takes nothing returns boolean
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetSpellTargetUnit()))] == GetSpellTargetUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_Blackness_Actions takes nothing returns nothing
local player k=GetOwningPlayer(GetSpellTargetUnit())
    if ( Trig_Blackness_Func001C() ) then
    
        call CinematicFilterGenericForPlayer(GetOwningPlayer(GetSpellTargetUnit()) , 1 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\White_mask.blp" , 100 , 100 , 100 , 100 , 0 , 0 , 0 , 0)
        set udg_Player_Blinded[GetConvertedPlayerId(GetOwningPlayer(GetSpellTargetUnit()))]=true
        call PolledWait(6.00)
        set udg_Player_Blinded[GetConvertedPlayerId(k)]=false
        call CinematicFilterGenericForPlayer(k , 3 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\White_mask.blp" , 0 , 0 , 0 , 0 , 100 , 100 , 100 , 100)
    else
        call DisplayTextToPlayer(udg_Parasite, 0, 0, "TRIGSTR_2179")
    endif
endfunction

//===========================================================================
function InitTrig_Blackness takes nothing returns nothing
    set gg_trg_Blackness=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Blackness, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Blackness, Condition(function Trig_Blackness_Conditions))
    call TriggerAddAction(gg_trg_Blackness, function Trig_Blackness_Actions)
endfunction


//===========================================================================
// Trigger: ProjectedExplosion
//===========================================================================
function Trig_ProjectedExplosion_Func001C takes nothing returns boolean
    if ( ( GetSpellAbilityId() == 'A03V' ) ) then
        return true
    endif
    if ( ( GetSpellAbilityId() == 'A03X' ) ) then
        return true
    endif
    return false
endfunction

function Trig_ProjectedExplosion_Conditions takes nothing returns boolean
    if ( not Trig_ProjectedExplosion_Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_ProjectedExplosion_Actions takes nothing returns nothing
    local location a=GetSpellTargetLoc()
    set udg_TempPoint=a
    call CreateNUnitsAtLoc(1, 'e00R', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    set udg_TempUnit=GetLastCreatedUnit()
    set udg_CountUpBarColor="|cffFF0000"
    call BasicAI_IssueDangerArea(a , 800.0 , 3.1)
    call CountUpBar(udg_TempUnit , 60 , 0.05 , "FusionBombExplosion2")
    call RemoveLocation(a)
endfunction

//===========================================================================
function InitTrig_ProjectedExplosion takes nothing returns nothing
    set gg_trg_ProjectedExplosion=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ProjectedExplosion, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ProjectedExplosion, Condition(function Trig_ProjectedExplosion_Conditions))
    call TriggerAddAction(gg_trg_ProjectedExplosion, function Trig_ProjectedExplosion_Actions)
endfunction

//===========================================================================
// Trigger: ProjectedExplosionExplode
//===========================================================================
function Trig_ProjectedExplosionExplode_Func006Func001Func001C takes nothing returns boolean
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'DTrx' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT40' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT16' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT06' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT30' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ProjectedExplosionExplode_Func006Func001C takes nothing returns boolean
    if ( not Trig_ProjectedExplosionExplode_Func006Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_ProjectedExplosionExplode_Func006A takes nothing returns nothing
    if ( Trig_ProjectedExplosionExplode_Func006Func001C() ) then
        call KillDestructable(GetEnumDestructable())
    else
    endif
endfunction

function Trig_ProjectedExplosionExplode_Func008Func002C takes nothing returns boolean
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] <= 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ProjectedExplosionExplode_Func008Func003C takes nothing returns boolean
    if ( not ( Player(bj_PLAYER_NEUTRAL_EXTRA) == GetOwningPlayer(GetEnumUnit()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ProjectedExplosionExplode_Func008A takes nothing returns nothing
    set udg_TempPlayer=GetOwningPlayer(GetEnumUnit())
    if ( Trig_ProjectedExplosionExplode_Func008Func002C() ) then
        call CameraSetEQNoiseForPlayer(GetOwningPlayer(GetEnumUnit()), 9.00)
        call ExecuteFunc("BombEndShaking")
    else
    endif
    if ( Trig_ProjectedExplosionExplode_Func008Func003C() ) then
        call CinematicFilterGenericForPlayer(udg_Parasite , 6.0 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\White_mask.blp" , 100 , 100 , 100 , 0 , 0 , 0 , 0 , 100)
    else
        call CinematicFilterGenericForPlayer(GetOwningPlayer(GetEnumUnit()) , 6.0 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\White_mask.blp" , 100 , 100 , 100 , 0 , 0 , 0 , 0 , 100)
    endif
endfunction

function Trig_ProjectedExplosionExplode_Func011Func002Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A03U', GetEnumUnit()) == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ProjectedExplosionExplode_Func011Func002Func001C takes nothing returns boolean
    if ( not Trig_ProjectedExplosionExplode_Func011Func002Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_ProjectedExplosionExplode_Func011Func002C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ProjectedExplosionExplode_Func011A takes nothing returns nothing
    set udg_TempBool=UnitInSector(GetEnumUnit() , udg_TempInt)
    if ( Trig_ProjectedExplosionExplode_Func011Func002C() ) then
        if ( Trig_ProjectedExplosionExplode_Func011Func002Func001C() ) then
            call UnitDamageTargetBJ(udg_TempUnit, GetEnumUnit(), 5000.00, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL)
        else
        endif
    else
    endif
endfunction

function Trig_ProjectedExplosionExplode_Func012Func002Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A03U', GetEnumUnit()) == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ProjectedExplosionExplode_Func012Func002Func001C takes nothing returns boolean
    if ( not Trig_ProjectedExplosionExplode_Func012Func002Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_ProjectedExplosionExplode_Func012Func002C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ProjectedExplosionExplode_Func012A takes nothing returns nothing
    set udg_TempBool=UnitInSector(GetEnumUnit() , udg_TempInt)
    if ( Trig_ProjectedExplosionExplode_Func012Func002C() ) then
        if ( Trig_ProjectedExplosionExplode_Func012Func002Func001C() ) then
            call UnitDamageTargetBJ(udg_TempUnit, GetEnumUnit(), 200.00, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL)
        else
        endif
    else
    endif
endfunction

function Trig_ProjectedExplosionExplode_Actions takes nothing returns nothing
    set udg_TempUnit=udg_CountupBarTemp
    set udg_TempPoint=GetUnitLoc(udg_TempUnit)
    call SetUnitAnimation(udg_TempUnit, "decay")
    call CreateNUnitsAtLoc(1, 'e004', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
    set udg_TempInt=GetSector(udg_TempPoint)
    call EnumDestructablesInCircleBJ(400.00, udg_TempPoint, function Trig_ProjectedExplosionExplode_Func006A)
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=10
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempPoint2=IntelligentRubble(udg_TempPoint , GetRandomReal(0, 600) , GetRandomDirectionDeg())
        call CreateNUnitsAtLoc(1, 'e002', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, GetRandomDirectionDeg())
        call RemoveLocation(udg_TempPoint2)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call ForGroupBJ(GetUnitsInRangeOfLocAll(1800.00, udg_TempPoint), function Trig_ProjectedExplosionExplode_Func008A)
    call SetSoundPositionLocBJ(gg_snd_BuildingDeathLargeHuman, udg_TempPoint, 0)
    call PlaySoundBJ(gg_snd_BuildingDeathLargeHuman)
    call ForGroupBJ(GetUnitsInRangeOfLocAll(250.00, udg_TempPoint), function Trig_ProjectedExplosionExplode_Func011A)
    call ForGroupBJ(GetUnitsInRangeOfLocAll(550.00, udg_TempPoint), function Trig_ProjectedExplosionExplode_Func012A)
    call AddSpecialEffectLoc("war3mapImported\\BlackSplat.mdl", udg_TempPoint)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_ProjectedExplosionExplode takes nothing returns nothing
    set gg_trg_ProjectedExplosionExplode=CreateTrigger()
    call TriggerAddAction(gg_trg_ProjectedExplosionExplode, function Trig_ProjectedExplosionExplode_Actions)
endfunction

//===========================================================================
// Trigger: Lightning Strike
//===========================================================================
//TESH.scrollpos=58
//TESH.alwaysfold=0

function Trig_Lightning_Strike_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A03R' ) ) then
        return false
    endif
    return true
endfunction

function LightningStrikeDamage takes nothing returns nothing
if GetOwningPlayer(GetEnumUnit()) != Player(14) and GetOwningPlayer(GetEnumUnit()) != udg_Parasite and udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == false then
call UnitDamageTarget(udg_TempUnit4, GetEnumUnit(), 500.0, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
endif
endfunction

function Trig_Lightning_Strike_Actions takes nothing returns nothing
    //45 Degree Lightings
    local lightning a
    local lightning b
    local lightning c
    local lightning d
	
	//90 degree lightings
     local lightning aa
     local lightning bb
     local lightning cc
     local lightning dd
	
    local location e= GetSpellTargetLoc()
    local location f
    local location j
    local unit g= GetSpellAbilityUnit()
    
	
	//45 Degree Lightings
    set f=PolarProjectionBJ(e, 340, 45.00)
    call AddLightningLoc("CLPB", f, e)
    set a=GetLastCreatedLightningBJ()
    call RemoveLocation(f)
    set f=PolarProjectionBJ(e, 340, 135.00)
    call AddLightningLoc("CLPB", f, e)
    set b=GetLastCreatedLightningBJ()
    call RemoveLocation(f)
    set f=PolarProjectionBJ(e, 340, 225.00)
    call AddLightningLoc("CLPB", f, e)
    set c=GetLastCreatedLightningBJ()
    call RemoveLocation(f)
    set f=PolarProjectionBJ(e, 340, 315.00)
    call AddLightningLoc("CLPB", f, e)
    set d=GetLastCreatedLightningBJ()
	
	//90 Degree Lightings
    set f=PolarProjectionBJ(e, 340, 0.00)
    call AddLightningLoc("CLPB", f, e)
    set aa=GetLastCreatedLightningBJ()
    call RemoveLocation(f)
    set f=PolarProjectionBJ(e, 340, 90.00)
    call AddLightningLoc("CLPB", f, e)
    set bb=GetLastCreatedLightningBJ()
    call RemoveLocation(f)
    set f=PolarProjectionBJ(e, 340, 180.00)
    call AddLightningLoc("CLPB", f, e)
    set cc=GetLastCreatedLightningBJ()
    call RemoveLocation(f)
    set f=PolarProjectionBJ(e, 340, 270.00)
    call AddLightningLoc("CLPB", f, e)
    set dd=GetLastCreatedLightningBJ()
	
	
    call RemoveLocation(f)
    set udg_TempUnitType='e00P'
    set udg_TempPlayer=GetOwningPlayer(GetSpellAbilityUnit())
    set udg_TempReal=20.00
    call ExecuteFunc("AlienRequirementRemove")
    call ExecuteFunc("AlienRequirementRestore")
    call PolledWait(2.5)
    set udg_TempUnit4=g
    set udg_TempUnitGroup=GetUnitsInRangeOfLocAll(340.0, e)
    call ForGroup(udg_TempUnitGroup, function LightningStrikeDamage)
    call DestroyGroup(udg_TempUnitGroup)
    
    call DestroyLightning(a)
    call DestroyLightning(b)
    call DestroyLightning(c)
    call DestroyLightning(d)
	
	call DestroyLightning(aa)
    call DestroyLightning(bb)
    call DestroyLightning(cc)
    call DestroyLightning(dd)
      
    set g=null

    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=35
    call SetSoundPositionLocBJ(gg_snd_MonsoonLightningHit, e, 0)
    call PlaySoundBJ(gg_snd_MonsoonLightningHit)
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set j=PolarProjectionBJ(e, GetRandomReal(0, 300.00), GetRandomDirectionDeg())
        call AddSpecialEffectLocBJ(j, "Doodads\\Cinematic\\Lightningbolt\\Lightningbolt.mdl")
        call RemoveLocation(j)
        call SFXThreadClean()
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveLocation(e)
    set e=null

endfunction

//===========================================================================
function InitTrig_Lightning_Strike takes nothing returns nothing
    set gg_trg_Lightning_Strike=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Lightning_Strike, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Lightning_Strike, Condition(function Trig_Lightning_Strike_Conditions))
    call TriggerAddAction(gg_trg_Lightning_Strike, function Trig_Lightning_Strike_Actions)
endfunction


//===========================================================================
// Trigger: ElectromagneticDisruption
//===========================================================================
function Trig_ElectromagneticDisruption_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A03Q' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ElectromagneticDisruption_Func008Func001Func003Func003C takes nothing returns boolean
    if ( not ( udg_TempInt3 != 1337 ) ) then
        return false
    endif
    if ( not ( GetRandomInt(1, 1) == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ElectromagneticDisruption_Func008Func001Func003C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ElectromagneticDisruption_Func008Func001Func005C takes nothing returns boolean
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B001' ) ) then
        return true
    endif
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B000' ) ) then
        return true
    endif
    return false
endfunction

function Trig_ElectromagneticDisruption_Func008Func001C takes nothing returns boolean
    if ( not Trig_ElectromagneticDisruption_Func008Func001Func005C() ) then
        return false
    endif
    return true
endfunction

function Trig_ElectromagneticDisruption_Func008A takes nothing returns nothing
    if ( Trig_ElectromagneticDisruption_Func008Func001C() ) then
        set udg_TempPoint2=GetDestructableLoc(GetEnumDestructable())
        set udg_TempBool=LocInSector(udg_TempPoint2 , udg_TempInt)
        if ( Trig_ElectromagneticDisruption_Func008Func001Func003C() ) then
            set udg_TempTrigger=LoadTriggerHandle((udg_hash), GetHandleId(GetEnumDestructable()), StringHash("t1")) // INLINED!!
            set udg_TempInt3=LoadInteger((udg_hash), GetHandleId(udg_TempTrigger), StringHash("clearance")) // INLINED!!
            if ( Trig_ElectromagneticDisruption_Func008Func001Func003Func003C() ) then
                set udg_TempInt2=( udg_TempInt2 + 1 )
                set udg_TempPoint3=GetDestructableLoc(GetEnumDestructable())
                call SaveInteger((udg_hash), GetHandleId(udg_TempTrigger), StringHash("clearance"), 1337) // INLINED!!
                set udg_TempTrigger=LoadTriggerHandle((udg_hash), GetHandleId(GetEnumDestructable()), StringHash("t2")) // INLINED!!
                set udg_TempDoorHack=true
                call TriggerExecute(udg_TempTrigger)
                set udg_TempDoorHack=false
                call SaveInteger((udg_hash), GetHandleId(udg_TempTrigger), StringHash("clearance"), 1337) // INLINED!!
                call DestructableRestoreLife(LoadDestructableHandle((udg_hash), GetHandleId(udg_TempTrigger), StringHash("doorpath")), 999999, true) // INLINED!!
                call AddSpecialEffectLocBJ(udg_TempPoint3, "Abilities\\Spells\\Human\\ManaFlare\\ManaFlareBoltImpact.mdl")
                call SFXThreadClean()
                call RemoveLocation(udg_TempPoint3)
            else
            endif
        else
        endif
        call RemoveLocation(udg_TempPoint2)
    else
    endif
endfunction

function Trig_ElectromagneticDisruption_Func010C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ElectromagneticDisruption_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Human\\ManaFlare\\ManaFlareBoltImpact.mdl")
    call SFXThreadClean()
    set udg_TempInt=GetSector(udg_TempPoint)
    set udg_TempInt2=0
    call EnumDestructablesInRectAll(GetEntireMapRect(), function Trig_ElectromagneticDisruption_Func008A)
    call RemoveLocation(udg_TempPoint)
    if ( Trig_ElectromagneticDisruption_Func010C() ) then
        call DisplayTextToPlayer(udg_Parasite, 0, 0, "|cffffcc00Locked " + I2S(udg_TempInt2) + " doors.")
    else
        call DisplayTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, "|cffffcc00Locked " + I2S(udg_TempInt2) + " doors.")
    endif
    set udg_TempUnitType='e00O'
    set udg_TempPlayer=GetOwningPlayer(GetSpellAbilityUnit())
    set udg_TempReal=60.00
    call ExecuteFunc("AlienRequirementRemove")
    call ExecuteFunc("AlienRequirementRestore")
endfunction

//===========================================================================
function InitTrig_ElectromagneticDisruption takes nothing returns nothing
    set gg_trg_ElectromagneticDisruption=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ElectromagneticDisruption, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ElectromagneticDisruption, Condition(function Trig_ElectromagneticDisruption_Conditions))
    call TriggerAddAction(gg_trg_ElectromagneticDisruption, function Trig_ElectromagneticDisruption_Actions)
endfunction

//===========================================================================
// Trigger: SpatialRelocation
//===========================================================================
function Trig_SpatialRelocation_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A03C' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SpatialRelocation_Func015C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_SpatialRelocation_Actions takes nothing returns nothing
    set udg_TempUnit3=GetSpellAbilityUnit()
    call SetUnitScalePercent(GetSpellAbilityUnit(), 25.00, 25.00, 25.00)
    set udg_TempPoint=GetRandomLocInRect(gg_rct_Space)
    set udg_TempPoint2=GetUnitLoc(GetSpellAbilityUnit())
    call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl")
    call SFXThreadClean()
    call AddSpecialEffectLocBJ(udg_TempPoint2, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl")
    call SFXThreadClean()
    call SetUnitPositionLoc(GetSpellAbilityUnit(), udg_TempPoint2)
    call UnitAddTypeBJ(UNIT_TYPE_FLYING, GetSpellAbilityUnit())
    call SetUnitPositionLoc(GetSpellAbilityUnit(), udg_TempPoint)
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempItem=UnitItemInSlotBJ(GetSpellAbilityUnit(), GetForLoopIndexA())
        call SetItemVisibleBJ(false, udg_TempItem)
        call SetItemPositionLoc(udg_TempItem, udg_HoldZone)
        call SaveItemHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("ihold" + I2S(bj_forLoopAIndex)), udg_TempItem) // INLINED!!
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    if ( Trig_SpatialRelocation_Func015C() ) then
        call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TempPoint, 0)
    else
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetSpellAbilityUnit()), udg_TempPoint, 0)
    endif
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    set udg_TempUnitType='e00M'
    set udg_TempPlayer=GetOwningPlayer(GetSpellAbilityUnit())
    call ExecuteFunc("AlienRequirementRemove")
    call h__SetUnitMoveSpeed(GetSpellAbilityUnit(), ( GetUnitDefaultMoveSpeed(GetSpellAbilityUnit()) / 2.00 ))
    call UnitAddAbilityBJ('A03B', udg_TempUnit3)
    call UnitAddAbilityBJ('A03H', udg_TempUnit3)
    call UnitAddAbilityBJ('A03G', udg_TempUnit3)
    call UnitRemoveAbilityBJ('A03I', udg_TempUnit3)
    call UnitRemoveAbilityBJ('A02S', udg_TempUnit3)
    call UnitRemoveAbilityBJ('A02X', udg_TempUnit3)
    call UnitRemoveAbilityBJ('A03C', udg_TempUnit3)
endfunction

//===========================================================================
function InitTrig_SpatialRelocation takes nothing returns nothing
    set gg_trg_SpatialRelocation=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SpatialRelocation, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_SpatialRelocation, Condition(function Trig_SpatialRelocation_Conditions))
    call TriggerAddAction(gg_trg_SpatialRelocation, function Trig_SpatialRelocation_Actions)
endfunction

//===========================================================================
// Trigger: SpatialSwap
//===========================================================================
//TESH.scrollpos=68
//TESH.alwaysfold=0
function Trig_SpatialSwap_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A03I' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SpatialSwap_Func003Func002Func001Func001C takes nothing returns boolean
local integer a=GetUnitTypeId(GetEnumUnit())
    if ( ( GetOwningPlayer(GetEnumUnit()) == Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return true
    endif
    if GetUnitPointValue(GetEnumUnit()) == 37 then
    return true
    endif
    if a == 'h02A' or a == 'h004' or a == 'h00A' or a == 'h006' or a == 'h00Y' or a == 'h000' then
    return true
    endif
    if ( ( GetUnitAbilityLevelSwapped('Avul', GetEnumUnit()) != 0 ) ) then
        return true
    endif
    if ( ( IsUnitPausedBJ(GetEnumUnit()) == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_SpatialSwap_Func003Func002Func001C takes nothing returns boolean
    if Trig_SpatialSwap_Func003Func002Func001Func001C() then
        return true
    endif
    return false
endfunction

function Trig_SpatialSwap_Func003Func002A takes nothing returns nothing
    if ( Trig_SpatialSwap_Func003Func002Func001C() ) then
        call GroupRemoveUnitSimple(GetEnumUnit(), udg_TempUnitGroup)
    else
        call UnitAddAbilityBJ('Avul', GetEnumUnit())
        call PauseUnitBJ(true, GetEnumUnit())
    endif
endfunction



function Trig_SpatialSwap_Func003Func016A takes nothing returns nothing
    call PauseUnitBJ(false, GetEnumUnit())
    call UnitRemoveAbilityBJ('Avul', GetEnumUnit())
    set udg_TempPoint3=GetUnitLoc(GetEnumUnit())
    call AddSpecialEffectLocBJ(udg_TempPoint3, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdl")
call SFXThreadClean()
    call RemoveLocation(udg_TempPoint3)
    call SetUnitPositionLoc(GetEnumUnit(), udg_TempPoint)
    call PanCameraToLocForPlayer(GetOwningPlayer(GetEnumUnit()), udg_TempPoint)
endfunction


function SpatialSwap_Sort takes nothing returns nothing
if udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] != GetEnumUnit() then
call GroupRemoveUnit(udg_TempUnitGroup, GetEnumUnit())
endif
if IsUnitAliveBJ(GetEnumUnit()) != true then
call GroupRemoveUnit(udg_TempUnitGroup, GetEnumUnit())
endif
endfunction
function Trig_SpatialSwap_Actions takes nothing returns nothing
local location a
local location b
local group c
local effect d
local effect e
local unit sp=GetSpellAbilityUnit()
    set udg_TempPoint=GetUnitLoc(sp)
    set udg_TempPoint2=GetSpellTargetLoc()

    if RectContainsLoc(gg_rct_Space, udg_TempPoint2) != true and RectContainsLoc(gg_rct_Timeout, udg_TempPoint2) != true then
        set udg_TempUnitGroup=GetUnitsInRangeOfLocAll(200.00, udg_TempPoint2)
            call ForGroup(udg_TempUnitGroup, function SpatialSwap_Sort)
        call ForGroupBJ(udg_TempUnitGroup, function Trig_SpatialSwap_Func003Func002A)
        if CountUnitsInGroup(udg_TempUnitGroup) == 0 or RectContainsLoc(gg_rct_Timeout, udg_TempPoint2) or RectContainsLoc(gg_rct_Timeout, udg_TempPoint) then
        call DisplayTextToPlayer(udg_Parasite, 0, 0, "|cffffcc00No players netted!|r")
            call DestroyGroup(udg_TempUnitGroup)
            call RemoveLocation(udg_TempPoint)
            call RemoveLocation(udg_TempPoint2)
            return
        endif
        call PauseUnitBJ(true, sp)
        call UnitAddAbilityBJ('Avul', sp)
        set d=AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTo.mdl")
        set e=AddSpecialEffectLocBJ(udg_TempPoint2, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTo.mdl")
        set a=udg_TempPoint
        set b=udg_TempPoint2
        set c=udg_TempUnitGroup
        call PolledWait(3.00)
                call PauseUnitBJ(false, sp)
        call UnitRemoveAbilityBJ('Avul', sp)
        set udg_TempPoint=a
        set udg_TempPoint2=b
        set udg_TempUnitGroup=c
                call ForGroupBJ(udg_TempUnitGroup, function Trig_SpatialSwap_Func003Func016A)
        call DestroyEffectBJ(d)
        call DestroyEffectBJ(e)
        set udg_TempPoint3=GetUnitLoc(sp)
            call PanCameraToTimedLocForPlayer(GetOwningPlayer(sp), udg_TempPoint2, 0)
        call SetUnitPositionLoc(sp, udg_TempPoint2)
        call AddSpecialEffectLocBJ(udg_TempPoint3, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdl")
call SFXThreadClean()
        call RemoveLocation(udg_TempPoint3)

        call DestroyGroup(udg_TempUnitGroup)
    else
    endif
    call RemoveLocation(a)
    call RemoveLocation(b)
endfunction

//===========================================================================
function InitTrig_SpatialSwap takes nothing returns nothing
    set gg_trg_SpatialSwap=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SpatialSwap, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_SpatialSwap, Condition(function Trig_SpatialSwap_Conditions))
    call TriggerAddAction(gg_trg_SpatialSwap, function Trig_SpatialSwap_Actions)
endfunction


//===========================================================================
// Trigger: AlienBoard
//===========================================================================
function Trig_AlienBoard_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A03B' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Func004Func001Func002Func001Func001Func001Func001Func001Func001Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h03T' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Func004Func001Func002Func001Func001Func001Func001Func001Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h04G' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Func004Func001Func002Func001Func001Func001Func001Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h029' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Func004Func001Func002Func001Func001Func001Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h009' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Func004Func001Func002Func001Func001Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h003' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Func004Func001Func002Func001Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h008' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Func004Func001Func002Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h007' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Func004Func001Func002Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h005' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Func004Func001Func002Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h00X' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Func004Func001Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02B' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Func004Func001Func003C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h04G' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02B' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h00X' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h005' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h007' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h008' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h03T' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h003' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h009' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h029' ) ) then
        return true
    endif
    return false
endfunction

function Trig_AlienBoard_Func004Func001C takes nothing returns boolean
    if ( not Trig_AlienBoard_Func004Func001Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Func004Func002C takes nothing returns boolean
    if (GetUnitAbilityLevel((GetSpellTargetUnit()), 'A071') == 1) then // INLINED!!
    return true
    endif
    return false
endfunction

function Trig_AlienBoard_Func004C takes nothing returns boolean
    if ( not Trig_AlienBoard_Func004Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Func011C takes nothing returns boolean
    if ( not ( GetOwningPlayer(udg_TempUnit3) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Func014C takes nothing returns boolean
    if ( not ( GetOwningPlayer(udg_TempUnit3) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienBoard_Actions takes nothing returns nothing
    set udg_TempUnit3=GetSpellAbilityUnit()
    if ( Trig_AlienBoard_Func004C() ) then
        set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
        set udg_TempPoint2=GetRectCenter(udg_Spaceship_EnterExit[GetUnitUserData(udg_SS_Landed[GetUnitUserData(GetSpellTargetUnit())])])
    else
        if ( Trig_AlienBoard_Func004Func001C() ) then
            if ( Trig_AlienBoard_Func004Func001Func002C() ) then
                set udg_TempPoint2=GetRectCenter(gg_rct_PirateABEnter)
            else
                if ( Trig_AlienBoard_Func004Func001Func002Func001C() ) then
                    set udg_TempPoint2=GetRectCenter(gg_rct_ST5EscapePod)
                else
                    if ( Trig_AlienBoard_Func004Func001Func002Func001Func001C() ) then
                        set udg_TempPoint2=GetRectCenter(gg_rct_ST2)
                    else
                        if ( Trig_AlienBoard_Func004Func001Func002Func001Func001Func001C() ) then
                            set udg_TempPoint2=GetRectCenter(gg_rct_ST3EscapePod)
                        else
                            if ( Trig_AlienBoard_Func004Func001Func002Func001Func001Func001Func001C() ) then
                                set udg_TempPoint2=GetRectCenter(gg_rct_PlanetEscapePod)
                            else
                                if ( Trig_AlienBoard_Func004Func001Func002Func001Func001Func001Func001Func001C() ) then
                                    set udg_TempPoint2=GetRectCenter(gg_rct_ST1EscapePod)
                                else
                                    if ( Trig_AlienBoard_Func004Func001Func002Func001Func001Func001Func001Func001Func001C() ) then
                                        set udg_TempPoint2=GetRectCenter(gg_rct_ST4EscapePod)
                                    else
                                        if ( Trig_AlienBoard_Func004Func001Func002Func001Func001Func001Func001Func001Func001Func001C() ) then
                                            set udg_TempPoint2=GetRectCenter(gg_rct_LostStation)
                                        else
                                            if ( Trig_AlienBoard_Func004Func001Func002Func001Func001Func001Func001Func001Func001Func001Func001C() ) then
                                                set udg_TempPoint2=GetRectCenter(gg_rct_OverlordPod)
                                            else
                                                if ( Trig_AlienBoard_Func004Func001Func002Func001Func001Func001Func001Func001Func001Func001Func001Func001C() ) then
                                                    set udg_TempPoint2=GetRectCenter(gg_rct_MoonEscapePod)
                                                else
                                                endif
                                            endif
                                        endif
                                    endif
                                endif
                            endif
                        endif
                    endif
                endif
            endif
            set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
        else
            return
        endif
    endif
    call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl")
    call SFXThreadClean()
    call AddSpecialEffectLocBJ(udg_TempPoint2, "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl")
    call SFXThreadClean()
    call SetUnitPositionLoc(udg_TempUnit3, udg_TempPoint2)
    call UnitRemoveTypeBJ(UNIT_TYPE_FLYING, udg_TempUnit3)
    if ( Trig_AlienBoard_Func011C() ) then
        call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TempPoint2, 0)
    else
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(udg_TempUnit3), udg_TempPoint2, 0)
    endif
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempItem=LoadItemHandle((udg_hash), GetHandleId(udg_TempUnit3), StringHash("ihold" + I2S(bj_forLoopAIndex))) // INLINED!!
        call SetItemVisibleBJ(true, udg_TempItem)
        call UnitAddItemSwapped(udg_TempItem, udg_TempUnit3)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call h__SetUnitMoveSpeed(udg_TempUnit3, ( GetUnitDefaultMoveSpeed(udg_TempUnit3) / 1.00 ))
    if ( Trig_AlienBoard_Func014C() ) then
        call UnitAddAbilityBJ('A02S', udg_TempUnit3)
        call UnitAddAbilityBJ('A03I', udg_TempUnit3)
        call SetUnitScalePercent(udg_TempUnit3, 100.00, 100.00, 100.00)
    else
        call UnitAddAbilityBJ('A02X', udg_TempUnit3)
        call SetUnitScalePercent(udg_TempUnit3, 85.00, 85.00, 85.00)
    endif
    call UnitAddAbilityBJ('A03C', udg_TempUnit3)
    call UnitAddAbilityBJ('AInv', udg_TempUnit3)
    call UnitRemoveAbilityBJ('A03B', udg_TempUnit3)
    call UnitRemoveAbilityBJ('A03H', udg_TempUnit3)
    call UnitRemoveAbilityBJ('A03G', udg_TempUnit3)
    set udg_TempUnitType='e00M'
    set udg_TempPlayer=GetOwningPlayer(udg_TempUnit3)
    set udg_TempReal=60.00
    call ExecuteFunc("AlienRequirementRestore")
    call UnitAddAbilityForPeriod(udg_TempUnit3 , 'Avul' , 3.0)
endfunction

//===========================================================================
function InitTrig_AlienBoard takes nothing returns nothing
    set gg_trg_AlienBoard=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_AlienBoard, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_AlienBoard, Condition(function Trig_AlienBoard_Conditions))
    call TriggerAddAction(gg_trg_AlienBoard, function Trig_AlienBoard_Actions)
endfunction

//===========================================================================
// Trigger: Entropy
//===========================================================================
//TESH.scrollpos=18
//TESH.alwaysfold=0
function Trig_Entropy_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A03M' ) ) then
        return false
    endif
    return true
endfunction


function Entropy_Suck_Enum takes nothing returns nothing
local real r=0
local real m=0
local real q=TimerGetElapsed(udg_GameTimer)
if HaveSavedReal((udg_hash), GetHandleId(GetEnumUnit()), StringHash("Entropy_SuckLeniency")) then // INLINED!!
set r=LoadReal((udg_hash), GetHandleId(GetEnumUnit()), StringHash("Entropy_SuckLeniency")) // INLINED!!
set m=LoadReal((udg_hash), GetHandleId(GetEnumUnit()), StringHash("Entropy_LastSuck")) // INLINED!!
else
set r=0
set m=q
endif
if q - m > 5 then
call SaveReal((udg_hash), GetHandleId(GetEnumUnit()), StringHash("Entropy_SuckLeniency"), 0) // INLINED!!
set r=0
endif
call SaveReal((udg_hash), GetHandleId(GetEnumUnit()), StringHash("Entropy_LastSuck"), q) // INLINED!!
call SaveReal((udg_hash), GetHandleId(GetEnumUnit()), StringHash("Entropy_SuckLeniency"), r + ( 1 - r ) / 30) // INLINED!!
if udg_TempUnit4 != GetEnumUnit() and IsPlayerAlien(GetOwningPlayer(GetEnumUnit())) != true then
call Push2(GetEnumUnit() , 250.0 * ( 1 - r ) , 160.0 * ( 1 - r ) , AngleBetweenUnits(GetEnumUnit() , udg_TempUnit4))
endif
endfunction

function Entropy_Suck takes nothing returns nothing
local timer t=GetExpiredTimer()
local unit q=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
local location om=GetUnitLoc(q)
local group g
set g=GetUnitsInRangeOfLocAll(600.0, om)
set udg_TempPoint=om
set udg_TempUnit4=q
call ForGroup(g, function Entropy_Suck_Enum)
call DestroyGroup(g)
set g=null
call RemoveLocation(om)
set om=null
endfunction
function Trig_Entropy_Actions takes nothing returns nothing
local location b=GetSpellTargetLoc()
local timer t=CreateTimer()
local unit o
call AddSpecialEffectLoc("Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeTarget.mdl", b)
    call CreateNUnitsAtLoc(1, 'e00N', Player(bj_PLAYER_NEUTRAL_EXTRA), b, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
        call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), GetLastCreatedUnit()) // INLINED!!
        set o=GetLastCreatedUnit()
            call TimerStart(t, 2, true, function Entropy_Suck)
    loop
    exitwhen 1 == 2
    call IssuePointOrderLocBJ(o, "blizzard", b)
call PolledWait(300)
    endloop
endfunction

//===========================================================================
function InitTrig_Entropy takes nothing returns nothing
    set gg_trg_Entropy=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Entropy, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Entropy, Condition(function Trig_Entropy_Conditions))
    call TriggerAddAction(gg_trg_Entropy, function Trig_Entropy_Actions)
endfunction


//===========================================================================
// Trigger: Entropytimer
//===========================================================================
function Trig_Entropytimer_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A03M' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Entropytimer_Actions takes nothing returns nothing
    call UnitApplyTimedLifeBJ(60.00, 'BTLF', GetLastCreatedUnit())
endfunction

//===========================================================================
function InitTrig_Entropytimer takes nothing returns nothing
    set gg_trg_Entropytimer=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Entropytimer, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Entropytimer, Condition(function Trig_Entropytimer_Conditions))
    call TriggerAddAction(gg_trg_Entropytimer, function Trig_Entropytimer_Actions)
endfunction

//===========================================================================
// Trigger: ClosedTimeLikeLoopSavePos
//===========================================================================
function Trig_ClosedTimeLikeLoopSavePos_Func002C takes nothing returns boolean
    if ( not ( udg_CTL_On >= 40 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoopSavePos_Func004C takes nothing returns boolean
    if ( not ( udg_RogueAndroidStoleTimeLoop == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoopSavePos_Actions takes nothing returns nothing
    if ( Trig_ClosedTimeLikeLoopSavePos_Func002C() ) then
        set udg_CTL_On=0
    else
    endif
    set udg_CTL_On=( udg_CTL_On + 1 )
    if ( Trig_ClosedTimeLikeLoopSavePos_Func004C() ) then
        set udg_TempUnit=udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]
    else
        set udg_TempUnit=udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)]
    endif
    set udg_CTL_PosXArray[udg_CTL_On]=GetUnitX(udg_TempUnit)
    set udg_CTL_PosYArray[udg_CTL_On]=GetUnitY(udg_TempUnit)
    set udg_CTL_UnitType[udg_CTL_On]=GetUnitTypeId(udg_TempUnit)
    set udg_CTL_InventorySlot1[udg_CTL_On]=GetItemTypeId(UnitItemInSlotBJ(udg_TempUnit, 1))
    set udg_CTL_InventorySlot2[udg_CTL_On]=GetItemTypeId(UnitItemInSlotBJ(udg_TempUnit, 2))
    set udg_CTL_InventorySlot3[udg_CTL_On]=GetItemTypeId(UnitItemInSlotBJ(udg_TempUnit, 3))
    set udg_CTL_InventorySlot4[udg_CTL_On]=GetItemTypeId(UnitItemInSlotBJ(udg_TempUnit, 4))
    set udg_CTL_InventorySlot5[udg_CTL_On]=GetItemTypeId(UnitItemInSlotBJ(udg_TempUnit, 5))
    set udg_CTL_InventorySlot6[udg_CTL_On]=GetItemTypeId(UnitItemInSlotBJ(udg_TempUnit, 6))
    set udg_CTL_UnitHealth[udg_CTL_On]=GetUnitStateSwap(UNIT_STATE_LIFE, udg_TempUnit)
    set udg_CTL_UnitMana[udg_CTL_On]=GetUnitStateSwap(UNIT_STATE_MANA, udg_TempUnit)
    set udg_CTL_Facing[udg_CTL_On]=GetUnitFacing(udg_TempUnit)
endfunction

//===========================================================================
function InitTrig_ClosedTimeLikeLoopSavePos takes nothing returns nothing
    set gg_trg_ClosedTimeLikeLoopSavePos=CreateTrigger()
    call DisableTrigger(gg_trg_ClosedTimeLikeLoopSavePos)
    call TriggerRegisterTimerEventPeriodic(gg_trg_ClosedTimeLikeLoopSavePos, 0.25)
    call TriggerAddAction(gg_trg_ClosedTimeLikeLoopSavePos, function Trig_ClosedTimeLikeLoopSavePos_Actions)
endfunction

//===========================================================================
// Trigger: ClosedTimeLikeLoop
//===========================================================================
function Trig_ClosedTimeLikeLoop_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A033' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func004C takes nothing returns boolean
    if ( not ( udg_TempInt > 40 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func005C takes nothing returns boolean
    if ( not ( udg_CTL_PosXArray[udg_TempInt] == 0.00 ) ) then
        return false
    endif
    if ( not ( udg_CTL_PosYArray[udg_TempInt] == 0.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func012Func004Func001Func004C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetLastReplacedUnitBJ()) == 'h00H' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func012Func004Func001C takes nothing returns boolean
    if ( not ( udg_CTL_UnitType[udg_TempInt] != 'h02Y' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func012Func004C takes nothing returns boolean
    if ( not ( GetUnitTypeId(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]) != udg_CTL_UnitType[udg_TempInt] ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func012C takes nothing returns boolean
    if ( not ( udg_RogueAndroidStoleTimeLoop == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func013C takes nothing returns boolean
    if ( not ( RectContainsLoc(gg_rct_Timeout, udg_TempPoint) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func017Func001C takes nothing returns boolean
    if ( not ( GetItemLevel(UnitItemInSlotBJ(udg_TempUnit, GetForLoopIndexA())) == 10 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func019C takes nothing returns boolean
    if ( not ( GetItemLevel(GetLastCreatedItem()) == 8 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func020C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetLastCreatedItem()) == 'I00L' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func022C takes nothing returns boolean
    if ( not ( GetItemLevel(GetLastCreatedItem()) == 8 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func023C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetLastCreatedItem()) == 'I00L' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func024C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetLastCreatedItem()) == 'I00L' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func026C takes nothing returns boolean
    if ( not ( GetItemLevel(GetLastCreatedItem()) == 8 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func027C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetLastCreatedItem()) == 'I00L' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func029C takes nothing returns boolean
    if ( not ( GetItemLevel(GetLastCreatedItem()) == 8 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func030C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetLastCreatedItem()) == 'I00L' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func032C takes nothing returns boolean
    if ( not ( GetItemLevel(GetLastCreatedItem()) == 8 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func034C takes nothing returns boolean
    if ( not ( GetItemLevel(GetLastCreatedItem()) == 8 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Func035C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetLastCreatedItem()) == 'I00L' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ClosedTimeLikeLoop_Actions takes nothing returns nothing
    set udg_TempInt=( udg_CTL_On + 1 )
    if ( Trig_ClosedTimeLikeLoop_Func004C() ) then
        set udg_TempInt=1
    else
    endif
    if ( Trig_ClosedTimeLikeLoop_Func005C() ) then
        return
    else
    endif
    set udg_TempPoint=Location(udg_CTL_PosXArray[udg_TempInt], udg_CTL_PosYArray[udg_TempInt])
    // Start - Bugfix Block for when you were in pod
    if ( RectContainsCoords(gg_rct_Timeout, GetLocationX(udg_TempPoint), GetLocationY(udg_TempPoint)) ) then
    return
    endif
    // End - Bugfix Block for when you were in pod
    if ( Trig_ClosedTimeLikeLoop_Func012C() ) then
        if ( Trig_ClosedTimeLikeLoop_Func012Func004C() ) then
            if ( Trig_ClosedTimeLikeLoop_Func012Func004Func001C() ) then
                call ReplaceUnitBJ(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)], udg_CTL_UnitType[udg_TempInt], bj_UNIT_STATE_METHOD_RELATIVE)
                call SetUnitOwner(GetLastReplacedUnitBJ(), udg_Parasite, true)
                set udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]=GetLastReplacedUnitBJ()
                if ( Trig_ClosedTimeLikeLoop_Func012Func004Func001Func004C() ) then
                    call UnitAddAbilityBJ('A02O', GetLastReplacedUnitBJ())
                else
                endif
            else
                call ReplaceUnitBJ(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)], udg_CTL_UnitType[udg_TempInt], bj_UNIT_STATE_METHOD_RELATIVE)
                set udg_AlienForm_Alien=GetLastReplacedUnitBJ()
                set udg_Playerhero[GetConvertedPlayerId(Player(bj_PLAYER_NEUTRAL_EXTRA))]=GetLastReplacedUnitBJ()
                set udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]=GetLastReplacedUnitBJ()
            endif
        else
        endif
        set udg_TempUnit=udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]
        call SelectUnitForPlayerSingle(udg_TempUnit, udg_Parasite)
        call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TempPoint, 0)
    else
        set udg_TempUnit=udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)]
        call SelectUnitForPlayerSingle(udg_TempUnit, udg_RogueAndroid)
        call PanCameraToTimedLocForPlayer(udg_RogueAndroid, udg_TempPoint, 0)
    endif
    if ( Trig_ClosedTimeLikeLoop_Func013C() ) then
        call SetUnitPositionLocFacingBJ(udg_TempUnit, udg_TempPoint, udg_CTL_Facing[udg_TempInt])
    else
    endif
    call SetUnitLifeBJ(udg_TempUnit, udg_CTL_UnitHealth[udg_TempInt])
    call SetUnitManaBJ(udg_TempUnit, udg_CTL_UnitMana[udg_TempInt])
    call SetUnitManaBJ(udg_TempUnit, ( GetUnitStateSwap(UNIT_STATE_MANA, udg_TempUnit) - 25.00 ))
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_ClosedTimeLikeLoop_Func017Func001C() ) then
            call UnitRemoveItemSwapped(UnitItemInSlotBJ(udg_TempUnit, GetForLoopIndexA()), udg_TempUnit)
        else
            call RemoveItem(UnitItemInSlotBJ(udg_TempUnit, GetForLoopIndexA()))
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call UnitAddItemByIdSwapped(udg_CTL_InventorySlot1[udg_TempInt], udg_TempUnit)
    if ( Trig_ClosedTimeLikeLoop_Func019C() ) then
        call RemoveItem(GetLastCreatedItem())
    else
    endif
    if ( Trig_ClosedTimeLikeLoop_Func020C() ) then
        call RemoveItem(GetLastCreatedItem())
        call UnitAddItemByIdSwapped('I01Y', udg_TempUnit)
    else
    endif
    call UnitAddItemByIdSwapped(udg_CTL_InventorySlot2[udg_TempInt], udg_TempUnit)
    if ( Trig_ClosedTimeLikeLoop_Func022C() ) then
        call RemoveItem(GetLastCreatedItem())
    else
    endif
    if ( Trig_ClosedTimeLikeLoop_Func023C() ) then
        call RemoveItem(GetLastCreatedItem())
        call UnitAddItemByIdSwapped('I01Y', udg_TempUnit)
    else
    endif
    if ( Trig_ClosedTimeLikeLoop_Func024C() ) then
        call RemoveItem(GetLastCreatedItem())
        call UnitAddItemByIdSwapped('I01Y', udg_TempUnit)
    else
    endif
    call UnitAddItemByIdSwapped(udg_CTL_InventorySlot3[udg_TempInt], udg_TempUnit)
    if ( Trig_ClosedTimeLikeLoop_Func026C() ) then
        call RemoveItem(GetLastCreatedItem())
    else
    endif
    if ( Trig_ClosedTimeLikeLoop_Func027C() ) then
        call RemoveItem(GetLastCreatedItem())
        call UnitAddItemByIdSwapped('I01Y', udg_TempUnit)
    else
    endif
    call UnitAddItemByIdSwapped(udg_CTL_InventorySlot4[udg_TempInt], udg_TempUnit)
    if ( Trig_ClosedTimeLikeLoop_Func029C() ) then
        call RemoveItem(GetLastCreatedItem())
    else
    endif
    if ( Trig_ClosedTimeLikeLoop_Func030C() ) then
        call RemoveItem(GetLastCreatedItem())
        call UnitAddItemByIdSwapped('I01Y', udg_TempUnit)
    else
    endif
    call UnitAddItemByIdSwapped(udg_CTL_InventorySlot5[udg_TempInt], udg_TempUnit)
    if ( Trig_ClosedTimeLikeLoop_Func032C() ) then
        call RemoveItem(GetLastCreatedItem())
    else
    endif
    call UnitAddItemByIdSwapped(udg_CTL_InventorySlot6[udg_TempInt], udg_TempUnit)
    if ( Trig_ClosedTimeLikeLoop_Func034C() ) then
        call RemoveItem(GetLastCreatedItem())
    else
    endif
    if ( Trig_ClosedTimeLikeLoop_Func035C() ) then
        call RemoveItem(GetLastCreatedItem())
        call UnitAddItemByIdSwapped('I01Y', udg_TempUnit)
    else
    endif
    call RemoveLocation(udg_TempPoint)
    set udg_TempUnitType='e00K'
    set udg_TempPlayer=GetOwningPlayer(GetSpellAbilityUnit())
    set udg_TempReal=40.00
    call ExecuteFunc("AlienRequirementRemove")
    call ExecuteFunc("AlienRequirementRestore")
endfunction

//===========================================================================
function InitTrig_ClosedTimeLikeLoop takes nothing returns nothing
    set gg_trg_ClosedTimeLikeLoop=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ClosedTimeLikeLoop, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ClosedTimeLikeLoop, Condition(function Trig_ClosedTimeLikeLoop_Conditions))
    call TriggerAddAction(gg_trg_ClosedTimeLikeLoop, function Trig_ClosedTimeLikeLoop_Actions)
endfunction

//===========================================================================
// Trigger: Muteilate
//===========================================================================
    
    
//Implemented from module CTLExpire:
        function s__MuteTimer_create takes nothing returns integer
            return CTL__CT(s__MuteTimer_rctl32)
        endfunction
        function s__MuteTimer_destroy takes integer this returns nothing
            call CTL__DT(this)
        endfunction
        function s__MuteTimer_ectl32 takes nothing returns boolean
            local integer this=CTL__rf[s__MuteTimer_rctl32]
            loop
                exitwhen 0 == this
    
    set s__MuteTimer_c[this]=s__MuteTimer_c[this] + 1
    
    if s__MuteTimer_c[this] > 1920 then
    
        call DisplayTextToPlayer(Player(s__MuteTimer_pid[this]), 0, 0, "|cff00FFFFYour voice returns to you!|r")
        
        call RemoveSavedInteger(Table__ht, (GroupChat), (( s__MuteTimer_pid[this] + 1 ) * - 1000)) // INLINED!!
        
        call CTL__DT((this)) // INLINED!!
        
    endif
    
//Implemented from module CTLEnd:
                set this=CTL__n[this]
            endloop
            return false
        endfunction
        function s__MuteTimer_CTLEnd___onInit takes nothing returns nothing
            set s__MuteTimer_rctl32=CTL__A(function s__MuteTimer_ectl32)
        endfunction
    
    function s__MuteTimer_MuteActions takes nothing returns nothing
               local player p= GetTriggerPlayer()
               local integer b= GetPlayerId(p)
               local integer this
               
               if udg_Playerhero[b + 1] == GetTriggerUnit() and GetSpellAbilityId() == 'A02Y' then
                    call DisplayTextToPlayer(p, 0, 0, "|cff00FFFFYou can no longer seem to form words...|r")
                    set this=(CTL__CT(s__MuteTimer_rctl32)) // INLINED!!
                    set s__MuteTimer_pid[this]=b
                    set s__MuteTimer_c[this]=0
                    call SaveInteger(Table__ht, (GroupChat), (( b + 1 ) * - 1000), ( - 1)) // INLINED!!
                endif
                
                set p=null
    endfunction 
    
    function s__MuteTimer_MutInt takes player p returns nothing
        call RegisterPlayerUnitEvent(p , EVENT_PLAYER_UNIT_SPELL_EFFECT , function s__MuteTimer_MuteActions)
    endfunction 





//===========================================================================
// Trigger: NightOfTheMasks
//
// Masquerade_TimerEnd
//===========================================================================
function Trig_NightOfTheMasks_Func002C takes nothing returns boolean
    if ( ( true == true ) ) then
        return true
    endif
    if ( ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetSpellTargetUnit()))] == GetSpellTargetUnit() ) ) then
        return true
    endif
    return false
endfunction

function Trig_NightOfTheMasks_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A03K' ) ) then
        return false
    endif
    if ( not Trig_NightOfTheMasks_Func002C() ) then
        return false
    endif
    if ( not ( udg_Player_IsMasquerading[GetConvertedPlayerId(GetOwningPlayer(GetSpellAbilityUnit()))] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_NightOfTheMasks_Func016C takes nothing returns boolean
    if ( not ( udg_TempPlayer == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_NightOfTheMasks_Func021Func001C takes nothing returns boolean
    if ( ( IsUnitType(udg_TempUnit2, UNIT_TYPE_STRUCTURE) == true ) ) then
        return true
    endif
    if ( ( GetUnitAbilityLevelSwapped('A079', udg_TempUnit2) == 1 ) ) then
        return true
    endif
    return false
endfunction

function Trig_NightOfTheMasks_Func021C takes nothing returns boolean
    if ( not Trig_NightOfTheMasks_Func021Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_NightOfTheMasks_Func024Func002C takes nothing returns boolean
    if ( not ( GetItemLevel(udg_TempItemArray[GetForLoopIndexA()]) == 8 ) ) then
        return false
    endif
    return true
endfunction

function Trig_NightOfTheMasks_Func035C takes nothing returns boolean
    if ( not ( GetUnitTypeId(udg_TempUnit2) == 'n00J' ) ) then
        return false
    endif
    return true
endfunction

function Trig_NightOfTheMasks_Func036Func002Func002C takes nothing returns boolean
    if ( not ( IsUnitType(udg_TempUnit2, UNIT_TYPE_STRUCTURE) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_NightOfTheMasks_Func036Func002C takes nothing returns boolean
    if ( not ( GetUnitMoveSpeed(udg_TempUnit2) <= 120.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_NightOfTheMasks_Func036C takes nothing returns boolean
    if ( not ( GetUnitTypeId(udg_TempUnit2) == 'h01C' ) ) then
        return false
    endif
    return true
endfunction

function Trig_NightOfTheMasks_Func037C takes nothing returns boolean
    if ( not ( IsUnitType(udg_TempUnit2, UNIT_TYPE_MECHANICAL) == true ) ) then
        return false
    endif
    if ( not ( GetConvertedPlayerId(GetOwningPlayer(udg_TempUnit2)) <= 12 ) ) then
        return false
    endif
    return true
endfunction

function Trig_NightOfTheMasks_Func038Func003C takes nothing returns boolean
    if ( ( udg_TempUnit2 == gg_unit_h02S_0215 ) ) then
        return true
    endif
    if ( ( udg_TempUnit2 == gg_unit_h02K_0204 ) ) then
        return true
    endif
    if ( ( udg_TempUnit2 == gg_unit_h02K_0203 ) ) then
        return true
    endif
    if ( ( udg_TempUnit2 == gg_unit_h02I_0183 ) ) then
        return true
    endif
    if ( ( udg_TempUnit2 == gg_unit_h001_0041 ) ) then
        return true
    endif
    if ( ( udg_TempUnit2 == gg_unit_h001_0043 ) ) then
        return true
    endif
    if ( ( udg_TempUnit2 == gg_unit_h001_0002 ) ) then
        return true
    endif
    if ( ( udg_TempUnit2 == gg_unit_h001_0016 ) ) then
        return true
    endif
    if ( ( udg_TempUnit2 == gg_unit_h001_0041 ) ) then
        return true
    endif
    if ( ( udg_TempUnit2 == gg_unit_h001_0044 ) ) then
        return true
    endif
    if ( ( udg_TempUnit2 == gg_unit_h001_0163 ) ) then
        return true
    endif
    if ( ( udg_TempUnit2 == gg_unit_h001_0162 ) ) then
        return true
    endif
    return false
endfunction

function Trig_NightOfTheMasks_Func038C takes nothing returns boolean
    if ( not Trig_NightOfTheMasks_Func038Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_NightOfTheMasks_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPlayer=GetOwningPlayer(GetSpellAbilityUnit())
    set udg_TempUnit2=GetSpellTargetUnit()
    set udg_TempReal=60.00
    set udg_TempUnitType='e015'
    set udg_TempPlayer=GetOwningPlayer(GetSpellAbilityUnit())
    call ExecuteFunc("AlienRequirementRemove")
    call ExecuteFunc("AlienRequirementRestore")
    set udg_TempReal=GetUnitFacing(GetSpellAbilityUnit())
    call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Items\\AIil\\AIilTarget.mdl")
    call SFXThreadClean()
    if ( Trig_NightOfTheMasks_Func016C() ) then
        set udg_TempPlayer=udg_Parasite
    else
    endif
    set udg_Player_Masquerade_Life[GetConvertedPlayerId(udg_TempPlayer)]=GetUnitLifePercent(GetSpellAbilityUnit())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempItemArray[GetForLoopIndexA()]=UnitItemInSlotBJ(GetSpellAbilityUnit(), GetForLoopIndexA())
        call SaveItemHandle((udg_hash), GetHandleId(udg_TempPlayer), StringHash("mitem_" + I2S(bj_forLoopAIndex)), udg_TempItemArray[bj_forLoopAIndex]) // INLINED!!
        call SetItemPositionLoc(UnitItemInSlotBJ(GetSpellAbilityUnit(), GetForLoopIndexA()), udg_HoldZone)
        call UnitRemoveItemFromSlotSwapped(GetForLoopIndexA(), GetSpellAbilityUnit())
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    // Delete masquerade and copypaste the targeted unit
    call RemoveUnit(GetSpellAbilityUnit())
    if ( Trig_NightOfTheMasks_Func021C() ) then
        call SetMasqueradeShop(udg_TempUnit2) //Caches the shop for later ESC usage
        set udg_TempPoint=GetUnitLoc(udg_TempUnit2)
        set udg_TempReal=GetUnitFacing(udg_TempUnit2)
        call ShowUnitHide(udg_TempUnit2)
    else
    endif
    set udg_TempUnit=CloneUnit(udg_TempUnit2 , udg_TempPlayer , GetLocationX(udg_TempPoint) , GetLocationY(udg_TempPoint) , udg_TempReal)
    call ResetUnitAnimation(udg_TempUnit)
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempItemArray[GetForLoopIndexA()]=UnitItemInSlotBJ(udg_TempUnit, GetForLoopIndexA())
        if ( Trig_NightOfTheMasks_Func024Func002C() ) then
            call RemoveItem(udg_TempItemArray[GetForLoopIndexA()])
        else
            call SaveItemHandle((udg_hash), GetHandleId(GetOwningPlayer(udg_TempUnit)), StringHash("kitem_" + I2S(bj_forLoopAIndex)), udg_TempItemArray[bj_forLoopAIndex]) // INLINED!!
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveLocation(udg_TempPoint)
    set udg_Player_NameBeforeDead[GetConvertedPlayerId(udg_TempPlayer)]=GetPlayerName(udg_TempPlayer)
    call SelectUnitForPlayerSingle(udg_TempUnit, udg_TempPlayer)
    set udg_TempString=GetPlayerName(GetOwningPlayer(udg_TempUnit2))
    call SetPlayerName(udg_TempPlayer, udg_TempString)
    set udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]=udg_TempUnit
    set udg_Player_MasqueradeColor[GetConvertedPlayerId(udg_TempPlayer)]=GetPlayerColor(udg_TempPlayer)
    call SetPlayerColorBJ(udg_TempPlayer, GetPlayerColor(GetOwningPlayer(udg_TempUnit2)), true)
    set udg_Player_IsMasquerading[GetConvertedPlayerId(udg_TempPlayer)]=true
    set udg_Player_MasqueradeTarget[GetConvertedPlayerId(udg_TempPlayer)]=GetOwningPlayer(udg_TempUnit2)
    if ( Trig_NightOfTheMasks_Func035C() ) then
        call SetUnitVertexColorBJ(udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)], GetRandomReal(1.00, 255.00), GetRandomReal(1.00, 255.00), GetRandomReal(1.00, 255.00), 1.00)
    else
    endif
    if ( Trig_NightOfTheMasks_Func036C() ) then
        call CrabTeleport(udg_TempUnit)
    else
        // Check for barrel, cage, health regen, whatever
        if ( Trig_NightOfTheMasks_Func036Func002C() ) then
            call h__SetUnitMoveSpeed(udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)], 120.00)
            if ( Trig_NightOfTheMasks_Func036Func002Func002C() ) then
                call SetUnitTimeScalePercent(udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)], 0.00)
            else
            endif
        else
        endif
    endif
    if ( Trig_NightOfTheMasks_Func037C() ) then
        call Masquerade_TimerEnd(udg_TempPlayer , 30)
    else
    endif
    if ( Trig_NightOfTheMasks_Func038C() ) then
        call SetUnitTimeScalePercent(udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)], 0.00)
        call Masquerade_TimerEnd(udg_TempPlayer , 30)
    else
    endif
endfunction

//===========================================================================
function InitTrig_NightOfTheMasks takes nothing returns nothing
    set gg_trg_NightOfTheMasks=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_NightOfTheMasks, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_NightOfTheMasks, Condition(function Trig_NightOfTheMasks_Conditions))
    call TriggerAddAction(gg_trg_NightOfTheMasks, function Trig_NightOfTheMasks_Actions)
endfunction

//===========================================================================
// Trigger: NightOfTheMasksESC
//===========================================================================
function Trig_NightOfTheMasksESC_Conditions takes nothing returns boolean
    if ( not ( udg_Player_IsMasquerading[GetConvertedPlayerId(GetTriggerPlayer())] == true ) ) then
        return false
    endif
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())]) == true ) ) then
        return false
    endif
    if RectContainsUnit(gg_rct_Space, udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())]) == true then
    return false
    endif
        if RectContainsUnit(gg_rct_Timeout, udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())]) == true then
    return false
    endif
    return true
endfunction

function Trig_NightOfTheMasksESC_Actions takes nothing returns nothing

    local integer i=1
    local item v
    local unit a

    set udg_TempPlayer=GetTriggerPlayer()
    set udg_TempUnit=udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]
    set udg_TempPoint=GetUnitLoc(udg_TempUnit)
    set a=udg_TempUnit
    call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Items\\AIil\\AIilTarget.mdl")
    call SFXThreadClean()
    
    //If became a structure/shop/vendor
    if ( IsUnitType(a, UNIT_TYPE_STRUCTURE) == true ) then
        call ShowUnitShow(ReturnMasqueradeShop())
    endif
    
    if udg_TempPlayer == udg_Parasite then
        call CreateNUnitsAtLoc(1, udg_AlienCurrentForm, Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPoint, bj_UNIT_FACING)
        set udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]=GetLastCreatedUnit()
        set udg_Playerhero[GetConvertedPlayerId(Player(bj_PLAYER_NEUTRAL_EXTRA))]=GetLastCreatedUnit()
        set udg_AlienForm_Alien=GetLastCreatedUnit()
        call SetPlayerColorBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), ConvertPlayerColor(12), true)
        call SetPlayerColorBJ(udg_TempPlayer, udg_Player_MasqueradeColor[GetConvertedPlayerId(udg_TempPlayer)], true)
    else //if udg_TempPlayer == Player_IsParasiteSpawn[] then//Fuck it. Cyborg can reach here, just give him proper parasite and plantchip.
        call CreateNUnitsAtLoc(1, udg_ParasiteChildInfectee, GetTriggerPlayer(), udg_TempPoint, bj_UNIT_FACING)
        set udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]=GetLastCreatedUnit()
        call SetPlayerColorBJ(udg_TempPlayer, udg_Player_MasqueradeColor[GetConvertedPlayerId(udg_TempPlayer)], true)
        
        //Cyborg Check
        if udg_TempPlayer == udg_RogueAndroid then
            //Give Plant Chip Ability
            call UnitAddAbility(udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)], 'A0AI')
            
            //Remove Alien Parasite, Give Cyborg Parasite
            call UnitRemoveAbility(udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)], 'A02N')
            call UnitAddAbility(udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)], 'A0AT')
        endif
    endif
    
    call SetUnitLifePercentBJ(GetLastCreatedUnit(), ( udg_Player_Masquerade_Life[GetConvertedPlayerId(GetTriggerPlayer())] + GetUnitLifePercent(a) ) / 2.0)
    
    //Move items
    loop
        exitwhen i > 6
            set v=LoadItemHandle((udg_hash), GetHandleId(GetTriggerPlayer()), StringHash("mitem_" + I2S(i))) // INLINED!!
            call UnitAddItem(GetLastCreatedUnit(), v)
            set v=LoadItemHandle((udg_hash), GetHandleId(GetTriggerPlayer()), StringHash("kitem_" + I2S(i))) // INLINED!!
            call RemoveItem(v)
            call SetItemPositionLoc(v, udg_HoldZone)
        set i=i + 1
    endloop
    
    call RemoveUnit(a)
    call RemoveLocation(udg_TempPoint)
    call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_TempPlayer)
    call SetPlayerName(udg_TempPlayer, udg_Player_NameBeforeDead[GetConvertedPlayerId(GetTriggerPlayer())])
    set udg_Player_IsMasquerading[GetConvertedPlayerId(udg_TempPlayer)]=false
    if udg_TempPlayer == udg_Parasite then
        set udg_Player_IsMasquerading[GetConvertedPlayerId(Player(14))]=false
    endif
endfunction

//===========================================================================
function InitTrig_NightOfTheMasksESC takes nothing returns nothing
local integer i=0
    set gg_trg_NightOfTheMasksESC=CreateTrigger()
loop
exitwhen i > 11

    call TriggerRegisterPlayerEventEndCinematic(gg_trg_NightOfTheMasksESC, Player(i))
    set i=i + 1
    endloop
    call TriggerAddCondition(gg_trg_NightOfTheMasksESC, Condition(function Trig_NightOfTheMasksESC_Conditions))
    call TriggerAddAction(gg_trg_NightOfTheMasksESC, function Trig_NightOfTheMasksESC_Actions)
endfunction


//===========================================================================
// Trigger: BackFromHell
//===========================================================================
function Trig_BackFromHell_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A032' ) ) then
        return false
    endif
    return true
endfunction

function Trig_BackFromHell_Func007C takes nothing returns boolean
    if ( not ( udg_EldritchBeastExists == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BackFromHell_Func009Func001C takes nothing returns boolean
    if ( not ( IsPlayerInForce(GetEnumPlayer(), udg_DeadGroup) == true ) ) then
        return false
    endif
    if not ( IsPlayerMainInfected(GetEnumPlayer()) == false ) then
    return false
    endif
    return true
endfunction

function Trig_BackFromHell_Func009A takes nothing returns nothing
    if ( Trig_BackFromHell_Func009Func001C() ) then
        set udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetEnumPlayer())]=false
        set udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetEnumPlayer())]=false
        set udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetEnumPlayer())]=false
        call DialogAddButtonBJ(udg_BackFromHellDialog, udg_Player_NameBeforeDead[GetConvertedPlayerId(GetEnumPlayer())])
        set udg_BackFromHellDialogButtons[udg_TempInt]=GetLastCreatedButtonBJ()
        set udg_BackFromHellDialog_Player[udg_TempInt]=GetEnumPlayer()
        set udg_TempInt=( udg_TempInt + 1 )
    else
    endif
endfunction

function Trig_BackFromHell_Func010Func001C takes nothing returns boolean
    if ( not ( udg_RogueAndroidStoleBackFromHell == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_BackFromHell_Func010C takes nothing returns boolean
    if ( not ( udg_TempInt == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_BackFromHell_Actions takes nothing returns nothing
    call DialogClearBJ(udg_BackFromHellDialog)
    call DialogAddButtonBJ(udg_BackFromHellDialog, "TRIGSTR_5631")
    set udg_BackFromHellDialogButtons[0]=GetLastCreatedButtonBJ()
    // Start - If Eldritch Beast already exists -> Dont spawn the button
    if ( Trig_BackFromHell_Func007C() ) then
        // Eldritch Beast Exists
        set udg_TempInt=1
    else
        // Eldritch Beast Does NOT Exist
        set udg_TempInt=2
        call DialogAddButtonBJ(udg_BackFromHellDialog, "TRIGSTR_5632")
        set udg_BackFromHellDialogButtons[1]=GetLastCreatedButtonBJ()
    endif
    // End - If Eldritch Beast already exists -> Dont spawn the button
    call ForForce(udg_DeadGroup, function Trig_BackFromHell_Func009A)
    if ( Trig_BackFromHell_Func010C() ) then
        // Cannot spawn eldritch or a player!
        call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
        call SetUnitManaBJ(GetTriggerUnit(), GetUnitStateSwap(UNIT_STATE_MAX_MANA, GetTriggerUnit()))
        call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "There is nothing to summon! Not even an eldritch beast, since it is already summoned!")
    else
        if ( Trig_BackFromHell_Func010Func001C() ) then
            call DialogDisplayBJ(true, udg_BackFromHellDialog, udg_Parasite)
        else
            call DialogDisplayBJ(true, udg_BackFromHellDialog, udg_RogueAndroid)
        endif
        set udg_TempUnitType='e00J'
        set udg_TempPlayer=GetOwningPlayer(GetSpellAbilityUnit())
        set udg_TempReal=120.00
        call ExecuteFunc("AlienRequirementRemove")
        call ExecuteFunc("AlienRequirementRestore")
    endif
endfunction

//===========================================================================
function InitTrig_BackFromHell takes nothing returns nothing
    set gg_trg_BackFromHell=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_BackFromHell, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_BackFromHell, Condition(function Trig_BackFromHell_Conditions))
    call TriggerAddAction(gg_trg_BackFromHell, function Trig_BackFromHell_Actions)
endfunction

//===========================================================================
// Trigger: BackFromHellDialog
//===========================================================================
function Trig_BackFromHellDialog_Func002C takes nothing returns boolean
    if ( not ( udg_BackFromHellDialogButtons[0] == GetClickedButtonBJ() ) ) then
        return false
    endif
    return true
endfunction

function Trig_BackFromHellDialog_Func005C takes nothing returns boolean
    if ( not ( udg_EldritchBeastExists == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BackFromHellDialog_Func006Func001C takes nothing returns boolean
    if ( not ( udg_BackFromHellDialogButtons[GetForLoopIndexA()] == GetClickedButtonBJ() ) ) then
        return false
    endif
    return true
endfunction

function Trig_BackFromHellDialog_Func007C takes nothing returns boolean
    if ( not ( udg_RogueAndroidStoleBackFromHell == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_BackFromHellDialog_Func008Func001C takes nothing returns boolean
    if ( not ( udg_RogueAndroidStoleBackFromHell == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_BackFromHellDialog_Func008Func006C takes nothing returns boolean
    if ( not ( udg_RogueAndroidStoleBackFromHell == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_BackFromHellDialog_Func008Func007C takes nothing returns boolean
    if ( not ( udg_Mutant == udg_TempPlayer ) ) then
        return false
    endif
    return true
endfunction

function Trig_BackFromHellDialog_Func008Func015A takes nothing returns nothing
    call SetPlayerAllianceStateBJ(GetEnumPlayer(), udg_TempPlayer, bj_ALLIANCE_ALLIED)
    call SetPlayerAllianceStateBJ(udg_TempPlayer, GetEnumPlayer(), bj_ALLIANCE_ALLIED)
endfunction

function Trig_BackFromHellDialog_Func008Func018A takes nothing returns nothing
    call SetPlayerAllianceStateBJ(GetEnumPlayer(), udg_TempPlayer, bj_ALLIANCE_UNALLIED)
    call SetPlayerAllianceStateBJ(udg_TempPlayer, GetEnumPlayer(), bj_ALLIANCE_ALLIED_VISION)
endfunction

function Trig_BackFromHellDialog_Func008C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BackFromHellDialog_Actions takes nothing returns nothing
    if ( Trig_BackFromHellDialog_Func002C() ) then
        call DialogDisplayBJ(true, udg_BackFromHellDialog, GetTriggerPlayer())
        return
    else
    endif
    set udg_TempBool=false
    // TempBool determines if eldritch beast spawn or player
    if ( Trig_BackFromHellDialog_Func005C() ) then
        set udg_TempInt=1
    else
        set udg_TempInt=2
    endif
    set bj_forLoopAIndex=udg_TempInt
    set bj_forLoopAIndexEnd=12
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_BackFromHellDialog_Func006Func001C() ) then
            set udg_TempPlayer=udg_BackFromHellDialog_Player[GetForLoopIndexA()]
            set udg_TempBool=true
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    if ( Trig_BackFromHellDialog_Func007C() ) then
        set udg_TempPoint2=GetUnitLoc(udg_AlienForm_Alien)
        set udg_TempPoint=PolarProjectionBJ(udg_TempPoint2, 25.00, GetUnitFacing(udg_AlienForm_Alien))
    else
        set udg_TempPoint2=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)])
        set udg_TempPoint=PolarProjectionBJ(udg_TempPoint2, 25.00, GetUnitFacing(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)]))
    endif
    if ( Trig_BackFromHellDialog_Func008C() ) then
        if GetLocalPlayer() == udg_TempPlayer then
        call MultiboardDisplay(ChatBoard, false)
        endif
        call CreateNUnitsAtLoc(1, 'n00E', udg_TempPlayer, udg_TempPoint, bj_UNIT_FACING)
        if ( Trig_BackFromHellDialog_Func008Func006C() ) then
            set udg_Player_IsParasiteSpawn[GetConvertedPlayerId(udg_TempPlayer)]=true
            set udg_Player_IsMutantSpawn[GetConvertedPlayerId(udg_TempPlayer)]=false
            set udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(udg_TempPlayer)]=false
            call DisplayTextToPlayer(GetOwningPlayer(GetDyingUnit()), 0, 0, "|cffFF0000You have been turned into the alien's spawn! Work with the alien to ensure victory.|r")
        else
            set udg_Player_IsParasiteSpawn[GetConvertedPlayerId(udg_TempPlayer)]=false
            set udg_Player_IsMutantSpawn[GetConvertedPlayerId(udg_TempPlayer)]=false
            set udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(udg_TempPlayer)]=true
            call DisplayTextToPlayer(GetOwningPlayer(GetDyingUnit()), 0, 0, "|cffFF0000You have been turned into the cyborg's spawn! Work with the cyborg to ensure victory.|r")
        endif
        if ( Trig_BackFromHellDialog_Func008Func007C() ) then
            set udg_Mutant=null
        else
        endif
        call SetUnitLifeBJ(GetLastCreatedUnit(), 1.00)
        set udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]=GetLastCreatedUnit()
        call SetPlayerName(udg_TempPlayer, udg_Player_NameBeforeDead[GetConvertedPlayerId(udg_TempPlayer)])
        call ShowInterfaceForceOn(GetForceOfPlayer(udg_TempPlayer), 0.25)
        call PanCameraToTimedLocForPlayer(udg_TempPlayer, udg_TempPoint, 0)
        call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_TempPlayer)
        call ForceRemovePlayerSimple(udg_TempPlayer, udg_DeadGroup)
        call ForForce(GetPlayersAll(), function Trig_BackFromHellDialog_Func008Func015A)
        call SetPlayerAllianceStateBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPlayer, bj_ALLIANCE_ALLIED)
        call SetPlayerAllianceStateBJ(udg_TempPlayer, Player(bj_PLAYER_NEUTRAL_EXTRA), bj_ALLIANCE_ALLIED)
        call ForForce(udg_DeadGroup, function Trig_BackFromHellDialog_Func008Func018A)
    else
        if ( Trig_BackFromHellDialog_Func008Func001C() ) then
            call CreateNUnitsAtLoc(1, 'h02Z', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPoint, bj_UNIT_FACING)
        else
            call CreateNUnitsAtLoc(1, 'h02Z', udg_RogueAndroid, udg_TempPoint, bj_UNIT_FACING)
        endif
        set udg_EldritchBeastExists=true
    endif
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
endfunction

//===========================================================================
function InitTrig_BackFromHellDialog takes nothing returns nothing
    set gg_trg_BackFromHellDialog=CreateTrigger()
    call TriggerRegisterDialogEventBJ(gg_trg_BackFromHellDialog, udg_BackFromHellDialog)
    call TriggerAddAction(gg_trg_BackFromHellDialog, function Trig_BackFromHellDialog_Actions)
endfunction

//===========================================================================
// Trigger: BackFromHellEldritchDeath
//===========================================================================
function Trig_BackFromHellEldritchDeath_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'h02Z' ) ) then
        return false
    endif
    return true
endfunction

function Trig_BackFromHellEldritchDeath_Actions takes nothing returns nothing
    set udg_EldritchBeastExists=false
endfunction

//===========================================================================
function InitTrig_BackFromHellEldritchDeath takes nothing returns nothing
    set gg_trg_BackFromHellEldritchDeath=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_BackFromHellEldritchDeath, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_BackFromHellEldritchDeath, Condition(function Trig_BackFromHellEldritchDeath_Conditions))
    call TriggerAddAction(gg_trg_BackFromHellEldritchDeath, function Trig_BackFromHellEldritchDeath_Actions)
endfunction

//===========================================================================
// Trigger: Petrify
//===========================================================================
//TESH.scrollpos=75
//TESH.alwaysfold=0
function Trig_Petrify_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A045' ) ) then
        return false
    endif
    return true
endfunction

function Depetrify takes unit a returns nothing
    call SetUnitTimeScalePercent(a, 100.00)
    call PauseUnitBJ(false, a)
    call SetUnitVertexColorBJ(a, 100.00, 100.00, 100.00, 0)
    call UnitRemoveAbilityBJ('Avul', a)
    call SetUnitColor(a, GetPlayerColor(GetOwningPlayer(a)))
    set udg_TempUnit=a
    if ( udg_Player_PetrifiedHero[GetConvertedPlayerId(GetOwningPlayer(udg_TempUnit))] == udg_TempUnit ) then
        set udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(a))]=a
    endif
endfunction

function DepetrifyInRange takes nothing returns nothing
//local unit a=GetHandleUnit(GetTriggeringTrigger(), "unit")
local unit a=LoadUnitHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("unit")) // INLINED!!
local player d=GetOwningPlayer(GetTriggerUnit())
local unit f=GetTriggerUnit()
if GetUnitPointValue(f) != 37 and (not ( IsPlayerNonhuman((d)) )) and f == (udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer((f)))]) then // INLINED!!
call Depetrify(a)
call CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'e00U', GetUnitX(a), GetUnitY(a), GetRandomDirectionDeg())
call DestroyTrigger(LoadTriggerHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("d"))) // INLINED!!
call DestroyTrigger(GetTriggeringTrigger())
endif
endfunction

function Petrify_Neutralize takes nothing returns nothing
if GetSpellTargetUnit() != GetEnumUnit() then
call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_PASSIVE), false)
endif
endfunction

function Petrified_Death takes nothing returns nothing
set udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))]=CreateUnit(GetOwningPlayer(GetDyingUnit()), 'e000', 0, 0, 0)
call KillUnit(udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))])
call DestroyTrigger(GetTriggeringTrigger())
endfunction

function Trig_Petrify_Actions takes nothing returns nothing
local trigger k=CreateTrigger()
local group d
local trigger q=CreateTrigger()
call TriggerRegisterUnitEvent(q, GetSpellTargetUnit(), EVENT_UNIT_DEATH)
call SaveTriggerHandle((udg_hash), GetHandleId(k), StringHash("d"), q) // INLINED!!
call TriggerAddAction(q, function Petrified_Death)
call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("unit"), GetSpellTargetUnit()) // INLINED!!
call DisplayTextToPlayer(GetOwningPlayer(GetSpellTargetUnit()), 0, 0, "|cff408080You have been petrified! You will not be able to move and cannot attack or be damaged (except by station/ship destruction). If a friendly human walks close enough to you, you will depetrify.|r")
call TriggerRegisterUnitInRangeSimple(k, 100.0, GetSpellTargetUnit())
call TriggerAddAction(k, function DepetrifyInRange)
    call SetUnitTimeScalePercent(GetSpellTargetUnit(), 0.00)
    call PauseUnitBJ(true, GetSpellTargetUnit())
    call SetUnitVertexColorBJ(GetSpellTargetUnit(), 20.00, 20.00, 20.00, 0)
    call UnitAddAbilityBJ('Avul', GetSpellTargetUnit())
    call SetUnitColor(GetSpellTargetUnit(), ConvertPlayerColor(12))
    if ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetSpellTargetUnit()))] == GetSpellTargetUnit() ) then
        set udg_Player_PetrifiedHero[GetConvertedPlayerId(GetOwningPlayer(GetSpellTargetUnit()))]=GetSpellTargetUnit()
        set udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetSpellTargetUnit()))]=null
        set d=GetUnitsOfPlayerAll(GetOwningPlayer(GetSpellTargetUnit()))
        call ForGroup(d, function Petrify_Neutralize)
        call DestroyGroup(d)
        call TriggerExecute(gg_trg_WinCheck)
    else
    endif
    set udg_TempUnitType='e00V'
    set udg_TempPlayer=GetOwningPlayer(GetSpellAbilityUnit())
    set udg_TempReal=20.00
    call ExecuteFunc("AlienRequirementRemove")
    call ExecuteFunc("AlienRequirementRestore")
endfunction

//===========================================================================
function InitTrig_Petrify takes nothing returns nothing
    set gg_trg_Petrify=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Petrify, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Petrify, Condition(function Trig_Petrify_Conditions))
    call TriggerAddAction(gg_trg_Petrify, function Trig_Petrify_Actions)
endfunction


//===========================================================================
// Trigger: NeurotoxicPoison
//===========================================================================
function Trig_NeurotoxicPoison_Conditions takes nothing returns boolean
   if GetUnitAbilityLevel(GetAttacker(), 'A043') == 0 then
        return false
    endif
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetAttackedUnitBJ()))] == GetAttackedUnitBJ() ) ) then
        return false
    endif
    return true
endfunction

function Trig_NeurotoxicPoison_Func002C takes nothing returns boolean
    if ( not ( udg_Player_Poison_Swaying[GetConvertedPlayerId(GetOwningPlayer(GetAttackedUnitBJ()))] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_NeurotoxicPoison_Actions takes nothing returns nothing
local unit a=GetAttackedUnitBJ()
local player p=GetOwningPlayer(a)
if IsUnitType(a, UNIT_TYPE_TAUREN) then
call UnitRemoveAbility(a, 'B00P')
return
endif
call PolledWait(0.1)
    if ( Trig_NeurotoxicPoison_Func002C() ) and udg_Player_TetrabinLevel[GetConvertedPlayerId(p)] == 0 then
        set udg_Player_Poison_Swaying[GetConvertedPlayerId(p)]=true
         call CameraSetSourceNoiseForPlayer(GetOwningPlayer(a), 350.00, 40)
        loop
            exitwhen UnitHasBuffBJ(a, 'B00P') != true or a == null
   
            call PolledWait(1.00)
        endloop
        if udg_Player_TetrabinLevel[GetConvertedPlayerId(p)] == 0 then
        call CameraSetSourceNoiseForPlayer(p, 0, 0)
        endif
        set udg_Player_Poison_Swaying[GetConvertedPlayerId(p)]=false
    else
    endif
endfunction

//===========================================================================
function InitTrig_NeurotoxicPoison takes nothing returns nothing
    set gg_trg_NeurotoxicPoison=CreateTrigger()
    call DisableTrigger(gg_trg_NeurotoxicPoison)
    call TriggerRegisterAnyUnitEventBJ(gg_trg_NeurotoxicPoison, EVENT_PLAYER_UNIT_ATTACKED)
    call TriggerAddCondition(gg_trg_NeurotoxicPoison, Condition(function Trig_NeurotoxicPoison_Conditions))
    call TriggerAddAction(gg_trg_NeurotoxicPoison, function Trig_NeurotoxicPoison_Actions)
endfunction


//===========================================================================
// Trigger: Manifold
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_Manifold_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A03Y' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Manifold_Actions takes nothing returns nothing
    local item r

    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    
    //Create a unit to hold item to be used later
    if GetOwningPlayer(GetSpellAbilityUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) then
        call CreateNUnitsAtLoc(1, 'e000', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPoint, bj_UNIT_FACING)
    else
        call CreateNUnitsAtLoc(1, 'e000', udg_RogueAndroid, udg_TempPoint, bj_UNIT_FACING)
    endif
        
    set r=UnitAddItemByIdSwapped('I016', GetLastCreatedUnit())
    call UnitUseItemTarget(GetLastCreatedUnit(), r, GetSpellAbilityUnit())

    call RemoveLocation(udg_TempPoint)
        
    set udg_TempUnitType='e00S' //Manifold_Requirement_Cooldown (Dummy unit)
    set udg_TempPlayer=GetOwningPlayer(GetSpellAbilityUnit())
    set udg_TempReal=50.00
    call ExecuteFunc("AlienRequirementRemove")
    call ExecuteFunc("AlienRequirementRestore")
    call PolledWait(1)
    call RemoveItem(r)
endfunction

//===========================================================================
function InitTrig_Manifold takes nothing returns nothing
    set gg_trg_Manifold=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Manifold, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Manifold, Condition(function Trig_Manifold_Conditions))
    call TriggerAddAction(gg_trg_Manifold, function Trig_Manifold_Actions)
endfunction


//===========================================================================
// Trigger: TemporalFlux
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_TemporalFlux_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02Z' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TemporalFlux_Actions takes nothing returns nothing
local unit a=GetSpellTargetUnit()
local item r
    call UnitRemoveBuffs(a, true, true)
    set udg_TempPoint=GetUnitLoc(a)
        set udg_TempPlayer=GetOwningPlayer(GetSpellAbilityUnit())
            set udg_TempUnitType='e00T'
    set udg_TempReal=180.00
    call ExecuteFunc("AlienRequirementRemove")
    call ExecuteFunc("AlienRequirementRestore")
    call CreateNUnitsAtLoc(1, 'e000', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
    call IssueTargetOrderBJ(GetLastCreatedUnit(), "slow", a)
    call CreateNUnitsAtLoc(1, 'e000', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPoint, bj_UNIT_FACING)
      set r=UnitAddItemByIdSwapped('I014', GetLastCreatedUnit())
    call UnitUseItemTarget(GetLastCreatedUnit(), r, GetSpellTargetUnit())

    call RemoveLocation(udg_TempPoint)
    call PolledWait(1)
    call RemoveItem(r)
    call UnitAddAbilityBJ('Avul', a)
    call PolledWait(35.00)
    call UnitRemoveAbilityBJ('Avul', a)
endfunction

//===========================================================================
function InitTrig_TemporalFlux takes nothing returns nothing
    set gg_trg_TemporalFlux=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_TemporalFlux, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_TemporalFlux, Condition(function Trig_TemporalFlux_Conditions))
    call TriggerAddAction(gg_trg_TemporalFlux, function Trig_TemporalFlux_Actions)
endfunction


//===========================================================================
// Trigger: GargoyleSekritInit
//===========================================================================
function Trig_GargoyleSekritInit_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A03K' ) ) then
        return false
    endif
    if ( not ( GetSpellTargetUnit() == gg_unit_u000_0150 ) ) then
        return false
    endif
    return true
endfunction

function Trig_GargoyleSekritInit_Actions takes nothing returns nothing
    call TriggerExecute(gg_trg_Gargoyle_Easter_Egg)
endfunction

//===========================================================================
function InitTrig_GargoyleSekritInit takes nothing returns nothing
    set gg_trg_GargoyleSekritInit=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_GargoyleSekritInit, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_GargoyleSekritInit, Condition(function Trig_GargoyleSekritInit_Conditions))
    call TriggerAddAction(gg_trg_GargoyleSekritInit, function Trig_GargoyleSekritInit_Actions)
endfunction

//===========================================================================
// Trigger: GargoyleSekritTransform
//===========================================================================
function Trig_GargoyleSekritTransform_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A01K' ) ) then
        return false
    endif
    if ( not ( udg_GargoyleSekritFlag == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_GargoyleSekritTransform_Actions takes nothing returns nothing
    call StartTimerBJ(udg_GargoyleSekritTimer, false, 0.75)
    set udg_GargoyleSekritFlag=true
    set udg_GargoyleSekritPlayer=GetOwningPlayer(GetTriggerUnit())
endfunction

//===========================================================================
function InitTrig_GargoyleSekritTransform takes nothing returns nothing
    set gg_trg_GargoyleSekritTransform=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_GargoyleSekritTransform, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_GargoyleSekritTransform, Condition(function Trig_GargoyleSekritTransform_Conditions))
    call TriggerAddAction(gg_trg_GargoyleSekritTransform, function Trig_GargoyleSekritTransform_Actions)
endfunction

//===========================================================================
// Trigger: GargoyleSekritBombs
//===========================================================================
function Trig_GargoyleSekritBombs_Actions takes nothing returns nothing
    call UnitAddItemByIdSwapped('I01F', udg_Playerhero[GetConvertedPlayerId(udg_GargoyleSekritPlayer)])
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=5
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call UnitAddItemByIdSwapped('I00N', udg_Playerhero[GetConvertedPlayerId(udg_GargoyleSekritPlayer)])
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
endfunction

//===========================================================================
function InitTrig_GargoyleSekritBombs takes nothing returns nothing
    set gg_trg_GargoyleSekritBombs=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_GargoyleSekritBombs, udg_GargoyleSekritTimer)
    call TriggerAddAction(gg_trg_GargoyleSekritBombs, function Trig_GargoyleSekritBombs_Actions)
endfunction

//===========================================================================
// Trigger: Warpal
//
// or unit - starts an ability(events) (conditions)ability being equal to Warp Drain
//===========================================================================
function Trig_Warpal_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I02X' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Warpal_Func014Func001Func002C takes nothing returns boolean
    if ( ( GetTriggerUnit() == GetEnumUnit() ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'H03I' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Warpal_Func014Func001C takes nothing returns boolean
    if ( not Trig_Warpal_Func014Func001Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_Warpal_Func014A takes nothing returns nothing
    if ( Trig_Warpal_Func014Func001C() ) then
    else
        call UnitDamageTargetBJ(GetTriggerUnit(), GetEnumUnit(), udg_TempReal, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNKNOWN)
    endif
endfunction

function Trig_Warpal_Actions takes nothing returns nothing
    set udg_TempReal=GetUnitStateSwap(UNIT_STATE_MANA, GetTriggerUnit())
    set udg_TempLoc=GetUnitLoc(GetTriggerUnit())
    call SetUnitManaBJ(GetTriggerUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetTriggerUnit()) - udg_Manacurrent1 ))
    call AddSpecialEffectLocBJ(GetUnitLoc(GetTriggerUnit()), "war3mapImported\\TwilightSparkle.mdx")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call AddSpecialEffectLocBJ(GetUnitLoc(GetTriggerUnit()), "war3mapImported\\Unleash-the-power.mdx")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call AddSpecialEffectLocBJ(GetUnitLoc(GetTriggerUnit()), "Abilities\\Spells\\NightElf\\Blink\\BlinkTarget.mdl")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call AddSpecialEffectLocBJ(GetUnitLoc(GetTriggerUnit()), "war3mapImported\\Energy-Spark.mdx")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call ForGroupBJ(GetUnitsInRangeOfLocAll(300.00, GetUnitLoc(GetTriggerUnit())), function Trig_Warpal_Func014A)
    call SetUnitManaBJ(GetTriggerUnit(), 0)
    call RemoveLocation(udg_TempLoc)
endfunction

//===========================================================================
function InitTrig_Warpal takes nothing returns nothing
    set gg_trg_Warpal=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Warpal, EVENT_PLAYER_UNIT_USE_ITEM)
    call TriggerAddCondition(gg_trg_Warpal, Condition(function Trig_Warpal_Conditions))
    call TriggerAddAction(gg_trg_Warpal, function Trig_Warpal_Actions)
endfunction

//===========================================================================
// Trigger: Grenade
//===========================================================================
//TESH.scrollpos=24
//TESH.alwaysfold=0
function Trig_Grenade_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A01D' ) ) then
        return false
    endif
    return true
endfunction

function DetermineNormal takes real x1,real y1,real offsetx,real offsety,real height returns real
local location a=Location(x1, y1 + offsety)
    //local location b=Location(x1+offsetx,y1)
    
    if GetLocationZ(a) > height then
        call RemoveLocation(a)
        set a=null
        return 0.0
    else
        call RemoveLocation(a)
        set a=null
        return 90.0
    endif
    
endfunction

function Grenade_Slide takes nothing returns nothing
    local timer k=GetExpiredTimer()
    local unit l=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
    local real zvelocity=LoadReal((udg_hash), GetHandleId(k), StringHash("zvelocity")) // INLINED!!
    local real c=LoadReal((udg_hash), GetHandleId(k), StringHash("angle")) // INLINED!!
    local real height=LoadReal((udg_hash), GetHandleId(k), StringHash("height")) // INLINED!!
    local real zforce=LoadReal((udg_hash), GetHandleId(k), StringHash("force")) // INLINED!!
    local location a=GetUnitLoc(l)
    local location b=PolarProjectionBJ(a, zforce, c)

    call SetUnitFlyHeight(l, height - GetLocationZ(a), 0)
    if GetLocationZ(b) > height then
        //If the collision is a result of the projectile falling then...
        if GetLocationZ(a) == GetLocationZ(b) then
            set height=GetLocationZ(b)
            set zvelocity=- 0.5 * zvelocity
        else
            if GetTerrainCliffLevelBJ(b) > GetTerrainCliffLevelBJ(a) then
                call KillUnit(l)
            endif
            
    //Else the collision is a result of the terrain
    //set height=GetLocationZ(b)
    //set zvelocity=-0.5*zvelocity
    //set c= 360+2*DetermineNormal(GetUnitX(l),GetUnitY(l),zforce*Cos(GetUnitFacing(l)*bj_DEGTORAD),zforce*Sin(GetUnitFacing(l)*bj_DEGTORAD),height)-c
        endif
    endif
    
    //if IsPointPathable(GetLocationX(b), GetLocationY(b), false) == false then
        //call KillUnit(l)
    //endif

    call SetUnitPositionLoc(l, b)
    call SetUnitFacing(l, c)
    call RemoveLocation(b)
    call RemoveLocation(a)
    
    if IsUnitDeadBJ(l) then
        call PauseTimer(k)
        call DestroyTimer(k)
    endif
    
    call SaveReal((udg_hash), GetHandleId(k), StringHash("height"), height + zvelocity / 25.0) // INLINED!!
    call SaveReal((udg_hash), GetHandleId(k), StringHash("zvelocity"), zvelocity - 40) // INLINED!!
    call SaveReal((udg_hash), GetHandleId(k), StringHash("angle"), c) // INLINED!!
endfunction


function Trig_Grenade_Actions takes nothing returns nothing
    local timer k=CreateTimer()
    local real r
    local unit p=GetSpellAbilityUnit()

    if TimerGetElapsed(udg_GameTimer) - udg_Unit_LastGrenadeTime[(GetUnitUserData((p)))] < 1.0 then // INLINED!!
        call DestroyTimer(k)
        return
    endif
    
    set udg_Unit_LastGrenadeTime[(GetUnitUserData((p)))]=TimerGetElapsed(udg_GameTimer) // INLINED!!
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPoint2=GetSpellTargetLoc()
    set r=DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2)
    if r > 900.0 then
        set r=900.0
        set udg_TempPoint4=PolarProjectionBJ(udg_TempPoint, 900.0, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
        call BasicAI_IssueDangerArea(udg_TempPoint4 , 220.0 , 2.1)
        call RemoveLocation(udg_TempPoint4)
    else
        call BasicAI_IssueDangerArea(udg_TempPoint2 , 220.0 , 2.1)
    endif
    
    call SetUnitAnimation(GetSpellAbilityUnit(), "spell throw")
        call SaveReal((udg_hash), GetHandleId(k), StringHash("height"), GetLocationZ(udg_TempPoint)) // INLINED!!
            call SaveReal((udg_hash), GetHandleId(k), StringHash("force"), r / 900.0 * 450 / 25.0) // INLINED!!
    set udg_TempBool=false
    call CreateNUnitsAtLoc(1, 'e007', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    call RemoveLocation(udg_TempPoint3)
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), GetLastCreatedUnit()) // INLINED!!
    call TimerStart(k, 0.04, true, function Grenade_Slide)
    call SaveReal((udg_hash), GetHandleId(k), StringHash("angle"), GetUnitFacing(GetLastCreatedUnit())) // INLINED!!
    call SaveReal((udg_hash), GetHandleId(k), StringHash("zvelocity"), 500.0) // INLINED!!
endfunction

//===========================================================================
function InitTrig_Grenade takes nothing returns nothing
    set gg_trg_Grenade=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Grenade, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Grenade, Condition(function Trig_Grenade_Conditions))
    call TriggerAddAction(gg_trg_Grenade, function Trig_Grenade_Actions)
endfunction


//===========================================================================
// Trigger: BurstGrenade
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_BGrenade_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A06O' ) ) then
        return false
    endif
    return true
endfunction

function BGrenade_Slide takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit l=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
local real zvelocity=LoadReal((udg_hash), GetHandleId(k), StringHash("zvelocity")) // INLINED!!
local real c=LoadReal((udg_hash), GetHandleId(k), StringHash("angle")) // INLINED!!
local real height=LoadReal((udg_hash), GetHandleId(k), StringHash("height")) // INLINED!!
local real zforce=LoadReal((udg_hash), GetHandleId(k), StringHash("force")) // INLINED!!
local location a=GetUnitLoc(l)
local location b=PolarProjectionBJ(a, zforce, c)
call SetUnitFlyHeight(l, height - GetLocationZ(a), 0)
if GetLocationZ(b) > height then
//If the collision is a result of the projectile falling then...
if GetLocationZ(a) == GetLocationZ(b) then
set height=GetLocationZ(b)
set zvelocity=- 0.5 * zvelocity
else
if GetTerrainCliffLevelBJ(b) > GetTerrainCliffLevelBJ(a) then
call KillUnit(l)
endif
//Else the collision is a result of the terrain
//set height=GetLocationZ(b)
//set zvelocity=-0.5*zvelocity
//set c= 360+2*DetermineNormal(GetUnitX(l),GetUnitY(l),zforce*Cos(GetUnitFacing(l)*bj_DEGTORAD),zforce*Sin(GetUnitFacing(l)*bj_DEGTORAD),height)-c
endif
endif
//if IsPointPathable(GetLocationX(b), GetLocationY(b), false) == false then
//call KillUnit(l)
//endif
call SetUnitPositionLoc(l, b)
call SetUnitFacing(l, c)
call RemoveLocation(b)
call RemoveLocation(a)
if IsUnitDeadBJ(l) then
call PauseTimer(k)
call DestroyTimer(k)
endif
call SaveReal((udg_hash), GetHandleId(k), StringHash("height"), height + zvelocity / 25.0) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("zvelocity"), zvelocity - 40) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("angle"), c) // INLINED!!
endfunction


function Trig_BGrenade_Actions takes nothing returns nothing
local timer k=CreateTimer()
local real r
local unit p=GetSpellAbilityUnit()
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPoint2=GetSpellTargetLoc()
    set r=DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2)
    if r > 900.0 then
    set r=900.0
    endif
    call SetUnitAnimation(GetSpellAbilityUnit(), "spell throw")
        call SaveReal((udg_hash), GetHandleId(k), StringHash("height"), GetLocationZ(udg_TempPoint)) // INLINED!!
            call SaveReal((udg_hash), GetHandleId(k), StringHash("force"), r / 900.0 * 225 / 25.0 * GetRandomReal(0.5, 2)) // INLINED!!
    set udg_TempBool=false
    call CreateNUnitsAtLoc(1, 'e007', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2) + GetRandomReal(- 15.0, 15.0))
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    call RemoveLocation(udg_TempPoint3)
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), GetLastCreatedUnit()) // INLINED!!
    call TimerStart(k, 0.04, true, function BGrenade_Slide)
    call SaveReal((udg_hash), GetHandleId(k), StringHash("angle"), GetUnitFacing(GetLastCreatedUnit())) // INLINED!!
    call SaveReal((udg_hash), GetHandleId(k), StringHash("zvelocity"), 500.0 + GetRandomReal(- 150.0, 150.0)) // INLINED!!
    call UnitAddAbility(GetLastCreatedUnit(), 'A03G')
    call UnitApplyTimedLife(GetLastCreatedUnit(), 'B000', 4 + GetRandomReal(- 0.6, 0.6))
endfunction

function BGrenade takes nothing returns nothing
local integer i=0
loop
exitwhen i > 7
call Trig_BGrenade_Actions()
set i=i + 1
endloop
endfunction

//===========================================================================
function InitTrig_BurstGrenade takes nothing returns nothing
    set gg_trg_BurstGrenade=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_BurstGrenade, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_BurstGrenade, Condition(function Trig_BGrenade_Conditions))
    call TriggerAddAction(gg_trg_BurstGrenade, function BGrenade)
endfunction


//===========================================================================
// Trigger: ThingyCannon
//===========================================================================
function Trig_ThingyCannon_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07R' ) ) then
        return false
    endif
    return true
endfunction


function ThingyCannon_Asplode takes nothing returns nothing
    local timer k=GetExpiredTimer()
    local location b=LoadLocationHandle((udg_hash), GetHandleId(k), StringHash("loc")) // INLINED!!
    local player p=LoadPlayerHandle((udg_hash), GetHandleId(k), StringHash("player")) // INLINED!!
    
    call DamageAreaForPlayerTK(p , 150.0 , 220.0 , GetLocationX(b) , GetLocationY(b))
    call AddSpecialEffectLoc("war3mapImported\\UDeath.MDX", b)
    call SFXThreadClean()
    call RemoveLocation(b)
    call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
    call DestroyTimer(k)
endfunction

function Trig_ThingyCannon_Actions takes nothing returns nothing
    local location b=GetSpellTargetLoc()
    local location c=GetUnitLoc(GetSpellAbilityUnit())
    local timer k=CreateTimer()
    local unit a=CreateUnitAtLoc(Player(PLAYER_NEUTRAL_PASSIVE), 'e02L', c, GetRandomDirectionDeg())
    
    call SaveLocationHandle((udg_hash), GetHandleId(k), StringHash("loc"), b) // INLINED!!
    call SavePlayerHandle((udg_hash), GetHandleId(k), StringHash("player"), GetOwningPlayer(GetSpellAbilityUnit())) // INLINED!!
    call TimerStart(k, 2.3, false, function ThingyCannon_Asplode)
    call AddSpecialEffectLoc("Abilities\\Spells\\Undead\\DeathCoil\\DeathCoilSpecialArt.mdl", c)
    call SFXThreadClean()
    call BasicAI_IssueDangerArea(b , 220.0 , 2.4)
    call SetUnitFlyHeight(a, 3500, 600.0)
    call SizeUnitOverTime(a , 2.3 , 0.1 , 2.5 , false) //(unit, duration, start, end, bool)
    call FadeUnitOverTime(a , 2.4 , true)
    call RemoveLocation(c)
endfunction


//===========================================================================
function InitTrig_ThingyCannon takes nothing returns nothing
    set gg_trg_ThingyCannon=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ThingyCannon, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ThingyCannon, Condition(function Trig_ThingyCannon_Conditions))
    call TriggerAddAction(gg_trg_ThingyCannon, function Trig_ThingyCannon_Actions)
endfunction


//===========================================================================
// Trigger: VoidCannon
//===========================================================================
function Trig_VoidCannon_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0A6' ) ) then //TODO
        return false
    endif
    return true
endfunction


function VoidCannon_Explode takes nothing returns nothing
    local timer k=GetExpiredTimer()
    local location b=LoadLocationHandle((udg_hash), GetHandleId(k), StringHash("loc")) // INLINED!!
    local player p=LoadPlayerHandle((udg_hash), GetHandleId(k), StringHash("player")) // INLINED!!
    
    //local unit vfx1
    //local unit vfx2
    
    //vfx1 = CreateUnitAtLoc(Player(PLAYER_NEUTRAL_PASSIVE), 'e03l', b, GetRandomDirectionDeg())
    //vfx2 = CreateUnitAtLoc(Player(PLAYER_NEUTRAL_PASSIVE), 'e03J', b, GetRandomDirectionDeg())
    
    call CreateUnitAtLoc(Player(PLAYER_NEUTRAL_PASSIVE), 'e03I', b, GetRandomDirectionDeg())
    call CreateUnitAtLoc(Player(PLAYER_NEUTRAL_PASSIVE), 'e03J', b, GetRandomDirectionDeg())
    
    call DamageAreaForPlayerTK(p , 150.0 , 700.0 , GetLocationX(b) , GetLocationY(b))
    call RemoveLocation(b)
    call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
    call DestroyTimer(k)
endfunction

function Trig_VoidCannon_Actions takes nothing returns nothing
    local location b=GetSpellTargetLoc()
    local location c=GetUnitLoc(GetSpellAbilityUnit())
    local timer k=CreateTimer()
    local unit a=CreateUnitAtLoc(Player(PLAYER_NEUTRAL_PASSIVE), 'e03F', c, GetRandomDirectionDeg())
    
    //SFX
    call SetSoundPositionLocBJ(gg_snd_ObsidianAvengerDeath1, c, 0)
    call PlaySoundBJ(gg_snd_ObsidianAvengerDeath1)
    
    call SaveLocationHandle((udg_hash), GetHandleId(k), StringHash("loc"), b) // INLINED!!
    call SavePlayerHandle((udg_hash), GetHandleId(k), StringHash("player"), GetOwningPlayer(GetSpellAbilityUnit())) // INLINED!!
    call TimerStart(k, 2.3, false, function VoidCannon_Explode)
    call AddSpecialEffectLoc("Abilities\\Spells\\Undead\\DeathCoil\\DeathCoilSpecialArt.mdl", c)
    call AddSpecialEffectLoc("Abilities\\Spells\\Other\\HowlOfTerror\\HowlCaster.mdl", c)
    call SFXThreadClean()
    call BasicAI_IssueDangerArea(b , 220.0 , 2.4)
    call SetUnitFlyHeight(a, 3500, 600.0)
    //call SizeUnitOverTime(a,2.3,6.0,6.0,false)//(unit, duration, start, end, bool)
    call FadeUnitOverTime(a , 2.4 , true)
    call RemoveLocation(c)
endfunction


//===========================================================================
function InitTrig_VoidCannon takes nothing returns nothing
    set gg_trg_VoidCannon=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_VoidCannon, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_VoidCannon, Condition(function Trig_VoidCannon_Conditions))
    call TriggerAddAction(gg_trg_VoidCannon, function Trig_VoidCannon_Actions)
endfunction


//===========================================================================
// Trigger: SantaHat
//===========================================================================
function Trig_SantaHat_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I01J' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SantaHat_Actions takes nothing returns nothing
    call SetPlayerTechResearchedSwap('R00B', 1, GetOwningPlayer(GetManipulatingUnit()))
    call SetItemDroppableBJ(GetManipulatedItem(), false)
endfunction

//===========================================================================
function InitTrig_SantaHat takes nothing returns nothing
    set gg_trg_SantaHat=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SantaHat, EVENT_PLAYER_UNIT_PICKUP_ITEM)
    call TriggerAddCondition(gg_trg_SantaHat, Condition(function Trig_SantaHat_Conditions))
    call TriggerAddAction(gg_trg_SantaHat, function Trig_SantaHat_Actions)
endfunction

//===========================================================================
// Trigger: ConsoleRepair
//===========================================================================
function Trig_ConsoleRepair_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A06Q' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ConsoleRepair_Func003Func001C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A06R', GetEnumUnit()) == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ConsoleRepair_Func003A takes nothing returns nothing
    if ( Trig_ConsoleRepair_Func003Func001C() ) then
        call RemoveItem(GetItemOfTypeFromUnitBJ(GetSpellAbilityUnit(), 'I01R'))
        call SetUnitVertexColorBJ(GetEnumUnit(), 100, 100, 100, 0)
        call SetUnitLifePercentBJ(GetEnumUnit(), 100)
        call EnableTrigger(LoadTriggerHandle((udg_hash), GetHandleId(GetEnumUnit()), StringHash("console_k"))) // INLINED!!
        call EnableTrigger(LoadTriggerHandle((udg_hash), GetHandleId(GetEnumUnit()), StringHash("console_m"))) // INLINED!!
        call UnitRemoveAbilityBJ('Avul', GetEnumUnit())
        call UnitRemoveAbilityBJ('A06R', GetEnumUnit())
    else
    endif
endfunction

function Trig_ConsoleRepair_Actions takes nothing returns nothing
    call ForGroupBJ(GetUnitsInRangeOfLocAll(200.00, GetSpellTargetLoc()), function Trig_ConsoleRepair_Func003A)
endfunction

//===========================================================================
function InitTrig_ConsoleRepair takes nothing returns nothing
    set gg_trg_ConsoleRepair=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ConsoleRepair, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ConsoleRepair, Condition(function Trig_ConsoleRepair_Conditions))
    call TriggerAddAction(gg_trg_ConsoleRepair, function Trig_ConsoleRepair_Actions)
endfunction

//===========================================================================
// Trigger: ElectromagneticGrenade
//===========================================================================
function Trig_ElectromagneticGrenade_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSummonedUnit()) == 'e00X' ) ) then
        return false
    endif
    return true
endfunction

function EMP_Grenade_Disable_Vendor takes nothing returns nothing
local unit a=udg_TempUnit
if GetUnitAbilityLevel(GetEnumUnit(), 'A079') > 0 then
call ConsoleDisable(GetEnumUnit())
endif
  call PauseUnitForPeriod(GetEnumUnit() , 120.0)
  call SetUnitVertexColor(a, 50, 50, 50, 256)
  call PolledWait(120.00)
    call SetUnitVertexColor(a, 255, 255, 255, 256)
    if GetUnitAbilityLevel(a, 'A079') > 0 then
call ConsoleEnable(a)
endif
endfunction

function Trig_ElectromagneticGrenade_Func005A takes nothing returns nothing
    set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
    call SetUnitManaBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit()) - ( ( 250.00 - DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2) ) / 1.60 ) ))
  if GetUnitAbilityLevel(GetEnumUnit(), 'A07Q') >= 1 or GetUnitAbilityLevel(GetEnumUnit(), 'A079') >= 1 then
        set udg_TempUnit=GetEnumUnit()
        call ExecuteFunc("EMP_Grenade_Disable_Vendor")
  endif
  if (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) then // INLINED!!
  call DestroyUnitBarStop(GetEnumUnit())
  call SaveBoolean((udg_hash), GetHandleId(GetEnumUnit()), StringHash("LaunchCleared"), false) // INLINED!!
call AddSpecialEffectLoc("Abilities\\Spells\\Human\\Thunderclap\\ThunderClapCaster.mdl", udg_TempPoint2)
call SFXThreadClean()
  endif
    call RemoveLocation(udg_TempPoint2)
endfunction

function Trig_ElectromagneticGrenade_Actions takes nothing returns nothing
local location a=GetUnitLoc(GetSummonedUnit())
    set udg_TempUnitGroup=GetUnitsInRangeOfLocAll(250.00, a)
    call CreateNUnitsAtLoc(1, 'e00Y', Player(PLAYER_NEUTRAL_AGGRESSIVE), a, bj_UNIT_FACING)
    //Silence?
    call IssuePointOrderLocBJ(GetLastCreatedUnit(), "silence", a)
    set udg_TempPoint=a
    call ForGroupBJ(udg_TempUnitGroup, function Trig_ElectromagneticGrenade_Func005A)
    call DestroyGroup(udg_TempUnitGroup)
    call RemoveLocation(a)
endfunction

//===========================================================================
function InitTrig_ElectromagneticGrenade takes nothing returns nothing
    set gg_trg_ElectromagneticGrenade=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ElectromagneticGrenade, EVENT_PLAYER_UNIT_SUMMON)
    call TriggerAddCondition(gg_trg_ElectromagneticGrenade, Condition(function Trig_ElectromagneticGrenade_Conditions))
    call TriggerAddAction(gg_trg_ElectromagneticGrenade, function Trig_ElectromagneticGrenade_Actions)
endfunction


//===========================================================================
// Trigger: EMGrenadeForceKill
//===========================================================================
function Trig_EMGrenadeForceKill_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetEnteringUnit()) == 'e00W' ) ) then
        return false
    endif
    return true
endfunction

function Trig_EMGrenadeForceKill_Actions takes nothing returns nothing
    call UnitApplyTimedLifeBJ(1.23, 'BTLF', GetEnteringUnit())
endfunction

//===========================================================================
function InitTrig_EMGrenadeForceKill takes nothing returns nothing
    set gg_trg_EMGrenadeForceKill=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_EMGrenadeForceKill, GetPlayableMapRect())
    call TriggerAddCondition(gg_trg_EMGrenadeForceKill, Condition(function Trig_EMGrenadeForceKill_Conditions))
    call TriggerAddAction(gg_trg_EMGrenadeForceKill, function Trig_EMGrenadeForceKill_Actions)
endfunction

//===========================================================================
// Trigger: Tetrabin
//===========================================================================
function Trig_Tetrabin_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I01K' ) ) then
        return false
    endif
    if ( not ( GetTriggerUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] ) ) then
        return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func005Func005C takes nothing returns boolean
    if not ( IsPlayerAlien(GetOwningPlayer(GetTriggerUnit())) ) then
    return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func005Func006C takes nothing returns boolean
    if not ( IsPlayerMutant(GetOwningPlayer(GetTriggerUnit())) ) then
    return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func005C takes nothing returns boolean
    if not ( IsPlayerNonhuman(GetOwningPlayer(GetTriggerUnit())) ) then
    return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func008C takes nothing returns boolean
    if ( not ( GetRandomInt(1, 2) != 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func010Func001Func001Func002C takes nothing returns boolean
    if not ( GetLocalPlayer() == GetOwningPlayer(GetManipulatingUnit()) ) then
    return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func010Func001Func001Func003Func001Func001Func001C takes nothing returns boolean
    if not ( GetLocalPlayer() == GetOwningPlayer(GetManipulatingUnit()) ) then
    return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func010Func001Func001Func003Func001Func001Func002Func001Func003Func002C takes nothing returns boolean
    if not ( GetLocalPlayer() == GetOwningPlayer(GetManipulatingUnit()) ) then
    return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func010Func001Func001Func003Func001Func001Func002Func001Func003C takes nothing returns boolean
    if ( not ( GetRandomInt(1, 2) == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func010Func001Func001Func003Func001Func001Func002Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 7 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func010Func001Func001Func003Func001Func001Func002C takes nothing returns boolean
    if ( not ( udg_TempInt == 6 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func010Func001Func001Func003Func001Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 5 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func010Func001Func001Func003Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 4 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func010Func001Func001Func003C takes nothing returns boolean
    if ( not ( udg_TempInt == 3 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func010Func001Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func010Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Tetrabin_Func010C takes nothing returns boolean
    if ( not ( udg_TempInt == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Tetrabin_Actions takes nothing returns nothing
    // Addition: If nonhuman it is destroyed
    if ( Trig_Tetrabin_Func005C() ) then
        call RemoveItem(GetManipulatedItem())
        if ( Trig_Tetrabin_Func005Func005C() ) then
            set udg_UpgradePointsAlien=( udg_UpgradePointsAlien + 700.00 )
        else
        endif
        if ( Trig_Tetrabin_Func005Func006C() ) then
            set udg_UpgradePointsMutant=( udg_UpgradePointsMutant + 700.00 )
        else
        endif
        return
    else
    endif
    // ------
    call SetPlayerTechResearchedSwap('R00A', ( GetPlayerTechCountSimple('R00A', GetOwningPlayer(GetTriggerUnit())) + 1 ), GetOwningPlayer(GetTriggerUnit()))
    if ( Trig_Tetrabin_Func008C() ) then
        set udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]=( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] + 1 )
    else
    endif
    set udg_TempInt=udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]
    if ( Trig_Tetrabin_Func010C() ) then
    else
        if ( Trig_Tetrabin_Func010Func001C() ) then
            call CameraSetTargetNoiseForPlayer(GetOwningPlayer(GetTriggerUnit()), 120.00, 1.20)
        else
            if ( Trig_Tetrabin_Func010Func001Func001C() ) then
                call CameraSetTargetNoiseForPlayer(GetOwningPlayer(GetTriggerUnit()), 240.00, 2.40)
                if ( Trig_Tetrabin_Func010Func001Func001Func002C() ) then
                        call NewSoundEnvironment("psychotic")
                else
                endif
            else
                if ( Trig_Tetrabin_Func010Func001Func001Func003C() ) then
                    call CameraSetTargetNoiseForPlayer(GetOwningPlayer(GetTriggerUnit()), 480.00, 4.80)
                else
                    if ( Trig_Tetrabin_Func010Func001Func001Func003Func001C() ) then
                        call CameraSetTargetNoiseForPlayer(GetOwningPlayer(GetTriggerUnit()), 920.00, 9.20)
                    else
                        if ( Trig_Tetrabin_Func010Func001Func001Func003Func001Func001C() ) then
                            if ( Trig_Tetrabin_Func010Func001Func001Func003Func001Func001Func001C() ) then
                                call SetDayNightModels("r.mdx", "r.mdx")
                            else
                            endif
                        else
                            if ( Trig_Tetrabin_Func010Func001Func001Func003Func001Func001Func002C() ) then
                                call CreateFogModifierRectBJ(true, GetOwningPlayer(GetManipulatingUnit()), FOG_OF_WAR_MASKED, GetPlayableMapRect())
                            else
                                if ( Trig_Tetrabin_Func010Func001Func001Func003Func001Func001Func002Func001C() ) then
                                    call CameraSetTargetNoiseForPlayer(GetOwningPlayer(GetTriggerUnit()), 1500.00, 15.00)
                                    if ( Trig_Tetrabin_Func010Func001Func001Func003Func001Func001Func002Func001Func003C() ) then
                                        if ( Trig_Tetrabin_Func010Func001Func001Func003Func001Func001Func002Func001Func003Func002C() ) then
                                            call ExecuteFunc("TETRABINCRASHESTHEGAME")
                                        else
                                        endif
                                    else
                                        call ExplodeUnitBJ(udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetManipulatingUnit()))])
                                    endif
                                else
                                    call ExplodeUnitBJ(udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetManipulatingUnit()))])
                                endif
                            endif
                        endif
                    endif
                endif
            endif
        endif
    endif
endfunction

//===========================================================================
function InitTrig_Tetrabin takes nothing returns nothing
    set gg_trg_Tetrabin=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Tetrabin, EVENT_PLAYER_UNIT_USE_ITEM)
    call TriggerAddCondition(gg_trg_Tetrabin, Condition(function Trig_Tetrabin_Conditions))
    call TriggerAddAction(gg_trg_Tetrabin, function Trig_Tetrabin_Actions)
endfunction

//===========================================================================
// Trigger: Snoeglay Life Gain
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_Snoeglay_Life_Gain_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I024' ) ) then
        return false
    endif
    if ( not ( GetTriggerUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] ) ) then
        return false
    endif
    if ( not ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == false ) ) then
        return false
    endif
    if ( not ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == false ) ) then
        return false
    endif
    if ( not ( udg_HiddenAndroid != GetOwningPlayer(GetTriggerUnit()) ) ) then
        return false
    endif
    if ( not ( udg_Mutant != GetOwningPlayer(GetTriggerUnit()) ) ) then
        return false
    endif
    if ( not ( udg_Parasite != GetOwningPlayer(GetTriggerUnit()) ) ) then
        return false
    endif
    
    set udg_SnoeglayBonus[GetPlayerId(GetOwningPlayer(GetTriggerUnit()))]=udg_SnoeglayBonus[GetPlayerId(GetOwningPlayer(GetTriggerUnit()))] + 1
    if udg_SnoeglayBonus[GetPlayerId(GetOwningPlayer(GetTriggerUnit()))] == 3 then
        set udg_SnoeglayBonus[GetPlayerId(GetOwningPlayer(GetTriggerUnit()))]=0
        return true
    else
        return false
    endif
endfunction

function Trig_Snoeglay_Life_Gain_Actions takes nothing returns nothing
    call SetPlayerTechResearchedSwap('R00C', ( GetPlayerTechCountSimple('R00C', GetOwningPlayer(GetTriggerUnit())) + 1 ), GetOwningPlayer(GetTriggerUnit()))
endfunction

//===========================================================================
function InitTrig_Snoeglay_Life_Gain takes nothing returns nothing
    set gg_trg_Snoeglay_Life_Gain=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Snoeglay_Life_Gain, EVENT_PLAYER_UNIT_USE_ITEM)
    call TriggerAddCondition(gg_trg_Snoeglay_Life_Gain, Condition(function Trig_Snoeglay_Life_Gain_Conditions))
    call TriggerAddAction(gg_trg_Snoeglay_Life_Gain, function Trig_Snoeglay_Life_Gain_Actions)
endfunction


//===========================================================================
// Trigger: Phase Cloak
//===========================================================================
function Trig_Phase_Cloak_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I025' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Phase_Cloak_Actions takes nothing returns nothing
    call UnitAddAbilityForPeriod(GetManipulatingUnit() , 'A08D' , 5.0)
endfunction

//===========================================================================
function InitTrig_Phase_Cloak takes nothing returns nothing
    set gg_trg_Phase_Cloak=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Phase_Cloak, EVENT_PLAYER_UNIT_USE_ITEM)
    call TriggerAddCondition(gg_trg_Phase_Cloak, Condition(function Trig_Phase_Cloak_Conditions))
    call TriggerAddAction(gg_trg_Phase_Cloak, function Trig_Phase_Cloak_Actions)
endfunction

//===========================================================================
// Trigger: WormFood
//===========================================================================
function Trig_WormFood_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A03W' ) ) then
        return false
    endif
    return true
endfunction

function Trig_WormFood_Func003Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) == GetOwningPlayer(gg_unit_n006_0218) ) ) then
        return false
    endif
    return true
endfunction

function Trig_WormFood_Func003Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'n006' ) ) then
        return false
    endif
    return true
endfunction

function Trig_WormFood_Func003Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'h02E' ) ) then
        return false
    endif
    return true
endfunction

function Trig_WormFood_Func003C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'n003' ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetSpellTargetUnit()) == Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    return true
endfunction

function Trig_WormFood_Actions takes nothing returns nothing
    if ( Trig_WormFood_Func003C() ) then
        call SetUnitOwner(GetSpellTargetUnit(), GetOwningPlayer(GetSpellAbilityUnit()), true)
        call IssueTargetOrderBJ(GetSpellTargetUnit(), "move", GetSpellAbilityUnit())
    else
        if ( Trig_WormFood_Func003Func001C() ) then
            call SetUnitOwner(GetSpellTargetUnit(), GetOwningPlayer(GetSpellAbilityUnit()), true)
            call IssueTargetOrderBJ(GetSpellTargetUnit(), "move", GetSpellAbilityUnit())
            call UnitApplyTimedLife(GetSpellTargetUnit(), 'Broa', 25)
        else
            if ( Trig_WormFood_Func003Func001Func001C() ) then
                if ( Trig_WormFood_Func003Func001Func001Func001C() ) then
                    set udg_TempPoint=GetUnitLoc(GetSpellTargetUnit())
                    call CreateTextTagLocBJ("TRIGSTR_2345", udg_TempPoint, 0, 10, 100, 100, 100, 0)
                    call ShowTextTagForceBJ(true, GetLastCreatedTextTag(), GetPlayersAll())
                    call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 32.00, 90)
                    call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
                    call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 7.00)
                    call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 5.00)
                    call RemoveLocation(udg_TempPoint)
                    call SetUnitOwner(GetSpellTargetUnit(), GetOwningPlayer(GetSpellAbilityUnit()), true)
                    call IssueTargetOrderBJ(GetSpellTargetUnit(), "move", GetSpellAbilityUnit())
                else
                    set udg_TempPoint=GetUnitLoc(GetSpellTargetUnit())
                    call CreateTextTagLocBJ("TRIGSTR_2344", udg_TempPoint, 0, 10, 100, 100, 100, 0)
                    call ShowTextTagForceBJ(true, GetLastCreatedTextTag(), GetPlayersAll())
                    call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 32.00, 90)
                    call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
                    call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 7.00)
                    call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 5.00)
                    call RemoveLocation(udg_TempPoint)
                    call SetUnitOwner(GetSpellTargetUnit(), GetOwningPlayer(GetSpellAbilityUnit()), true)
                    call IssueTargetOrderBJ(GetSpellTargetUnit(), "move", GetSpellAbilityUnit())
                endif
            else
            endif
        endif
    endif
endfunction

//===========================================================================
function InitTrig_WormFood takes nothing returns nothing
    set gg_trg_WormFood=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_WormFood, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_WormFood, Condition(function Trig_WormFood_Conditions))
    call TriggerAddAction(gg_trg_WormFood, function Trig_WormFood_Actions)
endfunction

//===========================================================================
// Trigger: Solace Shield
//===========================================================================
//TESH.scrollpos=48
//TESH.alwaysfold=0
function Trig_Solace_Shield_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A054' ) ) then
        return false
    endif
    return true
endfunction
function CreateBarSolaceShield takes integer howmanybars,integer maximumbars,unit r returns texttag
local string text= "|c000000FF"
local integer i=0
loop
exitwhen i > howmanybars
set i=i + 1
set text=text + "I"
endloop
set text=text + "|r"
set i=0
loop
exitwhen i > ( maximumbars - howmanybars )
set i=i + 1
set text=text + "I"
endloop
call CreateTextTagUnitBJ(text, r, GetUnitFlyHeight(r), 8, 255, 255, 255, 0)
call SetTextTagPermanent(bj_lastCreatedTextTag, false)
call SetTextTagLifespan(bj_lastCreatedTextTag, 0.5)
    call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 0.00)
return bj_lastCreatedTextTag
endfunction
function ShieldDamaged takes nothing returns nothing
call BlockDamage(GetTriggerUnit() , GetEventDamage())
set udg_ShieldHP[(GetUnitUserData((GetTriggerUnit())))]=udg_ShieldHP[(GetUnitUserData((GetTriggerUnit())))] - GetEventDamage() // INLINED!!
if udg_ShieldHP[(GetUnitUserData((GetTriggerUnit())))] <= 0.00 then // INLINED!!
call DestroyTrigger(GetTriggeringTrigger())
call UnitRemoveBuffBJ('B00X', GetTriggerUnit())
set udg_ShieldHP[(GetUnitUserData((GetTriggerUnit())))]=0.00 // INLINED!!
else
call CreateBarSolaceShield(R2I(udg_ShieldHP[(GetUnitUserData((GetTriggerUnit())))] / 10) , 30 , GetTriggerUnit()) // INLINED!!
endif
if GetUnitState(GetTriggerUnit(), UNIT_STATE_LIFE) <= 0 then
call ReviveHero(GetTriggerUnit(), GetUnitX(GetTriggerUnit()), GetUnitY(GetTriggerUnit()), false)
endif
endfunction

function SolaceShield_Disable takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit x=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("unit")) // INLINED!!
set udg_ShieldHP[(GetUnitUserData((x)))]=0 // INLINED!!
call UnitDamageTarget(x, x, 0.00, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
call DestroyTimer(k)
endfunction

function Trig_Solace_Shield_Actions takes nothing returns nothing
local trigger t
local unit x= GetSpellTargetUnit()
local timer k=LoadTimerHandle((udg_hash), GetHandleId(GetSpellTargetUnit()), StringHash("Solace_Shield_Disable")) // INLINED!!
if k == null then
set k=CreateTimer()
call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("unit"), GetSpellTargetUnit()) // INLINED!!
endif
if udg_ShieldHP[(GetUnitUserData((GetSpellTargetUnit())))] != 0.00 then // INLINED!!
return
endif
set t=CreateTrigger()
    call TriggerRegisterUnitEvent(t, GetSpellTargetUnit(), EVENT_UNIT_DAMAGED)
call TriggerAddAction(t, function ShieldDamaged)
set udg_ShieldHP[(GetUnitUserData((GetSpellTargetUnit())))]=300 + udg_ShieldHP[(GetUnitUserData((GetSpellTargetUnit())))] // INLINED!!
call TimerStart(k, 15.0, false, function SolaceShield_Disable)
//call PolledWait(15.0)

endfunction

//===========================================================================
function InitTrig_Solace_Shield takes nothing returns nothing
    set gg_trg_Solace_Shield=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Solace_Shield, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Solace_Shield, Condition(function Trig_Solace_Shield_Conditions))
    call TriggerAddAction(gg_trg_Solace_Shield, function Trig_Solace_Shield_Actions)
endfunction


//===========================================================================
// Trigger: TrackingDevice
//===========================================================================
function Trig_TrackingDevice_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A01G' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TrackingDevice_Func006Func002Func002Func001Func001001001 takes nothing returns boolean
    return ( udg_Parasite == GetFilterPlayer() )
endfunction

function Trig_TrackingDevice_Func006Func002Func002Func001Func002001001 takes nothing returns boolean
    return ( GetOwningPlayer(GetSpellAbilityUnit()) == GetFilterPlayer() )
endfunction

function Trig_TrackingDevice_Func006Func002Func002Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_TrackingDevice_Func006Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_TrackingDevice_Func006Func002C takes nothing returns boolean
    if ( not ( GetEnumUnit() != GetManipulatingUnit() ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetEnumUnit()) != Player(PLAYER_NEUTRAL_AGGRESSIVE) ) ) then
        return false
    endif
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == GetEnumUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_TrackingDevice_Func006Func003Func002Func001Func001001001 takes nothing returns boolean
    return ( udg_Parasite == GetFilterPlayer() )
endfunction

function Trig_TrackingDevice_Func006Func003Func002Func001Func002001001 takes nothing returns boolean
    return ( GetOwningPlayer(GetSpellAbilityUnit()) == GetFilterPlayer() )
endfunction

function Trig_TrackingDevice_Func006Func003Func002Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_TrackingDevice_Func006Func003Func002C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_TrackingDevice_Func006Func003C takes nothing returns boolean
    if not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) and ShipHasUnits(GetEnumUnit()) ) then // INLINED!!
    return false
    endif
    return true
endfunction

function Trig_TrackingDevice_Func006A takes nothing returns nothing
    set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
    if ( Trig_TrackingDevice_Func006Func002C() ) then
        set udg_TempBool=UnitInSectorLax(GetEnumUnit() , udg_TempInt)
        if ( Trig_TrackingDevice_Func006Func002Func002C() ) then
            if ( Trig_TrackingDevice_Func006Func002Func002Func001C() ) then
                call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_TrackingDevice_Func006Func002Func002Func001Func002001001)), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 50.00, 100, 50.00)
            else
                call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_TrackingDevice_Func006Func002Func002Func001Func001001001)), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 50.00, 100, 50.00)
            endif
        else
        endif
    else
    endif
    if ( Trig_TrackingDevice_Func006Func003C() ) then
        set udg_TempBool=UnitInSector(GetEnumUnit() , udg_TempInt)
        if ( Trig_TrackingDevice_Func006Func003Func002C() ) then
            if ( Trig_TrackingDevice_Func006Func003Func002Func001C() ) then
                call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_TrackingDevice_Func006Func003Func002Func001Func002001001)), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100.00, 25.00, 50.00)
            else
                call PingMinimapLocForForceEx(GetPlayersMatching(Condition(function Trig_TrackingDevice_Func006Func003Func002Func001Func001001001)), udg_TempPoint2, 7.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100.00, 25.00, 50.00)
            endif
        else
        endif
    else
    endif
    call RemoveLocation(udg_TempPoint2)
endfunction

function Trig_TrackingDevice_Func009Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) != GetOwningPlayer(GetSpellAbilityUnit()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_TrackingDevice_Func009A takes nothing returns nothing
    if ( Trig_TrackingDevice_Func009Func001C() ) then
        call UnitRemoveAbilityBJ('A08D', GetEnumUnit())
    else
    endif
endfunction

function Trig_TrackingDevice_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempUnitGroup=GetUnitsInRangeAndShips(udg_TempPoint , 8000.0)
    set udg_TempInt=GetSector(udg_TempPoint)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_TrackingDevice_Func006A)
        call DestroyGroup(udg_TempUnitGroup)
    set udg_TempUnitGroup=GetUnitsInRangeAndShips(udg_TempPoint , 900.0)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_TrackingDevice_Func009A)
        call DestroyGroup(udg_TempUnitGroup)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_TrackingDevice takes nothing returns nothing
    set gg_trg_TrackingDevice=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_TrackingDevice, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_TrackingDevice, Condition(function Trig_TrackingDevice_Conditions))
    call TriggerAddAction(gg_trg_TrackingDevice, function Trig_TrackingDevice_Actions)
endfunction

//===========================================================================
// Trigger: InventoryScanner
//===========================================================================
function Trig_InventoryScanner_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A08Y' ) ) then
        return false
    endif
    return true
endfunction

function Trig_InventoryScanner_Actions takes nothing returns nothing
    call DisplayTextToPlayer(GetOwningPlayer(GetSpellTargetUnit()), 0, 0, "|cFFFF0000Your inventory has been scanned.|r")
    call DisplayTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, "|cFFFF0000The target's inventory contains:|r")
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call DisplayTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, GetItemName(UnitItemInSlotBJ(GetSpellTargetUnit(), GetForLoopIndexA())))
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
endfunction

//===========================================================================
function InitTrig_InventoryScanner takes nothing returns nothing
    set gg_trg_InventoryScanner=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_InventoryScanner, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_InventoryScanner, Condition(function Trig_InventoryScanner_Conditions))
    call TriggerAddAction(gg_trg_InventoryScanner, function Trig_InventoryScanner_Actions)
endfunction

//===========================================================================
// Trigger: MotionSensor
//===========================================================================
//TESH.scrollpos=18
//TESH.alwaysfold=0
function Trig_MotionSensor_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A062' ) ) then
        return false
    endif
    return true
endfunction

function MotionSensor_Clean takes nothing returns nothing
local trigger d=GetTriggeringTrigger()
local trigger k=LoadTriggerHandle((udg_hash), GetHandleId(d), StringHash("k")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(k)) // INLINED!!
call DestroyTrigger(k)
call FlushChildHashtable((udg_hash), GetHandleId(d)) // INLINED!!
call DestroyTrigger(d)
endfunction

function MotionSensor_Trigger takes nothing returns nothing
local trigger k=GetTriggeringTrigger()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("u")) // INLINED!!
local location q=GetUnitLoc(a)

if GetUnitPointValue(GetTriggerUnit()) != 37 and GetOwningPlayer(GetTriggerUnit()) != GetOwningPlayer(a) then
call SetSoundPositionLocBJ(gg_snd_WayPointBling, q, 100.0)
call PlaySoundBJ(gg_snd_WayPointBling)
call PingMinimapForPlayer(GetOwningPlayer(a), GetLocationX(q), GetLocationY(q), 4.0)
call DisplayTextToPlayer(GetOwningPlayer(a), 0, 0, "|cff0000FFSensors have detected an intruder.")
call StartSoundForPlayerBJ(GetOwningPlayer(a), gg_snd_Hint)
call DisableTrigger(k)
call PolledWait(4.0)
call EnableTrigger(k)
endif
call RemoveLocation(q)
set q=null
endfunction
function Trig_MotionSensor_Actions takes nothing returns nothing
local trigger k=CreateTrigger()
local trigger d=CreateTrigger()
local location om=GetSpellTargetLoc()
local unit a=CreateUnitAtLoc(GetOwningPlayer(GetSpellAbilityUnit()), 'h045', om, GetRandomDirectionDeg())
call RemoveLocation(om)
call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("u"), a) // INLINED!!
call SaveTriggerHandle((udg_hash), GetHandleId(d), StringHash("k"), k) // INLINED!!
call TriggerAddAction(d, function MotionSensor_Clean)
call TriggerRegisterDeathEvent(d, a)
call TriggerRegisterUnitInRangeSimple(k, 325.0, a)
call TriggerAddAction(k, function MotionSensor_Trigger)
call SetUnitColor(a, ConvertPlayerColor(12))
endfunction

//===========================================================================
function InitTrig_MotionSensor takes nothing returns nothing
    set gg_trg_MotionSensor=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_MotionSensor, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_MotionSensor, Condition(function Trig_MotionSensor_Conditions))
    call TriggerAddAction(gg_trg_MotionSensor, function Trig_MotionSensor_Actions)
endfunction


//===========================================================================
// Trigger: Wrench
//===========================================================================
function Trig_Wrench_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A00Z' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Wrench_Func004Func001C takes nothing returns boolean
    if ( not ( GetItemTypeId(UnitItemInSlotBJ(GetSpellAbilityUnit(), GetForLoopIndexA())) == 'I00H' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Wrench_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellTargetUnit())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_Wrench_Func004Func001C() ) then
            set udg_TempItem=UnitItemInSlotBJ(GetSpellAbilityUnit(), GetForLoopIndexA())
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call SetItemPositionLoc(udg_TempItem, udg_TempPoint)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_Wrench takes nothing returns nothing
    set gg_trg_Wrench=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Wrench, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Wrench, Condition(function Trig_Wrench_Conditions))
    call TriggerAddAction(gg_trg_Wrench, function Trig_Wrench_Actions)
endfunction

//===========================================================================
// Trigger: Rubble Clearing Device
//===========================================================================
function Rubble_Clearing_Device_Conditions takes nothing returns boolean
return GetSpellAbilityId() == 'A08E'
endfunction

function RCD_Damage2 takes nothing returns nothing
local timer t=GetExpiredTimer()
local destructable a=LoadDestructableHandle((udg_hash), GetHandleId(t), StringHash("d")) // INLINED!!
local unit b=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("u")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call DestroyTimer(t)
call UnitDamageTarget(b, a, 750, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
endfunction

function RCD_Damage takes nothing returns nothing
local timer t=CreateTimer()
call SaveDestructableHandle((udg_hash), GetHandleId(t), StringHash("d"), GetEnumDestructable()) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("u"), GetSpellAbilityUnit()) // INLINED!!
call TimerStart(t, udg_TempReal * GetRandomReal(0.8, 1.2), false, function RCD_Damage2)
endfunction

function Rubble_Clearing_Device_Actions takes nothing returns nothing
local location a= GetSpellTargetLoc()
local location b=GetUnitLoc(GetSpellAbilityUnit())
set udg_TempReal=DistanceBetweenPoints(a, b) / 700.0
    call EnumDestructablesInCircleBJ(100.00, a, function RCD_Damage)
call RemoveLocation(a)
call RemoveLocation(b)
endfunction

//===========================================================================
function InitTrig_Rubble_Clearing_Device takes nothing returns nothing
    set gg_trg_Rubble_Clearing_Device=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Rubble_Clearing_Device, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Rubble_Clearing_Device, Condition(function Rubble_Clearing_Device_Conditions))
    call TriggerAddAction(gg_trg_Rubble_Clearing_Device, function Rubble_Clearing_Device_Actions)
endfunction


//===========================================================================
// Trigger: CaptainsKeycard
//===========================================================================
function Trig_CaptainsKeycard_Conditions takes nothing returns boolean
    if ( not ( RectContainsUnit(gg_rct_ST5, GetManipulatingUnit()) == true ) ) then
        return false
    endif
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I00I' ) ) then
        return false
    endif
    return true
endfunction

function Trig_CaptainsKeycard_Func005Func001Func002C takes nothing returns boolean
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B000' ) ) then
        return true
    endif
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B001' ) ) then
        return true
    endif
    return false
endfunction

function Trig_CaptainsKeycard_Func005Func001C takes nothing returns boolean
    if ( not Trig_CaptainsKeycard_Func005Func001Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_CaptainsKeycard_Func005Func005Func001C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    if ( not ( udg_TempBool2 == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_CaptainsKeycard_Func005Func005C takes nothing returns boolean
    if ( not Trig_CaptainsKeycard_Func005Func005Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_CaptainsKeycard_Func005A takes nothing returns nothing
    if ( Trig_CaptainsKeycard_Func005Func001C() ) then
    else
        return
    endif
    set udg_TempTrigger=LoadTriggerHandle((udg_hash), GetHandleId(GetEnumDestructable()), StringHash("t1")) // INLINED!!
    set udg_TempBool=IsTriggerEnabled(udg_TempTrigger)
    set udg_TempBool2=udg_TempTrigger != null
    if ( Trig_CaptainsKeycard_Func005Func005C() ) then
        call DisableTrigger(udg_TempTrigger)
        set udg_TempTrigger=LoadTriggerHandle((udg_hash), GetHandleId(GetEnumDestructable()), StringHash("t2")) // INLINED!!
        set udg_TempDoorHack=true
        call TriggerExecute(udg_TempTrigger)
        set udg_TempDoorHack=false
        call DestructableRestoreLife(LoadDestructableHandle((udg_hash), GetHandleId(udg_TempTrigger), StringHash("doorpath")), 999999, true) // INLINED!!
        call DisplayTimedTextToPlayer(GetOwningPlayer(GetManipulatingUnit()), 0, 0, 11.00, "|cffffcc00Door locked.|r")
    else
        call EnableTrigger(udg_TempTrigger)
        call TriggerExecute(udg_TempTrigger)
        call KillDestructable(LoadDestructableHandle((udg_hash), GetHandleId(udg_TempTrigger), StringHash("doorpath"))) // INLINED!!
        call DisplayTimedTextToPlayer(GetOwningPlayer(GetManipulatingUnit()), 0, 0, 11.00, "|cffffcc00Door unlocked.|r")
    endif
endfunction

function Trig_CaptainsKeycard_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetManipulatingUnit())
    call EnumDestructablesInCircleBJ(256, udg_TempPoint, function Trig_CaptainsKeycard_Func005A)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_CaptainsKeycard takes nothing returns nothing
    set gg_trg_CaptainsKeycard=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_CaptainsKeycard, EVENT_PLAYER_UNIT_USE_ITEM)
    call TriggerAddCondition(gg_trg_CaptainsKeycard, Condition(function Trig_CaptainsKeycard_Conditions))
    call TriggerAddAction(gg_trg_CaptainsKeycard, function Trig_CaptainsKeycard_Actions)
endfunction

//===========================================================================
// Trigger: JanitorsKeycard
//===========================================================================
function Trig_JanitorsKeycard_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I00J' ) ) then
        return false
    endif
    return true
endfunction

function Trig_JanitorsKeycard_Func005Func001Func002C takes nothing returns boolean
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B000' ) ) then
        return true
    endif
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B001' ) ) then
        return true
    endif
    return false
endfunction

function Trig_JanitorsKeycard_Func005Func001C takes nothing returns boolean
    if ( not Trig_JanitorsKeycard_Func005Func001Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_JanitorsKeycard_Func005Func006Func001C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    if ( not ( udg_TempBool2 == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_JanitorsKeycard_Func005Func006C takes nothing returns boolean
    if ( not Trig_JanitorsKeycard_Func005Func006Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_JanitorsKeycard_Func005A takes nothing returns nothing
    if ( Trig_JanitorsKeycard_Func005Func001C() ) then
    else
        return
    endif
    set udg_TempBool=true
    set udg_TempTrigger=LoadTriggerHandle((udg_hash), GetHandleId(GetEnumDestructable()), StringHash("t1")) // INLINED!!
    set udg_TempBool=IsTriggerEnabled(udg_TempTrigger)
    set udg_TempBool2=udg_TempTrigger != null
    if ( Trig_JanitorsKeycard_Func005Func006C() ) then
        call DisableTrigger(udg_TempTrigger)
        set udg_TempTrigger=LoadTriggerHandle((udg_hash), GetHandleId(GetEnumDestructable()), StringHash("t2")) // INLINED!!
        set udg_TempDoorHack=true
        call TriggerExecute(udg_TempTrigger)
        set udg_TempDoorHack=false
        call DestructableRestoreLife(LoadDestructableHandle((udg_hash), GetHandleId(udg_TempTrigger), StringHash("doorpath")), 999999, true) // INLINED!!
        call DisplayTimedTextToPlayer(GetOwningPlayer(GetManipulatingUnit()), 0, 0, 11.00, "|cffffcc00Door locked.|r")
    else
        call EnableTrigger(udg_TempTrigger)
        call TriggerExecute(udg_TempTrigger)
        call KillDestructable(LoadDestructableHandle((udg_hash), GetHandleId(udg_TempTrigger), StringHash("doorpath"))) // INLINED!!
        call DisplayTimedTextToPlayer(GetOwningPlayer(GetManipulatingUnit()), 0, 0, 11.00, "|cffffcc00Door unlocked.|r")
    endif
endfunction

function Trig_JanitorsKeycard_Func006C takes nothing returns boolean
    if ( not ( udg_TempBool == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_JanitorsKeycard_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetManipulatingUnit())
    set udg_TempBool=false
    call EnumDestructablesInCircleBJ(256, udg_TempPoint, function Trig_JanitorsKeycard_Func005A)
    if ( Trig_JanitorsKeycard_Func006C() ) then
        call SetItemCharges(GetManipulatedItem(), 1)
    else
    endif
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_JanitorsKeycard takes nothing returns nothing
    set gg_trg_JanitorsKeycard=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_JanitorsKeycard, EVENT_PLAYER_UNIT_USE_ITEM)
    call TriggerAddCondition(gg_trg_JanitorsKeycard, Condition(function Trig_JanitorsKeycard_Conditions))
    call TriggerAddAction(gg_trg_JanitorsKeycard, function Trig_JanitorsKeycard_Actions)
endfunction

//===========================================================================
// Trigger: BlackHoleDevice
//===========================================================================
function Trig_BlackHoleDevice_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A05N' ) ) then
        return false
    endif
    return true
endfunction

function Trig_BlackHoleDevice_Actions takes nothing returns nothing
    set udg_TempPoint=GetSpellTargetLoc()
    call SetSoundPositionLocBJ(gg_snd_NecropolisUpgrade1, udg_TempPoint, 0)
    call PlaySoundBJ(gg_snd_NecropolisUpgrade1)
    call CreateNUnitsAtLoc(1, 'h02J', GetOwningPlayer(GetSpellAbilityUnit()), udg_TempPoint, bj_UNIT_FACING)
    call RemoveLocation(udg_TempPoint)
    set udg_TempUnit=GetLastCreatedUnit()
    set udg_CountUpBarColor="|cff804000"
    call BasicAI_IssueDangerArea(udg_TempPoint , 800.0 , 3.1)
    call CountUpBar(udg_TempUnit , 60 , 0.1666666666667 , "BlackHoleExplosion")
    call KillUnit(gg_unit_h012_0217)
    call DisplayTextToForce(GetPlayersAll(), "|cffFF0000Emergency News!")
    call DisplayTextToForce(GetPlayersAll(), "|cffFF0000A delayed U.S.I. Weather Forecast reports that a black hole should soon be visible in the sector.")
    call DisplayTextToForce(GetPlayersAll(), "|cffFF0000The metadata suggests it was broadcasted days ago and reached only now, so it must be accurate.")
endfunction

//===========================================================================
function InitTrig_BlackHoleDevice takes nothing returns nothing
    set gg_trg_BlackHoleDevice=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_BlackHoleDevice, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_BlackHoleDevice, Condition(function Trig_BlackHoleDevice_Conditions))
    call TriggerAddAction(gg_trg_BlackHoleDevice, function Trig_BlackHoleDevice_Actions)
endfunction

//===========================================================================
// Trigger: BlackHoleExplode
//
// Called via CountUpBar on BlackHoleDevice
//===========================================================================
function BlackHole_Suck_Enum takes nothing returns nothing
    local location a=GetUnitLoc(GetEnumUnit())
    local real r=DistanceBetweenPoints(a, udg_TempPoint)
    local location b
    
    if GetEnumUnit() == gg_unit_h008_0196 and r <= 1000.0 then
        call DestroyTrigger(gg_trg_PlanetMovement)
    endif
    
    if GetUnitTypeId(GetEnumUnit()) != 'e01I' then
        if r <= 15.0 and HaveSavedBoolean((udg_hash), GetHandleId(GetEnumUnit()), StringHash("BlackHole_SuckingIn")) == false then // INLINED!!
            call SaveBoolean((udg_hash), GetHandleId(GetEnumUnit()), StringHash("BlackHole_SuckingIn"), true) //Remember it killed it already // INLINED!!
            call SizeUnitOverTime(GetEnumUnit() , 0.5 , 1.0 , 0.01 , true)
            
            //If CCS -> Remove it
            call DetermineRemoveItemTypeFromUnit(GetEnumUnit() , 'I00L')
            call KillUnit(GetEnumUnit())
        else
            //If space pull
            if udg_TempReal == 4000.0 then
                set b=PolarProjectionBJ(a, ( ( udg_TempReal - r ) / udg_TempReal ) * 30 / 50, AngleBetweenPoints(a, udg_TempPoint))
                if (GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) then // INLINED!!
                    call SetUnitX(GetEnumUnit(), GetLocationX(b))
                    call SetUnitY(GetEnumUnit(), GetLocationY(b))
                else
                    call SetUnitPositionLoc(GetEnumUnit(), b)
                endif
            else //Station/Ground pull
                set b=PolarProjectionBJ(a, ( ( udg_TempReal - r ) / udg_TempReal ) * 600 / 50, AngleBetweenPoints(a, udg_TempPoint))
                call SetUnitX(GetEnumUnit(), GetLocationX(b))
                call SetUnitY(GetEnumUnit(), GetLocationY(b))
            endif

            //If in pause+flyup range
            if r <= 300 then
                call UnitAddAbility(GetEnumUnit(), 'Amrf')
                //call UnitRemoveAbility(GetEnumUnit(),'Amrf')//Credits to Tal
                call PauseUnit(GetEnumUnit(), true)
                call SetUnitFlyHeight(GetEnumUnit(), ( 300 - r ) / 300.0 * 550, 0)
            else
                call PauseUnit(GetEnumUnit(), false)
            endif
        
            call RemoveLocation(b)
        endif
        call RemoveLocation(a)
    endif
endfunction

function BlackHole_Suck takes nothing returns nothing
    local timer t=GetExpiredTimer()
    local unit spaceunit=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("spaceunit")) // INLINED!!
    local unit blackHoleUnit=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
    local location blackHoleLocalLocation=GetUnitLoc(blackHoleUnit)
    local group g
        
    //call PingMinimapForForce(GetPlayersAll(), GetUnitX(blackHoleUnit), GetUnitY(blackHoleUnit), 0.01)

    //call DisplayTextToForce(GetPlayersAll(), "SpaceUnit is: " + GetUnitName(spaceunit))
    
    //If bugged in 0,0 or Pown
    if RectContainsLoc(gg_rct_MapCenter, blackHoleLocalLocation) or ( RectContainsLoc(gg_rct_ST10, blackHoleLocalLocation) and spaceunit != gg_unit_h04V_0253 ) then
        call SetUnitX(blackHoleUnit, blackholeDebugX)
        call SetUnitY(blackHoleUnit, blackholeDebugY)
        
        call DisplayTextToForce(GetPlayersAll(), "Seems like bhd is stuck into [0,0] or Pown.")
        set debugSpamCap=debugSpamCap + 1
        
        if ( debugSpamCap > 2 ) then
            set debugSpamCap=0
            
            call DisplayTextToForce(GetPlayersAll(), "Seems like bhd is stuck into [0,0] or Pown.")
            call DisplayTextToForce(GetPlayersAll(), "Please report this to Thorlar")
            call DisplayTextToForce(GetPlayersAll(), "Killing the bhd so the game is playable and not ruined :)")
        
            call KillUnit(spaceunit)
            call PauseTimer(t)
            call DestroyTimer(t)
            //call DestroyTrigger(GetTriggeringTrigger())//Commented out so a 2nd blackhole can happen
        endif
    endif
    
    //For checking bug of top-right black hole...
    if RectContainsCoords(gg_rct_Timeout, GetUnitX(blackHoleUnit), GetUnitY(blackHoleUnit)) then
        call DisplayTextToForce(GetPlayersAll(), "Black Hole is in the top-right corner!!!")
        call DisplayTextToForce(GetPlayersAll(), "Killing the unit + Killing the timer + Killing the black hole trigger. Killed them all, I hope your game is still playable.")
        call DisplayTextToForce(GetPlayersAll(), "Please report the replay to Thorlar.")
        
        call KillUnit(spaceunit)
        call PauseTimer(t)
        call DestroyTimer(t)
        //call DestroyTrigger(GetTriggeringTrigger())//Commented out so a 2nd blackhole can happen
    endif
    
    //Range to start pulling
    if RectContainsCoords(gg_rct_Space, GetUnitX(blackHoleUnit), GetUnitY(blackHoleUnit)) then
        set udg_TempReal=4000.0
    else
        set udg_TempReal=700.0
    endif
    
    //call DisplayTextToForce(GetPlayersAll(), R2S(GetUnitX(blackHoleUnit)) + " || " + R2S(GetUnitY(blackHoleUnit)) + "  TEMPREAL: " + R2S(udg_TempReal))

    
    set udg_TempPoint=blackHoleLocalLocation
    set udg_TempUnit=blackHoleUnit
    set g=GetUnitsInRangeOfLocAll(udg_TempReal, blackHoleLocalLocation)
    call ForGroup(g, function BlackHole_Suck_Enum)
    call DestroyGroup(g)
    set g=null
    call RemoveLocation(blackHoleLocalLocation)
    set blackHoleLocalLocation=null
    
    call UnitDamageTarget(blackHoleUnit, spaceunit, 80, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)

endfunction


function Trig_BlackHoleExplode_Actions takes nothing returns nothing
    local location castPoint=GetUnitLoc(udg_CountupBarTemp)
    local timer t=CreateTimer()
    
    local unit blackHoleUnit
    local unit blackholeSpaceContainer
    local unit blackholeLandContainer
    
    //variables in case the spaceship is docked
    local real spaceshipX
    local real spaceshipY
    
    //Every spaceship is indexed by me, 0 to 12, via this can fetch space/ground unit equivalent and even the rect!
    local integer spaceshipIndex
    
    //Cache which spaceship black hole is used in
    set spaceshipIndex=GetSpaceshipIndexFromPosition(castPoint)
    
    //If an explorer (doesn't include calipea/pown)
    if ( spaceshipIndex != - 1 ) then
        set blackholeSpaceContainer=udg_SpaceshipSpace[spaceshipIndex]
        set blackholeLandContainer=udg_SpaceshipGround[spaceshipIndex]
    endif
    

    //Creates the countbar and starts the countdown
    set udg_TempUnit=udg_CountupBarTemp
    call SetUnitAnimation(udg_TempUnit, "decay")
    
    //Creates the 4 cool rotating green rings vfx
    call CreateNUnitsAtLoc(1, 'e016', Player(PLAYER_NEUTRAL_PASSIVE), castPoint, GetRandomDirectionDeg())
    call PolledWait(4.2)
    
    //If the spaceship from the bhd is dead until bhd fully activates, nullify the bhd, aka gtfo/return;
    if spaceshipIndex != - 1 and IsUnitDeadBJ(blackholeSpaceContainer) then
        return
    endif
    
    call DisplayTextToForce(GetPlayersAll(), I2S(spaceshipIndex))
    
    //Creates the black hole
    set blackHoleUnit=CreateUnitAtLoc(Player(PLAYER_NEUTRAL_PASSIVE), 'e01I', castPoint, GetRandomDirectionDeg())
    
    //Cache the black hole unit to be used later for sucking
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), blackHoleUnit) // INLINED!!
    
    //If an explorer (doesn't include calipea/pown)
    if ( spaceshipIndex != - 1 ) then
        
        //If docked
        if ( RectContainsUnit(gg_rct_Space, blackholeSpaceContainer) == false ) then
        
            call DisplayTextToForce(GetPlayersAll(), "Docked!")
        
            set spaceshipX=GetUnitX(blackholeLandContainer)
            set spaceshipY=GetUnitY(blackholeLandContainer)
            
            
            //Replace the cache of the unit the black hole is inside
            call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("spaceunit"), udg_Sector_Space[GetUnitSector(blackholeLandContainer)]) // INLINED!!
            
            ///call DisplayTextToForce(GetPlayersAll(), "LandContainerSector is: " + I2S(GetUnitSector(blackholeLandContainer)))
            
            ///call DisplayTextToForce(GetPlayersAll(), "LandContainerName is: " + GetUnitName(blackholeLandContainer))
            
            ///call DisplayTextToForce(GetPlayersAll(), "Land Container X, Y: " + R2S(GetUnitX(blackholeLandContainer)) + ", " + R2S(GetUnitY(blackholeLandContainer)))
        
            //Checks if the space unit dies
            call SaveUnitHandle((udg_hash), GetHandleId(udg_Sector_Space[GetUnitSector(blackHoleUnit)]), StringHash("unit"), blackHoleUnit) // INLINED!!
            call TriggerRegisterUnitEvent(gg_trg_BlackHoleDeathExit, udg_Sector_Space[GetUnitSector(blackHoleUnit)], EVENT_UNIT_DEATH)
            
        
        else
            set spaceshipX=GetUnitX(blackholeSpaceContainer)
            set spaceshipY=GetUnitY(blackholeSpaceContainer)
        endif
        
        //Move the BHD just outside of the spaceship!
        call SetUnitPositionLoc(blackholeLandContainer, GetRandomLocInRect(gg_rct_Timeout))
        call SetUnitPositionLoc(blackholeSpaceContainer, GetRandomLocInRect(gg_rct_Timeout))
        call SetUnitX(blackHoleUnit, spaceshipX)
        call SetUnitY(blackHoleUnit, spaceshipY)
        //call PauseGame(true)
        
        //Killing it just once is not enough. It does do RectOfDoom, but the equivalent unit is not killed!!
        //Equivalent -> Space equivalent is grounded, and Ground equivalent is space
        call KillUnit(blackholeLandContainer)
        call KillUnit(blackholeSpaceContainer)
        
    else //If a station
        //Cache the unit the black hole is inside
        //Note: This may be a cause of bugs, since GetUnitSector is a fel function and not mine.
        call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("spaceunit"), udg_Sector_Space[GetUnitSector(blackHoleUnit)]) // INLINED!!
    
        //Checks if the space unit dies
        call SaveUnitHandle((udg_hash), GetHandleId(udg_Sector_Space[GetUnitSector(blackHoleUnit)]), StringHash("unit"), blackHoleUnit) // INLINED!!
        call TriggerRegisterUnitEvent(gg_trg_BlackHoleDeathExit, udg_Sector_Space[GetUnitSector(blackHoleUnit)], EVENT_UNIT_DEATH)
    endif
    
    //Used for debugging when teleporting onto Pown
    set blackholeDebugX=GetUnitX(blackHoleUnit)
    set blackholeDebugY=GetUnitY(blackHoleUnit)
    
    call DisplayTextToForce(GetPlayersAll(), R2S(GetUnitX(blackHoleUnit)) + " | " + R2S(GetUnitY(blackHoleUnit)) + "  Final!")

    //Memory Leak Cleaning
    call RemoveLocation(castPoint)
    
    //Every 0.02 seconds, the black hole logic happens, SUCCing all the performance
    call TimerStart(t, 0.02, true, function BlackHole_Suck)
    //call TimerStart(t,5,true,function BlackHole_Suck)
endfunction

//===========================================================================
function InitTrig_BlackHoleExplode takes nothing returns nothing
    set gg_trg_BlackHoleExplode=CreateTrigger()
    call TriggerAddAction(gg_trg_BlackHoleExplode, function Trig_BlackHoleExplode_Actions)
endfunction


//===========================================================================
// Trigger: BlackHoleDeathExit
//===========================================================================
function Trig_BlackHoleDeathExit_Actions takes nothing returns nothing
    //Note the order is swapped from others.
    local unit spaceunit=GetTriggerUnit()
    local unit blackHoleUnit=LoadUnitHandle((udg_hash), GetHandleId(spaceunit), StringHash("unit")) // INLINED!!
    
    local real spaceunitX
    local real spaceunitY
    //call DisplayTextToForce(GetPlayersAll(), "DEAD: " + GetUnitName(spaceunit) + " " + R2S(GetUnitX(spaceunit)))

    //More or less a swap. Because if you place into the exact location of dead unit
    //Because of wc3 (or felcode?) can be teleported into 0,0 -_-
    //So, I got to "swap" them by yeeting the DEAD spaceunit top-right lmao

    set spaceunitX=GetUnitX(spaceunit)
    set spaceunitY=GetUnitY(spaceunit)
    
    call SetUnitPositionLoc(spaceunit, GetRandomLocInRect(gg_rct_Timeout))

    call SetUnitX(blackHoleUnit, spaceunitX)
    call SetUnitY(blackHoleUnit, spaceunitY)
    
    //call DisplayTextToForce(GetPlayersAll(), R2S(GetUnitX(blackHoleUnit)) + "SSS")
endfunction

//===========================================================================
function InitTrig_BlackHoleDeathExit takes nothing returns nothing
    set gg_trg_BlackHoleDeathExit=CreateTrigger()
    call TriggerAddAction(gg_trg_BlackHoleDeathExit, function Trig_BlackHoleDeathExit_Actions)
endfunction


//===========================================================================
// Trigger: AntiBodyPack
//
// For someone to be spawned, on the death trigger ("PlayerMurder"), what it checks out is the boolean Unit_IsInfected[unithere]. However, that value is made true/false, ON HIT, if he had an infection (prion or contained prion OR parasite or contained parasite).
// Hence, all you have to do here, is take care of the buffs.
// When just parasiting with new buff, it does nothing, aka the parasite stays and the contained doesnt apply
// When parasiting with new buff then deleting the old parasite buff, then player loses all parasite buffs/debuffs (and hence no dmg and buffs)
// call UnitRemoveBuff("Insert buff here", a), actually removes the buff from unit a!
//===========================================================================
function Trig_AntiBodyPack_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I004' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AntiBodyPack_Actions takes nothing returns nothing
    local integer i=0
    local unit a=GetManipulatingUnit()
    
    //Ima assume that this is related to "Carrier" ability, and instead of diving deep into it, just don't touch it.
    //Like, if I had to guess, using antibody, vector that is currently targeting you, dies.
    call DestroyTrigger(udg_Unit_CarrierTrigger[(GetUnitUserData((a)))]) // INLINED!!
    
    //If "Prion Infection" (buff/debuff)
    if UnitHasBuffBJ(a, 'B009') then
        //Remove "Prion Infection" (buff/debuff)
        call UnitRemoveBuffBJ('B009', a)
    
        //and give "Contained Prion Infection" (buff/debuff)
        set bj_lastCreatedUnit=CreateUnit(Player(12), 'e032', GetUnitX(a), GetUnitY(a), 270.0)
        call IssueTargetOrder(bj_lastCreatedUnit, "parasite", a)
    endif
    
    //If "Parasite" (buff/debuff)
    if UnitHasBuffBJ(a, 'B00H') then
        //Remove "Parasite" (buff/debuff)
        call UnitRemoveBuffBJ('B00H', a)
    
        //and give "Contained Parasite" (buff/debuff)
        set bj_lastCreatedUnit=CreateUnit(Player(12), 'e033', GetUnitX(a), GetUnitY(a), 270.0)
        call IssueTargetOrder(bj_lastCreatedUnit, "parasite", a)
    endif
    
    //If "Prion Infection Cyborg" (buff/debuff)
    if UnitHasBuffBJ(a, 'B01T') then
        //Remove "Prion Infection Cyborg" (buff/debuff)
        call UnitRemoveBuffBJ('B01T', a)
    
        //and give "Contained Parasite" (buff/debuff)
        set bj_lastCreatedUnit=CreateUnit(Player(12), 'e03L', GetUnitX(a), GetUnitY(a), 270.0)
        call IssueTargetOrder(bj_lastCreatedUnit, "parasite", a)
    endif
    
    //If "Parasite Cyborg" (buff/debuff)
    if UnitHasBuffBJ(a, 'B01V') then
        //Remove "Parasite Cyborg" (buff/debuff)
        call UnitRemoveBuffBJ('B01V', a)
    
        //and give "Contained Parasite" (buff/debuff)
        set bj_lastCreatedUnit=CreateUnit(Player(12), 'e03M', GetUnitX(a), GetUnitY(a), 270.0)
        call IssueTargetOrder(bj_lastCreatedUnit, "parasite", a)
    endif
    
    //THICC spagghetti below in comments.
            //loop
            //exitwhen i > 45
                //call UnitRemoveBuffBJ( 'B009', a )//"Prion Infection" (buff/debuff)
                //call UnitRemoveBuffBJ( 'B00H', a )//"Parasite" (buff/debuff)
                //set i=i+1
                //call PolledWait(1.0)
            //endloop
            //45 seconds have passed inside the loop btw.
        
            //If "Contained Parasite" (buff/debuff)
            //if UnitHasBuffBJ(a,'B01G') then
                //call UnitRemoveBuffBJ('B01G',a)
            //endif
            
            //If "Contained Prion Infection" (buff/debuff)
            //if UnitHasBuffBJ(a,'B01F') then
                //call UnitRemoveBuffBJ('B01F',a)
            //endif
endfunction

//===========================================================================
function InitTrig_AntiBodyPack takes nothing returns nothing
    set gg_trg_AntiBodyPack=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_AntiBodyPack, EVENT_PLAYER_UNIT_USE_ITEM)
    call TriggerAddCondition(gg_trg_AntiBodyPack, Condition(function Trig_AntiBodyPack_Conditions))
    call TriggerAddAction(gg_trg_AntiBodyPack, function Trig_AntiBodyPack_Actions)
endfunction


//===========================================================================
// Trigger: TeleportBomb
//===========================================================================
function Trig_TeleportBomb_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A01A' ) ) then
        return false
    endif
    return true
endfunction

function Trig_TeleportBomb_Actions takes nothing returns nothing
    local location a=GetSpellTargetLoc()
    set udg_TempPoint=GetSpellTargetLoc()
    call SetSoundPositionLocBJ(gg_snd_Poweringup, udg_TempPoint, 0)
    call PlaySoundBJ(gg_snd_Poweringup)
    call CreateNUnitsAtLoc(1, 'h015', GetOwningPlayer(GetSpellAbilityUnit()), udg_TempPoint, bj_UNIT_FACING)
    call RemoveLocation(udg_TempPoint)
    set udg_TempUnit=GetLastCreatedUnit()
    set udg_CountUpBarColor="|cff0000FF"
    call BasicAI_IssueDangerArea(a , 800.0 , 3.1)
    call CountUpBar(udg_TempUnit , 60 , 0.05 , "TeleportBombExplosion")
    set udg_TempPoint=a
    call RemoveLocation(a)
endfunction

//===========================================================================
function InitTrig_TeleportBomb takes nothing returns nothing
    set gg_trg_TeleportBomb=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_TeleportBomb, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_TeleportBomb, Condition(function Trig_TeleportBomb_Conditions))
    call TriggerAddAction(gg_trg_TeleportBomb, function Trig_TeleportBomb_Actions)
endfunction

//===========================================================================
// Trigger: TeleportBombExplode
//
// call UnitDamageTarget(damager,a,damage,false,false,ATTACK_TYPE_NORMAL,DAMAGE_TYPE_NORMAL,WEAPON_TYPE_WHOKNOWS)
//===========================================================================
function Trig_TeleportBombExplode_Func004Func004A takes nothing returns nothing
    if AllowForMirrorDimension(GetEnumUnit()) then
    set udg_TempBool=true
    endif
endfunction

function Trig_TeleportBombExplode_Func004Func006C takes nothing returns boolean
    if ( not ( udg_TempBool == false ) ) then
        return false
    endif
    if ( not ( udg_Mirror_Enabled == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_TeleportBombExplode_Func004Func008Func007C takes nothing returns boolean
    if ( not ( udg_Mirror_Enabled == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_TeleportBombExplode_Func004Func008Func010Func009C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_TeleportBombExplode_Func004Func008Func010A takes nothing returns nothing
    if AllowForMirrorDimension(GetEnumUnit()) and IsUnitInGroup(GetEnumUnit(), udg_Mirror_Hostilegroup) == false then
    call SetUnitPositionLoc(GetEnumUnit(), udg_TeleportBombMirrorExitPoint)
    // Mandatory Teleporting stuff
    call SetSoundPositionLocBJ(gg_snd_NightElfBuildingDeathSmall1, udg_TempPoint, 0)
    call PlaySoundBJ(gg_snd_NightElfBuildingDeathSmall1)
    call CreateNUnitsAtLoc(1, 'e005', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    call CreateNUnitsAtLoc(1, 'e006', Player(PLAYER_NEUTRAL_PASSIVE), udg_TeleportBombMirrorExitPoint, bj_UNIT_FACING)
    // Mandatory Teleporting stuff
    if ( Trig_TeleportBombExplode_Func004Func008Func010Func009C() ) then
        call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TeleportBombMirrorExitPoint, 0)
    else
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetEnumUnit()), udg_TeleportBombMirrorExitPoint, 0)
    endif
    endif
endfunction

function Trig_TeleportBombExplode_Func004Func008Func017Func003C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_TeleportBombExplode_Func004Func008Func017A takes nothing returns nothing
    if AllowForMirrorDimension(GetEnumUnit()) then
    call SetUnitPositionLoc(GetEnumUnit(), udg_TempPoint2)
    if ( Trig_TeleportBombExplode_Func004Func008Func017Func003C() ) then
        call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TempPoint2, 0)
    else
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetEnumUnit()), udg_TempPoint2, 0)
    endif
    endif
endfunction

function Trig_TeleportBombExplode_Func004Func008C takes nothing returns boolean
    if ( not ( RectContainsLoc(gg_rct_Mirror_Arena, udg_TempPoint) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_TeleportBombExplode_Func004C takes nothing returns boolean
    if ( not ( IsUnitDeadBJ(gg_unit_h009_0029) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_TeleportBombExplode_Func014Func004Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetEnumUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    return true
endfunction

function Trig_TeleportBombExplode_Func014Func004C takes nothing returns boolean
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] == GetEnumUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_TeleportBombExplode_Func014A takes nothing returns nothing
    if AllowForMirrorDimension(GetEnumUnit()) then
    if UnitInSector(GetEnumUnit() , udg_TempInt) then
    call SetUnitPositionLoc(GetEnumUnit(), udg_TempPoint2)
    if ( Trig_TeleportBombExplode_Func014Func004C() ) then
        call UnitDamageTargetBJ(GetEnumUnit(), GetEnumUnit(), 100.00, ATTACK_TYPE_MELEE, DAMAGE_TYPE_UNKNOWN)
        if ( Trig_TeleportBombExplode_Func014Func004Func002C() ) then
            call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TempPoint2, 0)
        else
            call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetEnumUnit()), udg_TempPoint2, 0)
        endif
    else
    endif
    endif
    endif
endfunction

function Trig_TeleportBombExplode_Actions takes nothing returns nothing
    set udg_TempUnit=udg_CountupBarTemp
    set udg_TempPoint=GetUnitLoc(udg_TempUnit)
    // If Mirror Dimension else normal teleport
    if ( Trig_TeleportBombExplode_Func004C() ) then
        // Check if any unit is to go inside
        set udg_TempBool=false
        set bj_wantDestroyGroup=true
        call ForGroupBJ(GetUnitsInRangeOfLocAll(400.00, udg_TempPoint), function Trig_TeleportBombExplode_Func004Func004A)
        call DestroyGroup(udg_TempUnitGroup)
        if ( Trig_TeleportBombExplode_Func004Func006C() ) then
            return
        else
        endif
        // End Check if any unit is to go inside
        if ( Trig_TeleportBombExplode_Func004Func008C() ) then
            set udg_TeleportBombMirrorExitPoint=GetUnitLoc(udg_TempUnit)
            call DestroyEffectBJ(udg_Mirror_EntranceVisual)
            call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Orc\\Purge\\PurgeBuffTarget.mdl")
            set udg_Mirror_EntranceVisual=GetLastCreatedEffectBJ()
            // The above special effect stays and shows the portal exit
            if ( Trig_TeleportBombExplode_Func004Func008Func007C() ) then
                set udg_Mirror_Enabled=true
                call TriggerExecute(gg_trg_Mirror_start)
            else
            endif
            // Mandatory Teleporting stuff
            call SetSoundPositionLocBJ(gg_snd_NightElfBuildingDeathSmall1, udg_TempPoint, 0)
            call PlaySoundBJ(gg_snd_NightElfBuildingDeathSmall1)
            call CreateNUnitsAtLoc(1, 'e005', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
            set udg_TempPoint2=GetRectCenter(gg_rct_Mirror_Arena)
            call CreateNUnitsAtLoc(1, 'e006', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, bj_UNIT_FACING)
            call ForGroupBJ(GetUnitsInRangeOfLocAll(400.00, udg_TempPoint), function Trig_TeleportBombExplode_Func004Func008Func017A)
        else
            // Using teleport in mirror arena lmao
            set bj_wantDestroyGroup=true
            call ForGroupBJ(GetUnitsInRangeOfLocAll(400.00, udg_TempPoint), function Trig_TeleportBombExplode_Func004Func008Func010A)
        endif
        call RemoveLocation(udg_TempPoint)
        call RemoveLocation(udg_TempPoint2)
        return
    else
    endif
    call SetSoundPositionLocBJ(gg_snd_NightElfBuildingDeathSmall1, udg_TempPoint, 0)
    call PlaySoundBJ(gg_snd_NightElfBuildingDeathSmall1)
    call CreateNUnitsAtLoc(1, 'e005', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    set udg_TempPoint2=GetRectCenter(gg_rct_BombTeleport)
    call SetUnitPositionLoc(GetEnumUnit(), udg_TempPoint)
    // 100% to damage (aka no RnG), to do 100 dmg is interesting.
    call CreateNUnitsAtLoc(1, 'e006', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, bj_UNIT_FACING)
    set udg_TempInt=GetSector(udg_TempPoint)
    set bj_wantDestroyGroup=true
    call ForGroupBJ(GetUnitsInRangeOfLocAll(400.00, udg_TempPoint), function Trig_TeleportBombExplode_Func014A)
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
endfunction

//===========================================================================
function InitTrig_TeleportBombExplode takes nothing returns nothing
    set gg_trg_TeleportBombExplode=CreateTrigger()
    call TriggerAddAction(gg_trg_TeleportBombExplode, function Trig_TeleportBombExplode_Actions)
endfunction

//===========================================================================
// Trigger: Fusion Bomb
//===========================================================================
function Trig_Fusion_Bomb_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A019' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Fusion_Bomb_Actions takes nothing returns nothing
    local location a=GetSpellTargetLoc()
    set udg_TempPoint=a
    call CreateNUnitsAtLoc(1, 'h013', GetOwningPlayer(GetSpellAbilityUnit()), udg_TempPoint, bj_UNIT_FACING)
    call SetUnitTimeScalePercent(GetLastCreatedUnit(), 200.00)
    set udg_TempUnit=GetLastCreatedUnit()
    set udg_CountUpBarColor="|cffFF0000"
    call BasicAI_IssueDangerArea(a , 800.0 , 3.1)
    call CountUpBar(udg_TempUnit , 60 , 0.05 , "FusionBombExplosion")
    call RemoveLocation(a)
endfunction

//===========================================================================
function InitTrig_Fusion_Bomb takes nothing returns nothing
    set gg_trg_Fusion_Bomb=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Fusion_Bomb, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Fusion_Bomb, Condition(function Trig_Fusion_Bomb_Conditions))
    call TriggerAddAction(gg_trg_Fusion_Bomb, function Trig_Fusion_Bomb_Actions)
endfunction

//===========================================================================
// Trigger: FusionBombExplode
//===========================================================================
function Trig_FusionBombExplode_Func006Func001Func001C takes nothing returns boolean
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'DTrx' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT40' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT16' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT06' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT30' ) ) then
        return false
    endif
    return true
endfunction

function Trig_FusionBombExplode_Func006Func001C takes nothing returns boolean
    if ( not Trig_FusionBombExplode_Func006Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_FusionBombExplode_Func006A takes nothing returns nothing
    if ( Trig_FusionBombExplode_Func006Func001C() ) then
        call KillDestructable(GetEnumDestructable())
    else
    endif
endfunction

function Trig_FusionBombExplode_Func010Func002C takes nothing returns boolean
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(GetOwningPlayer(GetEnumUnit()))] <= 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_FusionBombExplode_Func010Func003C takes nothing returns boolean
    if ( not ( Player(bj_PLAYER_NEUTRAL_EXTRA) == GetOwningPlayer(GetEnumUnit()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_FusionBombExplode_Func010A takes nothing returns nothing
    set udg_TempPlayer=GetOwningPlayer(GetEnumUnit())
    if ( Trig_FusionBombExplode_Func010Func002C() ) then
        call CameraSetEQNoiseForPlayer(GetOwningPlayer(GetEnumUnit()), 9.00)
        call ExecuteFunc("BombEndShaking")
    else
    endif
    if ( Trig_FusionBombExplode_Func010Func003C() ) then
        call CinematicFilterGenericForPlayer(udg_Parasite , 6.0 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\White_mask.blp" , 100 , 100 , 100 , 0 , 0 , 0 , 0 , 100)
    else
        call CinematicFilterGenericForPlayer(GetOwningPlayer(GetEnumUnit()) , 6.0 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\White_mask.blp" , 100 , 100 , 100 , 0 , 0 , 0 , 0 , 100)
    endif
endfunction

function Trig_FusionBombExplode_Func014Func002Func001C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A03U', GetEnumUnit()) == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_FusionBombExplode_Func014Func002C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_FusionBombExplode_Func014A takes nothing returns nothing
    set udg_TempBool=UnitInSector(GetEnumUnit() , udg_TempInt)
    if ( Trig_FusionBombExplode_Func014Func002C() ) then
        if ( Trig_FusionBombExplode_Func014Func002Func001C() ) then
            call UnitDamageTargetBJ(udg_TempUnit, GetEnumUnit(), 5000.00, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL)
        else
        endif
    else
    endif
endfunction

function Trig_FusionBombExplode_Func016Func002Func001C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A03U', GetEnumUnit()) == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_FusionBombExplode_Func016Func002C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_FusionBombExplode_Func016A takes nothing returns nothing
    set udg_TempBool=UnitInSector(GetEnumUnit() , udg_TempInt)
    if ( Trig_FusionBombExplode_Func016Func002C() ) then
        if ( Trig_FusionBombExplode_Func016Func002Func001C() ) then
            call UnitDamageTargetBJ(udg_TempUnit, GetEnumUnit(), 200.00, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL)
        else
        endif
    else
    endif
endfunction

function Trig_FusionBombExplode_Actions takes nothing returns nothing
    set udg_TempUnit=udg_CountupBarTemp
    set udg_TempPoint=GetUnitLoc(udg_TempUnit)
    call SetUnitAnimation(udg_TempUnit, "decay")
    call CreateNUnitsAtLoc(1, 'e004', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
    set udg_TempInt=GetSector(udg_TempPoint)
    call EnumDestructablesInCircleBJ(400.00, udg_TempPoint, function Trig_FusionBombExplode_Func006A)
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=14
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempPoint2=IntelligentRubble(udg_TempPoint , GetRandomReal(0, 800) , GetRandomDirectionDeg())
        call CreateNUnitsAtLoc(1, 'e002', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, GetRandomDirectionDeg())
        call CreateDestructableLoc('B003', udg_TempPoint2, GetRandomDirectionDeg(), 1.00, 0)
        call SetDestructableLifePercentBJ(GetLastCreatedDestructable(), GetRandomReal(15.00, 75.00))
        call RemoveLocation(udg_TempPoint2)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempPoint2=IntelligentRubble(udg_TempPoint , GetRandomReal(0, 250) , bj_forLoopAIndex * ( 360.0 / bj_forLoopAIndexEnd ))
        call CreateDestructableLoc('B003', udg_TempPoint2, GetRandomDirectionDeg(), 1.00, 0)
        call SetDestructableLifePercentBJ(GetLastCreatedDestructable(), GetRandomReal(50.00, 100.00))
        call RemoveLocation(udg_TempPoint2)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=8
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempPoint2=IntelligentRubble(udg_TempPoint , GetRandomReal(250, 400) , bj_forLoopAIndex * ( 360.0 / bj_forLoopAIndexEnd ))
        call CreateDestructableLoc('B003', udg_TempPoint2, GetRandomDirectionDeg(), 1.00, 0)
        call SetDestructableLifePercentBJ(GetLastCreatedDestructable(), GetRandomReal(50.00, 100.00))
        call RemoveLocation(udg_TempPoint2)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call ForGroupBJ(GetUnitsInRangeOfLocAll(1800.00, udg_TempPoint), function Trig_FusionBombExplode_Func010A)
    call SetSoundPositionLocBJ(gg_snd_BuildingDeathLargeHuman, udg_TempPoint, 0)
    call PlaySoundBJ(gg_snd_BuildingDeathLargeHuman)
    set bj_wantDestroyGroup=true
    call ForGroupBJ(GetUnitsInRangeOfLocAll(250.00, udg_TempPoint), function Trig_FusionBombExplode_Func014A)
    set bj_wantDestroyGroup=true
    call ForGroupBJ(GetUnitsInRangeOfLocAll(550.00, udg_TempPoint), function Trig_FusionBombExplode_Func016A)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_FusionBombExplode takes nothing returns nothing
    set gg_trg_FusionBombExplode=CreateTrigger()
    call TriggerAddAction(gg_trg_FusionBombExplode, function Trig_FusionBombExplode_Actions)
endfunction

//===========================================================================
// Trigger: GIT
//===========================================================================
function Trig_GIT_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A018' ) ) then
        return false
    endif
    return true
endfunction

function Trig_GIT_Func004Func001C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h00B' ) ) then
        return true
    endif
    if ( ( IsPlayerInForce(GetOwningPlayer(GetSpellTargetUnit()), udg_GIT_TesterGroup[GetItemUserData(udg_TempItem)]) == true ) ) then
        return true
    endif
    if ( ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetSpellTargetUnit()))] != GetSpellTargetUnit() ) ) then
        return true
    endif
    return false
endfunction

function CheckDuplicateTestedUnit takes nothing returns boolean
    if ( not Trig_GIT_Func004Func001C() ) then
        return false
    endif
    return true
endfunction


function Trig_GIT_Actions takes nothing returns nothing
    set udg_TempItem=GetItemOfTypeFromUnitBJ(GetSpellAbilityUnit(), 'I00M')
    
    if ( GetItemUserData(udg_TempItem) == 0 ) then
        set udg_GIT_TesterOn=( udg_GIT_TesterOn + 1 )
        call SetItemUserData(udg_TempItem, udg_GIT_TesterOn)
        set udg_GIT_TesterGroup[GetItemUserData(udg_TempItem)]=CreateForce()
        set udg_GIT_TesterStatus[GetItemUserData(udg_TempItem)]=1
    endif
    
    if ( CheckDuplicateTestedUnit() ) then
        call DisplayTimedTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, 5.00, "TRIGSTR_3178")
        call SetItemCharges(udg_TempItem, ( GetItemCharges(udg_TempItem) + 1 ))
    else
        call ForceAddPlayerSimple(GetOwningPlayer(GetSpellTargetUnit()), udg_GIT_TesterGroup[GetItemUserData(udg_TempItem)])
        call DisplayTimedTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, 5.00, "TRIGSTR_3177") //DNA Extracted
        set udg_GIT_TesterString[GetItemUserData(udg_TempItem)]=( udg_GIT_TesterString[GetItemUserData(udg_TempItem)] + ( GetPlayerName(GetOwningPlayer(GetSpellTargetUnit())) + "\n" ) )
        
        if ( udg_GIT_TesterStatus[GetItemUserData(udg_TempItem)] != 3 ) then
            if ( IsPlayerheroEvil(GetSpellTargetUnit()) ) then
                set udg_GIT_TesterStatus[GetItemUserData(udg_TempItem)]=2
            else
                if ( GetOwningPlayer(GetSpellTargetUnit()) == udg_HiddenAndroid ) then
                    set udg_GIT_TesterStatus[GetItemUserData(udg_TempItem)]=3
                endif
            endif
        endif
    endif
    
    if ( GetItemCharges(udg_TempItem) <= 1 ) then
        set udg_TempInt=GetItemUserData(udg_TempItem)
        call RemoveItem(udg_TempItem)
        call CreateItemLoc('I019', udg_HoldZone)
        call UnitAddItemByIdSwapped('I019', GetTriggerUnit())
        call SetItemUserData(GetLastCreatedItem(), udg_TempInt)
    endif
endfunction

//===========================================================================
function InitTrig_GIT takes nothing returns nothing
    set gg_trg_GIT=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_GIT, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_GIT, Condition(function Trig_GIT_Conditions))
    call TriggerAddAction(gg_trg_GIT, function Trig_GIT_Actions)
endfunction


//===========================================================================
// Trigger: GITResolver
//===========================================================================
//TESH.scrollpos=7
//TESH.alwaysfold=0
function Trig_GITResolver_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I019' ) ) then
        return false
    endif
    return true
endfunction

function Trig_GITResolver_Actions takes nothing returns nothing
local unit a=gg_unit_h011_0100

    //If not within 500 range from GIT
    if ( IsUnitInRange(GetManipulatingUnit(), a, 500) == false ) then // Temporary workaround, but saves time so 2.0.-1 will come out in time :)
        call DisplayTextToPlayer(GetOwningPlayer(GetManipulatingUnit()), 0, 0, "|cffffcc00This process can only be done in the Genetic Integrity Tester(GIT)|r") // Debugging message
        call SetItemCharges(GetManipulatedItem(), 1)
        call IssueImmediateOrder(GetManipulatingUnit(), "stop")
        return
    endif

    set udg_TempPoint=GetUnitLoc(GetManipulatingUnit())
    call CreateNUnitsAtLoc(1, 'h038', GetOwningPlayer(GetManipulatingUnit()), udg_TempPoint, bj_UNIT_FACING)
    set a=GetLastCreatedUnit()
    call NewUnitRegister(GetLastCreatedUnit())
    set udg_GIT_TesterGroup[GetUnitUserData(GetLastCreatedUnit())]=udg_GIT_TesterGroup[GetItemUserData(GetManipulatedItem())]
    set udg_GIT_TesterStatus[GetUnitUserData(GetLastCreatedUnit())]=udg_GIT_TesterStatus[GetItemUserData(GetManipulatedItem())]
    set udg_GIT_TesterString[GetUnitUserData(GetLastCreatedUnit())]=udg_GIT_TesterString[GetItemUserData(GetManipulatedItem())]
    call RemoveItem(GetManipulatedItem())
    call RemoveLocation(udg_TempPoint)
    call PauseUnitBJ(true, GetLastCreatedUnit())
    set udg_TempUnit=GetLastCreatedUnit()
    set udg_CountUpBarColor="|cff8080FF"
    call CountUpBar(udg_TempUnit , 60 , 1 / 6.0 , "DoNothing")
    call PauseUnitBJ(false, a)
endfunction

//===========================================================================
function InitTrig_GITResolver takes nothing returns nothing
    set gg_trg_GITResolver=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_GITResolver, EVENT_PLAYER_UNIT_USE_ITEM)
    call TriggerAddCondition(gg_trg_GITResolver, Condition(function Trig_GITResolver_Conditions))
    call TriggerAddAction(gg_trg_GITResolver, function Trig_GITResolver_Actions)
endfunction


//===========================================================================
// Trigger: GITAcquire
//===========================================================================
function Trig_GITAcquire_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I00M' ) ) then
        return false
    endif
    return true
endfunction

function Trig_GITAcquire_Func004Func001C takes nothing returns boolean
    if ( not ( GetItemTypeId(UnitItemInSlotBJ(GetManipulatingUnit(), GetForLoopIndexA())) == 'I00M' ) ) then
        return false
    endif
    return true
endfunction

function Trig_GITAcquire_Func005C takes nothing returns boolean
    if ( not ( udg_TempInt > 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_GITAcquire_Actions takes nothing returns nothing
    set udg_TempInt=0
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_GITAcquire_Func004Func001C() ) then
            set udg_TempInt=( udg_TempInt + 1 )
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    if ( Trig_GITAcquire_Func005C() ) then
        call DisplayTimedTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, 10.00, "|cffffcc00You may only carry one of these devices.|r")
        call UnitRemoveItemSwapped(GetManipulatedItem(), GetManipulatingUnit())
    else
    endif
endfunction

//===========================================================================
function InitTrig_GITAcquire takes nothing returns nothing
    set gg_trg_GITAcquire=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_GITAcquire, EVENT_PLAYER_UNIT_PICKUP_ITEM)
    call TriggerAddCondition(gg_trg_GITAcquire, Condition(function Trig_GITAcquire_Conditions))
    call TriggerAddAction(gg_trg_GITAcquire, function Trig_GITAcquire_Actions)
endfunction

//===========================================================================
// Trigger: GITResults
//===========================================================================
function Trig_GITResults_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetSoldItem()) == 'I01A' ) ) then //I01A is the "Test Results" (sold) item
        return false
    endif
    return true
endfunction




function Trig_GITResults_Copy_Func015Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetEnumUnit()) == 'h038' ) ) then //h038 is the GIT resolver unit
        return false
    endif
    if ( not ( GetEnumUnit() != GetTriggerUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_GITResults_Copy_Func015A takes nothing returns nothing
    if ( Trig_GITResults_Copy_Func015Func001C() ) then
        call KillUnit(GetEnumUnit())
    endif
endfunction

function RemovePickedBloodtestItem takes nothing returns nothing
            //call DisplayTextToForce( GetPlayersAll(), ".")// Debug msg
    if ( GetItemTypeId(GetEnumItem()) == 'I019' or GetItemTypeId(GetEnumItem()) == 'I00M' ) then
        call RemoveItem(GetEnumItem())
            //call DisplayTextToForce( GetPlayersAll(), "Removed an bloodtest")// Debug msg
    endif
endfunction


function Trig_GITResults_Actions takes nothing returns nothing

    //If Central GIT is dead, dont even bother.
    if ( IsUnitDeadBJ(gg_unit_h011_0100) == true ) then
        call DisplayTextToPlayer(GetOwningPlayer(GetBuyingUnit()), 0, 0, "TRIGSTR_3964")
        return
    endif
    
    set udg_TempItem=GetSoldItem()
    set udg_TempString="|cffffcc00This sample contains the DNA of:|r"
    call DisplayTextToPlayer(GetOwningPlayer(GetBuyingUnit()), 0, 0, udg_TempString)
    call DisplayTextToPlayer(GetOwningPlayer(GetBuyingUnit()), 0, 0, udg_GIT_TesterString[GetUnitUserData(GetSellingUnit())])
    if ( udg_GIT_TesterStatus[GetUnitUserData(GetSellingUnit())] == 1 ) then
        call DisplayTextToPlayer(GetOwningPlayer(GetBuyingUnit()), 0, 0, "TRIGSTR_2390")
    else
        if ( udg_GIT_TesterStatus[GetUnitUserData(GetSellingUnit())] == 2 ) then
            call DisplayTextToPlayer(GetOwningPlayer(GetBuyingUnit()), 0, 0, "TRIGSTR_3125")
        else
            call DisplayTextToPlayer(GetOwningPlayer(GetBuyingUnit()), 0, 0, "TRIGSTR_3124")
        endif
    endif
    call RemoveItem(udg_TempItem)
    
    // =============================
    // =======Blood Testing Wipe Below! =======
    // =============================
    call BloodTestingWipe()
	
    // Below is to destroy any other GIT resolver that may happen within that time. It could be in above function, but lazy2stronk
    set udg_TempLoc3=GetUnitLoc(GetTriggerUnit())
    set udg_TempUnitGroup=GetUnitsInRangeOfLocAll(3000.00, udg_TempLoc3)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_GITResults_Copy_Func015A)
    
    //memory leak fixes
    call DestroyGroup(udg_TempUnitGroup)
    call RemoveLocation(udg_TempLoc3)
	
    // Below is to delete any blood-testing item on the ground...
    call EnumItemsInRectBJ(GetPlayableMapRect(), function RemovePickedBloodtestItem)
endfunction

//===========================================================================
function InitTrig_GITResults takes nothing returns nothing
    set gg_trg_GITResults=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_GITResults, EVENT_PLAYER_UNIT_SELL_ITEM)
    call TriggerAddCondition(gg_trg_GITResults, Condition(function Trig_GITResults_Conditions))
    call TriggerAddAction(gg_trg_GITResults, function Trig_GITResults_Actions)
endfunction


//===========================================================================
// Trigger: GITAddTestsToMedshops
//
// In this way, it is added via trigger (since the medshop now has the "Sell Items" ability for this to work), so as these items can be removed via trigger later ;)
//===========================================================================
function Trig_GITAddTestsToMedshops_Func003A takes nothing returns nothing
    call AddItemToStockBJ('I00M', GetEnumUnit(), 0, 1)
endfunction

function Trig_GITAddTestsToMedshops_Actions takes nothing returns nothing
    set udg_TempUnitGroup=GetUnitsOfTypeIdAll('h00G')
    call ForGroupBJ(udg_TempUnitGroup, function Trig_GITAddTestsToMedshops_Func003A)
    call AddItemToStockBJ('I00M', gg_unit_h011_0100, 0, 99)
    call DestroyGroup(udg_TempUnitGroup)
endfunction

//===========================================================================
function InitTrig_GITAddTestsToMedshops takes nothing returns nothing
    set gg_trg_GITAddTestsToMedshops=CreateTrigger()
    call TriggerAddAction(gg_trg_GITAddTestsToMedshops, function Trig_GITAddTestsToMedshops_Actions)
endfunction

//===========================================================================
// Trigger: Nanovirus
//
//  chain combo!!!!!(atk speed and eliminate debuffs) to do so give him abilities at start but remove them after a guard suit enters the game
// check if string dissapeaers
//===========================================================================
function Trig_Nanovirus_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A09R' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Nanovirus_Func004Func001Func001C takes nothing returns boolean
    if ( ( UnitHasBuffBJ(udg_TempUnit2, 'BNpa') == true ) ) then
        return true
    endif
    if ( ( UnitHasBuffBJ(udg_TempUnit2, 'B00H') == true ) ) then
        return true
    endif
    if ( ( UnitHasBuffBJ(udg_TempUnit2, 'BNpm') == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_Nanovirus_Func004Func001Func003Func002Func001Func001C takes nothing returns boolean
    if ( not ( udg_MutantUpgradeLevel == 3 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Nanovirus_Func004Func001Func003Func002Func001C takes nothing returns boolean
    if ( not ( udg_MutantUpgradeLevel == 2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Nanovirus_Func004Func001Func003Func002C takes nothing returns boolean
    if ( not ( udg_MutantUpgradeLevel == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Nanovirus_Func004Func001Func003C takes nothing returns boolean
    if ( not ( UnitHasBuffBJ(udg_TempUnit2, 'B009') == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Nanovirus_Func004Func001C takes nothing returns boolean
    if ( not Trig_Nanovirus_Func004Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Nanovirus_Func004Func007C takes nothing returns boolean
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h02G' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h02O' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h016' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h014' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h011' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h012' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h049' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h017' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h04S' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h00G' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h03Z' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h023' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h019' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h00O' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h00P' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h00Q' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h00R' ) ) then
        return true
    endif
    if ( ( IsUnitType(udg_TempUnit2, UNIT_TYPE_STRUCTURE) == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_Nanovirus_Func004C takes nothing returns boolean
    if ( not Trig_Nanovirus_Func004Func007C() ) then
        return false
    endif
    return true
endfunction

function Trig_Nanovirus_Actions takes nothing returns nothing
    set udg_TempUnit2=GetSpellTargetUnit()
    if ( Trig_Nanovirus_Func004C() ) then
        call CreateTextTagUnitBJ("TRIGSTR_4809", udg_TempUnit2, 0, 10, 80.00, 80.00, 100, 0)
        call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 32.00, 90)
        call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
        call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 5)
        call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 4)
    else
        if ( Trig_Nanovirus_Func004Func001C() ) then
            call UnitRemoveBuffsBJ(bj_REMOVEBUFFS_ALL, udg_TempUnit2)
            call CreateNUnitsAtLoc(1, 'e03D', Player(PLAYER_NEUTRAL_AGGRESSIVE), GetUnitLoc(udg_TempUnit2), bj_UNIT_FACING)
            call UnitApplyTimedLifeBJ(2.00, 'BTLF', GetLastCreatedUnit())
            call IssueTargetOrderBJ(GetLastCreatedUnit(), "parasite", udg_TempUnit2)
        else
            if ( Trig_Nanovirus_Func004Func001Func003C() ) then
                if ( Trig_Nanovirus_Func004Func001Func003Func002C() ) then
                    call UnitRemoveBuffsBJ(bj_REMOVEBUFFS_ALL, udg_TempUnit2)
                    call CreateNUnitsAtLoc(1, 'e03E', Player(PLAYER_NEUTRAL_AGGRESSIVE), GetUnitLoc(udg_TempUnit2), bj_UNIT_FACING)
                    call UnitApplyTimedLifeBJ(2.00, 'BTLF', GetLastCreatedUnit())
                    call IssueTargetOrderBJ(GetLastCreatedUnit(), "parasite", udg_TempUnit2)
                else
                    if ( Trig_Nanovirus_Func004Func001Func003Func002Func001C() ) then
                        call UnitRemoveBuffsBJ(bj_REMOVEBUFFS_ALL, udg_TempUnit2)
                        call CreateNUnitsAtLoc(1, 'e013', Player(PLAYER_NEUTRAL_AGGRESSIVE), GetUnitLoc(udg_TempUnit2), bj_UNIT_FACING)
                        call UnitApplyTimedLifeBJ(2.00, 'BTLF', GetLastCreatedUnit())
                        call IssueTargetOrderBJ(GetLastCreatedUnit(), "parasite", udg_TempUnit2)
                    else
                        if ( Trig_Nanovirus_Func004Func001Func003Func002Func001Func001C() ) then
                            call UnitRemoveBuffsBJ(bj_REMOVEBUFFS_ALL, udg_TempUnit2)
                            call CreateNUnitsAtLoc(1, 'e00D', Player(PLAYER_NEUTRAL_AGGRESSIVE), GetUnitLoc(udg_TempUnit2), bj_UNIT_FACING)
                            call UnitApplyTimedLifeBJ(2.00, 'BTLF', GetLastCreatedUnit())
                            call IssueTargetOrderBJ(GetLastCreatedUnit(), "parasite", udg_TempUnit2)
                        else
                        endif
                    endif
                endif
            else
                call UnitRemoveBuffsBJ(bj_REMOVEBUFFS_ALL, udg_TempUnit2)
            endif
        endif
    endif
endfunction

//===========================================================================
function InitTrig_Nanovirus takes nothing returns nothing
    set gg_trg_Nanovirus=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Nanovirus, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Nanovirus, Condition(function Trig_Nanovirus_Conditions))
    call TriggerAddAction(gg_trg_Nanovirus, function Trig_Nanovirus_Actions)
endfunction

//===========================================================================
// Trigger: EnergyTransmission
//===========================================================================
function Trig_EnergyTransmission_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02H' ) ) then
        return false
    endif
    return true
endfunction

function Trig_EnergyTransmission_Func011C takes nothing returns boolean
    if ( not ( GetSpellAbilityUnit() == GetSpellTargetUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_EnergyTransmission_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPoint2=GetUnitLoc(GetSpellTargetUnit())
    call AddSpecialEffectLocBJ(udg_TempPoint, "war3mapImported\\HealthGain.mdx")
    call SFXThreadClean()
    call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\NightElf\\Taunt\\TauntCaster.mdl")
    call SFXThreadClean()
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    if ( Trig_EnergyTransmission_Func011C() ) then
        call SetUnitLifeBJ(GetSpellTargetUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetSpellTargetUnit()) + 100.00 ))
    else
        call SetUnitLifeBJ(GetSpellTargetUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetSpellTargetUnit()) + 150.00 ))
        call SetUnitLifeBJ(GetSpellAbilityUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetSpellAbilityUnit()) - 50.00 ))
    endif
endfunction

//===========================================================================
function InitTrig_EnergyTransmission takes nothing returns nothing
    set gg_trg_EnergyTransmission=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_EnergyTransmission, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_EnergyTransmission, Condition(function Trig_EnergyTransmission_Conditions))
    call TriggerAddAction(gg_trg_EnergyTransmission, function Trig_EnergyTransmission_Actions)
endfunction

//===========================================================================
// Trigger: Deterministic Invigoration
//===========================================================================
function Trig_Deterministic_Invigoration_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A09Q' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Deterministic_Invigoration_Func005Func003C takes nothing returns boolean
    if ( not ( udg_TempUnit != udg_TempUnit2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Deterministic_Invigoration_Func005Func007C takes nothing returns boolean
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h02O' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h016' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h014' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h011' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h012' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h049' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h017' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h04S' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h00G' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h03Z' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h023' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h019' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h00O' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h00P' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h00Q' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(udg_TempUnit2) == 'h00R' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Deterministic_Invigoration_Func005C takes nothing returns boolean
    if ( not Trig_Deterministic_Invigoration_Func005Func007C() ) then
        return false
    endif
    return true
endfunction

function Trig_Deterministic_Invigoration_Actions takes nothing returns nothing
    set udg_TempUnit=GetTriggerUnit()
    set udg_TempUnit2=GetSpellTargetUnit()
    if ( Trig_Deterministic_Invigoration_Func005C() ) then
    else
        call UnitAddAbilityBJ('A0A0', udg_TempUnit)
        // If casted on an ally
        if ( Trig_Deterministic_Invigoration_Func005Func003C() ) then
            // Add buffs to target
            call UnitAddAbilityBJ('A09W', udg_TempUnit2)
            call UnitAddAbilityBJ('A09V', udg_TempUnit2)
        else
        endif
        set udg_GuardInvigorationSelf[GetConvertedPlayerId(GetOwningPlayer(udg_TempUnit))]=udg_TempUnit
        set udg_GuardInvigorationAlly[GetConvertedPlayerId(GetOwningPlayer(udg_TempUnit))]=udg_TempUnit2
        call StartTimerBJ(udg_GuardInvigorationExpiration[GetConvertedPlayerId(GetOwningPlayer(udg_TempUnit))], false, 8.00)
    endif
endfunction

//===========================================================================
function InitTrig_Deterministic_Invigoration takes nothing returns nothing
    set gg_trg_Deterministic_Invigoration=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Deterministic_Invigoration, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Deterministic_Invigoration, Condition(function Trig_Deterministic_Invigoration_Conditions))
    call TriggerAddAction(gg_trg_Deterministic_Invigoration, function Trig_Deterministic_Invigoration_Actions)
endfunction

//===========================================================================
// Trigger: Deterministic Invigoration Convert
//===========================================================================
function Trig_Deterministic_Invigoration_Convert_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A09V' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Deterministic_Invigoration_Convert_Actions takes nothing returns nothing
    call UnitRemoveAbilityBJ('A09V', GetTriggerUnit())
    call UnitRemoveAbilityBJ('A09W', GetTriggerUnit())
endfunction

//===========================================================================
function InitTrig_Deterministic_Invigoration_Convert takes nothing returns nothing
    set gg_trg_Deterministic_Invigoration_Convert=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Deterministic_Invigoration_Convert, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Deterministic_Invigoration_Convert, Condition(function Trig_Deterministic_Invigoration_Convert_Conditions))
    call TriggerAddAction(gg_trg_Deterministic_Invigoration_Convert, function Trig_Deterministic_Invigoration_Convert_Actions)
endfunction

//===========================================================================
// Trigger: Deterministic Invigoration Expiration
//
// The previous version was the biggest hack I had made. Literally fel-tier code. I refactored this, so it is readable and doesn't take the space of 12 triggers -_-
//===========================================================================
function Trig_Deterministic_Invigoration_Expiration_Actions takes nothing returns nothing
    local integer i= 0
    local timer invigorationTimer= GetExpiredTimer()

    //Find the [i] of the timer
    loop
        exitwhen i > 12
    
            if ( invigorationTimer == udg_GuardInvigorationExpiration[i] ) then
                call UnitRemoveAbilityBJ('A0A0', udg_GuardInvigorationSelf[i])
                call UnitRemoveAbilityBJ('A09W', udg_GuardInvigorationAlly[i])
                call UnitRemoveAbilityBJ('A09V', udg_GuardInvigorationAlly[i])
                call UnitRemoveBuffBJ('B01E', udg_GuardInvigorationAlly[i])
                set i=12 //just like writing return!
            endif
    
        set i=i + 1
    endloop
    
    
endfunction

//===========================================================================
function InitTrig_Deterministic_Invigoration_Expiration takes nothing returns nothing

    local integer i= 0
    
    set gg_trg_Deterministic_Invigoration_Expiration=CreateTrigger()
    call TriggerAddAction(gg_trg_Deterministic_Invigoration_Expiration, function Trig_Deterministic_Invigoration_Expiration_Actions)
    
    loop
        exitwhen i > 11
            call TriggerRegisterTimerExpireEventBJ(gg_trg_Deterministic_Invigoration_Expiration, udg_GuardInvigorationExpiration[i])
        set i=i + 1
    endloop

endfunction


//===========================================================================
// Trigger: EnergyLeechCheckBegin
//===========================================================================
function Trig_EnergyLeechCheckBegin_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07X' ) ) then
        return false
    endif
    return true
endfunction

function EnergyLeechCheck_Again takes nothing returns nothing
local timer l=GetExpiredTimer()
local unit abil=LoadUnitHandle((udg_hash), GetHandleId(l), StringHash("unit")) // INLINED!!
local unit targ=LoadUnitHandle((udg_hash), GetHandleId(l), StringHash("unit2")) // INLINED!!

//Target is out of mana
if GetUnitState(targ, UNIT_STATE_MANA) <= 1 then
    call IssueImmediateOrder(abil, "stop")
endif
endfunction

function Trig_EnergyLeechCheckBegin_Actions takes nothing returns nothing
    local timer l=CreateTimer()
    call SaveTimerHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("EnergyLeech_CheckTimer"), l) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(l), StringHash("unit"), GetSpellAbilityUnit()) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(l), StringHash("unit2"), GetSpellTargetUnit()) // INLINED!!
    call TimerStart(l, 0.1, true, function EnergyLeechCheck_Again)
endfunction

//===========================================================================
function InitTrig_EnergyLeechCheckBegin takes nothing returns nothing
    set gg_trg_EnergyLeechCheckBegin=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_EnergyLeechCheckBegin, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_EnergyLeechCheckBegin, Condition(function Trig_EnergyLeechCheckBegin_Conditions))
    call TriggerAddAction(gg_trg_EnergyLeechCheckBegin, function Trig_EnergyLeechCheckBegin_Actions)
endfunction


//===========================================================================
// Trigger: EnergyLeechCheckEnd
//===========================================================================
function Trig_EnergyLeechCheckEnd_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07X' ) ) then
        return false
    endif
    return true
endfunction

function Trig_EnergyLeechCheckEnd_Actions takes nothing returns nothing
    local timer l=LoadTimerHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("EnergyLeech_CheckTimer")) // INLINED!!
    call FlushChildHashtable((udg_hash), GetHandleId(l)) // INLINED!!
    call PauseTimer(l)
    call DestroyTimer(l)
endfunction

//===========================================================================
function InitTrig_EnergyLeechCheckEnd takes nothing returns nothing
    set gg_trg_EnergyLeechCheckEnd=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_EnergyLeechCheckEnd, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
    call TriggerAddCondition(gg_trg_EnergyLeechCheckEnd, Condition(function Trig_EnergyLeechCheckEnd_Conditions))
    call TriggerAddAction(gg_trg_EnergyLeechCheckEnd, function Trig_EnergyLeechCheckEnd_Actions)
endfunction

//===========================================================================
// Trigger: EnergyOfferingCheckBegin
//===========================================================================
function Trig_EnergyOfferingCheckBegin_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0A3' ) ) then
        return false
    endif
    return true
endfunction

function EnergyOfferingCheck_Again takes nothing returns nothing
local timer l=GetExpiredTimer()
local unit abil=LoadUnitHandle((udg_hash), GetHandleId(l), StringHash("unit")) // INLINED!!
local unit targ=LoadUnitHandle((udg_hash), GetHandleId(l), StringHash("unit2")) // INLINED!!

//User is out of mana, or target is full mana
if ( GetUnitState(abil, UNIT_STATE_MANA) <= 1 or GetUnitState(targ, UNIT_STATE_MANA) > 99 ) then
    call IssueImmediateOrder(abil, "stop")
endif
endfunction

function Trig_EnergyOfferingCheckBegin_Actions takes nothing returns nothing
    local timer l=CreateTimer()
    call SaveTimerHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("EnergyOffering_CheckTimer"), l) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(l), StringHash("unit"), GetSpellAbilityUnit()) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(l), StringHash("unit2"), GetSpellTargetUnit()) // INLINED!!
    call TimerStart(l, 0.1, true, function EnergyOfferingCheck_Again)
endfunction

//===========================================================================
function InitTrig_EnergyOfferingCheckBegin takes nothing returns nothing
    set gg_trg_EnergyOfferingCheckBegin=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_EnergyOfferingCheckBegin, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_EnergyOfferingCheckBegin, Condition(function Trig_EnergyOfferingCheckBegin_Conditions))
    call TriggerAddAction(gg_trg_EnergyOfferingCheckBegin, function Trig_EnergyOfferingCheckBegin_Actions)
endfunction


//===========================================================================
// Trigger: EnergyOfferingCheckEnd
//===========================================================================
function Trig_EnergyOfferingCheckEnd_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0A3' ) ) then
        return false
    endif
    return true
endfunction

function Trig_EnergyOfferingCheckEnd_Actions takes nothing returns nothing
    local timer l=LoadTimerHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("EnergyOffering_CheckTimer")) // INLINED!!
    call FlushChildHashtable((udg_hash), GetHandleId(l)) // INLINED!!
    call PauseTimer(l)
    call DestroyTimer(l)
endfunction

//===========================================================================
function InitTrig_EnergyOfferingCheckEnd takes nothing returns nothing
    set gg_trg_EnergyOfferingCheckEnd=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_EnergyOfferingCheckEnd, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
    call TriggerAddCondition(gg_trg_EnergyOfferingCheckEnd, Condition(function Trig_EnergyOfferingCheckEnd_Conditions))
    call TriggerAddAction(gg_trg_EnergyOfferingCheckEnd, function Trig_EnergyOfferingCheckEnd_Actions)
endfunction

//===========================================================================
// Trigger: EnergyShift
//===========================================================================
function Trig_EnergyShift_Conditions takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A0B7', GetTriggerUnit()) <= 0 ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'h04M' ) ) then
        return false
    endif
    if ( not ( GetSpellAbilityId() == 'A0A7' ) ) then
        return false
    endif
    return true
endfunction

function Trig_EnergyShift_Func006C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A07X', GetTriggerUnit()) == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_EnergyShift_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
    if ( Trig_EnergyShift_Func006C() ) then
        call UnitRemoveAbilityBJ('A07X', GetTriggerUnit())
        call UnitAddAbilityBJ('A0A3', GetTriggerUnit())
    else
        call UnitRemoveAbilityBJ('A0A3', GetTriggerUnit())
        call UnitAddAbilityBJ('A07X', GetTriggerUnit())
    endif
endfunction

//===========================================================================
function InitTrig_EnergyShift takes nothing returns nothing
    set gg_trg_EnergyShift=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_EnergyShift, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_EnergyShift, Condition(function Trig_EnergyShift_Conditions))
    call TriggerAddAction(gg_trg_EnergyShift, function Trig_EnergyShift_Actions)
endfunction

//===========================================================================
// Trigger: SummonMetal
//===========================================================================
function Trig_SummonMetal_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSummonedUnit()) == 'h04L' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SummonMetal_Actions takes nothing returns nothing
    call SetUnitTimeScalePercent(GetSummonedUnit(), 0.00)
    call SetUnitOwner(GetSummonedUnit(), Player(PLAYER_NEUTRAL_PASSIVE), true)
endfunction

//===========================================================================
function InitTrig_SummonMetal takes nothing returns nothing
    set gg_trg_SummonMetal=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SummonMetal, EVENT_PLAYER_UNIT_SUMMON)
    call TriggerAddCondition(gg_trg_SummonMetal, Condition(function Trig_SummonMetal_Conditions))
    call TriggerAddAction(gg_trg_SummonMetal, function Trig_SummonMetal_Actions)
endfunction

//===========================================================================
// Trigger: MagneticThrust
//===========================================================================
function Trig_MagneticThrust_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07U' ) ) then
        return false
    endif
    return true
endfunction

//Push2 is global function pushing units, muh physicsss

//Optimally, med regenerator + GIT Resolver (+ motion sensor)
//Should take no damage from pushing, while also not pushing bounce'd units.
//But whatever.
//Honestly, if the initial thrust of magnetic suit did no damage, it would be not OP, but broken.
function MT_PushAway takes nothing returns nothing
    local trigger t=GetTriggeringTrigger()
    local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("t")) // INLINED!!

    if not ( HaveSavedBoolean((udg_hash), GetHandleId(a), StringHash("AlreadyHit_" + I2S((GetUnitUserData((GetTriggerUnit())))))) ) and GetUnitAbilityLevel(GetTriggerUnit(), 'Avul') == 0 and IsUnitAliveBJ(GetTriggerUnit()) and GetUnitPointValue(GetTriggerUnit()) != 37 then // INLINED!!
        
        //If the one who cast it, do not damage, otherwise PUSHHHH
        if ( LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("caster")) != GetTriggerUnit() ) then // INLINED!!
            call UnitDamageTarget(a, GetTriggerUnit(), 100.0, true, true, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
        endif
        
        call Push2(GetTriggerUnit() , 400.0 , 230.0 , AngleBetweenUnits(a , GetTriggerUnit()))
        
        //Cache already hit by an object, so the same won't do it again?
        call SaveBoolean((udg_hash), GetHandleId(a), StringHash("AlreadyHit_" + I2S((GetUnitUserData((GetTriggerUnit()))))), true) // INLINED!!
    endif

endfunction


function MT_Cleanup takes nothing returns nothing
    local timer m=GetExpiredTimer()
    local trigger t=LoadTriggerHandle((udg_hash), GetHandleId(m), StringHash("a")) // INLINED!!
    local unit a= LoadUnitHandle((udg_hash), GetHandleId(m), StringHash("unit")) // INLINED!!

    call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
    call DestroyTrigger(t)
    call FlushChildHashtable((udg_hash), GetHandleId(m)) // INLINED!!
    call DestroyTimer(m)
    call FlushChildHashtable((udg_hash), GetHandleId(a)) // INLINED!!
endfunction

function ThrustPickedMetalUnit takes nothing returns nothing
    local trigger pushContactTrigger
    local timer m
    local unit thrustableUnit=GetEnumUnit()

    //useless if, since the units enumerated/picked here, are already filtered!
    //However! that suit unit function is DEFINITELY interesting. As in, you can push other players holy fuck.
    //if GetUnitTypeId(thrustableUnit)=='h04L' or GetUnitTypeId(thrustableUnit)=='h03N' or GetUnitTypeId(GetFilterUnit())=='n00J' or IsUnitSuit(thrustableUnit) then
        set m=CreateTimer()
        set pushContactTrigger=CreateTrigger()
        
        //90 range is the magnetic thrust
        //When the enumerated unit (metal) comes into contact with something on 90 range (melee contact), then run function push away ;)
        call TriggerRegisterUnitInRange(pushContactTrigger, thrustableUnit, 90.0, null)
        call TriggerAddAction(pushContactTrigger, function MT_PushAway)
        
        //Cache/Remember who the caster is, and which ones are the pushed objects!
        call SaveUnitHandle((udg_hash), GetHandleId(pushContactTrigger), StringHash("t"), thrustableUnit) // INLINED!!
        call SaveUnitHandle((udg_hash), GetHandleId(pushContactTrigger), StringHash("caster"), udg_TempUnit4) // INLINED!!
        
        
        call SaveTriggerHandle((udg_hash), GetHandleId(m), StringHash("a"), pushContactTrigger) // INLINED!!
        call SaveUnitHandle((udg_hash), GetHandleId(m), StringHash("unit"), thrustableUnit) // INLINED!!
        set udg_TempPoint=GetUnitLoc(thrustableUnit)
        
        //If suited unit pushed (doesnt happen cuz of filter feelsbadman)
        if (GetUnitAbilityLevel((thrustableUnit), 'A070') == 1) then // INLINED!!
            call Push2(thrustableUnit , 250.0 , 250.0 , AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
            call TimerStart(m, 1.0, false, function MT_Cleanup)
        else //magnetic object
            call Push2(thrustableUnit , 800.0 , 250.0 , AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
            call TimerStart(m, 4.0, false, function MT_Cleanup)
        endif
        
        call RemoveLocation(udg_TempPoint)

        set pushContactTrigger=null
    //endif
endfunction

//return IsMetallicObject
function MT_Filter takes nothing returns boolean
    return GetUnitTypeId(GetFilterUnit()) == 'h04L' or GetUnitTypeId(GetFilterUnit()) == 'h03N' or GetUnitTypeId(GetFilterUnit()) == 'n00J' or GetUnitTypeId(GetFilterUnit()) == 'h04A' or GetUnitTypeId(GetFilterUnit()) == 'h01Z' or GetUnitTypeId(GetFilterUnit()) == 'h00B' or GetUnitTypeId(GetFilterUnit()) == 'e018' or GetUnitTypeId(GetFilterUnit()) == 'h04Q' or GetUnitTypeId(GetFilterUnit()) == 'h038' or GetUnitTypeId(GetFilterUnit()) == 'e00C' //or GetUnitTypeId(GetFilterUnit())=='h045'
endfunction

function Trig_MagneticThrust_Actions takes nothing returns nothing
    local location magneticMasterLocation= GetUnitLoc(GetSpellAbilityUnit())
    local boolexpr ord=Condition(function MT_Filter)
    local group metallicObjectGroup= GetUnitsInRangeOfLocMatching(310.00, magneticMasterLocation, ord)
    local group tempMetallicObjectGroup=metallicObjectGroup
    local unit pickedUnit
    local integer i=0
    
    set udg_TempPoint2=GetSpellTargetLoc()
    set udg_TempUnit4=GetSpellAbilityUnit()
    
    //If more than 5 units to be pushed (in the metal/saw/barrel group)
    //Take metallicObjectGroup's elements and put them onto... wtf?
    //Remove, put them onto tempMetallicObjectGroup, then merge the groups, wtf?!!!!!
    //WHY IS THIS A THING? WAS THERE EVEN A BUG?
    if CountUnitsInGroup(metallicObjectGroup) > 5 then
        set tempMetallicObjectGroup=CreateGroup()
        
        loop
            exitwhen i > 4
                set pickedUnit=FirstOfGroup(metallicObjectGroup)
                call GroupRemoveUnit(metallicObjectGroup, pickedUnit)
                call GroupAddUnit(tempMetallicObjectGroup, pickedUnit)
                set i=i + 1
        endloop

        set metallicObjectGroup=tempMetallicObjectGroup
    endif

    //Pushing time!
    call ForGroupBJ(metallicObjectGroup, function ThrustPickedMetalUnit)
    
    //Clean cache
    call DestroyGroup(metallicObjectGroup)
    call DestroyGroup(tempMetallicObjectGroup)
    call RemoveLocation(magneticMasterLocation)
endfunction

//===========================================================================
function InitTrig_MagneticThrust takes nothing returns nothing
    set gg_trg_MagneticThrust=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_MagneticThrust, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_MagneticThrust, Condition(function Trig_MagneticThrust_Conditions))
    call TriggerAddAction(gg_trg_MagneticThrust, function Trig_MagneticThrust_Actions)
endfunction


//===========================================================================
// Trigger: CoreoverloadBegin
//===========================================================================
function Trig_CoreoverloadBegin_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A06C' ) ) then
        return false
    endif
    return true
endfunction

function Trig_CoreoverloadBegin_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempUnit=GetSpellAbilityUnit()
    set udg_CountUpBarColor="|cff000000"
    call CountUpBar(udg_TempUnit , 60 , 0.06666 , "DoNothing")
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_CoreoverloadBegin takes nothing returns nothing
    set gg_trg_CoreoverloadBegin=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_CoreoverloadBegin, EVENT_PLAYER_UNIT_SPELL_CHANNEL)
    call TriggerAddCondition(gg_trg_CoreoverloadBegin, Condition(function Trig_CoreoverloadBegin_Conditions))
    call TriggerAddAction(gg_trg_CoreoverloadBegin, function Trig_CoreoverloadBegin_Actions)
endfunction

//===========================================================================
// Trigger: Coreoverload
//===========================================================================
function Trig_Coreoverload_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A06C' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Coreoverload_Func008Func001Func001C takes nothing returns boolean
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'DTrx' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT40' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT16' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT06' ) ) then
        return false
    endif
    if ( not ( GetDestructableTypeId(GetEnumDestructable()) != 'YT30' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Coreoverload_Func008Func001C takes nothing returns boolean
    if ( not Trig_Coreoverload_Func008Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_Coreoverload_Func008A takes nothing returns nothing
    if ( Trig_Coreoverload_Func008Func001C() ) then
       //call KillDestructable( GetEnumDestructable() )
       call UnitDamageTarget(GetSpellAbilityUnit(), GetEnumDestructable(), 2550.0, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
    else
    endif
endfunction

function Coreoverload_Explosion takes nothing returns nothing
    set udg_TempBool=UnitInSector(GetEnumUnit() , udg_TempInt)
    if udg_TempBool then
        call UnitDamageTargetBJ(udg_TempUnit, GetEnumUnit(), 700.00, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL)
    else
    endif
endfunction


function Trig_Coreoverload_Actions takes nothing returns nothing
local group g
local unit r=GetSpellAbilityUnit()
    set udg_TempUnit=GetSpellAbilityUnit()
    set udg_TempPoint=GetUnitLoc(udg_TempUnit)
    call CreateNUnitsAtLoc(1, 'e00E', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
    call SetUnitScalePercent(GetLastCreatedUnit(), 75.00, 75.00, 75.00)
    call UnitDamageTargetBJ(r, r, 150.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
    set udg_TempInt=GetSector(udg_TempPoint)
    call EnumDestructablesInCircleBJ(500.00, udg_TempPoint, function Trig_Coreoverload_Func008A)
    set udg_TempReal=GetLocationZ(udg_TempPoint)
    if udg_TempReal >= - 600.00 then
        call TerrainDeformationCraterBJ(0.5, true, udg_TempPoint, 512, 40.00)
    else
    endif
        call SetUnitTimeScalePercent(CreateUnitAtLoc(GetOwningPlayer(udg_TempUnit), 'e01T', udg_TempPoint, GetRandomDirectionDeg()), 0.0)
      set g=GetUnitsInRangeOfLocAll(425.0, udg_TempPoint)
      set udg_TempUnit=r
      call GroupRemoveUnit(g, udg_TempUnit)
      call ForGroup(g, function Coreoverload_Explosion)
      call DestroyGroup(g)
  call RemoveLocation(udg_TempPoint)
        endfunction

//===========================================================================
function InitTrig_Coreoverload takes nothing returns nothing
    set gg_trg_Coreoverload=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Coreoverload, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Coreoverload, Condition(function Trig_Coreoverload_Conditions))
    call TriggerAddAction(gg_trg_Coreoverload, function Trig_Coreoverload_Actions)
endfunction


//===========================================================================
// Trigger: CoreoverloadStop
//===========================================================================
function Trig_CoreoverloadStop_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A06C' ) ) then
        return false
    endif
    return true
endfunction

function Trig_CoreoverloadStop_Actions takes nothing returns nothing
    call SetUnitManaBJ(GetSpellAbilityUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetSpellAbilityUnit()) - 20.00 ))
    call DestroyUnitBar(GetSpellAbilityUnit())
endfunction

//===========================================================================
function InitTrig_CoreoverloadStop takes nothing returns nothing
    set gg_trg_CoreoverloadStop=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_CoreoverloadStop, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
    call TriggerAddCondition(gg_trg_CoreoverloadStop, Condition(function Trig_CoreoverloadStop_Conditions))
    call TriggerAddAction(gg_trg_CoreoverloadStop, function Trig_CoreoverloadStop_Actions)
endfunction

//===========================================================================
// Trigger: ChargeupBegin
//===========================================================================
function Trig_ChargeupBegin_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04K' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ChargeupBegin_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    call CreateNUnitsAtLoc(1, 'e01O', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
    call ResetUnitAnimation(GetLastCreatedUnit())
    call SizeUnitOverTime(GetLastCreatedUnit() , 5.0 , 1.0 , 3.0 , false)
    call SaveUnitHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("Chargeup_Effect"), GetLastCreatedUnit()) // INLINED!!
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_ChargeupBegin takes nothing returns nothing
    set gg_trg_ChargeupBegin=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ChargeupBegin, EVENT_PLAYER_UNIT_SPELL_CHANNEL)
    call TriggerAddCondition(gg_trg_ChargeupBegin, Condition(function Trig_ChargeupBegin_Conditions))
    call TriggerAddAction(gg_trg_ChargeupBegin, function Trig_ChargeupBegin_Actions)
endfunction

//===========================================================================
// Trigger: ChargeupFinish
//===========================================================================
function Trig_ChargeupFinish_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04K' ) ) then
        return false
    endif
    return true
endfunction

function ChargeupDischarge takes nothing returns nothing
    local trigger t=GetTriggeringTrigger()
    local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
    local unit b
    
    if GetAttacker() == a then
        set b=GetTriggerUnit()
        call UnitRemoveAbility(a, 'A093')
        call UnitDamageTarget(a, b, 155.0, true, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
        set bj_lastCreatedEffect=AddSpecialEffect("Abilities\\Spells\\Orc\\Purge\\PurgeBuffTarget.mdl", GetUnitX(b), GetUnitY(b))
        call SFXThreadClean()
        call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
        call DestroyTrigger(t)
        call PolledWait(0.4)
        call UnitRemoveAbility(a, 'Alit')
    endif
endfunction

function Trig_ChargeupFinish_Actions takes nothing returns nothing
    local trigger t=CreateTrigger()
    local unit a=GetSpellAbilityUnit()
    //200 radius, 150 dmg
    call DamageAreaForPlayer(GetOwningPlayer(GetSpellAbilityUnit()) , 200.0 , 150.0 , GetUnitX(GetSpellAbilityUnit()) , GetUnitY(GetSpellAbilityUnit()))
    call TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_ATTACKED)
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), a) // INLINED!!
    call TriggerAddAction(t, function ChargeupDischarge)
    call UnitAddAbility(a, 'Alit')
    call UnitAddAbility(a, 'A093')
    call PolledWait(8.0)
    call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
    call DestroyTrigger(t)
    call UnitRemoveAbility(a, 'Alit')
    call UnitRemoveAbility(a, 'A093')
endfunction

//===========================================================================
function InitTrig_ChargeupFinish takes nothing returns nothing
    set gg_trg_ChargeupFinish=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ChargeupFinish, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ChargeupFinish, Condition(function Trig_ChargeupFinish_Conditions))
    call TriggerAddAction(gg_trg_ChargeupFinish, function Trig_ChargeupFinish_Actions)
endfunction
//===========================================================================
// Trigger: ChargeupStop
//===========================================================================
function Trig_ChargeupStop_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04K' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ChargeupStop_Actions takes nothing returns nothing
    call KillUnit(LoadUnitHandle((udg_hash), GetHandleId(GetSpellAbilityUnit()), StringHash("Chargeup_Effect"))) // INLINED!!
endfunction

//===========================================================================
function InitTrig_ChargeupStop takes nothing returns nothing
    set gg_trg_ChargeupStop=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ChargeupStop, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
    call TriggerAddCondition(gg_trg_ChargeupStop, Condition(function Trig_ChargeupStop_Conditions))
    call TriggerAddAction(gg_trg_ChargeupStop, function Trig_ChargeupStop_Actions)
endfunction

//===========================================================================
// Trigger: LightningStorm
//===========================================================================
function Trig_LightningStorm_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A092' ) ) then
        return false
    endif
    return true
endfunction

function LightningAI_ScoreUnit takes unit q,unit consider returns real
    local real retz=0.0
    set retz=retz - DistanceBetweenUnits(consider , q) / 600.0
    set retz=retz - 5 * B2I(IsUnitType(consider, UNIT_TYPE_STRUCTURE))
    return retz
endfunction

function LightningRange_ConsiderTargets takes unit q returns unit
//Considers all groups within a range of acquirerange and returns the best target, will return null if none
    local group g
    local group m
    local real acquirerange=350.0
    local unit target=null
    local unit consider
    local real score
    local location a
    set a=GetUnitLoc(q)
    set g=GetUnitsInRangeOfLocAll(acquirerange, a)
    call RemoveLocation(a)
    set m=CreateGroup()
    loop
    exitwhen FirstOfGroup(g) == null
        set consider=FirstOfGroup(g)
        if consider != q and GetUnitAbilityLevel(consider, 'Avul') == 0 and IsUnitAliveBJ(consider) and GetUnitTypeId(consider) != 'n00A' then
            call GroupAddUnit(m, consider)
        endif
        call GroupRemoveUnit(g, consider)
    endloop
    call DestroyGroup(g)
    if CountUnitsInGroup(m) > 0 then
        if CountUnitsInGroup(m) > 1 then
            set score=- 999
            loop
            exitwhen FirstOfGroup(m) == null
                set consider=FirstOfGroup(m)
                if score <= LightningAI_ScoreUnit(q , consider) then
                    set target=consider
                    set score=LightningAI_ScoreUnit(q , consider)
                endif
                call GroupRemoveUnit(m, consider)
            endloop
        else
            set target=FirstOfGroup(m)
        endif
    endif
    call DestroyGroup(m)
    return target
endfunction

function LightningStorm_Callback takes nothing returns nothing
local timer t=GetExpiredTimer()
local unit target=null
local unit lasttarget=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("lt")) // INLINED!!
local unit l=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("l")) // INLINED!!
if IsUnitDeadBJ(l) then
call PauseTimer(t)
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call DestroyTimer(t)
call PolledWait(4.0)
call RemoveUnit(l)
else
set target=LightningRange_ConsiderTargets(l)
if target != lasttarget then
call IssueTargetOrder(l, "attack", target)
set lasttarget=target
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("lt"), lasttarget) // INLINED!!
endif
endif
endfunction

function LightningStorm takes unit l returns nothing
local unit target=null
local unit lasttarget=null
local timer t=CreateTimer()
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("l"), l) // INLINED!!
call TimerStart(t, 0.5, true, function LightningStorm_Callback)
endfunction

function LightningStorm_Slide takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit l=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
local real zvelocity=LoadReal((udg_hash), GetHandleId(k), StringHash("zvelocity")) // INLINED!!
local real c=LoadReal((udg_hash), GetHandleId(k), StringHash("angle")) // INLINED!!
local real height=LoadReal((udg_hash), GetHandleId(k), StringHash("height")) // INLINED!!
local real zforce=LoadReal((udg_hash), GetHandleId(k), StringHash("force")) // INLINED!!
local location a=GetUnitLoc(l)
local location b=PolarProjectionBJ(a, zforce, c)
call SetUnitFlyHeight(l, height - GetLocationZ(a), 0)
if GetLocationZ(b) > height then
//If the collision is a result of the projectile falling then...
if GetLocationZ(a) == GetLocationZ(b) then
set height=GetLocationZ(b)
set zvelocity=- 1.0 * zvelocity
else
if GetTerrainCliffLevelBJ(b) > GetTerrainCliffLevelBJ(a) then
call KillUnit(l)
endif
endif
endif
call SetUnitPositionLoc(l, b)
call SetUnitFacing(l, c)
call RemoveLocation(b)
call RemoveLocation(a)
if IsUnitDeadBJ(l) then
call PauseTimer(k)
call DestroyTimer(k)
set udg_TempUnit=l
set udg_TempPoint=GetUnitLoc(l)
set bj_lastCreatedUnit=CreateUnitAtLoc(Player(PLAYER_NEUTRAL_PASSIVE), 'h01Q', udg_TempPoint, GetRandomDirectionDeg())
call LightningStorm(GetLastCreatedUnit())
call RemoveLocation(udg_TempPoint)
call DestroyGroup(udg_TempUnitGroup)
call CreateScaledEffect("Abilities\\Spells\\Orc\\Purge\\PurgeBuffTarget.mdl" , 4.0 , 4.0 , GetUnitX(l) , GetUnitY(l))
return
endif
call SaveReal((udg_hash), GetHandleId(k), StringHash("height"), height + zvelocity / 25.0) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("zvelocity"), zvelocity - 50) // INLINED!!
call SaveReal((udg_hash), GetHandleId(k), StringHash("angle"), c) // INLINED!!
endfunction


function Trig_LightningStorm_Actions takes nothing returns nothing
local timer k=CreateTimer()
local real r
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPoint2=GetSpellTargetLoc()
    set r=DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2)
    if r > 900.0 then
    set r=900.0
    endif
    call SetUnitAnimation(GetSpellAbilityUnit(), "spell throw")
        call SaveReal((udg_hash), GetHandleId(k), StringHash("height"), GetLocationZ(udg_TempPoint)) // INLINED!!
            call SaveReal((udg_hash), GetHandleId(k), StringHash("force"), r / 900.0 * 675 / 25.0) // INLINED!!
    set udg_TempBool=false
    call CreateNUnitsAtLoc(1, 'e037', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    call RemoveLocation(udg_TempPoint3)
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), GetLastCreatedUnit()) // INLINED!!
    call TimerStart(k, 0.04, true, function LightningStorm_Slide)
    call SaveReal((udg_hash), GetHandleId(k), StringHash("angle"), GetUnitFacing(GetLastCreatedUnit())) // INLINED!!
    call SaveReal((udg_hash), GetHandleId(k), StringHash("zvelocity"), 450.0) // INLINED!!


endfunction

//===========================================================================
function InitTrig_LightningStorm takes nothing returns nothing
    set gg_trg_LightningStorm=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_LightningStorm, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_LightningStorm, Condition(function Trig_LightningStorm_Conditions))
    call TriggerAddAction(gg_trg_LightningStorm, function Trig_LightningStorm_Actions)
endfunction


//===========================================================================
// Trigger: ElectricDischarge
//===========================================================================
function Trig_ElectricDischarge_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02F' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ElectricDischarge_Func006Func002C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h039' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'h037' ) ) then
        return true
    endif
    return false
endfunction

function Trig_ElectricDischarge_Func006C takes nothing returns boolean
    if ( not Trig_ElectricDischarge_Func006Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_ElectricDischarge_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPoint2=GetUnitLoc(GetSpellTargetUnit())
    set udg_TempReal=DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2)
    if ( Trig_ElectricDischarge_Func006C() ) then
    else
        call UnitDamageTargetBJ(GetSpellAbilityUnit(), GetSpellTargetUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetSpellTargetUnit()) * ( 0.05 + ( ( udg_TempReal / 1000.00 ) / 10.00 ) ) ), ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
    endif
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
endfunction

//===========================================================================
function InitTrig_ElectricDischarge takes nothing returns nothing
    set gg_trg_ElectricDischarge=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ElectricDischarge, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ElectricDischarge, Condition(function Trig_ElectricDischarge_Conditions))
    call TriggerAddAction(gg_trg_ElectricDischarge, function Trig_ElectricDischarge_Actions)
endfunction

//===========================================================================
// Trigger: HandMissile
//===========================================================================
function Trig_HandMissile_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A00A' ) ) then
        return false
    endif
    return true
endfunction

function Trig_HandMissile_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetTriggerUnit())
    call CreateNUnitsAtLoc(1, 'e000', GetOwningPlayer(GetTriggerUnit()), udg_TempPoint, GetUnitFacing(GetTriggerUnit()))
    call RemoveLocation(udg_TempPoint)
    set udg_TempPoint=GetSpellTargetLoc()
    call IssuePointOrderLocBJ(GetLastCreatedUnit(), "clusterrockets", udg_TempPoint)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_HandMissile takes nothing returns nothing
    set gg_trg_HandMissile=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_HandMissile, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_HandMissile, Condition(function Trig_HandMissile_Conditions))
    call TriggerAddAction(gg_trg_HandMissile, function Trig_HandMissile_Actions)
endfunction

//===========================================================================
// Trigger: HalberdRocket
//===========================================================================
function Trig_HalberdRocket_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A03S' ) ) then
        return false
    endif
    return true
endfunction

function HalberdRocket_Slide takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit l=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
local location a=GetUnitLoc(l)
local location b=PolarProjectionBJ(a, 20.0, GetUnitFacing(l))
local real c=LoadReal((udg_hash), GetHandleId(l), StringHash("angle")) // INLINED!!

if GetLocationZ(b) > GetLocationZ(a) + 60.0 then
call KillUnit(l)
endif
if IsPointPathable(GetLocationX(b) , GetLocationY(b) , false) == false then
call KillUnit(l)
endif
call SetUnitPositionLoc(l, b)
call SetUnitFacing(l, c)
call RemoveLocation(b)
call RemoveLocation(a)
if IsUnitDeadBJ(l) then
call PauseTimer(k)
call DestroyTimer(k)
endif
endfunction

function HalberdRocket_Damage takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
if GetUnitAbilityLevel(GetTriggerUnit(), 'Avul') == 0 and IsUnitAliveBJ(GetTriggerUnit()) and GetUnitPointValue(GetTriggerUnit()) != 37 and LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("caster")) != GetTriggerUnit() then // INLINED!!
call KillUnit(a)
call DestroyTrigger(t)
endif
endfunction

function HalberdRocket_OrderAngle takes nothing returns nothing
local unit rocket=LoadUnitHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("unit")) // INLINED!!
local location a=GetUnitLoc(rocket)
local location b=GetOrderPointLoc()
local real c=AngleBetweenPoints(a, b)
call RemoveLocation(a)
call RemoveLocation(b)
call SaveReal((udg_hash), GetHandleId(rocket), StringHash("angle"), c) // INLINED!!
endfunction

function HalberdRocket_Dies takes nothing returns nothing
local trigger q=GetTriggeringTrigger()
local trigger t=LoadTriggerHandle((udg_hash), GetHandleId(q), StringHash("t")) // INLINED!!
local trigger o=LoadTriggerHandle((udg_hash), GetHandleId(q), StringHash("o")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(GetTriggerUnit())) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(q)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(o)) // INLINED!!
call DestroyTrigger(q)
call DestroyTrigger(t)
call DestroyTrigger(o)
endfunction

function Trig_HalberdRocket_Actions takes nothing returns nothing
local timer k=CreateTimer()
local trigger t=CreateTrigger()
local trigger o=CreateTrigger()
local trigger q=CreateTrigger()

    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPoint2=GetSpellTargetLoc()
    set udg_TempPoint3=PolarProjectionBJ(udg_TempPoint, 10.0, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
    set udg_TempBool=false
    call CreateNUnitsAtLoc(1, 'e00C', GetOwningPlayer(GetSpellAbilityUnit()), udg_TempPoint3, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
 call SaveReal((udg_hash), GetHandleId(GetLastCreatedUnit()), StringHash("angle"), AngleBetweenPoints(udg_TempPoint, udg_TempPoint2)) // INLINED!!
   call TriggerRegisterUnitEvent(q, GetLastCreatedUnit(), EVENT_UNIT_DEATH)
   call TriggerAddAction(q, function HalberdRocket_Dies)
   call SaveTriggerHandle((udg_hash), GetHandleId(q), StringHash("t"), t) // INLINED!!
call SaveTriggerHandle((udg_hash), GetHandleId(q), StringHash("o"), o) // INLINED!!
   call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    call RemoveLocation(udg_TempPoint3)
call TriggerRegisterUnitEvent(o, GetLastCreatedUnit(), EVENT_UNIT_ISSUED_POINT_ORDER)
    call SaveUnitHandle((udg_hash), GetHandleId(o), StringHash("unit"), GetLastCreatedUnit()) // INLINED!!
    call TriggerAddAction(o, function HalberdRocket_OrderAngle)
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), GetLastCreatedUnit()) // INLINED!!
    call TimerStart(k, 0.04, true, function HalberdRocket_Slide)
    call TriggerRegisterUnitInRangeSimple(t, 50.0, GetLastCreatedUnit())
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), GetLastCreatedUnit()) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("caster"), GetSpellAbilityUnit()) // INLINED!!
    call TriggerAddAction(t, function HalberdRocket_Damage)
    call SelectUnitForPlayerSingle(GetLastCreatedUnit(), GetOwningPlayer(GetSpellAbilityUnit()))
    call SetUnitPathing(GetLastCreatedUnit(), false)
endfunction

//===========================================================================
function InitTrig_HalberdRocket takes nothing returns nothing
    set gg_trg_HalberdRocket=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_HalberdRocket, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_HalberdRocket, Condition(function Trig_HalberdRocket_Conditions))
    call TriggerAddAction(gg_trg_HalberdRocket, function Trig_HalberdRocket_Actions)
endfunction


//===========================================================================
// Trigger: KineticRush
//===========================================================================
function KineticRush_Condition takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A05T' or GetSpellAbilityId() == 'A08X' ) ) then
        return false
    endif
    return true
endfunction

function KineticRush_PushAway takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("t")) // INLINED!!
if GetUnitAbilityLevel(GetTriggerUnit(), 'Avul') == 0 and IsUnitAliveBJ(GetTriggerUnit()) and GetUnitPointValue(GetTriggerUnit()) != 37 and LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("caster")) != GetTriggerUnit() then // INLINED!!
call UnitDamageTarget(a, GetTriggerUnit(), 60.0, true, true, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
call Push2(GetTriggerUnit() , 500.0 , 230.0 , AngleBetweenUnits(a , GetTriggerUnit()))
endif

endfunction


function Trig_KineticRush_Actions takes nothing returns nothing
local trigger t=CreateTrigger()
local unit a=GetSpellAbilityUnit()
local location b=GetSpellTargetLoc()
call PolledWait(0.01)
call TriggerRegisterUnitInRange(t, a, 90.0, null)
call TriggerAddAction(t, function KineticRush_PushAway)
call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("t"), a) // INLINED!!
    set udg_TempPoint=GetUnitLoc(a)
    set udg_TempPoint2=b
    call Push2(a , 800.0 , 250.0 , AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    call PolledWait(4.0)
    call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
    call DestroyTrigger(t)
    set t=null
endfunction

//===========================================================================
function InitTrig_KineticRush takes nothing returns nothing
    set gg_trg_KineticRush=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_KineticRush, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddAction(gg_trg_KineticRush, function Trig_KineticRush_Actions)
    call TriggerAddCondition(gg_trg_KineticRush, Condition(function KineticRush_Condition))
endfunction


//===========================================================================
// Trigger: ForceSuitAttackGround
//===========================================================================
function Trig_ForceSuitAttackGround_Conditions takes nothing returns boolean
    if GetSpellAbilityId() == 'A08A' then
        return true
    endif
    return false
endfunction


function Trig_ForceSuitAttackGround_Actions takes nothing returns nothing
local real x= GetSpellTargetX()
local real y= GetSpellTargetY()
local unit sor= GetTriggerUnit()
local real x2= GetUnitX(sor)
local real y2= GetUnitY(sor)
local real arc= Atan2(y2 - y, x2 - x)
local integer i= GetUnitUserData(sor)

set x2=x2 + Cos(arc) * 100
set y2=y2 + Sin(arc) * 100

if (LoadUnitHandle(Table__ht, (((ForceUnit))), (i))) == null then // INLINED!!
    call SaveUnitHandle(Table__ht, (((ForceUnit))), (i), ( CreateUnit(GetOwningPlayer(sor), 'e030', x2, y2, 0))) // INLINED!!
endif

call SetUnitX((LoadUnitHandle(Table__ht, (((ForceUnit))), (i))), x2) // INLINED!!
call SetUnitY((LoadUnitHandle(Table__ht, (((ForceUnit))), (i))), y2) // INLINED!!

call IssueTargetOrderById(sor, 851983, (LoadUnitHandle(Table__ht, (((ForceUnit))), (i)))) // INLINED!!

set sor=null
endfunction

//===========================================================================
function InitTrig_ForceSuitAttackGround takes nothing returns nothing
    set gg_trg_ForceSuitAttackGround=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ForceSuitAttackGround, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ForceSuitAttackGround, Condition(function Trig_ForceSuitAttackGround_Conditions))
    call TriggerAddAction(gg_trg_ForceSuitAttackGround, function Trig_ForceSuitAttackGround_Actions)
    set ForceUnit=s__Table_create()
endfunction


//===========================================================================
// Trigger: RDGLimit
//===========================================================================
function Trig_RDGLimit_Conditions takes nothing returns boolean
   if ( not ( GetSpellAbilityId() == 'A056' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RDGLimit_Func001002002001 takes nothing returns boolean
    return ( IsUnitAliveBJ(GetFilterUnit()) == true )
endfunction

function Trig_RDGLimit_Func001002002002 takes nothing returns boolean
    return ( GetUnitTypeId(GetFilterUnit()) == 'e018' )
endfunction

function Trig_RDGLimit_Func001002002 takes nothing returns boolean
    return GetBooleanAnd((IsUnitAliveBJ(GetFilterUnit()) == true), (GetUnitTypeId(GetFilterUnit()) == 'e018')) // INLINED!!
endfunction

function Trig_RDGLimit_Func002C takes nothing returns boolean
    if ( not ( CountUnitsInGroup(udg_TempUnitGroup) >= 4 ) ) then
        return false
    endif
    return true
endfunction

function Trig_RDGLimit_Actions takes nothing returns nothing
local boolexpr be=Condition(function Trig_RDGLimit_Func001002002)
    set udg_TempUnitGroup=GetUnitsOfPlayerMatching(GetOwningPlayer(GetTriggerUnit()), be)
    if ( Trig_RDGLimit_Func002C() ) then
        call IssueImmediateOrder(GetSpellAbilityUnit(), "stop")
    else
    endif
    call DestroyGroup(udg_TempUnitGroup)
    call DestroyBoolExpr(be)
    set be=null
endfunction

//===========================================================================
function InitTrig_RDGLimit takes nothing returns nothing
    set gg_trg_RDGLimit=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_RDGLimit, EVENT_PLAYER_UNIT_SPELL_CAST)
    call TriggerAddCondition(gg_trg_RDGLimit, Condition(function Trig_RDGLimit_Conditions))
    call TriggerAddAction(gg_trg_RDGLimit, function Trig_RDGLimit_Actions)
endfunction


//===========================================================================
// Trigger: RDGLimitHard
//===========================================================================
function Trig_RDGLimitHard_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetEnteringUnit()) == 'e018' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RDGLimitHard_Func003002002001 takes nothing returns boolean
    return ( IsUnitAliveBJ(GetFilterUnit()) == true )
endfunction

function Trig_RDGLimitHard_Func003002002002 takes nothing returns boolean
    return ( GetUnitTypeId(GetFilterUnit()) == 'e018' )
endfunction

function Trig_RDGLimitHard_Func003002002 takes nothing returns boolean
    return GetBooleanAnd((IsUnitAliveBJ(GetFilterUnit()) == true), (GetUnitTypeId(GetFilterUnit()) == 'e018')) // INLINED!!
endfunction

function Trig_RDGLimitHard_Func004C takes nothing returns boolean
    if ( not ( CountUnitsInGroup(udg_TempUnitGroup) > 4 ) ) then
        return false
    endif
    return true
endfunction

function Trig_RDGLimitHard_Actions takes nothing returns nothing
    set udg_TempUnitGroup=GetUnitsOfPlayerMatching(GetOwningPlayer(GetEnteringUnit()), Condition(function Trig_RDGLimitHard_Func003002002))
    if ( Trig_RDGLimitHard_Func004C() ) then
        call RemoveUnit(GetEnteringUnit())
    else
    endif
        call DestroyGroup(udg_TempUnitGroup)
        call DestroyGroup(udg_TempUnitGroup2)
endfunction

//===========================================================================
function InitTrig_RDGLimitHard takes nothing returns nothing
    set gg_trg_RDGLimitHard=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_RDGLimitHard, GetPlayableMapRect())
    call TriggerAddCondition(gg_trg_RDGLimitHard, Condition(function Trig_RDGLimitHard_Conditions))
    call TriggerAddAction(gg_trg_RDGLimitHard, function Trig_RDGLimitHard_Actions)
endfunction

//===========================================================================
// Trigger: RDGDetonate
//===========================================================================
function Trig_RDGDetonate_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A057' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RDGDetonate_Func003002002001 takes nothing returns boolean
    return ( IsUnitAliveBJ(GetFilterUnit()) == true )
endfunction

function Trig_RDGDetonate_Func003002002002 takes nothing returns boolean
    return ( GetUnitTypeId(GetFilterUnit()) == 'e018' )
endfunction

function Trig_RDGDetonate_Func003002002 takes nothing returns boolean
    return GetBooleanAnd((IsUnitAliveBJ(GetFilterUnit()) == true), (GetUnitTypeId(GetFilterUnit()) == 'e018')) // INLINED!!
endfunction

function Trig_RDGDetonate_Func004A takes nothing returns nothing
    call KillUnit(GetEnumUnit())
endfunction

function Trig_RDGDetonate_Actions takes nothing returns nothing
    set udg_TempUnitGroup=GetUnitsOfPlayerMatching(GetOwningPlayer(GetSpellAbilityUnit()), Condition(function Trig_RDGDetonate_Func003002002))
    call ForGroupBJ(udg_TempUnitGroup, function Trig_RDGDetonate_Func004A)
        call DestroyGroup(udg_TempUnitGroup)
endfunction

//===========================================================================
function InitTrig_RDGDetonate takes nothing returns nothing
    set gg_trg_RDGDetonate=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_RDGDetonate, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_RDGDetonate, Condition(function Trig_RDGDetonate_Conditions))
    call TriggerAddAction(gg_trg_RDGDetonate, function Trig_RDGDetonate_Actions)
endfunction

//===========================================================================
// Trigger: GooSpray
//===========================================================================
function Trig_GooSpray_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07Y' ) ) then
        return false
    endif
    return true
endfunction

function Trig_GooSpray_Actions takes nothing returns nothing
    local location a=GetSpellTargetLoc()
    call TriggerSleepAction(0.40)
    set udg_TempPoint=a
    call AddSpecialEffectLocBJ(udg_TempPoint, "Objects\\Spawnmodels\\Naga\\NagaDeath\\NagaDeath.mdl")
    call SFXThreadClean()
    call CreateNUnitsAtLoc(1, 'e036', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_GooSpray takes nothing returns nothing
    set gg_trg_GooSpray=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_GooSpray, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_GooSpray, Condition(function Trig_GooSpray_Conditions))
    call TriggerAddAction(gg_trg_GooSpray, function Trig_GooSpray_Actions)
endfunction

//===========================================================================
// Trigger: Setup
//===========================================================================
function Trig_Setup_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A08Q' ) ) then
        return false
    endif
    return true
endfunction


function CreateEffectGroup takes nothing returns integer
set EffectGroupCount=EffectGroupCount + 1
call SaveInteger((udg_hash), StringHash("EffectGroup_" + I2S(EffectGroupCount)), StringHash("effects_count"), 0) // INLINED!!
return EffectGroupCount
endfunction

function AddEffectToEffectGroup takes integer groupie,effect a returns nothing
local integer i=LoadInteger((udg_hash), StringHash("EffectGroup_" + I2S(groupie)), StringHash("effects_count")) + 1 // INLINED!!
call SaveEffectHandle((udg_hash), StringHash("EffectGroup_" + I2S(groupie)), StringHash("effect_" + I2S(i)), a) // INLINED!!
call SaveInteger((udg_hash), StringHash("EffectGroup_" + I2S(groupie)), StringHash("effects_count"), i) // INLINED!!
endfunction

function DestroyEffectsInEffectGroup takes integer groupie returns nothing
local integer i=LoadInteger((udg_hash), StringHash("EffectGroup_" + I2S(groupie)), StringHash("effects_count")) // INLINED!!
local integer b=1
loop
exitwhen b > i
call DestroyEffect(LoadEffectHandle((udg_hash), StringHash("EffectGroup_" + I2S(groupie)), StringHash("effect_" + I2S(b)))) // INLINED!!
set b=b + 1
endloop
call FlushChildHashtable((udg_hash), StringHash("EffectGroup_" + I2S(groupie))) // INLINED!!
endfunction

function DifferenceBetweenAngles takes real angle1,real angle2 returns real
if angle2 > angle1 then
    if angle2 - angle1 > 180 then
        return ( 360 - angle2 ) + angle1
    else
        return angle2 - angle1
    endif
else
    if angle1 - angle2 > 180 then
        return ( 360 - angle1 ) + angle2
    else
        return angle1 - angle2
    endif
endif
endfunction

function DistanceBetweenUnitAndPoint takes unit a,location b returns real
local location c=GetUnitLoc(a)
local real d=DistanceBetweenPoints(c, b)
call RemoveLocation(c)
return d
endfunction

function Trig_Setup_Actions takes nothing returns nothing
    local unit a=GetSpellAbilityUnit()
    local location c=GetSpellTargetLoc()
    local location d=GetUnitLoc(GetSpellAbilityUnit())
    local real r=AngleBetweenPoints(d, c)
    local integer effectgroup=CreateEffectGroup()
    
    call AddEffectToEffectGroup(effectgroup , AddSpecialEffectTarget("Abilities\\Spells\\Other\\ImmolationRed\\ImmolationRedTarget.mdl", a, "origin"))
    call RemoveLocation(c)
    call UnitAddAbilityBJ('A08S', GetSpellAbilityUnit())
    set udg_TempPoint2=d
    
    
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=10
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        
        set udg_TempPoint=PolarProjectionBJ(udg_TempPoint2, ( 60.00 * I2R(GetForLoopIndexA()) ), ( GetUnitFacing(GetSpellAbilityUnit()) + 30.00 ))
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Orc\\Bloodlust\\BloodlustTarget.mdl")
        call AddEffectToEffectGroup(effectgroup , bj_lastCreatedEffect)
        call RemoveLocation(udg_TempPoint)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    
    
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=10
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        
        set udg_TempPoint=PolarProjectionBJ(udg_TempPoint2, ( 60.00 * I2R(GetForLoopIndexA()) ), ( GetUnitFacing(GetSpellAbilityUnit()) - 30.00 ))
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Orc\\Bloodlust\\BloodlustTarget.mdl")
        call AddEffectToEffectGroup(effectgroup , bj_lastCreatedEffect)
        call RemoveLocation(udg_TempPoint)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    
    
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=5
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        
        set udg_TempPoint=PolarProjectionBJ(udg_TempPoint2, 600.00, ( GetUnitFacing(GetSpellAbilityUnit()) + ( - 30.00 + ( I2R(GetForLoopIndexA()) * 12.00 ) ) ))
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Orc\\Bloodlust\\BloodlustTarget.mdl")
        call AddEffectToEffectGroup(effectgroup , bj_lastCreatedEffect)
        call RemoveLocation(udg_TempPoint)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    
    loop
        exitwhen DifferenceBetweenAngles(GetUnitFacing(a) , r) > 30.0 or DistanceBetweenUnitAndPoint(a , d) > 50.0
        call TriggerSleepAction(0.10)
    endloop
    set udg_TempUnit=a
    call UnitRemoveAbilityBJ('A08S', udg_TempUnit)
    call DestroyEffectsInEffectGroup(effectgroup)
    call RemoveLocation(d)
endfunction

//===========================================================================
function InitTrig_Setup takes nothing returns nothing
    set gg_trg_Setup=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Setup, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Setup, Condition(function Trig_Setup_Conditions))
    call TriggerAddAction(gg_trg_Setup, function Trig_Setup_Actions)
endfunction


//===========================================================================
// Trigger: BlindingCloud
//===========================================================================
function Trig_BlindingCloud_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04P' ) ) then
        return false
    endif
    return true
endfunction

function Trig_BlindingCloud_Actions takes nothing returns nothing
    set udg_TempPoint2=GetSpellTargetLoc()
    call CreateNUnitsAtLoc(1, 'e013', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint2, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
    call IssuePointOrderLocBJ(GetLastCreatedUnit(), "cloudoffog", udg_TempPoint2)
    call RemoveLocation(udg_TempPoint2)
endfunction

//===========================================================================
function InitTrig_BlindingCloud takes nothing returns nothing
    set gg_trg_BlindingCloud=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_BlindingCloud, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_BlindingCloud, Condition(function Trig_BlindingCloud_Conditions))
    call TriggerAddAction(gg_trg_BlindingCloud, function Trig_BlindingCloud_Actions)
endfunction

//===========================================================================
// Trigger: KidotProjection
//===========================================================================
function Trig_Kidot_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07J' ) ) then
        return false
    endif
    return true
endfunction

function Kidot_Slide takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit l=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
local location a=GetUnitLoc(l)
local location b=PolarProjectionBJ(a, 20.0, GetUnitFacing(l))
local real c=LoadReal((udg_hash), GetHandleId(l), StringHash("angle")) // INLINED!!
local real x=GetUnitX(l)
local real y=GetUnitY(l)
if GetLocationZ(b) > GetLocationZ(a) + 60.0 then
call KillUnit(l)
endif
if IsPointPathable(GetLocationX(b) , GetLocationY(b) , false) == false then
call KillUnit(l)
endif
call SetUnitPositionLoc(l, b)
call SetUnitFacing(l, c)
if x == GetUnitX(l) and y == GetUnitY(l) then
call KillUnit(l)
endif
call RemoveLocation(b)
call RemoveLocation(a)
if IsUnitDeadBJ(l) then
call PauseTimer(k)
call DestroyTimer(k)
endif
endfunction

function Kidot_Damage takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
if GetUnitAbilityLevel(GetTriggerUnit(), 'Avul') == 0 and IsUnitAliveBJ(GetTriggerUnit()) and GetUnitPointValue(GetTriggerUnit()) != 37 and LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("caster")) != GetTriggerUnit() then // INLINED!!
call KillUnit(a)
call DestroyTrigger(t)
endif
endfunction
function Kidot_OrderAngle takes nothing returns nothing
local unit rocket=LoadUnitHandle((udg_hash), GetHandleId(GetTriggeringTrigger()), StringHash("unit")) // INLINED!!
local location a=GetUnitLoc(rocket)
local location b=GetOrderPointLoc()
local real c=AngleBetweenPoints(a, b)
call RemoveLocation(a)
call RemoveLocation(b)
call SaveReal((udg_hash), GetHandleId(rocket), StringHash("angle"), c) // INLINED!!
endfunction

function Kidot_Dies takes nothing returns nothing
local unit a=GetTriggerUnit()
local trigger q=GetTriggeringTrigger()
local trigger t=LoadTriggerHandle((udg_hash), GetHandleId(q), StringHash("t")) // INLINED!!
local trigger o=LoadTriggerHandle((udg_hash), GetHandleId(q), StringHash("o")) // INLINED!!
call CreateUnit(Player(15), 'e01E', GetUnitX(a), GetUnitY(a), GetRandomDirectionDeg())
call CreateUnit(Player(15), 'e02I', GetUnitX(a), GetUnitY(a), GetRandomDirectionDeg())
call FlushChildHashtable((udg_hash), GetHandleId(GetTriggerUnit())) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(q)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(o)) // INLINED!!
call DestroyTrigger(q)
call DestroyTrigger(t)
call DestroyTrigger(o)
endfunction

function Trig_Kidot_Actions takes nothing returns nothing
local timer k=CreateTimer()
local trigger t=CreateTrigger()
local trigger q=CreateTrigger()

    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPoint2=GetSpellTargetLoc()
    set udg_TempPoint3=PolarProjectionBJ(udg_TempPoint, 10.0, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
    set udg_TempBool=false
    call CreateNUnitsAtLoc(1, 'e02H', GetOwningPlayer(GetSpellAbilityUnit()), udg_TempPoint3, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
 call SaveReal((udg_hash), GetHandleId(GetLastCreatedUnit()), StringHash("angle"), AngleBetweenPoints(udg_TempPoint, udg_TempPoint2)) // INLINED!!
   call TriggerRegisterUnitEvent(q, GetLastCreatedUnit(), EVENT_UNIT_DEATH)
   call TriggerAddAction(q, function Kidot_Dies)
   call SaveTriggerHandle((udg_hash), GetHandleId(q), StringHash("t"), t) // INLINED!!
   call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    call RemoveLocation(udg_TempPoint3)
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), GetLastCreatedUnit()) // INLINED!!
    call TimerStart(k, 0.04, true, function Kidot_Slide)
    call TriggerRegisterUnitInRangeSimple(t, 50.0, GetLastCreatedUnit())
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), GetLastCreatedUnit()) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("caster"), GetSpellAbilityUnit()) // INLINED!!
    call TriggerAddAction(t, function Kidot_Damage)
    call SetUnitPathing(GetLastCreatedUnit(), false)
endfunction

//===========================================================================
function InitTrig_KidotProjection takes nothing returns nothing
    set gg_trg_KidotProjection=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_KidotProjection, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_KidotProjection, Condition(function Trig_Kidot_Conditions))
    call TriggerAddAction(gg_trg_KidotProjection, function Trig_Kidot_Actions)
endfunction


//===========================================================================
// Trigger: Overheat
//===========================================================================
function Trig_Overheat_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04G' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Overheat_Actions takes nothing returns nothing
local unit a=GetSpellAbilityUnit()
local unit d
    call PolledWait(4.00)
    set udg_TempPoint=GetUnitLoc(a)
    call CreateNUnitsAtLoc(1, 'e00F', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
    set d=GetLastCreatedUnit()
    call RemoveLocation(udg_TempPoint)
    call IssueTargetOrderBJ(GetLastCreatedUnit(), "slow", a)

    call PolledWait(0.5)
    call RemoveUnit(d)
endfunction

//===========================================================================
function InitTrig_Overheat takes nothing returns nothing
    set gg_trg_Overheat=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Overheat, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Overheat, Condition(function Trig_Overheat_Conditions))
    call TriggerAddAction(gg_trg_Overheat, function Trig_Overheat_Actions)
endfunction


//===========================================================================
// Trigger: CryoShock
//===========================================================================
function Trig_CryoShock_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A00I' ) ) then
        return false
    endif
    return true
endfunction

function Trig_CryoShock_Func007Func001C takes nothing returns boolean
    if ( not ( GetEnumUnit() != udg_TempUnit3 ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetEnumUnit()) != 'H03I' ) ) then
        return false
    endif
    return true
endfunction

function Trig_CryoShock_Func007A takes nothing returns nothing
    if ( Trig_CryoShock_Func007Func001C() ) then
        set udg_TempPoint=GetUnitLoc(GetEnumUnit())
        call CreateNUnitsAtLoc(1, 'e01L', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
        call IssuePointOrderLocBJ(GetLastCreatedUnit(), "silence", udg_TempPoint)
        call RemoveLocation(udg_TempPoint)
    else
    endif
endfunction

function Trig_CryoShock_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempUnitGroup=GetUnitsInRangeOfLocAll(450.00, udg_TempPoint)
    set udg_TempUnit3=GetSpellAbilityUnit()
    call RemoveLocation(udg_TempPoint)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_CryoShock_Func007A)
        call DestroyGroup(udg_TempUnitGroup)
endfunction

//===========================================================================
function InitTrig_CryoShock takes nothing returns nothing
    set gg_trg_CryoShock=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_CryoShock, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_CryoShock, Condition(function Trig_CryoShock_Conditions))
    call TriggerAddAction(gg_trg_CryoShock, function Trig_CryoShock_Actions)
endfunction

//===========================================================================
// Trigger: Cryogenesis
//===========================================================================
function Trig_Cryogenesis_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A07M' ) ) then
        return false
    endif
    return true
endfunction

function Cryogenesis_Slide takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit l=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
local location a=GetUnitLoc(l)
local location b=PolarProjectionBJ(a, 40.0, GetUnitFacing(l))
local real c=LoadReal((udg_hash), GetHandleId(l), StringHash("angle")) // INLINED!!
local real x=GetUnitX(l)
local real y=GetUnitY(l)
local real height=LoadReal((udg_hash), GetHandleId(k), StringHash("height")) // INLINED!!

if height <= GetLocationZ(b) then
call KillUnit(l)
endif
call SetUnitFlyHeight(l, height - GetLocationZ(b), 0)
call SetUnitX(l, GetLocationX(b))
call SetUnitY(l, GetLocationY(b))
call SetUnitFacing(l, c)
call RemoveLocation(b)
call RemoveLocation(a)
if IsUnitDeadBJ(l) then
call PauseTimer(k)
call DestroyTimer(k)
endif
endfunction

function Cryogenesis_Damage takes nothing returns nothing
local trigger t=GetTriggeringTrigger()
local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!
local unit m
if GetUnitAbilityLevel(GetTriggerUnit(), 'Avul') == 0 and IsUnitAliveBJ(GetTriggerUnit()) and GetUnitPointValue(GetTriggerUnit()) != 37 and LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("caster")) != GetTriggerUnit() then // INLINED!!
call KillUnit(a)
set m=CreateUnit(GetOwningPlayer(a), 'e01Q', GetUnitX(a), GetUnitY(a), 0)
call UnitAddAbility(m, 'A07N')
call IssueTargetOrderBJ(m, "slow", GetTriggerUnit())
call DestroyTrigger(t)
endif
endfunction

function Cryogenesis_Dies takes nothing returns nothing
local unit a=GetTriggerUnit()
local trigger q=GetTriggeringTrigger()
local trigger t=LoadTriggerHandle((udg_hash), GetHandleId(q), StringHash("t")) // INLINED!!
local trigger o=LoadTriggerHandle((udg_hash), GetHandleId(q), StringHash("o")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(GetTriggerUnit())) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(q)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(o)) // INLINED!!
call DestroyTrigger(q)
call DestroyTrigger(t)
call DestroyTrigger(o)
endfunction

function Trig_Cryogenesis_Actions takes nothing returns nothing
local timer k=CreateTimer()
local trigger t=CreateTrigger()
local trigger q=CreateTrigger()

    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPoint2=GetSpellTargetLoc()
    set udg_TempPoint3=PolarProjectionBJ(udg_TempPoint, 10.0, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
    set udg_TempBool=false
    call CreateNUnitsAtLoc(1, 'e02K', GetOwningPlayer(GetSpellAbilityUnit()), udg_TempPoint3, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
 call SaveReal((udg_hash), GetHandleId(GetLastCreatedUnit()), StringHash("angle"), AngleBetweenPoints(udg_TempPoint, udg_TempPoint2)) // INLINED!!
   call TriggerRegisterUnitEvent(q, GetLastCreatedUnit(), EVENT_UNIT_DEATH)
   call SetUnitPathing(GetLastCreatedUnit(), false)
   call TriggerAddAction(q, function Cryogenesis_Dies)
   call SaveTriggerHandle((udg_hash), GetHandleId(q), StringHash("t"), t) // INLINED!!
    call SaveReal((udg_hash), GetHandleId(k), StringHash("height"), GetUnitFlyHeight(GetLastCreatedUnit()) + GetLocationZ(udg_TempPoint3)) // INLINED!!
   call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
    call RemoveLocation(udg_TempPoint3)
    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), GetLastCreatedUnit()) // INLINED!!
    call TimerStart(k, 0.04, true, function Cryogenesis_Slide)
    call TriggerRegisterUnitInRangeSimple(t, 100.0, GetLastCreatedUnit())
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), GetLastCreatedUnit()) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("caster"), GetSpellAbilityUnit()) // INLINED!!
    call TriggerAddAction(t, function Cryogenesis_Damage)
    call SetUnitPathing(GetLastCreatedUnit(), false)
endfunction

//===========================================================================
function InitTrig_Cryogenesis takes nothing returns nothing
    set gg_trg_Cryogenesis=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Cryogenesis, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Cryogenesis, Condition(function Trig_Cryogenesis_Conditions))
    call TriggerAddAction(gg_trg_Cryogenesis, function Trig_Cryogenesis_Actions)
endfunction


//===========================================================================
// Trigger: PhaseShift
//===========================================================================
function Trig_PhaseShift_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A00R' ) ) then
        return false
    endif
    return true
endfunction

function Trig_PhaseShift_Actions takes nothing returns nothing
local unit a=GetTriggerUnit()
    call UnitAddAbilityBJ('Avul', a)
    call PolledWait(1)
    call UnitRemoveAbilityBJ('Avul', a)
endfunction

//===========================================================================
function InitTrig_PhaseShift takes nothing returns nothing
    set gg_trg_PhaseShift=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_PhaseShift, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_PhaseShift, Condition(function Trig_PhaseShift_Conditions))
    call TriggerAddAction(gg_trg_PhaseShift, function Trig_PhaseShift_Actions)
endfunction


//===========================================================================
// Trigger: Phase Vortex
//
// Mad math
//===========================================================================
function Trig_Phase_Vortex_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A09L' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Phase_Vortex_Func011A takes nothing returns nothing
    set udg_Manacurrent1=GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit())
    call SetUnitManaBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit()) - 40.00 ))
    set udg_Manacurrent2=GetUnitStateSwap(UNIT_STATE_MANA, GetEnumUnit())
    set udg_Manadrained=( udg_Manacurrent1 - udg_Manacurrent2 )
    call SetUnitLifeBJ(GetEnumUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetEnumUnit()) - udg_Manadrained ))
    return
endfunction

function Trig_Phase_Vortex_Actions takes nothing returns nothing
    call SetUnitAnimation(GetTriggerUnit(), "Spell")
    set udg_TempLoc3=GetSpellTargetLoc()
    set udg_DMgroup=GetUnitsInRangeOfLocAll(300.00, udg_TempLoc3)
    call AddSpecialEffectLocBJ(udg_TempLoc3, "war3mapImported\\DarkNova.mdx")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    call CreateTextTagLocBJ("TRIGSTR_4550", udg_TempLoc3, 0, 8.00, 100, 100, 100, 0)
    call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
    call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 1.50)
    call ForGroupBJ(udg_DMgroup, function Trig_Phase_Vortex_Func011A)
    call DestroyTextTagBJ(GetLastCreatedTextTag())
    call RemoveLocation(udg_TempLoc3)
    call DestroyGroup(udg_DMgroup)
endfunction

//===========================================================================
function InitTrig_Phase_Vortex takes nothing returns nothing
    set gg_trg_Phase_Vortex=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Phase_Vortex, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Phase_Vortex, Condition(function Trig_Phase_Vortex_Conditions))
    call TriggerAddAction(gg_trg_Phase_Vortex, function Trig_Phase_Vortex_Actions)
endfunction

//===========================================================================
// Trigger: MatterDrainingDevice
//===========================================================================
function Trig_MatterDrainingDevice_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02Q' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MatterDrainingDevice_Func004Func001C takes nothing returns boolean
    if ( ( GetOwningPlayer(GetSpellTargetUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetSpellTargetUnit()) == Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return true
    endif
    return false
endfunction

function Trig_MatterDrainingDevice_Func004C takes nothing returns boolean
    if ( not Trig_MatterDrainingDevice_Func004Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_MatterDrainingDevice_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    if ( Trig_MatterDrainingDevice_Func004C() ) then
        call CreateNUnitsAtLoc(1, 'e00I', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
    else
        call CreateNUnitsAtLoc(1, 'e00I', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
    endif
    call IssueTargetOrderBJ(GetLastCreatedUnit(), "drain", GetSpellTargetUnit())
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_MatterDrainingDevice takes nothing returns nothing
    set gg_trg_MatterDrainingDevice=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_MatterDrainingDevice, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_MatterDrainingDevice, Condition(function Trig_MatterDrainingDevice_Conditions))
    call TriggerAddAction(gg_trg_MatterDrainingDevice, function Trig_MatterDrainingDevice_Actions)
endfunction

//===========================================================================
// Trigger: Physics
//===========================================================================
function Trig_Physics_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A029' ) ) then
        return false
    endif
    return true
endfunction

function DestroyContainmentPens takes nothing returns nothing
    if ( GetDestructableTypeId(GetEnumDestructable()) != 'B000' and GetDestructableTypeId(GetEnumDestructable()) != 'B002' and GetDestructableTypeId(GetEnumDestructable()) != 'B004' and GetDestructableTypeId(GetEnumDestructable()) != 'B001' ) and GetDestructableTypeId(GetEnumDestructable()) != 'Y216' and GetDestructableTypeId(GetEnumDestructable()) != 'Y240' and GetDestructableTypeId(GetEnumDestructable()) != 'Y230' and GetDestructableTypeId(GetEnumDestructable()) != 'Y206' then
        call KillDestructable(GetEnumDestructable())
    endif
endfunction

function Trig_Physics_Actions takes nothing returns nothing
    local unit b=GetSpellTargetUnit()
    
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempPoint2=GetUnitLoc(GetSpellTargetUnit())

    //----------------------------------------
    set udg_TempReal=GetUnitX(GetSpellTargetUnit())
    set udg_TempReal2=GetUnitY(GetSpellTargetUnit())
    call SetUnitX(GetSpellAbilityUnit(), udg_TempReal)
    call SetUnitY(GetSpellAbilityUnit(), udg_TempReal2)

    set udg_TempReal=GetLocationX(udg_TempPoint)
    set udg_TempReal2=GetLocationY(udg_TempPoint)
    call SetUnitX(GetSpellTargetUnit(), udg_TempReal)
    call SetUnitY(GetSpellTargetUnit(), udg_TempReal2)
    //-----------------------------------------


    if TerrainLineCheck(udg_TempPoint , udg_TempPoint2 , 30) == true then
         //call SetUnitPositionLoc( GetSpellTargetUnit(), udg_TempPoint )
         //call SetUnitPositionLoc( GetSpellAbilityUnit(), udg_TempPoint2 )
        call AddSpecialEffectLocBJ(udg_TempPoint, "Abilities\\Spells\\Human\\ThunderClap\\ThunderClapCaster.mdl")
        call SFXThreadClean()
        call AddSpecialEffectLocBJ(udg_TempPoint2, "Abilities\\Spells\\Human\\ThunderClap\\ThunderClapCaster.mdl")
        call SFXThreadClean()
        
        //Add invulnerability for 3.2 seconds, which is just enough to not get fbomb-cheesed.y
        call UnitAddAbilityForPeriod(b , 'Avul' , 3.2)
        
        //Destroys containment pens, so you can't trap someone with the power of annoying abuse.
        call EnumDestructablesInCircleBJ(256, udg_TempPoint, function DestroyContainmentPens)
        
        //Clean memory leaks.
        call RemoveLocation(udg_TempPoint)
        call RemoveLocation(udg_TempPoint2)
    endif
endfunction

//===========================================================================
function InitTrig_Physics takes nothing returns nothing
    set gg_trg_Physics=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Physics, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Physics, Condition(function Trig_Physics_Conditions))
    call TriggerAddAction(gg_trg_Physics, function Trig_Physics_Actions)
endfunction


//===========================================================================
// Trigger: Swap
//===========================================================================
function Trig_Swap_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04E' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Swap_Func005002002001 takes nothing returns boolean
    return ( GetUnitTypeId(GetFilterUnit()) == 'h00M' )
endfunction

function Trig_Swap_Func005002002002 takes nothing returns boolean
    return ( IsUnitIllusionBJ(GetFilterUnit()) == true )
endfunction

function Trig_Swap_Func005002002 takes nothing returns boolean
    return GetBooleanAnd((GetUnitTypeId(GetFilterUnit()) == 'h00M'), (IsUnitIllusionBJ(GetFilterUnit()) == true)) // INLINED!!
endfunction

function Trig_Swap_Func007A takes nothing returns nothing
    set udg_TempReal2=GetUnitFacing(GetEnumUnit())
    set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
    call SetUnitPositionLocFacingBJ(GetEnumUnit(), udg_TempPoint, udg_TempReal)
    set udg_TempReal2=GetUnitFacing(GetEnumUnit())
    call SetUnitPositionLocFacingBJ(udg_TempUnit, udg_TempPoint2, udg_TempReal2)
    call SetUnitPositionLocFacingBJ(GetEnumUnit(), udg_TempPoint, udg_TempReal)
    call SetUnitPositionLocFacingBJ(udg_TempUnit, udg_TempPoint2, udg_TempReal2)
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
endfunction

function Trig_Swap_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempReal=GetUnitFacing(GetSpellAbilityUnit())
    set udg_TempUnitGroup=GetUnitsOfPlayerMatching(GetOwningPlayer(GetSpellAbilityUnit()), Condition(function Trig_Swap_Func005002002))
    set udg_TempUnit=GetSpellAbilityUnit()
    call ForGroupBJ(udg_TempUnitGroup, function Trig_Swap_Func007A)
endfunction

//===========================================================================
function InitTrig_Swap takes nothing returns nothing
    set gg_trg_Swap=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Swap, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Swap, Condition(function Trig_Swap_Conditions))
    call TriggerAddAction(gg_trg_Swap, function Trig_Swap_Actions)
endfunction

//===========================================================================
// Trigger: DoorHack
//===========================================================================
function Trig_DoorHack_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A053' ) ) then
        return false
    endif
    return true
endfunction

function Trig_DoorHack_Func004Func001Func002C takes nothing returns boolean
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B000' ) ) then
        return true
    endif
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B001' ) ) then
        return true
    endif
    return false
endfunction

function Trig_DoorHack_Func004Func001C takes nothing returns boolean
    if ( not Trig_DoorHack_Func004Func001Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_DoorHack_Func004Func005Func001C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    if ( not ( udg_TempBool2 == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_DoorHack_Func004Func005C takes nothing returns boolean
    if ( not Trig_DoorHack_Func004Func005Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_DoorHack_Func004A takes nothing returns nothing
    if ( Trig_DoorHack_Func004Func001C() ) then
    else
        return
    endif
    set udg_TempTrigger=LoadTriggerHandle((udg_hash), GetHandleId(GetEnumDestructable()), StringHash("t1")) // INLINED!!
    set udg_TempBool=IsTriggerEnabled(udg_TempTrigger)
    set udg_TempBool2=udg_TempTrigger != null
    if ( Trig_DoorHack_Func004Func005C() ) then
        call DisableTrigger(udg_TempTrigger)
        set udg_TempTrigger=LoadTriggerHandle((udg_hash), GetHandleId(GetEnumDestructable()), StringHash("t2")) // INLINED!!
        set udg_TempDoorHack=true
        call TriggerExecute(udg_TempTrigger)
        set udg_TempDoorHack=false
        call DestructableRestoreLife(LoadDestructableHandle((udg_hash), GetHandleId(udg_TempTrigger), StringHash("doorpath")), 999999, true) // INLINED!!
        call DisplayTimedTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, 11.00, "|cffffcc00Door locked.|r")
        set udg_TempPoint=GetDestructableLoc(GetEnumDestructable())
        call CreateNUnitsAtLoc(1, 'e01A', GetOwningPlayer(GetSpellAbilityUnit()), udg_TempPoint, bj_UNIT_FACING)
        call RemoveLocation(udg_TempPoint)
        set udg_TempUnit=GetLastCreatedUnit()
        set udg_CountUpBarColor="|cff000000"
        call SaveDestructableHandle((udg_hash), GetHandleId(GetLastCreatedUnit()), StringHash("kittens"), GetEnumDestructable()) // INLINED!!
        call CountUpBar(udg_TempUnit , 30 , 0.50 , "DoorResetLock")
    else
        call DisplayTimedTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, 11.00, "|cffffcc00Door's not unlocked...|r")
    endif
endfunction

function Trig_DoorHack_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    call EnumDestructablesInCircleBJ(256, udg_TempPoint, function Trig_DoorHack_Func004A)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_DoorHack takes nothing returns nothing
    set gg_trg_DoorHack=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_DoorHack, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_DoorHack, Condition(function Trig_DoorHack_Conditions))
    call TriggerAddAction(gg_trg_DoorHack, function Trig_DoorHack_Actions)
endfunction

//===========================================================================
// Trigger: Rummage
//===========================================================================
function Trig_Rummage_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A04B' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Rummage_Func003Func004Func001Func001Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 4 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Rummage_Func003Func004Func001Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 3 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Rummage_Func003Func004Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Rummage_Func003Func004C takes nothing returns boolean
    if ( not ( udg_TempInt == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Rummage_Func003Func005C takes nothing returns boolean
    if ( not ( udg_TempInt <= 4 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Rummage_Func003Func006C takes nothing returns boolean
    if ( ( GetDestructableTypeId(GetSpellTargetDestructable()) == 'LTcr' ) ) then
        return true
    endif
    return false
endfunction

function Trig_Rummage_Func003C takes nothing returns boolean
    if ( not Trig_Rummage_Func003Func006C() ) then
        return false
    endif
    return true
endfunction

function Trig_Rummage_Actions takes nothing returns nothing
    if ( Trig_Rummage_Func003C() ) then
        set udg_TempInt=GetRandomInt(1, 28)
        call KillDestructable(GetSpellTargetDestructable())
        if ( Trig_Rummage_Func003Func004C() ) then
            set udg_TempItemType='I01K'
        else
            if ( Trig_Rummage_Func003Func004Func001C() ) then
                set udg_TempItemType='I027'
            else
                if ( Trig_Rummage_Func003Func004Func001Func001C() ) then
                    set udg_TempItemType='I028'
                else
                    if ( Trig_Rummage_Func003Func004Func001Func001Func001C() ) then
                        set udg_TempItemType='I01J'
                    else
                    endif
                endif
            endif
        endif
        if ( Trig_Rummage_Func003Func005C() ) then
            set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
            call CreateItemLoc(udg_TempItemType, udg_TempPoint)
            call RemoveLocation(udg_TempPoint)
        else
        endif
    else
        call DisplayTimedTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, 10.00, "This ability is meant to be used with crates.")
    endif
endfunction

//===========================================================================
function InitTrig_Rummage takes nothing returns nothing
    set gg_trg_Rummage=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Rummage, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_Rummage, Condition(function Trig_Rummage_Conditions))
    call TriggerAddAction(gg_trg_Rummage, function Trig_Rummage_Actions)
endfunction

//===========================================================================
// Trigger: Suits
//
// telsa:2
// Rocket:3
// Cryo:4
// Plasma:5
// FLamethrower:6
// Photon:7
// Service:8
// DM:9
// Illusion:10
// Radiation:11
// Operative:12
// Scientist Coat:13
// Guard:14
// Acidic:15
// Machin:16
// Force:17
// Magnetic:18
// Pulse:19
//===========================================================================
function Trig_Suits_Conditions takes nothing returns boolean
    if ( not ( SubStringBJ(I2S(GetUnitPointValue(GetTriggerUnit())), 2, 2) == "2" ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func004C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I000' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func005C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I001' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func006C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I007' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func007C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I008' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func008C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I009' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func009C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I00A' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func010C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I00B' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func011C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I00C' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func012C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I00D' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func013C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I00E' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func014C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I00X' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func015C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I00Y' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func016C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I00Z' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func017C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I011' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func018C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I01E' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func019C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I01G' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func020C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I020' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func021C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I021' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func022C takes nothing returns boolean
    return true
endfunction

function Trig_Suits_Func023Func001C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A0AF', GetManipulatingUnit()) >= 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func023Func008Func005C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetManipulatingUnit()) == 'h04K' ) ) then
        return false
    endif
    if ( not ( GetItemTypeId(GetManipulatedItem()) != 'I020' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func023Func008C takes nothing returns boolean
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == GetTriggerUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Func023C takes nothing returns boolean
    if ( not ( udg_TempInt != 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Suits_Actions takes nothing returns nothing
    set udg_TempInt=0
    if ( Trig_Suits_Func004C() ) then
        set udg_TempInt=2
    else
    endif
    if ( Trig_Suits_Func005C() ) then
        set udg_TempInt=3
    else
    endif
    if ( Trig_Suits_Func006C() ) then
        set udg_TempInt=4
    else
    endif
    if ( Trig_Suits_Func007C() ) then
        set udg_TempInt=5
    else
    endif
    if ( Trig_Suits_Func008C() ) then
        set udg_TempInt=6
    else
    endif
    if ( Trig_Suits_Func009C() ) then
        set udg_TempInt=7
    else
    endif
    if ( Trig_Suits_Func010C() ) then
        set udg_TempInt=8
    else
    endif
    if ( Trig_Suits_Func011C() ) then
        set udg_TempInt=9
    else
    endif
    if ( Trig_Suits_Func012C() ) then
        set udg_TempInt=10
    else
    endif
    if ( Trig_Suits_Func013C() ) then
        set udg_TempInt=11
    else
    endif
    if ( Trig_Suits_Func014C() ) then
        set udg_TempInt=12
    else
    endif
    if ( Trig_Suits_Func015C() ) then
        set udg_TempInt=13
    else
    endif
    if ( Trig_Suits_Func016C() ) then
        set udg_TempInt=14
    else
    endif
    if ( Trig_Suits_Func017C() ) then
        set udg_TempInt=15
    else
    endif
    if ( Trig_Suits_Func018C() ) then
        set udg_TempInt=16
    else
    endif
    if ( Trig_Suits_Func019C() ) then
        set udg_TempInt=17
    else
    endif
    if ( Trig_Suits_Func020C() ) then
        set udg_TempInt=18
    else
    endif
    if ( Trig_Suits_Func021C() ) then
        set udg_TempInt=19
    else
    endif
    if ( (true) ) then // INLINED!!
    else
    endif
    if ( Trig_Suits_Func023C() ) then
        if ( Trig_Suits_Func023Func001C() ) then
            set udg_TempItem=udg_Player_Suit[GetConvertedPlayerId(GetOwningPlayer(GetManipulatingUnit()))]
            call SetItemUserData(udg_TempItem, 0)
            call SetItemVisibleBJ(true, udg_TempItem)
            set udg_TempPoint=GetUnitLoc(GetManipulatingUnit())
            call SetItemPositionLoc(udg_TempItem, udg_TempPoint)
            call RemoveLocation(udg_TempPoint)
            call UnitAddItemSwapped(udg_TempItem, GetManipulatingUnit())
        else
        endif
        call SetItemUserData(GetManipulatedItem(), GetUnitUserData(GetManipulatingUnit()))
        set udg_Player_Suit[GetConvertedPlayerId(GetOwningPlayer(GetManipulatingUnit()))]=GetManipulatedItem()
        call UnitRemoveItemSwapped(GetManipulatedItem(), GetManipulatingUnit())
        call UnitRemoveItemSwapped(GetManipulatedItem(), GetManipulatingUnit())
        call SetItemVisibleBJ(false, GetManipulatedItem())
        call SetItemPawnable(GetManipulatedItem(), true)
        if ( Trig_Suits_Func023Func008C() ) then
            set udg_TempReal=GetUnitLifePercent(GetManipulatingUnit())
            if ( Trig_Suits_Func023Func008Func005C() ) then
                if HaveSavedHandle((udg_hash), GetHandleId(GetManipulatingUnit()), StringHash("Suit_SlivGroup")) then // INLINED!!
                call DestroyGroup(LoadGroupHandle((udg_hash), GetHandleId(GetManipulatingUnit()), StringHash("Suit_SlivGroup"))) // INLINED!!
                endif
            else
            endif
            call UnitAddAbilityBJ('S001', GetManipulatingUnit())
            call SetUnitAbilityLevelSwapped('S001', GetManipulatingUnit(), udg_TempInt)
            set udg_TempUnit=GetManipulatingUnit()
            call SetUnitLifePercentBJ(GetManipulatingUnit(), udg_TempReal)
            call ExecuteFunc("SuitRoleAbilityReAdd")
            call SetUnitLifePercentBJ(GetManipulatingUnit(), udg_TempReal)
        else
            if GetUnitRace(GetTriggerUnit()) == RACE_NIGHTELF then
            call ForForce(bj_FORCE_PLAYER[0], suitON)
            endif
        endif
    else
    endif
endfunction

//===========================================================================
function InitTrig_Suits takes nothing returns nothing
    set gg_trg_Suits=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_Suits, EVENT_PLAYER_UNIT_USE_ITEM)
    call TriggerAddCondition(gg_trg_Suits, Condition(function Trig_Suits_Conditions))
    call TriggerAddAction(gg_trg_Suits, function Trig_Suits_Actions)
endfunction

//===========================================================================
// Trigger: SuitsDrop
//===========================================================================
function Trig_SuitsDrop_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0AF' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SuitsDrop_Func012Func004C takes nothing returns boolean
    if ( not ( GetUnitTypeId(udg_TempUnit) == 'h04K' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SuitsDrop_Func012C takes nothing returns boolean
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == GetTriggerUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_SuitsDrop_Actions takes nothing returns nothing
    set udg_TempUnit=GetSpellAbilityUnit()
    set udg_TempItem=udg_Player_Suit[GetConvertedPlayerId(GetOwningPlayer(udg_TempUnit))]
    set udg_TempReal=GetUnitLifePercent(udg_TempUnit)
    call SetItemUserData(udg_TempItem, 0)
    call SetItemVisibleBJ(true, udg_TempItem)
    set udg_TempPoint=GetUnitLoc(udg_TempUnit)
    call SetItemPositionLoc(udg_TempItem, udg_TempPoint)
    call RemoveLocation(udg_TempPoint)
    call UnitAddItemSwapped(udg_TempItem, udg_TempUnit)
    if ( Trig_SuitsDrop_Func012C() ) then
        if ( Trig_SuitsDrop_Func012Func004C() ) then
            if HaveSavedHandle((udg_hash), GetHandleId(udg_TempUnit), StringHash("Suit_SlivGroup")) then // INLINED!!
            call DestroyGroup(LoadGroupHandle((udg_hash), GetHandleId(udg_TempUnit), StringHash("Suit_SlivGroup"))) // INLINED!!
            endif
        else
        endif
        call UnitAddAbilityBJ('S001', udg_TempUnit)
        call SetUnitAbilityLevelSwapped('S001', udg_TempUnit, 1)
        call SetUnitLifePercentBJ(udg_TempUnit, udg_TempReal)
        set udg_TempUnit=GetSpellAbilityUnit()
        call ExecuteFunc("SuitRoleAbilityReAdd")
    else
        if GetUnitRace(GetTriggerUnit()) == RACE_NIGHTELF then
        call TimerStart((NewTimerEx(0)), 0.00, false, suitOFF) // INLINED!!
        endif
    endif
endfunction

//===========================================================================
function InitTrig_SuitsDrop takes nothing returns nothing
    set gg_trg_SuitsDrop=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SuitsDrop, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_SuitsDrop, Condition(function Trig_SuitsDrop_Conditions))
    call TriggerAddAction(gg_trg_SuitsDrop, function Trig_SuitsDrop_Actions)
endfunction

//===========================================================================
// Trigger: ForceSuitAttack
//===========================================================================
function Trig_ForceSuitAttack_Conditions takes nothing returns boolean
    if GetUnitTypeId(GetAttacker()) == 'h03L' then
        return true
    endif
    return false
endfunction

function ForceSuitAttack_Slide takes nothing returns nothing
local timer k=GetExpiredTimer()
local unit l=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("slide")) // INLINED!!
local location a=GetUnitLoc(l)
local location b=PolarProjectionBJ(a, 45.0, GetUnitFacing(l))
local real c=LoadReal((udg_hash), GetHandleId(l), StringHash("angle")) // INLINED!!
local integer s=LoadInteger((udg_hash), GetHandleId(l), StringHash("sector")) // INLINED!!

if GetLocationZ(b) > GetLocationZ(a) + 60.0 then
call KillUnit(l)
endif
//if IsPointPathable(GetLocationX(b), GetLocationY(b), false) == false then
//call KillUnit(l)
//endif
if not ( LocInSector(b , s) ) then
call KillUnit(l)
else
call SetUnitX(l, GetLocationX(b))
call SetUnitY(l, GetLocationY(b))
//call SetUnitPositionLoc(l,b)
call SetUnitFacing(l, c)
endif
call RemoveLocation(b)
call RemoveLocation(a)
if IsUnitDeadBJ(l) then
call PauseTimer(k)
call DestroyTimer(k)
endif
endfunction

function ForceSuitAttack_Damage takes nothing returns nothing
    local trigger t=GetTriggeringTrigger()
    local unit a=LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("unit")) // INLINED!!

    if GetUnitAbilityLevel(GetTriggerUnit(), 'Avul') == 0 and IsUnitAliveBJ(GetTriggerUnit()) and GetUnitPointValue(GetTriggerUnit()) != 37 and LoadUnitHandle((udg_hash), GetHandleId(t), StringHash("caster")) != GetTriggerUnit() then // INLINED!!
        call KillUnit(a)
        call UnitDamageTarget(a, GetTriggerUnit(), 30.0, true, true, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
        
        //Apply Corporal buff
        if ( GetUnitAbilityLevel(udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(a))], udg_RoleAbility[10]) == 1 ) then
            call UnitDamageTarget(a, GetTriggerUnit(), 5.0, true, true, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
        endif
        
        if ( GetUnitAbilityLevel(udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(a))], 'A097') == 1 ) then
            call Push2(GetTriggerUnit() , 300.0 , 230.0 , GetUnitFacing(a))
        else
            call Push2(GetTriggerUnit() , 300.0 , 230.0 , AngleBetweenUnits(GetTriggerUnit() , udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(a))]))
        endif
        
        call DestroyTrigger(t)
    endif
endfunction

function ForceSuitAttack_Dies takes nothing returns nothing
local trigger q=GetTriggeringTrigger()
local trigger t=LoadTriggerHandle((udg_hash), GetHandleId(q), StringHash("t")) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(GetTriggerUnit())) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(q)) // INLINED!!
call FlushChildHashtable((udg_hash), GetHandleId(t)) // INLINED!!
call DestroyTrigger(q)
call DestroyTrigger(t)
endfunction

function ForceSuitAttack_FixProjectile takes nothing returns nothing
local timer om=GetExpiredTimer()
local location t3=LoadLocationHandle((udg_hash), GetHandleId(om), StringHash("t")) // INLINED!!
local unit a=LoadUnitHandle((udg_hash), GetHandleId(om), StringHash("a")) // INLINED!!
call SetUnitPositionLoc(a, t3)
call RemoveLocation(t3)
set t3=null
endfunction

function Trig_ForceSuitAttack_Actions takes nothing returns nothing
local timer k=CreateTimer()
local trigger t=CreateTrigger()
local trigger q=CreateTrigger()
local timer om=CreateTimer()
local location ob
    set udg_TempPoint=GetUnitLoc(GetEventDamageSource())
    set udg_TempPoint2=GetUnitLoc(GetTriggerUnit())
    set udg_TempPoint3=PolarProjectionBJ(udg_TempPoint, - 30.0, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
    set ob=PolarProjectionBJ(udg_TempPoint3, 0.0, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2) - 90.0)
    call RemoveLocation(udg_TempPoint3)
    set udg_TempPoint3=ob
    set udg_TempBool=false
    call CreateNUnitsAtLoc(1, 'e01J', GetOwningPlayer(GetEventDamageSource()), udg_HoldZone, AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
    call SaveInteger((udg_hash), GetHandleId(GetLastCreatedUnit()), StringHash("sector"), GetSector(udg_TempPoint)) // INLINED!!
    call SaveReal((udg_hash), GetHandleId(GetLastCreatedUnit()), StringHash("angle"), AngleBetweenPoints(udg_TempPoint, udg_TempPoint2)) // INLINED!!
    call TriggerRegisterUnitEvent(q, GetLastCreatedUnit(), EVENT_UNIT_DEATH)
    call TriggerAddAction(q, function ForceSuitAttack_Dies)
    call SaveTriggerHandle((udg_hash), GetHandleId(q), StringHash("t"), t) // INLINED!!

    call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("slide"), GetLastCreatedUnit()) // INLINED!!
    call TimerStart(k, 0.04, true, function ForceSuitAttack_Slide)
    call TriggerRegisterUnitInRangeSimple(t, 80.0, GetLastCreatedUnit())
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("unit"), GetLastCreatedUnit()) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(t), StringHash("caster"), GetEventDamageSource()) // INLINED!!
    call TriggerAddAction(t, function ForceSuitAttack_Damage)
    call SetUnitPathing(GetLastCreatedUnit(), false)
    call SetUnitPositionLoc(GetLastCreatedUnit(), udg_TempPoint3)
    call SetUnitX(GetLastCreatedUnit(), GetLocationX(udg_TempPoint3))
    call SetUnitY(GetLastCreatedUnit(), GetLocationY(udg_TempPoint3))
    call SaveLocationHandle((udg_hash), GetHandleId(om), StringHash("t"), udg_TempPoint3) // INLINED!!
    call SaveUnitHandle((udg_hash), GetHandleId(om), StringHash("a"), GetLastCreatedUnit()) // INLINED!!
    call TimerStart(om, 0.02, false, function ForceSuitAttack_FixProjectile)
    call RemoveLocation(udg_TempPoint)
    call RemoveLocation(udg_TempPoint2)
endfunction

function Trig_ForceSuitAttack_SetTime takes nothing returns nothing
set udg_ForceSuit_LastAttackTime[GetUnitUserData(GetAttacker())]=TimerGetElapsed(udg_GameTimer)
endfunction

//===========================================================================
function InitTrig_ForceSuitAttack takes nothing returns nothing
    set gg_trg_ForceSuitAttack=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ForceSuitAttack, EVENT_PLAYER_UNIT_ATTACKED)
    call TriggerAddCondition(gg_trg_ForceSuitAttack, Condition(function Trig_ForceSuitAttack_Conditions))
    call TriggerAddAction(gg_trg_ForceSuitAttack, function Trig_ForceSuitAttack_SetTime)
endfunction


//===========================================================================
// Trigger: PulseSuitAttack
//===========================================================================
function Trig_PulseSuitAttack_Conditions takes nothing returns boolean
    if GetUnitTypeId(GetAttacker()) == 'h04M' then
        return true
    endif
    return false
endfunction


function PulseResetAttack takes nothing returns nothing
local timer k=GetExpiredTimer()

local unit r=LoadUnitHandle((udg_hash), GetHandleId(k), StringHash("unit")) // INLINED!!
local lightning b=LoadLightningHandle((udg_hash), GetHandleId(r), StringHash("attackLightning")) // INLINED!!
local sound s=LoadSoundHandle((udg_hash), GetHandleId(k), StringHash("loopingSound")) // INLINED!!
call StopSound(s, true, true)
call SetUnitTimeScale(r, 1)
call DestroyLightning(b)
call DestroyTimer(k)
call SaveBoolean((udg_hash), GetHandleId(r), StringHash("attackInt"), false) // INLINED!!
call StopSound(gg_snd_MagicLariatLoop1, false, true)
endfunction

function Cap takes real a,real b returns real
if a > b then
return b
endif
return a
endfunction

function Trig_PulseSuitAttack_Actions takes nothing returns nothing

    local timer k
    local lightning b
    local unit m=GetTriggerUnit()
    local unit r=GetAttacker()
    local real vb=GetUnitFacing(r) * bj_DEGTORAD
    local location zget=GetUnitLoc(r)
    local location zget2=GetUnitLoc(m)
    local real z1=GetLocationZ(zget)
    local real z2=GetLocationZ(zget2)
    local real currentMana= GetUnitState(r, UNIT_STATE_MANA)
    local real usedMana= ( 85 * currentMana / 100 ) * 0.05
    local real damage= usedMana * 3
    local sound s

set damage=Cap(damage , 175 * 0.05)
call SetUnitState(r, UNIT_STATE_MANA, currentMana - usedMana)
if IsUnitIllusionBJ(GetAttacker()) == false then
call UnitDamageTarget(r, m, damage, true, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
else
endif
if GetRandomReal(0, 1.2) <= damage / 7.2 then
call AddSpecialEffect("Abilities\\Spells\\Human\\MarkOfChaos\\MarkOfChaosDone.mdl", GetUnitX(m), GetUnitY(m))
call SFXThreadClean()
endif
call RemoveLocation(zget)
call RemoveLocation(zget2)
set zget=null
set zget2=null
if HaveSavedBoolean((udg_hash), GetHandleId(r), StringHash("attackInt")) and LoadBoolean((udg_hash), GetHandleId(r), StringHash("attackInt")) == true then // INLINED!!
set k=LoadTimerHandle((udg_hash), GetHandleId(r), StringHash("attackResetTimer")) // INLINED!!
set b=LoadLightningHandle((udg_hash), GetHandleId(r), StringHash("attackLightning")) // INLINED!!
call TimerStart(k, .2, false, function PulseResetAttack)
call MoveLightningEx(b, false, GetUnitX(r) + 50.0 * Cos(vb) + 19 * Cos(vb - bj_PI / 2), GetUnitY(r) + 50.0 * Sin(vb) + 19 * Sin(vb - bj_PI / 2), z1 + 50, GetUnitX(m) + 20.0 * Cos(vb), GetUnitY(m) + 20.0 * Sin(vb), z2 + 30)
call SetLightningColor(b, 1, 1, 1, Cap(( damage ) / 7 * 1 + 0.1 , 1))
call SetSoundVolume(LoadSoundHandle((udg_hash), GetHandleId(k), StringHash("loopingSound")), R2I(Cap(damage / 7 * 125 + 50 , 126))) // INLINED!!
else
call SetUnitTimeScale(r, 2)
set k=CreateTimer()
set s=CreateSound("Sound\\Ambient\\DoodadEffects\\EnchantedCellLoop.wav", true, true, true, 126, 126, "")
call SetSoundPitch(s, 1.3)
call SetSoundPosition(s, GetUnitX(r), GetUnitY(r), 0.0)
call PlaySoundBJ(s)
call SaveBoolean((udg_hash), GetHandleId(r), StringHash("attackInt"), true) // INLINED!!
call TimerStart(k, .2, false, function PulseResetAttack)
call SaveSoundHandle((udg_hash), GetHandleId(k), StringHash("loopingSound"), s) // INLINED!!
call SaveTimerHandle((udg_hash), GetHandleId(r), StringHash("attackResetTimer"), k) // INLINED!!
call SaveUnitHandle((udg_hash), GetHandleId(k), StringHash("unit"), r) // INLINED!!
call SaveLightningHandle((udg_hash), GetHandleId(r), StringHash("attackLightning"), AddLightningEx("AFOD", false, GetUnitX(r) + 50.0 * Cos(vb) + 19 * Cos(vb - bj_PI / 2), GetUnitY(r) + 50.0 * Sin(vb) + 19 * Sin(vb - bj_PI / 2), z1 + 30, GetUnitX(m) + 20.0 * Cos(vb), GetUnitY(m) + 20.0 * Sin(vb), z2 + 30)) // INLINED!!

set s=CreateSound("Abilities\\Spells\\Human\\InnerFire\\InnerFireBirth.wav", false, true, true, 126, 126, "")
call SetSoundPosition(s, GetUnitX(r), GetUnitY(r), 0.0)

call StartSound(s)
call KillSoundWhenDone(s)
endif
endfunction

//===========================================================================
function InitTrig_PulseSuitAttack takes nothing returns nothing
    set gg_trg_PulseSuitAttack=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_PulseSuitAttack, EVENT_PLAYER_UNIT_ATTACKED)
    call TriggerAddCondition(gg_trg_PulseSuitAttack, Condition(function Trig_PulseSuitAttack_Conditions))
    call TriggerAddAction(gg_trg_PulseSuitAttack, function Trig_PulseSuitAttack_Actions)
endfunction


//===========================================================================
// Trigger: AnyDeath
//
// Frees up unit assignations. The Null Unit is an RDG...IN SPACE.
//===========================================================================
function Trig_AnyDeath_Actions takes nothing returns nothing
    local unit a=GetDyingUnit()
    local unit b
    local player c=GetOwningPlayer(a)
    local boolean o= ( a == udg_Playerhero[GetConvertedPlayerId(c)] )

    if GetUnitPointValue(a) != 37 and IsUnitIllusion(a) == false and o then
    
        set udg_Unit_DeathTime[GetUnitUserData(a)]=TimerGetElapsed(udg_GameTimer)
        set b=CreateUnit(Player(15), GetUnitTypeId(a), GetUnitX(a), GetUnitY(a), GetUnitFacing(a))
        call SetUnitPathing(b, false)
        call SetUnitX(b, GetUnitX(a))
        call SetUnitY(b, GetUnitY(a))
        call UnitAddAbility(b, 'Avul')
        call UnitAddAbility(b, 'Aloc')
        call UnitAddAbility(b, 'A077')

        //If android death -> The corpse to have android corpse tag
        if GetOwningPlayer(a) == udg_HiddenAndroid or GetOwningPlayer(a) == udg_RogueAndroid then
            call UnitAddAbility(b, 'A07P')
        endif

        call SetUnitAnimation(b, "death")
        call SetUnitVertexColor(a, 0, 0, 0, 0)
        call SaveUnitHandle((udg_hash), GetHandleId(a), StringHash("Corpse"), b) // INLINED!!
        call SetUnitColor(b, GetPlayerColor(GetOwningPlayer(a)))

        call PolledWait(1.0)
        
        if udg_Player_IsParasiteSpawn[GetConvertedPlayerId(c)] and IsUnitType(b, UNIT_TYPE_MECHANICAL) == false then
            call SetUnitColor(b, ConvertPlayerColor(12))
            //call FadeUnitOverTime(b,5.0,true)
        endif
        
        call PolledWait(25.0)
        
        if not ( o ) and a != null then
            call SetUnitPosition(a, GetLocationX(udg_HoldZone), GetLocationY(udg_HoldZone))
            set udg_UnitAssignation[(GetUnitUserData((a)))]=udg_TheNullUnit // INLINED!!
            call RemoveUnit(a)
        endif
    endif
endfunction

//===========================================================================
function InitTrig_AnyDeath takes nothing returns nothing
    set gg_trg_AnyDeath=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_AnyDeath, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddAction(gg_trg_AnyDeath, function Trig_AnyDeath_Actions)
endfunction


//===========================================================================
// Trigger: PlayerMurder
//===========================================================================
function Trig_PlayerMurder_Func002Func001C takes nothing returns boolean
    if ( ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))] != GetDyingUnit() ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetDyingUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return true
    endif
    return false
endfunction

function Trig_PlayerMurder_Func002C takes nothing returns boolean
    if ( not Trig_PlayerMurder_Func002Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func006Func003Func002Func002Func001C takes nothing returns boolean
    if ( ( udg_Unit_InfectionType[GetUnitUserData(GetDyingUnit())] == 3 ) ) then
        return true
    endif
    if ( ( udg_Unit_InfectionType[GetUnitUserData(GetDyingUnit())] == 4 ) ) then
        return true
    endif
    return false
endfunction

function Trig_PlayerMurder_Func006Func003Func002Func002Func007Func002C takes nothing returns boolean
    if ( not ( udg_Unit_InfectionType[GetUnitUserData(GetDyingUnit())] == 4 ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func006Func003Func002Func002Func007C takes nothing returns boolean
    if ( not ( udg_Unit_InfectionType[GetUnitUserData(GetDyingUnit())] == 3 ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func006Func003Func002Func002C takes nothing returns boolean
    if ( not Trig_PlayerMurder_Func006Func003Func002Func002Func001C() ) then
        return false
    endif
    if ( not ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))] == false ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetDyingUnit()) != udg_RogueAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func006Func003Func002C takes nothing returns boolean
    if ( not ( udg_Unit_InfectionType[GetUnitUserData(GetDyingUnit())] == 2 ) ) then
        return false
    endif
    if ( not ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))] == false ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetDyingUnit()) != udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func006Func003Func007C takes nothing returns boolean
    if ( not ( udg_Parasite == GetOwningPlayer(GetDyingUnit()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func006Func003Func020Func002C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetDyingUnit()) != udg_Parasite ) ) then
        return false
    endif
    if ( not ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func006Func003Func020C takes nothing returns boolean
    if ( ( udg_Mutant_IsRapidGestation == true ) ) then
        return true
    endif
    if ( Trig_PlayerMurder_Func006Func003Func020Func002C() ) then
        return true
    endif
    return false
endfunction

function Trig_PlayerMurder_Func006Func003C takes nothing returns boolean
    if ( not ( udg_Unit_InfectionType[GetUnitUserData(GetDyingUnit())] == 1 ) ) then
        return false
    endif
    if ( not Trig_PlayerMurder_Func006Func003Func020C() ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func006C takes nothing returns boolean
    if ( not ( udg_Unit_IsInfected[GetUnitUserData(GetDyingUnit())] == true ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetDyingUnit()) != udg_HiddenAndroid ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetDyingUnit()) != udg_RogueAndroid ) ) then
        return false
    endif
    if ( not ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))] == false ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetDyingUnit()) != udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func009Func004Func002C takes nothing returns boolean
    if ( not ( udg_RogueAndroid == GetOwningPlayer(GetDyingUnit()) ) ) then
        return false
    endif
    if not ( GetChippedCorpses() == 0 ) then
    return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func009Func004C takes nothing returns boolean
    if ( ( udg_Mutant == GetOwningPlayer(GetDyingUnit()) ) ) then
        return true
    endif
    if ( Trig_PlayerMurder_Func009Func004Func002C() ) then
        return true
    endif
    return false
endfunction

function Trig_PlayerMurder_Func009C takes nothing returns boolean
    if ( not ( udg_Unit_IsInfected[GetUnitUserData(GetDyingUnit())] == true ) ) then
        return false
    endif
    if ( not ( udg_Unit_InfectionType[GetUnitUserData(GetDyingUnit())] == 2 ) ) then
        return false
    endif
    if ( not Trig_PlayerMurder_Func009Func004C() ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func011Func001Func001Func001Func001Func001Func001Func004Func003C takes nothing returns boolean
    if ( ( GetOwningPlayer(GetKillingUnitBJ()) == udg_Parasite ) ) then
        return true
    endif
    if ( ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(GetKillingUnitBJ()))] == true ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetKillingUnitBJ()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return true
    endif
    return false
endfunction

function Trig_PlayerMurder_Func011Func001Func001Func001Func001Func001Func001Func004C takes nothing returns boolean
    if ( not Trig_PlayerMurder_Func011Func001Func001Func001Func001Func001Func001Func004Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func011Func001Func001Func001Func001Func001Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func011Func001Func001Func001Func001Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func011Func001Func001Func001Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func011Func001Func001Func001C takes nothing returns boolean
    if ( not ( udg_RogueAndroid == GetOwningPlayer(GetDyingUnit()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func011Func001Func001C takes nothing returns boolean
    if ( not ( udg_HiddenAndroid == GetOwningPlayer(GetDyingUnit()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func011Func001C takes nothing returns boolean
    if ( not ( udg_Parasite == GetOwningPlayer(GetDyingUnit()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func011C takes nothing returns boolean
    if ( not ( udg_Mutant == GetOwningPlayer(GetDyingUnit()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Func015C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurder_Actions takes nothing returns nothing
    if ( Trig_PlayerMurder_Func002C() ) then
        return
    else
    endif
    set udg_TempPlayer=GetOwningPlayer(GetDyingUnit())
    set udg_TempUnit=GetDyingUnit()
    call SaveInteger(Table__ht, (GroupChat), (( GetPlayerId(udg_TempPlayer) + 1 ) * - 10), ( (LoadInteger(Table__ht, (s__StringIndexer__D_data), (StringHash((DEAD_MESSAGE_TYPE))))))) // INLINED!!
    if ( Trig_PlayerMurder_Func006C() ) then
        // Unit_InfectionType is on DamageSys trigger UponDamage()
        // 1 is mutant infection, 2 is parasite, 3 is cyborg
        if ( Trig_PlayerMurder_Func006Func003C() ) then
            // Retarded OR above. If its alien or spawn, it will always return true, wtf!
            set udg_TempPlayer=GetOwningPlayer(GetDyingUnit())
            set udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))]=true
            set udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))]=false
            set udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))]=false
            if ( Trig_PlayerMurder_Func006Func003Func007C() ) then
                set udg_Parasite=null
            else
            endif
            set udg_TempPoint=GetUnitLoc(GetDyingUnit())
            call CreateNUnitsAtLoc(1, udg_MutantChildInfectee, GetOwningPlayer(GetDyingUnit()), udg_TempPoint, bj_UNIT_FACING)
            call SetUnitLifePercentBJ(GetLastCreatedUnit(), 33.00)
            call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_TempPlayer)
            call PanCameraToTimedLocForPlayer(udg_TempPlayer, udg_TempPoint, 0)
            call RemoveLocation(udg_TempPoint)
            set udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]=GetLastCreatedUnit()
            call DisplayTextToPlayer(GetOwningPlayer(GetDyingUnit()), 0, 0, "|cffFF0000You have been turned into the mutant's spawn! Work with the mutant to ensure victory.|r")
            call DisplayTextToPlayer(udg_Mutant, 0, 0, "|cffFF0000You have acquired a spawn!|r")
            call TriggerExecute(gg_trg_WinCheck)
            return
        else
            if ( Trig_PlayerMurder_Func006Func003Func002C() ) then
                set udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))]=true
                set udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))]=false
                set udg_TempPoint=GetUnitLoc(GetDyingUnit())
                set udg_TempPlayer=GetOwningPlayer(GetDyingUnit())
                call CreateNUnitsAtLoc(1, udg_ParasiteChildInfectee, GetOwningPlayer(GetDyingUnit()), udg_TempPoint, bj_UNIT_FACING)
                call SetUnitLifePercentBJ(GetLastCreatedUnit(), 33.00)
                call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_TempPlayer)
                call PanCameraToTimedLocForPlayer(udg_TempPlayer, udg_TempPoint, 0)
                call RemoveLocation(udg_TempPoint)
                set udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]=GetLastCreatedUnit()
                call DisplayTextToPlayer(GetOwningPlayer(GetDyingUnit()), 0, 0, "|cffFF0000You have been turned into the alien's spawn! Work with the alien to ensure victory.|r")
                call DisplayTextToPlayer(udg_Parasite, 0, 0, "|cffFF0000You have acquired a spawn!|r")
                call DisplayTextToPlayer(udg_Parasite, 0, 0, "|cffffcc00+175 evolution points for successful kill!")
                set udg_UpgradePointsAlien=( udg_UpgradePointsAlien + 175.00 )
                set udg_TempPlayer=GetOwningPlayer(GetDyingUnit())
                call TriggerExecute(gg_trg_ParasiteSpawnCreateSpell)
                call TriggerExecute(gg_trg_WinCheck)
                return
                // Commented out!
                //call FadeUnitOverTime(GetDyingUnit(),5.0,true)
            else
                // ---
                if ( Trig_PlayerMurder_Func006Func003Func002Func002C() ) then
                    set udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))]=true
                    set udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))]=false
                    set udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))]=false
                    set udg_TempPoint=GetUnitLoc(GetDyingUnit())
                    set udg_TempPlayer=GetOwningPlayer(GetDyingUnit())
                    if ( Trig_PlayerMurder_Func006Func003Func002Func002Func007C() ) then
                        call CreateNUnitsAtLoc(1, udg_MutantChildInfectee, GetOwningPlayer(GetDyingUnit()), udg_TempPoint, bj_UNIT_FACING)
                    else
                        if ( Trig_PlayerMurder_Func006Func003Func002Func002Func007Func002C() ) then
                            call CreateNUnitsAtLoc(1, udg_ParasiteChildInfectee, GetOwningPlayer(GetDyingUnit()), udg_TempPoint, bj_UNIT_FACING)
                        else
                            call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "There is a horrible bug... Probably breaks the game so to fix it for now, liquidate your spawn as it is invincible yet cant play. Report this bug to Thorlar and upload the replay too, s/*\n                            */o it can be fixed properly, in the next version :)")
                        endif
                    endif
                    call ConvertInfectionParasiteUnitToCyborgInfection(GetLastCreatedUnit())
                    // Removing Human Form (will work only on alien units) because it may bug the game -_-
                    call UnitRemoveAbilityBJ('A02X', GetLastCreatedUnit())
                    call SetUnitLifePercentBJ(GetLastCreatedUnit(), 33.00)
                    call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_TempPlayer)
                    call PanCameraToTimedLocForPlayer(udg_TempPlayer, udg_TempPoint, 0)
                    call RemoveLocation(udg_TempPoint)
                    set udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]=GetLastCreatedUnit()
                    call DisplayTextToPlayer(GetOwningPlayer(GetDyingUnit()), 0, 0, "|cffFF0000You have been turned into the Cyborg's spawn! Work with the cyborg to ensure victory.|r")
                    call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffFF0000You have acquired a spawn!|r")
                    call TriggerExecute(gg_trg_WinCheck)
                    return
                else
                endif
            endif
        endif
    else
    endif
    call DisplayTextToForce(GetPlayersAll(), ( GetPlayerName(GetOwningPlayer(GetDyingUnit())) + " |cff800080has been killed!|r" ))
    // New Code here - If alien kills main evil
    if ( Trig_PlayerMurder_Func009C() ) then
        set udg_UpgradePointsAlien=( udg_UpgradePointsAlien + 3000.00 )
    else
    endif
    // New Code above - If alien killed mutant
    if ( Trig_PlayerMurder_Func011C() ) then
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_3989")
        call Status_changeStr((LoadStr(Table__ht, (((GroupChat))), (- 2))) , - 2 , false) // INLINED!!
        call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 4.00, "ReplaceableTextures\\CameraMasks\\White_mask.blp", 0.00, 100.00, 0, 50.00)
        call PlaySoundBJ(gg_snd_AbominationAlternateDeath1)
    else
        if ( Trig_PlayerMurder_Func011Func001C() ) then
            call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_3988")
            call Status_changeStr((LoadStr(Table__ht, (((GroupChat))), (- 1))) , - 1 , false) // INLINED!!
            call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 4.00, "ReplaceableTextures\\CameraMasks\\White_mask.blp", 0.00, 0.00, 100.00, 50.00)
            call PlaySoundBJ(gg_snd_WarlockDeath1)
        else
            if ( Trig_PlayerMurder_Func011Func001Func001C() ) then
                call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_3987")
                call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 4.00, "ReplaceableTextures\\CameraMasks\\White_mask.blp", 100.00, 100.00, 100.00, 50.00)
                call PlaySoundBJ(gg_snd_RockGolemDeath1)
            else
                if ( Trig_PlayerMurder_Func011Func001Func001Func001C() ) then
                    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5457")
                    call Status_changeStr((LoadStr(Table__ht, (((GroupChat))), (- 3))) , - 3 , true) // INLINED!!
                    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 4.00, "ReplaceableTextures\\CameraMasks\\White_mask.blp", 100.00, 75.00, 0.00, 50.00)
                    call PlaySoundBJ(gg_snd_PlaceAncestralGuardian)
                else
                    if ( Trig_PlayerMurder_Func011Func001Func001Func001Func001C() ) then
                        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5456")
                        call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 4.00, "ReplaceableTextures\\CameraMasks\\DiagonalSlash_mask.blp", 0.00, 0.00, 100.00, 50.00)
                        call PlaySoundBJ(gg_snd_PitFiendDeath1)
                    else
                        if ( Trig_PlayerMurder_Func011Func001Func001Func001Func001Func001C() ) then
                            call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5455")
                            call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 4.00, "ReplaceableTextures\\CameraMasks\\White_mask.blp", 0.00, 100.00, 0.00, 50.00)
                            call PlaySoundBJ(gg_snd_BansheeDeath)
                        else
                            if ( Trig_PlayerMurder_Func011Func001Func001Func001Func001Func001Func001C() ) then
                                call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5532")
                                call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 4.00, "ReplaceableTextures\\CameraMasks\\White_mask.blp", 100.00, 75.00, 0.00, 50.00)
                                call PlaySoundBJ(gg_snd_UndeadDissipate2)
                            else
                                call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5530")
                                call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 4.00, "ReplaceableTextures\\CameraMasks\\White_mask.blp", 100.00, 0.00, 0.00, 50.00)
                                call PlaySoundBJ(gg_snd_PeasantDeath)
                                if ( Trig_PlayerMurder_Func011Func001Func001Func001Func001Func001Func001Func004C() ) then
                                    call DisplayTextToPlayer(udg_Parasite, 0, 0, "|cffffcc00+175 evolution points for successful kill!")
                                    set udg_UpgradePointsAlien=( udg_UpgradePointsAlien + 175.00 )
                                else
                                endif
                            endif
                        endif
                    endif
                endif
            endif
        endif
    endif
    call AndroidKillCheck(GetOwningPlayer(GetDyingUnit()))
    set udg_TempPlayer=GetOwningPlayer(GetDyingUnit())
    set udg_TempUnit=GetDyingUnit()
    if ( Trig_PlayerMurder_Func015C() ) then
        set udg_TempPoint=GetUnitLoc(udg_TempUnit)
        call CreateItemLoc('I01H', udg_TempPoint)
        call RemoveLocation(udg_TempPoint)
        set udg_Android_MemoryCard=GetLastCreatedItem()
    else
    endif
    call MurderPart2()
endfunction

//===========================================================================
function InitTrig_PlayerMurder takes nothing returns nothing
    set gg_trg_PlayerMurder=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_PlayerMurder, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddAction(gg_trg_PlayerMurder, function Trig_PlayerMurder_Actions)
endfunction

//===========================================================================
// Trigger: PlayerMurderPart2
//===========================================================================
function Trig_PlayerMurderPart2_Func001C takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurderPart2_Func003Func001Func003C takes nothing returns boolean
    if ( ( IsUnitAliveBJ(udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]) == true ) ) then
        return true
    endif
    if GetChippedCorpses() > 0 then
    return true
    endif
    return false
endfunction

function Trig_PlayerMurderPart2_Func003Func001C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_RogueAndroid ) ) then
        return false
    endif
    if ( not Trig_PlayerMurderPart2_Func003Func001Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurderPart2_Func003Func008Func001C takes nothing returns boolean
    if ( not ( IsPlayerInForce(GetEnumPlayer(), udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurderPart2_Func003Func008A takes nothing returns nothing
    if ( Trig_PlayerMurderPart2_Func003Func008Func001C() ) then
        call SetPlayerAllianceStateBJ(GetEnumPlayer(), udg_TempPlayer, bj_ALLIANCE_ALLIED_VISION)
        call SetPlayerAllianceStateBJ(udg_TempPlayer, GetEnumPlayer(), bj_ALLIANCE_UNALLIED)
    else
    endif
endfunction

function Trig_PlayerMurderPart2_Func003Func013C takes nothing returns boolean
    if ( not ( udg_Player_TetrabinLevel[GetConvertedPlayerId(udg_TempPlayer)] >= 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurderPart2_Func003Func014C takes nothing returns boolean
    if ( not ( udg_DeathType == 2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurderPart2_Func003Func015Func001C takes nothing returns boolean
    if ( not ( IsUnitDeadBJ(GetEnumUnit()) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurderPart2_Func003Func015A takes nothing returns nothing
    if ( Trig_PlayerMurderPart2_Func003Func015Func001C() ) then
    else
        call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_PASSIVE), true)
    endif
endfunction

function Trig_PlayerMurderPart2_Func003Func018Func001C takes nothing returns boolean
    if ( not ( IsUnitDeadBJ(GetEnumUnit()) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurderPart2_Func003Func018A takes nothing returns nothing
    if ( Trig_PlayerMurderPart2_Func003Func018Func001C() ) then
    else
        call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_PASSIVE), true)
    endif
endfunction

function Trig_PlayerMurderPart2_Func003Func025Func002C takes nothing returns boolean
    if ( ( udg_Android_Preference == 'h052' ) ) then
        return true
    endif
    if hasRevivedAsPacificationBot == true then
    return true
    endif
    return false
endfunction

function Trig_PlayerMurderPart2_Func003Func025C takes nothing returns boolean
    if ( not Trig_PlayerMurderPart2_Func003Func025Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurderPart2_Func003C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_PlayerMurderPart2_Actions takes nothing returns nothing
    if ( Trig_PlayerMurderPart2_Func001C() ) then
        return
    else
    endif
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call RemoveItem(UnitItemInSlotBJ(udg_TempUnit, GetForLoopIndexA()))
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    if ( Trig_PlayerMurderPart2_Func003C() ) then
        call DisplayTextToPlayer(udg_TempPlayer, 0, 0, "You have died. You will be allowed to watch only where your memory card is. As you are the android, you may yet be revived. If you do not wish to be revived or recognize this as impossibl/*\n        */e, you may type -shutdown to forfeit all revival priviledges.")
        call ForGroupBJ(GetUnitsOfPlayerAll(udg_TempPlayer), function Trig_PlayerMurderPart2_Func003Func018A)
        call EnableTrigger(gg_trg_AndroidCardVision)
        call EnableTrigger(gg_trg_AndroidChat)
        set udg_Player_NameBeforeDead[GetConvertedPlayerId(udg_TempPlayer)]=GetPlayerName(udg_TempPlayer)
        call SetPlayerName(udg_TempPlayer, ( GetPlayerName(udg_TempPlayer) + ( ( ( ( "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                " ) + "                                                                                                                                                                                                                                                " ) + "                                                                                                                                                                                                                                                " ) + "                                                                                                                                                                                                                                                " ) ))
        call ForceAddPlayerSimple(udg_TempPlayer, udg_DeadGroup)
        call SaveInteger(Table__ht, (GroupChat), (( GetPlayerId(udg_TempPlayer) + 1 ) * - 10), ( (LoadInteger(Table__ht, (s__StringIndexer__D_data), (StringHash((DEAD_MESSAGE_TYPE))))))) // INLINED!!
        if ( Trig_PlayerMurderPart2_Func003Func025C() ) then
            call TriggerExecute(gg_trg_Shutdown)
        else
        endif
    else
        if ( Trig_PlayerMurderPart2_Func003Func001C() ) then
            return
        else
        endif
        call DisplayTextToPlayer(udg_TempPlayer, 0, 0, "You have died. You can stay and watch the game, or leave at any time.")
        if GetLocalPlayer() == udg_TempPlayer then
        call MultiboardDisplay(ChatBoard, true)
        endif
        set udg_Player_Spectating[GetConvertedPlayerId(udg_TempPlayer)]=true
        call ForForce(GetPlayersAll(), function Trig_PlayerMurderPart2_Func003Func008A)
        call SetPlayerAllianceStateBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPlayer, bj_ALLIANCE_ALLIED_VISION)
        call ForceAddPlayerSimple(udg_TempPlayer, udg_DeadGroup)
        set udg_Player_NameBeforeDead[GetConvertedPlayerId(udg_TempPlayer)]=GetPlayerName(udg_TempPlayer)
        call SetPlayerName(udg_TempPlayer, ( GetPlayerName(udg_TempPlayer
        if ( Trig_PlayerMurderPart2_Func003Func013C() ) then
            call CameraClearNoiseForPlayer(udg_TempPlayer)
        else
        endif
        if ( Trig_PlayerMurderPart2_Func003Func014C() ) then
            call CustomDefeatBJ(udg_TempPlayer, "TRIGSTR_3582")
        else
        endif
        call ForGroupBJ(GetUnitsOfPlayerAll(udg_TempPlayer), function Trig_PlayerMurderPart2_Func003Func015A)
    endif
    call TriggerExecute(gg_trg_WinCheck)
endfunction

//===========================================================================
function InitTrig_PlayerMurderPart2 takes nothing returns nothing
    set gg_trg_PlayerMurderPart2=CreateTrigger()
    call TriggerAddAction(gg_trg_PlayerMurderPart2, function Trig_PlayerMurderPart2_Actions)
endfunction

//===========================================================================
// Trigger: WinCheck
//===========================================================================
function Trig_WinCheck_Func001C takes nothing returns boolean
    if ( not ( udg_WC_Disable == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Func003Func003Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(ConvertedPlayer(GetForLoopIndexA()))] == true ) ) then
        return false
    endif
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetForLoopIndexA()]) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Func003Func004Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(ConvertedPlayer(GetForLoopIndexA()))] == true ) ) then
        return false
    endif
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetForLoopIndexA()]) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Func003Func005Func001C takes nothing returns boolean
    if not ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(ConvertedPlayer(GetForLoopIndexA()))] == true ) then
    return false
    endif
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetForLoopIndexA()]) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Func003Func006C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Func003Func007C takes nothing returns boolean
    if ( ( IsUnitDeadBJ(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) == true ) ) then
        return true
    endif
    if ( ( udg_Allow_Mutant == false ) ) then
        return true
    endif
    return false
endfunction

function Trig_WinCheck_Func003Func008C takes nothing returns boolean
    if ( ( IsUnitDeadBJ(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]) == true ) ) then
        return true
    endif
    if ( ( udg_Allow_Parasite == false ) ) then
        return true
    endif
    return false
endfunction

function Trig_WinCheck_Func003Func009C takes nothing returns boolean
    if ( ( IsUnitDeadBJ(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)]) == true ) ) then
        return true
    endif
    if ( ( udg_Allow_RogueAndroid == false ) ) then
        return true
    endif
    return false
endfunction

function Trig_WinCheck_Func003C takes nothing returns boolean
    if ( not ( udg_GameEnd == false ) ) then
        return false
    endif
    if ( not Trig_WinCheck_Func003Func007C() ) then
        return false
    endif
    if ( not Trig_WinCheck_Func003Func008C() ) then
        return false
    endif
    if ( not Trig_WinCheck_Func003Func009C() ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Func004Func003Func001C takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetForLoopIndexA()]) == true ) ) then
        return false
    endif
    if ( not ( IsPlayerInForce(ConvertedPlayer(GetForLoopIndexA()), udg_DeadGroup) == false ) ) then
        return false
    endif
    if ( not ( ConvertedPlayer(GetForLoopIndexA()) != udg_Mutant ) ) then
        return false
    endif
    if ( not ( udg_Player_IsMutantSpawn[GetForLoopIndexA()] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Func004Func004C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Func004Func005C takes nothing returns boolean
    if ( ( IsUnitDeadBJ(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]) == true ) ) then
        return true
    endif
    if ( ( udg_Allow_Parasite == false ) ) then
        return true
    endif
    if ( ( GetPlayerSlotState(udg_Parasite) != PLAYER_SLOT_STATE_PLAYING ) ) then
        return true
    endif
    return false
endfunction

function Trig_WinCheck_Func004Func006C takes nothing returns boolean
    if ( ( IsUnitDeadBJ(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)]) == true ) ) then
        return true
    endif
    if ( ( udg_Allow_RogueAndroid == false ) ) then
        return true
    endif
    if ( ( GetPlayerSlotState(udg_RogueAndroid) != PLAYER_SLOT_STATE_PLAYING ) ) then
        return true
    endif
    return false
endfunction

function Trig_WinCheck_Func004C takes nothing returns boolean
    if ( not ( udg_GameEnd == false ) ) then
        return false
    endif
    if ( not Trig_WinCheck_Func004Func005C() ) then
        return false
    endif
    if ( not Trig_WinCheck_Func004Func006C() ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Func005Func003Func001C takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetForLoopIndexA()]) == true ) ) then
        return false
    endif
    if ( not ( IsPlayerInForce(ConvertedPlayer(GetForLoopIndexA()), udg_DeadGroup) == false ) ) then
        return false
    endif
    if ( not ( ConvertedPlayer(GetForLoopIndexA()) != udg_Parasite ) ) then
        return false
    endif
    if ( not ( udg_Player_IsParasiteSpawn[GetForLoopIndexA()] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Func005Func004C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Func005Func005C takes nothing returns boolean
    if ( ( IsUnitDeadBJ(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) == true ) ) then
        return true
    endif
    if ( ( udg_Allow_Mutant == false ) ) then
        return true
    endif
    if ( ( GetPlayerSlotState(udg_Mutant) != PLAYER_SLOT_STATE_PLAYING ) ) then
        return true
    endif
    return false
endfunction

function Trig_WinCheck_Func005Func006C takes nothing returns boolean
    if ( ( IsUnitDeadBJ(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)]) == true ) ) then
        return true
    endif
    if ( ( udg_Allow_RogueAndroid == false ) ) then
        return true
    endif
    if ( ( GetPlayerSlotState(udg_RogueAndroid) != PLAYER_SLOT_STATE_PLAYING ) ) then
        return true
    endif
    return false
endfunction

function Trig_WinCheck_Func005C takes nothing returns boolean
    if ( not ( udg_GameEnd == false ) ) then
        return false
    endif
    if ( not Trig_WinCheck_Func005Func005C() ) then
        return false
    endif
    if ( not Trig_WinCheck_Func005Func006C() ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Func006Func003Func001C takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetForLoopIndexA()]) == true ) ) then
        return false
    endif
    if ( not ( IsPlayerInForce(ConvertedPlayer(GetForLoopIndexA()), udg_DeadGroup) == false ) ) then
        return false
    endif
    if ( not ( ConvertedPlayer(GetForLoopIndexA()) != udg_RogueAndroid ) ) then
        return false
    endif
    if ( not ( udg_Player_IsRogueAndroidSpawn[GetForLoopIndexA()] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Func006Func004C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Func006Func005C takes nothing returns boolean
    if ( ( IsUnitDeadBJ(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) == true ) ) then
        return true
    endif
    if ( ( udg_Allow_Mutant == false ) ) then
        return true
    endif
    if ( ( GetPlayerSlotState(udg_Mutant) != PLAYER_SLOT_STATE_PLAYING ) ) then
        return true
    endif
    return false
endfunction

function Trig_WinCheck_Func006Func006C takes nothing returns boolean
    if ( ( IsUnitDeadBJ(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]) == true ) ) then
        return true
    endif
    if ( ( udg_Allow_Parasite == false ) ) then
        return true
    endif
    if ( ( GetPlayerSlotState(udg_Parasite) != PLAYER_SLOT_STATE_PLAYING ) ) then
        return true
    endif
    return false
endfunction

function Trig_WinCheck_Func006C takes nothing returns boolean
    if ( not ( udg_GameEnd == false ) ) then
        return false
    endif
    if ( not Trig_WinCheck_Func006Func005C() ) then
        return false
    endif
    if ( not Trig_WinCheck_Func006Func006C() ) then
        return false
    endif
    return true
endfunction

function Trig_WinCheck_Actions takes nothing returns nothing
    if ( Trig_WinCheck_Func001C() ) then
        return
    else
    endif
    call PolledWait(0.25)
    if ( Trig_WinCheck_Func003C() ) then
        set udg_TempBool=true
        set bj_forLoopAIndex=1
        set bj_forLoopAIndexEnd=12
        loop
            exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
            if ( Trig_WinCheck_Func003Func003Func001C() ) then
                set udg_TempBool=false
            else
            endif
            set bj_forLoopAIndex=bj_forLoopAIndex + 1
        endloop
        set bj_forLoopAIndex=1
        set bj_forLoopAIndexEnd=12
        loop
            exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
            if ( Trig_WinCheck_Func003Func004Func001C() ) then
                set udg_TempBool=false
            else
            endif
            set bj_forLoopAIndex=bj_forLoopAIndex + 1
        endloop
        set bj_forLoopAIndex=1
        set bj_forLoopAIndexEnd=12
        loop
            exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
            if ( Trig_WinCheck_Func003Func005Func001C() ) then
                set udg_TempBool=false
            else
            endif
            set bj_forLoopAIndex=bj_forLoopAIndex + 1
        endloop
        if ( Trig_WinCheck_Func003Func006C() ) then
            call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1068")
            call PlaySoundBJ(gg_snd_HumanVictory)
            call TriggerExecute(gg_trg_WinDelay)
        else
        endif
    else
    endif
    if ( Trig_WinCheck_Func004C() ) then
        set udg_TempBool=true
        set bj_forLoopAIndex=1
        set bj_forLoopAIndexEnd=12
        loop
            exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
            if ( Trig_WinCheck_Func004Func003Func001C() ) then
                set udg_TempBool=false
            else
            endif
            set bj_forLoopAIndex=bj_forLoopAIndex + 1
        endloop
        if ( Trig_WinCheck_Func004Func004C() ) then
            call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1076")
            call PlaySoundBJ(gg_snd_DarkVictory)
            call TriggerExecute(gg_trg_WinDelay)
        else
        endif
    else
    endif
    if ( Trig_WinCheck_Func005C() ) then
        set udg_TempBool=true
        set bj_forLoopAIndex=1
        set bj_forLoopAIndexEnd=12
        loop
            exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
            if ( Trig_WinCheck_Func005Func003Func001C() ) then
                set udg_TempBool=false
            else
            endif
            set bj_forLoopAIndex=bj_forLoopAIndex + 1
        endloop
        if ( Trig_WinCheck_Func005Func004C() ) then
            call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1084")
            call PlaySoundBJ(gg_snd_SadMystery)
            call TriggerExecute(gg_trg_WinDelay)
        else
        endif
    else
    endif
    if ( Trig_WinCheck_Func006C() ) then
        set udg_TempBool=true
        set bj_forLoopAIndex=1
        set bj_forLoopAIndexEnd=12
        loop
            exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
            if ( Trig_WinCheck_Func006Func003Func001C() ) then
                set udg_TempBool=false
            else
            endif
            set bj_forLoopAIndex=bj_forLoopAIndex + 1
        endloop
        if ( Trig_WinCheck_Func006Func004C() ) then
            call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5450")
            // Lich King - Illidan Theme - Orc 2 - Tragic Confrontation
            call PlaySoundBJ(gg_snd_TragicConfrontation)
            call TriggerExecute(gg_trg_WinDelay)
        else
        endif
    else
    endif
endfunction

//===========================================================================
function InitTrig_WinCheck takes nothing returns nothing
    set gg_trg_WinCheck=CreateTrigger()
    call DisableTrigger(gg_trg_WinCheck)
    call TriggerAddAction(gg_trg_WinCheck, function Trig_WinCheck_Actions)
endfunction

//===========================================================================
// Trigger: WinDelay
//===========================================================================
function Trig_WinDelay_Func007A takes nothing returns nothing
    call SetPlayerName(GetEnumPlayer(), udg_OriginalName[GetConvertedPlayerId(GetEnumPlayer())])
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=12
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call SetPlayerAllianceStateBJ(ConvertedPlayer(GetForLoopIndexA()), GetEnumPlayer(), bj_ALLIANCE_ALLIED_VISION)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
endfunction

function Trig_WinDelay_Func009A takes nothing returns nothing
    call SetUnitAnimation(GetEnumUnit(), "victory")
endfunction

function Trig_WinDelay_Actions takes nothing returns nothing
    set udg_GameEnd=true
    call DestroyTrigger(gg_trg_PlayerDeathText)
    call DestroyTrigger(gg_trg_WinCheck)
    call DestroyTrigger(gg_trg_PlayerMurder)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5452")
    call PolledWait(2)
    call ForForce(GetPlayersAll(), function Trig_WinDelay_Func007A)
    call FogEnableOff()
    call ForGroupBJ(GetUnitsInRectAll(GetPlayableMapRect()), function Trig_WinDelay_Func009A)
    call PolledWait(10.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5444")
    call PolledWait(15.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5445")
    call PolledWait(1.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5446")
    call PolledWait(1.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5447")
    call PolledWait(1.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5448")
    call PolledWait(1.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5449")
    call PolledWait(1.00)
    call EndGame(true)
endfunction

//===========================================================================
function InitTrig_WinDelay takes nothing returns nothing
    set gg_trg_WinDelay=CreateTrigger()
    call TriggerAddAction(gg_trg_WinDelay, function Trig_WinDelay_Actions)
endfunction

//===========================================================================
// Trigger: PlayerLeaves
//===========================================================================
function NIFPO_Sort takes nothing returns nothing
    if (not ( IsPlayerNonhuman((GetEnumPlayer())) )) then // INLINED!!
        call ForceAddPlayer(udg_TempPlayerGroup, GetEnumPlayer())
    endif
endfunction

function NoninfectedForcePickOne takes nothing returns player
    local player p
    
    set udg_TempPlayerGroup=CreateForce()
    call ForForce(GetPlayersAll(), function NIFPO_Sort)
    set p=ForcePickRandomPlayer(udg_TempPlayerGroup)
    call DestroyForce(udg_TempPlayerGroup)
    return p
endfunction

function Trig_PlayerLeaves_Actions takes nothing returns nothing
local player p
local boolean b=IsUnitDeadBJ(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])

    set udg_Player_Left[GetConvertedPlayerId(GetTriggerPlayer())]=true
    call DisplayTextToForce(GetPlayersAll(), ( udg_OriginalName[GetConvertedPlayerId(GetTriggerPlayer())] + "|cff408080 has left the game!|r" ))
    call KillUnit(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())]) //Kill leaver's playerhero unit
    call UnitAddAbility(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())], 'A02T') //And stay dead
    
    //If less than 90 seconds passed AND player who left is alien, mutant, or android
    if TimerGetElapsed(udg_GameTimer) <= 90.0 and ( IsPlayerMainInfected(GetTriggerPlayer()) or udg_HiddenAndroid == GetTriggerPlayer() ) then
        
        if udg_Mutant == GetTriggerPlayer() then
            call DisplayTextToForce(GetPlayersAll(), "Reassigning a new mutant...")
            set p=NoninfectedForcePickOne()
            if p != null then
                set udg_Mutant=p
                call DisplayTextToPlayer(p, 0, 0, "|cffFF0000You are now the Mutant. Seek out all enemies and destroy them.")
                call CreateNUnitsAtLoc(1, 'e031', p, udg_HoldZone, bj_UNIT_FACING) //Was GetEnumUnit()
                call Status_changeStr((LoadStr(Table__ht, (((GroupChat))), (- 2))) , - 2 , true) //Change Status // INLINED!!
                //If it doesn't work, also add the ability on the playerhero unit
            else
                call DisplayTextToForce(GetPlayersAll(), "Not enough players for a new Mutant.")
            endif
        endif
        
        if udg_Parasite == GetTriggerPlayer() then
            call DisplayTextToForce(GetPlayersAll(), "Reassigning a new alien...")
            set p=NoninfectedForcePickOne()
            if p != null then
                set udg_Parasite=p
                call DisplayTextToPlayer(p, 0, 0, "|cffFF0000You are now the Alien. Seek out all enemies and destroy them.")
                call SetPlayerAllianceStateBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), p, bj_ALLIANCE_ALLIED_ADVUNITS)
                call Status_changeStr((LoadStr(Table__ht, (((GroupChat))), (- 1))) , - 1 , true) //Change Status // INLINED!!
            else
                call DisplayTextToForce(GetPlayersAll(), "Not enough players for a new Alien.")
            endif
        endif
        
        if udg_RogueAndroid == GetTriggerPlayer() then
            call DisplayTextToForce(GetPlayersAll(), "Reassigning a new cyborg...")
            set p=NoninfectedForcePickOne()
            if p != null then
                set udg_RogueAndroid=p
                call DisplayTextToPlayer(p, 0, 0, "|cffFF0000You are now the Cyborg. Destroy everything.")
                call Status_changeStr((LoadStr(Table__ht, (((GroupChat))), (- 3))) , - 3 , true) //Change Status // INLINED!!
            else
                call DisplayTextToForce(GetPlayersAll(), "Not enough players for a new Cyborg.")
            endif
        endif
        
        if udg_HiddenAndroid == GetTriggerPlayer() then
            call DisplayTextToForce(GetPlayersAll(), "Reassigning a new Android...")
            set p=NoninfectedForcePickOne()
            if p != null then
                set udg_HiddenAndroid=p
                call DisplayTextToPlayer(p, 0, 0, "|cffFF0000You are now the Android. Protect the humans and eliminate the hostile threat.")
            else
                call DisplayTextToForce(GetPlayersAll(), "Not enough players for a new Android.")
            endif
        endif
    endif
endfunction

//===========================================================================
function InitTrig_PlayerLeaves takes nothing returns nothing
local integer i=0
    set gg_trg_PlayerLeaves=CreateTrigger()
loop
exitwhen i > 11
    call TriggerRegisterPlayerEventLeave(gg_trg_PlayerLeaves, Player(i))
set i=i + 1
endloop
    call TriggerAddAction(gg_trg_PlayerLeaves, function Trig_PlayerLeaves_Actions)
endfunction


//===========================================================================
// Trigger: ChatConverter
//===========================================================================

function ChatConverter takes nothing returns nothing
     local player p=GetTriggerPlayer()
     local string s=GetEventPlayerChatString()
     local integer maxrow=39
     local integer r=RowOn
     local integer i=1
if IsPlayerInForce(p, udg_DeadGroup) and SubString(s, 0, 1) != "-" then
     if RowOn > maxrow then
        set RowOn=maxrow
        loop
        exitwhen i > maxrow
            set ChatLog[i - 1]=ChatLog[i]
            set i=i + 1
        endloop
     
     endif
        set ChatLog[RowOn]="|cffFF8000" + udg_OriginalName[GetConvertedPlayerId(p)] + "|r: " + s
        set i=1
     loop
     exitwhen i > RowOn
        call MultiboardSetItemValueBJ(ChatBoard, 1, i, ChatLog[i])
        set i=i + 1
     endloop
     set RowOn=RowOn + 1
endif
endfunction

function InitChatSystem takes nothing returns nothing
call DestroyTrigger(GetTriggeringTrigger())
    set ChatBoard=CreateMultiboardBJ(1, 40, "Dead Player Chat")
    call MultiboardSetItemWidthBJ(ChatBoard, 1, 0, 100.00)
        call MultiboardSetItemStyleBJ(ChatBoard, 1, 0, true, false)
    call MultiboardDisplay(ChatBoard, false)
endfunction
//===========================================================================
//function InitTrig_ChatConverter takes nothing returns nothing
   // local integer i=0
 //   local trigger t=CreateTrigger()
//    call TriggerAddAction(t,function InitChatSystem)
//    call TriggerRegisterTimerEvent(t,0.0,false)
//    set gg_trg_ChatConverter = CreateTrigger()
//  loop
 //   exitwhen i>11
 //  if GetPlayerController(Player(i))==MAP_CONTROL_USER then
 //   call TriggerRegisterPlayerChatEvent(gg_trg_ChatConverter,Player(i),"",false)
 //  endif
 //   set i=i+1
//  endloop
//    call TriggerAddAction(gg_trg_ChatConverter,function ChatConverter)

//endfunction


//===========================================================================
// Trigger: EscapePodOld
//===========================================================================

function s__EscapePod_Trig_EscapePodOld_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetSoldItem()) == 'I010' ) ) then
        return false
    endif
    return true
endfunction

function s__EscapePod_Trig_EscapePod_Func002Func001C takes nothing returns boolean
    if ( not ( udg_EscapePodVendor_Harbor[GetUnitUserData(GetSellingUnit())] == gg_unit_h00X_0049 ) ) then
        return false
    endif
    if ( not ( IsTriggerEnabled(gg_trg_SwaggerTeleportToPlanet) == true ) ) then
        return false
    endif
    return true
endfunction

function s__EscapePod_Trig_EscapePod_Func002C takes nothing returns boolean
    if ( not s__EscapePod_Trig_EscapePod_Func002Func001C() ) then
        return false
    endif
    if ( udg_Blackout == true ) then
        return true
    endif
    return true
endfunction

function s__EscapePod_Trig_EscapePod_Func003Func033C takes nothing returns boolean

    
    if ( ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetBuyingUnit()))] != GetBuyingUnit() ) ) then
        return true
    endif
    
    //If Lighting Storm
    if ( ( GetUnitTypeId(GetBuyingUnit()) == 'h01Q' ) ) then
        return true
    endif
    
    //If owner is alien form
    if ( ( GetOwningPlayer(GetBuyingUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return true
    endif
    return false
endfunction

function s__EscapePod_Trig_EscapePod_Func003C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetBuyingUnit()) != 'e00L' ) ) then
        return false
    endif
    if ( not s__EscapePod_Trig_EscapePod_Func003Func033C() ) then
        return false
    endif
    return true
endfunction

function s__EscapePod_PodDamageCheck takes nothing returns nothing
local trigger om=GetTriggeringTrigger()
local real damage=LoadReal((udg_hash), GetHandleId(om), StringHash("damagetaken")) + GetEventDamage() // INLINED!!
local unit b= LoadUnitHandle((udg_hash), GetHandleId(om), StringHash("b")) // INLINED!!
local unit c=LoadUnitHandle((udg_hash), GetHandleId(om), StringHash("c")) // INLINED!!
if udg_ShieldHP[(GetUnitUserData((GetTriggerUnit())))] > 0.0 then // INLINED!!
set damage=300.0
endif
call SaveReal((udg_hash), GetHandleId(om), StringHash("damagetaken"), damage) // INLINED!!
if damage >= 35.0 then
call ShowUnitHide(b)
call ShowUnitHide(c)
call SetUnitPosition(b, GetLocationX(udg_HoldZone), GetLocationY(udg_HoldZone))
call SetUnitPosition(c, GetLocationX(udg_HoldZone), GetLocationY(udg_HoldZone))
endif
endfunction

function s__EscapePod_IsMasqueradeEscapePod takes unit pod returns boolean

    //By default, udg_Parasite == NEUTRAL_PASSIVE == GetOwningPlayer(pod) = TRUE, so also gotta check if masquerade form!
    if udg_AlienCurrentForm == 'h033' then //If Alien evolution is Masquerade
        if udg_Parasite == GetOwningPlayer(pod) or udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(pod))] == true then
            return true
        endif
    endif
    
    return false

endfunction

function s__EscapePod_Trig_EscapePodOld_Actions takes nothing returns nothing
local unit b
local unit c
local unit d=GetBuyingUnit()
local location e
local unit q=GetSellingUnit()
local trigger om

    //Alien_ShopWorkaround
    if GetUnitTypeId(d) == 'e00L' then
        set d=udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(d))]
    endif
    
    call RemoveItem(GetSoldItem())
    
    if TimerGetElapsed(udg_GameTimer) - udg_Player_LastPodTime[GetConvertedPlayerId(GetOwningPlayer(d))] < 100.0 then
        if GetUnitTypeId(GetBuyingUnit()) != 'e00L' then
            call DisplayTextToPlayer(GetOwningPlayer(d), 0, 0, "|cffFF0000We're sorry, but you may not use a pod at this time. Please wait " + R2S(100 - ( TimerGetElapsed(udg_GameTimer) - udg_Player_LastPodTime[GetConvertedPlayerId(GetOwningPlayer(d))] )) + " seconds.")
        else
            call DisplayTextToPlayer(udg_Parasite, 0, 0, "|cffFF0000We're sorry, but you may not use a pod at this time. Please wait " + R2S(100 - ( TimerGetElapsed(udg_GameTimer) - udg_Player_LastPodTime[GetConvertedPlayerId(GetOwningPlayer(d))] )) + " seconds.")
        endif
        return
    endif
        
    //Blackout or Podding on docked swagger
    if ( s__EscapePod_Trig_EscapePod_Func002C() ) or GetUnitAbilityLevel(d, 'A07E') > 0 then
        call DisplayTextToPlayer(GetOwningPlayer(d), 0, 0, "TRIGSTR_2849")
        //call AdjustPlayerStateBJ( 2000, GetOwningPlayer(d), PLAYER_STATE_RESOURCE_GOLD )
        return
    endif
        
    //Alien Cocoon
    if GetUnitTypeId(d) == 'h02X' then
        call DisplayTextToPlayer(GetOwningPlayer(d), 0, 0, "TRIGSTR_2849")
        return
    endif
        
    if ( s__EscapePod_Trig_EscapePod_Func003C() ) then
        call DisplayTextToPlayer(GetOwningPlayer(d), 0, 0, "TRIGSTR_2852") //"This unit cannot use this static method"
        //call AdjustPlayerStateBJ( 2000, GetOwningPlayer(d), PLAYER_STATE_RESOURCE_GOLD )
    else
  
        set udg_TempPoint3=GetUnitLoc(d)
        call CreateNUnitsAtLoc(1, 'e01F', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint3, GetRandomDirectionDeg())
        call SetUnitFlyHeightBJ(GetLastCreatedUnit(), 180.00, 45.00)
        set b=GetLastCreatedUnit()
        call CreateNUnitsAtLoc(1, 'e01F', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint3, GetRandomDirectionDeg())
        call SetUnitFlyHeightBJ(GetLastCreatedUnit(), 180.00, 0.00)
        call SetUnitFlyHeightBJ(GetLastCreatedUnit(), 0.00, 45.00)
        set c=GetLastCreatedUnit()
        set om=CreateTrigger()
        call TriggerRegisterUnitEvent(om, d, EVENT_UNIT_DAMAGED)
        call TriggerAddAction(om, function s__EscapePod_PodDamageCheck)
        call SaveReal((udg_hash), GetHandleId(om), StringHash("damagetaken"), 0) // INLINED!!
        call SaveUnitHandle((udg_hash), GetHandleId(om), StringHash("b"), b) // INLINED!!
        call SaveUnitHandle((udg_hash), GetHandleId(om), StringHash("c"), c) // INLINED!!
        set udg_TempUnit=c
        set udg_CountUpBarColor="|cff00FF00"
        call DisplayTextToPlayer(GetOwningPlayer(d), 0, 0, "TRIGSTR_2850")
        call RemoveLocation(udg_TempPoint3)
        set e=GetUnitLoc(d)
        
        //WAITS HERE!
        call CountUpBar(udg_TempUnit , 40 , 0.1 , "DoNothing")
        
        //If MasqueradeTroll
        if s__EscapePod_IsMasqueradeEscapePod(q) then
            call SetUnitPositionLoc(d, udg_HoldZone)
            call EraseUnit(d , q)
            return
        endif
        
        if GetUnitAbilityLevel(d, 'A07E') > 0 then
            call DisplayTextToPlayer(GetOwningPlayer(d), 0, 0, "TRIGSTR_2849")
            return
        endif
        
        set udg_TempUnit=d
        if ( GetUnitTypeId(udg_TempUnit) == 'e00L' ) then
            set udg_TempUnit=udg_AlienForm_Alien
        endif
        
        set udg_TempPoint3=GetUnitLoc(d)
        if GetUnitAbilityLevel(udg_TempUnit, 'A07E') >= 1 or LoadReal((udg_hash), GetHandleId(om), StringHash("damagetaken")) >= 35.0 or IsUnitDeadBJ(udg_TempUnit) == true or DistanceBetweenPoints(udg_TempPoint3, e) >= 90.0 then // INLINED!!
            call DisplayTextToPlayer(GetOwningPlayer(d), 0, 0, "TRIGSTR_2851")
            //call AdjustPlayerStateBJ( 2000, GetOwningPlayer(udg_TempUnit), PLAYER_STATE_RESOURCE_GOLD )
            call RemoveLocation(e)
            call RemoveLocation(udg_TempPoint3)
            call FlushChildHashtable((udg_hash), GetHandleId(om)) // INLINED!!
            call DestroyTrigger(om)
            call ShowUnitHide(b)
            call ShowUnitHide(c)
            return
        else
            call FlushChildHashtable((udg_hash), GetHandleId(om)) // INLINED!!
            call DestroyTrigger(om)
            call ShowUnitHide(b)
            call ShowUnitHide(c)
            call RemoveLocation(e)
            call RemoveLocation(udg_TempPoint3)
        endif
        
        set udg_Player_LastPodTime[GetConvertedPlayerId(GetOwningPlayer(d))]=TimerGetElapsed(udg_GameTimer)
        call ShowUnitHide(udg_TempUnit)
        call PauseUnitBJ(true, udg_TempUnit)
        call UnitAddAbilityBJ('A04V', udg_TempUnit)
        call SetUnitPositionLoc(udg_TempUnit, udg_HoldZone)
        set udg_TempPoint=GetUnitLoc(udg_EscapePodVendor_Harbor[GetUnitUserData(q)])
        call CreateNUnitsAtLoc(1, 'h02P', GetOwningPlayer(udg_TempUnit), udg_TempPoint, bj_UNIT_FACING)
        call SaveInteger((udg_hash), GetHandleId(GetLastCreatedUnit()), StringHash("PushTolerance"), 0) // INLINED!!
        set udg_EscapePod_LifeReset[GetUnitUserData(GetLastCreatedUnit())]=GetUnitLifePercent(udg_TempUnit)
        set udg_EscapePod_Owner[GetUnitUserData(GetLastCreatedUnit())]=GetOwningPlayer(udg_TempUnit)
        if ( udg_TempUnit == udg_AlienForm_Alien ) then
            call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_Parasite)
            call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TempPoint, 1)
        else
            call SelectUnitForPlayerSingle(GetLastCreatedUnit(), GetOwningPlayer(udg_TempUnit))
            call PanCameraToTimedLocForPlayer(GetOwningPlayer(udg_TempUnit), udg_TempPoint, 0)
        endif
        
        call RemoveLocation(udg_TempPoint)
        call RemoveLocation(udg_TempPoint2)
        
        //Make sure they cannot press ESC and evolve in hold zone!
        if ( udg_Mutant == GetOwningPlayer(udg_TempUnit) ) then
            call DisableTrigger(gg_trg_MutantUpgrade)
        endif
        if udg_Parasite == GetOwningPlayer(udg_TempUnit) or Player(bj_PLAYER_NEUTRAL_EXTRA) == GetOwningPlayer(udg_TempUnit) then
            call DisableTrigger(gg_trg_ParasiteUpgrade)
        endif
    endif
endfunction

//===========================================================================
function s__EscapePod_IntEscapePod takes nothing returns nothing
    set gg_trg_EscapePodOld=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_EscapePodOld, EVENT_PLAYER_UNIT_SELL_ITEM)
    call TriggerAddCondition(gg_trg_EscapePodOld, Condition(function s__EscapePod_Trig_EscapePodOld_Conditions))
    call TriggerAddAction(gg_trg_EscapePodOld, function s__EscapePod_Trig_EscapePodOld_Actions)
endfunction

//===========================================================================
// Trigger: EscapePodDies
//===========================================================================
function Trig_EscapePodDies_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'h02P' ) ) then
        return false
    endif
    return true
endfunction

function Trig_EscapePodDies_Actions takes nothing returns nothing
    set udg_TempPlayer=udg_EscapePod_Owner[GetUnitUserData(GetDyingUnit())]
    set udg_TempUnit=udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]
    set udg_TempPoint=GetUnitLoc(udg_TempUnit)
    call SetUnitPositionLoc(udg_TempUnit, udg_TempPoint)
    call EraseUnit(udg_TempUnit , GetKillingUnit())
endfunction

//===========================================================================
function InitTrig_EscapePodDies takes nothing returns nothing
    set gg_trg_EscapePodDies=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_EscapePodDies, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_EscapePodDies, Condition(function Trig_EscapePodDies_Conditions))
    call TriggerAddAction(gg_trg_EscapePodDies, function Trig_EscapePodDies_Actions)
endfunction

//===========================================================================
// Trigger: SetTrajectory
//===========================================================================
function Trig_SetTrajectory_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A004' ) ) then
        return false
    endif
    return true
endfunction

//IsUnitAliveBJ(GetSpellTargetUnit()) == true

function Trig_SetTrajectory_Func001C takes nothing returns boolean
    if ( not ( RectContainsUnit(gg_rct_Space, GetSpellTargetUnit()) == true ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) != 'h02P' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) != 'h02H' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) != 'h02L' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) != 'h002' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) != 'h02B' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) != 'h029' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) != 'h005' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) != 'h02Q' ) ) then
        return false
    endif
    if ( not ( (GetUnitAbilityLevel((GetSpellTargetUnit()), 'A072') == 1) or (GetUnitAbilityLevel((GetSpellTargetUnit()), 'A071') == 1) ) ) then // INLINED!!
        return false
    endif
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) != 'h03J' ) ) then
        return false
    endif
    
    return true
endfunction

function Trig_SetTrajectory_Actions takes nothing returns nothing
local unit a=GetSpellAbilityUnit()
local unit b=GetSpellTargetUnit()
local player p=GetOwningPlayer(a)
local boolean boolz= false
local location k
local location i
local real q
local player r

    if ( Trig_SetTrajectory_Func001C() ) then
        set q=udg_SpaceObject_CollideRadius[(GetUnitUserData((GetSpellTargetUnit())))] * 1.2 // INLINED!!
        if q == 0 then
            set q=250.0
        endif
        
        set udg_TempPoint=GetUnitLoc(a)
        set udg_TempPoint2=GetUnitLoc(b)
        call SetUnitOwner(a, Player(PLAYER_NEUTRAL_PASSIVE), true)
        call IssuePointOrderLocBJ(a, "move", udg_TempPoint2)
        call h__SetUnitMoveSpeed(a, 180.00)
        loop
            exitwhen boolz == true
                set k=GetUnitLoc(a)
                set i=GetUnitLoc(b)
                if DistanceBetweenPoints(k, i) <= q or GetUnitLifePercent(a) == 0.0 or GetUnitLifePercent(b) == 0.0 then
                    set boolz=true
                else
                    call IssuePointOrderLocBJ(a, "move", i)
                endif
                call RemoveLocation(k)
                set k=null
                call RemoveLocation(i)
                set i=null
                call PolledWait(0.2)
        endloop
        
        if IsUnitAliveBJ(b) == true and IsUnitAliveBJ(a) == true then
            set r=udg_EscapePod_Owner[(GetUnitUserData((a)))] // INLINED!!
            call RemoveUnit(a)
            set udg_TempUnit=b
            if ( udg_TempUnit == gg_unit_h009_0029 ) then
                set udg_TempRect=gg_rct_ST4EscapePod
            else
                if ( udg_TempUnit == gg_unit_h003_0018 ) then
                    set udg_TempRect=gg_rct_ST1EscapePod
                else
                    if ( udg_TempUnit == gg_unit_h007_0027 ) then
                        set udg_TempRect=gg_rct_ST3EscapePod
                    else
                        if ( udg_TempUnit == gg_unit_h008_0196 ) then
                            set udg_TempRect=gg_rct_PlanetEscapePod
                        else
                            if ( udg_TempUnit == gg_unit_h00X_0049 ) then
                                set udg_TempRect=gg_rct_ST5EscapePod
                            else
                            if udg_TempUnit == gg_unit_h03T_0209 then
                            set udg_TempRect=gg_rct_MoonEscapePod
                            endif
                             if udg_TempUnit == gg_unit_h04E_0259 then
                            set udg_TempRect=gg_rct_ST8EscapePod
                            endif
                            if udg_TempUnit == gg_unit_h04T_0265 then
                            set udg_TempRect=gg_rct_ST9EscapePod
                            endif
                            if udg_TempUnit == gg_unit_h04V_0253 then
                            set udg_TempRect=gg_rct_ST10EscapePod
                            endif
                            if GetUnitTypeId(udg_TempUnit) == 'h04G' then
                                set udg_TempRect=gg_rct_OverlordPod
                            endif
                        endif
                    endif
                endif
            endif
            endif
            set udg_TempPoint=GetRectCenter(udg_TempRect)
            call CreateNUnitsAtLoc(1, 'e006', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, bj_UNIT_FACING)
            call SetUnitPositionLoc(udg_Playerhero[GetConvertedPlayerId(r)], udg_TempPoint)
            call ShowUnitShow(udg_Playerhero[GetConvertedPlayerId(r)])
            call PauseUnitBJ(false, udg_Playerhero[GetConvertedPlayerId(r)])
            call UnitRemoveAbility(udg_Playerhero[GetConvertedPlayerId(r)], 'A04V')
            call SetUnitLifePercentBJ(udg_Playerhero[GetConvertedPlayerId(r)], udg_EscapePod_LifeReset[(GetUnitUserData((a)))]) // INLINED!!
            if r == Player(14) then
              call PanCameraToTimedLocForPlayer(udg_Parasite, udg_TempPoint, 0)
            call SelectUnitForPlayerSingle(udg_Playerhero[GetConvertedPlayerId(r)], udg_Parasite)
            else
            call PanCameraToTimedLocForPlayer(r, udg_TempPoint, 0)
            call SelectUnitForPlayerSingle(udg_Playerhero[GetConvertedPlayerId(r)], r)
            endif
            call RemoveLocation(udg_TempPoint)
                    if udg_Mutant == r then
            call EnableTrigger(gg_trg_MutantUpgrade)
        endif
            set a=udg_Playerhero[GetConvertedPlayerId(r)]
        if udg_Parasite == r or Player(bj_PLAYER_NEUTRAL_EXTRA) == r then
            call EnableTrigger(gg_trg_ParasiteUpgrade)
        endif
        call UnitAddAbilityForPeriod(a , 'Avul' , 4.0)
        else
            call h__SetUnitMoveSpeed(a, 1)
            call SetUnitOwner(a, p, true)
            call SelectUnitForPlayerSingle(a, p)
            call PanCameraToForPlayer(p, GetUnitX(a), GetUnitY(a))
        endif
    else
        call DisplayTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, "|cffFF0000INVALID TARGET|r")
    endif
endfunction

//===========================================================================
function InitTrig_SetTrajectory takes nothing returns nothing
    set gg_trg_SetTrajectory=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SetTrajectory, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_SetTrajectory, Condition(function Trig_SetTrajectory_Conditions))
    call TriggerAddAction(gg_trg_SetTrajectory, function Trig_SetTrajectory_Actions)
endfunction


//===========================================================================
// Trigger: DamageSys
//===========================================================================
function Trig_DamageSys_Func001C takes nothing returns boolean
    if ( not ( udg_TempInt != 37 ) ) then
        return false
    endif
    return true
endfunction

function VendorDisabling_Damage takes nothing returns nothing
    if GetUnitAbilityLevel(GetEnumUnit(), 'A07Q') >= 1 then
        call VendorIsDamaged(GetEnumUnit())
        //call UnitDamageTarget(udg_TempUnit,GetEnumUnit(),0.1,false,false,ATTACK_TYPE_NORMAL,DAMAGE_TYPE_NORMAL,WEAPON_TYPE_WHOKNOWS)
        //call SetUnitLifeBJ(GetEnumUnit(),GetUnitState(GetEnumUnit(),UNIT_STATE_LIFE)+0.1)
    endif
endfunction

function VendorDisabling takes unit a returns nothing
    local location c
    local group g
    
    loop
        exitwhen (TimerGetElapsed(udg_GameTimer)) - udg_Unit_VendorDisablingTime[(GetUnitUserData((a)))] > 9.5 // INLINED!!
            set c=GetUnitLoc(a)
            set g=GetUnitsInRangeOfLocAll(650.0, c)
            set udg_TempUnit=a
            call ForGroup(g, function VendorDisabling_Damage)
            call RemoveLocation(c)
            call DestroyGroup(g)
            
            set g=null
            set c=null
            
            call PolledWait(0.25)
    endloop
    
    set udg_Unit_VendorDisabling[(GetUnitUserData((a)))]=false // INLINED!!
endfunction


function UponDamage takes nothing returns nothing
    local unit a=GetEventDamageSource()
    local real k=GetEventDamage()
    local unit r=GetTriggerUnit()
    local real o=GetUnitState(GetTriggerUnit(), UNIT_STATE_LIFE)
    local group ag
    local integer ir=0
    
    if k > o then
        set k=o
    endif
//

    //Mutant Infection
    if UnitHasBuffBJ(r, 'B009') or UnitHasBuffBJ(r, 'B01F') then
        set udg_Unit_IsInfected[(GetUnitUserData((r)))]=true // INLINED!!
        set udg_Unit_InfectionType[(GetUnitUserData((r)))]=1 // INLINED!!
        
    //Parasite Infection
    elseif UnitHasBuffBJ(r, 'B00H') or UnitHasBuffBJ(r, 'B01G') then
        set udg_Unit_IsInfected[(GetUnitUserData((r)))]=true // INLINED!!
        set udg_Unit_InfectionType[(GetUnitUserData((r)))]=2 // INLINED!!
        
    //Cyborg Mutant Infection
    elseif UnitHasBuffBJ(r, 'B01T') or UnitHasBuffBJ(r, 'B01U') then
        set udg_Unit_IsInfected[(GetUnitUserData((r)))]=true // INLINED!!
        set udg_Unit_InfectionType[(GetUnitUserData((r)))]=3 // INLINED!!
        
    //Cyborg Parasite Infection
    elseif UnitHasBuffBJ(r, 'B01V') or UnitHasBuffBJ(r, 'B01W') then
        set udg_Unit_IsInfected[(GetUnitUserData((r)))]=true // INLINED!!
        set udg_Unit_InfectionType[(GetUnitUserData((r)))]=4 // INLINED!!
        
    else
        set udg_Unit_IsInfected[(GetUnitUserData((r)))]=false // INLINED!!
    endif
    
    //if udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(r))] == r then
        //set udg_Player_DamageTaken[GetConvertedPlayerId(GetOwningPlayer(r))] = udg_Player_DamageTaken[GetConvertedPlayerId(GetOwningPlayer(r))] + k
    //endif
    
    //Exact damage of acid suit's acid and various infections (otherwise shops are disabled by infection lmao)
    if k == 4.39 or k == 6.53 or k == 8.53 or k == 0.0 or k == 11.11 then
        set a=null
        set r=null
        return
    endif
    
    //Force suit attack detection
    if GetUnitTypeId(a) == 'h03L' and ( TimerGetElapsed(udg_GameTimer) - udg_ForceSuit_LastAttackTime[(GetUnitUserData((a)))] == 0.375 or TimerGetElapsed(udg_GameTimer) - udg_ForceSuit_LastAttackTime[(GetUnitUserData((a)))] == 0.5 ) then // INLINED!!
        call ExecuteFunc("Trig_ForceSuitAttack_Actions")
        set a=null
        set r=null
        return
    endif
//

    if ( GetOwningPlayer(a) == udg_Mutant or udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(a))] ) and r == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(r))] and GetOwningPlayer(r) != udg_Mutant and udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(r))] == false and RectContainsUnit(gg_rct_Space, r) == false then
        if udg_Mutant_DamageToPlayer[GetConvertedPlayerId(GetOwningPlayer(r))] < 1 then
            set udg_Mutant_DamageToPlayer[GetConvertedPlayerId(GetOwningPlayer(r))]=udg_Mutant_DamageToPlayer[GetConvertedPlayerId(GetOwningPlayer(r))] + k / GetUnitState(r, UNIT_STATE_MAX_LIFE)
            
            if udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(a))] then
                set udg_UpgradePointsMutant=udg_UpgradePointsMutant + ( k / GetUnitState(r, UNIT_STATE_MAX_LIFE) ) * 50
            elseif udg_Mutant_IsPerfection then
                set udg_UpgradePointsMutant=udg_UpgradePointsMutant + ( k / GetUnitState(r, UNIT_STATE_MAX_LIFE) ) * 200
            else
                set udg_UpgradePointsMutant=udg_UpgradePointsMutant + ( k / GetUnitState(r, UNIT_STATE_MAX_LIFE) ) * 50
            endif
        endif
    endif


    if a != null and ( GetOwningPlayer(a) == udg_HiddenAndroid or GetOwningPlayer(r) == udg_HiddenAndroid ) and r == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(r))] then
        call LogTKPoints(GetOwningPlayer(a) , GetOwningPlayer(r) , k)
    endif
    
    if IsUnitPlayerhero(r) then
        set udg_Unit_VendorDisablingTime[(GetUnitUserData((r)))]=(TimerGetElapsed(udg_GameTimer)) // INLINED!!
        if not ( udg_Unit_VendorDisabling[(GetUnitUserData((r)))] ) then // INLINED!!
            set udg_Unit_VendorDisabling[(GetUnitUserData((r)))]=true // INLINED!!
            call VendorDisabling(r)
        endif
    endif
    
    set a=null
    set r=null
endfunction


function Trig_DamageSys_Actions takes nothing returns nothing
    if ( Trig_DamageSys_Func001C() ) then
    call TriggerRegisterUnitEvent(udg_DamageTrig, GetTriggerUnit(), EVENT_UNIT_DAMAGED)
    endif
endfunction
function Trig_DamageSys_2Actions takes nothing returns nothing
    if ( Trig_DamageSys_Func001C() ) then
    call TriggerRegisterUnitEvent(udg_DamageTrig, GetEnumUnit(), EVENT_UNIT_DAMAGED)
    endif
endfunction

//===========================================================================
function InitTrig_DamageSys takes nothing returns nothing
    set gg_trg_DamageSys=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_DamageSys, GetPlayableMapRect())
    call TriggerAddAction(gg_trg_DamageSys, function Trig_DamageSys_Actions)
    set udg_DamageTrig=CreateTrigger()
    call TriggerAddAction(udg_DamageTrig, function UponDamage)
    set udg_TempUnitGroup=GetUnitsInRectAll(GetPlayableMapRect())
    call ForGroup(udg_TempUnitGroup, function Trig_DamageSys_2Actions)
    call DestroyGroup(udg_TempUnitGroup)
endfunction


//===========================================================================
// Trigger: UpgradeStatus
//===========================================================================
function Trig_UpgradeStatus_Func004Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetEnumPlayer())] == true ) ) then
        return false
    endif
    if ( not ( IsPlayerInForce(GetEnumPlayer(), udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_UpgradeStatus_Func004A takes nothing returns nothing
    if ( Trig_UpgradeStatus_Func004Func001C() ) then
        set udg_UpgradePointsAlien=( udg_UpgradePointsAlien + 0.28 )
    else
    endif
endfunction

function Trig_UpgradeStatus_Func005Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetEnumPlayer())] == true ) ) then
        return false
    endif
    if ( not ( IsPlayerInForce(GetEnumPlayer(), udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_UpgradeStatus_Func005A takes nothing returns nothing
    if ( Trig_UpgradeStatus_Func005Func001C() ) then
        set udg_UpgradePointsMutant=( udg_UpgradePointsMutant + 0.40 )
    else
    endif
endfunction

function Trig_UpgradeStatus_Func006A takes nothing returns nothing
    set udg_UpgradePointsAlien=( udg_UpgradePointsAlien + 0.20 )
endfunction

function Trig_UpgradeStatus_Func007Func002C takes nothing returns boolean
    if ( not ( udg_UpgradePointsAlien <= 1370.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_UpgradeStatus_Func007C takes nothing returns boolean
    if ( not ( udg_UpgradePointsAlien <= 660.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_UpgradeStatus_Func008Func004Func001Func001C takes nothing returns boolean
    if ( not ( udg_UpgradePointsMutant <= 1800.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_UpgradeStatus_Func008Func004Func001C takes nothing returns boolean
    if ( not ( udg_UpgradePointsMutant <= 900.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_UpgradeStatus_Func008Func004C takes nothing returns boolean
    if ( not ( udg_UpgradePointsMutant <= 300.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_UpgradeStatus_Func008C takes nothing returns boolean
    if ( not ( 'h04G' != udg_MutantUpgradingTo ) ) then
        return false
    endif
    return true
endfunction

function Trig_UpgradeStatus_Func012C takes nothing returns boolean
    if ( not ( GetPlayerState(udg_Mutant, PLAYER_STATE_RESOURCE_LUMBER) >= 300 ) ) then
        return false
    endif
    if ( not ( udg_MutantUpgrades[1] == false ) ) then
        return false
    endif
    if ( not ( IsPlayerInForce(udg_Mutant, udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_UpgradeStatus_Func013C takes nothing returns boolean
    if ( not ( udg_MutantUpgrades[1] == true ) ) then
        return false
    endif
    if ( not ( udg_MutantUpgrades[2] == false ) ) then
        return false
    endif
    if ( not ( IsPlayerInForce(udg_Mutant, udg_DeadGroup) == false ) ) then
        return false
    endif
    if ( not ( GetPlayerState(udg_Mutant, PLAYER_STATE_RESOURCE_LUMBER) >= 900 ) ) then
        return false
    endif
    return true
endfunction

function Trig_UpgradeStatus_Func014C takes nothing returns boolean
    if ( not ( udg_MutantUpgrades[2] == true ) ) then
        return false
    endif
    if ( not ( udg_MutantUpgrades[3] == false ) ) then
        return false
    endif
    if ( not ( IsPlayerInForce(udg_Mutant, udg_DeadGroup) == false ) ) then
        return false
    endif
    if ( not ( GetPlayerState(udg_Mutant, PLAYER_STATE_RESOURCE_LUMBER) >= 1800 ) ) then
        return false
    endif
    return true
endfunction

function Trig_UpgradeStatus_Func015C takes nothing returns boolean
    if ( not ( GetPlayerState(udg_Parasite, PLAYER_STATE_RESOURCE_LUMBER) >= 660 ) ) then
        return false
    endif
    if ( not ( udg_ParasiteUpgrades[1] == false ) ) then
        return false
    endif
    if ( not ( IsPlayerInForce(udg_Parasite, udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_UpgradeStatus_Func016C takes nothing returns boolean
    if ( not ( GetPlayerState(udg_Parasite, PLAYER_STATE_RESOURCE_LUMBER) >= 1370 ) ) then
        return false
    endif
    if ( not ( udg_ParasiteUpgrades[2] == false ) ) then
        return false
    endif
    if ( not ( IsPlayerInForce(udg_Parasite, udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_UpgradeStatus_Func017C takes nothing returns boolean
    if ( not ( GetPlayerState(udg_HiddenAndroid, PLAYER_STATE_RESOURCE_LUMBER) >= 2000 ) ) then
        return false
    endif
    if ( not ( udg_AndroidUpgrades[1] == false ) ) then
        return false
    endif
    if ( not ( IsUnitAliveBJ(gg_unit_h003_0018) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_UpgradeStatus_Actions takes nothing returns nothing
    set udg_UpgradePointsAndroid=( udg_UpgradePointsAndroid + 1.50 )
    set udg_UpgradePointsAlien=( udg_UpgradePointsAlien + 0.40 )
    call ForForce(GetPlayersAll(), function Trig_UpgradeStatus_Func004A)
    call ForForce(GetPlayersAll(), function Trig_UpgradeStatus_Func005A)
    call ForGroupBJ(udg_Parasite_EggGroup, function Trig_UpgradeStatus_Func006A)
    if ( Trig_UpgradeStatus_Func007C() ) then
        call SetPlayerStateBJ(udg_Parasite, PLAYER_STATE_RESOURCE_FOOD_USED, R2I(( ( udg_UpgradePointsAlien - 0.00 ) / ( 660.00 / 100.00 ) )))
    else
        if ( Trig_UpgradeStatus_Func007Func002C() ) then
            call SetPlayerStateBJ(udg_Parasite, PLAYER_STATE_RESOURCE_FOOD_USED, R2I(( ( udg_UpgradePointsAlien - 660.00 ) / ( 710.00 / 100.00 ) )))
        else
        endif
    endif
    if ( Trig_UpgradeStatus_Func008C() ) then
        set udg_UpgradePointsMutant=( udg_UpgradePointsMutant + 0.40 )
        if ( Trig_UpgradeStatus_Func008Func004C() ) then
            call SetPlayerStateBJ(udg_Mutant, PLAYER_STATE_RESOURCE_FOOD_USED, R2I(( ( udg_UpgradePointsMutant - 0.00 ) / ( 300.00 / 100.00 ) )))
        else
            if ( Trig_UpgradeStatus_Func008Func004Func001C() ) then
                call SetPlayerStateBJ(udg_Mutant, PLAYER_STATE_RESOURCE_FOOD_USED, R2I(( ( udg_UpgradePointsMutant - 300.00 ) / ( 600.00 / 100.00 ) )))
            else
                if ( Trig_UpgradeStatus_Func008Func004Func001Func001C() ) then
                    call SetPlayerStateBJ(udg_Mutant, PLAYER_STATE_RESOURCE_FOOD_USED, R2I(( ( udg_UpgradePointsMutant - 900.00 ) / ( 900.00 / 100.00 ) )))
                else
                endif
            endif
        endif
        call SetPlayerStateBJ(udg_Mutant, PLAYER_STATE_RESOURCE_LUMBER, R2I(udg_UpgradePointsMutant))
    else
        call AdjustPlayerStateBJ(1, udg_Mutant, PLAYER_STATE_RESOURCE_LUMBER)
    endif
    call SetPlayerStateBJ(udg_Parasite, PLAYER_STATE_RESOURCE_LUMBER, R2I(udg_UpgradePointsAlien))
    call SetPlayerStateBJ(udg_HiddenAndroid, PLAYER_STATE_RESOURCE_LUMBER, R2I(udg_UpgradePointsAndroid))
    call SetPlayerStateBJ(udg_HiddenAndroid, PLAYER_STATE_RESOURCE_FOOD_USED, R2I(( ( udg_UpgradePointsAndroid - 0.00 ) / ( 2000.00 / 100.00 ) )))
    if ( Trig_UpgradeStatus_Func012C() ) then
        set udg_MutantUpgrades[1]=true
        call DisplayTimedTextToPlayer(udg_Mutant, 0, 0, 30, "|cffFF8040You feel new power coursing through you. It is time to evolve...Press ESC when you are ready.")
        call CinematicFilterGenericForPlayer(udg_Mutant , 6.0 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\DiagonalSlash_mask.blp" , 100 , 0 , 0 , 25 , 0 , 0 , 0 , 100)
    else
    endif
    if ( Trig_UpgradeStatus_Func013C() ) then
        set udg_MutantUpgrades[2]=true
        call DisplayTimedTextToPlayer(udg_Mutant, 0, 0, 30, "|cffFF8040You feel new power coursing through you. It is time to evolve...Press ESC when you are ready.")
        call CinematicFilterGenericForPlayer(udg_Mutant , 6.0 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\DiagonalSlash_mask.blp" , 100 , 0 , 0 , 25 , 0 , 0 , 0 , 100)
    else
    endif
    if ( Trig_UpgradeStatus_Func014C() ) then
        set udg_MutantUpgrades[3]=true
        call DisplayTimedTextToPlayer(udg_Mutant, 0, 0, 30, "|cffFF8040You feel new power coursing through you. It is time to evolve...Press ESC when you are ready.")
        call CinematicFilterGenericForPlayer(udg_Mutant , 6.0 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\DiagonalSlash_mask.blp" , 100 , 0 , 0 , 25 , 0 , 0 , 0 , 100)
    else
    endif
    if ( Trig_UpgradeStatus_Func015C() ) then
        set udg_ParasiteUpgrades[1]=true
        call DisplayTimedTextToPlayer(udg_Parasite, 0, 0, 30, "|cffFF8040You feel new power coursing through you. It is time to transform...Press ESC when you are ready.")
        call CinematicFilterGenericForPlayer(udg_Parasite , 6.0 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\DiagonalSlash_mask.blp" , 0 , 100 , 100 , 25 , 0 , 0 , 0 , 100)
    else
    endif
    if ( Trig_UpgradeStatus_Func016C() ) then
        set udg_ParasiteUpgrades[2]=true
        call DisplayTimedTextToPlayer(udg_Parasite, 0, 0, 30, "|cffFF8040You feel new power coursing through you. It is time to transform...Press ESC when you are ready.")
        call CinematicFilterGenericForPlayer(udg_Parasite , 6.0 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\DiagonalSlash_mask.blp" , 0 , 100 , 100 , 25 , 0 , 0 , 0 , 100)
    else
    endif
    if ( Trig_UpgradeStatus_Func017C() ) then
        set udg_AndroidUpgrades[1]=true
        call EnableTrigger(gg_trg_AndroidUpgrade)
        call DisplayTimedTextToPlayer(udg_HiddenAndroid, 0, 0, 25.00, "|cff00FFFFThe metallic fabricator is ready to build you a new chassis, if necessary. Proceed to the Arbitress.|r")
        call CinematicFilterGenericForPlayer(udg_HiddenAndroid , 6.0 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\DiagonalSlash_mask.blp" , 0 , 100 , 100 , 0 , 0 , 0 , 0 , 100)
    else
    endif
endfunction

//===========================================================================
function InitTrig_UpgradeStatus takes nothing returns nothing
    set gg_trg_UpgradeStatus=CreateTrigger()
    call TriggerRegisterTimerEventPeriodic(gg_trg_UpgradeStatus, 1.00)
    call TriggerAddAction(gg_trg_UpgradeStatus, function Trig_UpgradeStatus_Actions)
endfunction

//===========================================================================
// Trigger: AntiTKSys
//===========================================================================
//TESH.scrollpos=34
//TESH.alwaysfold=0

//===========================================================================
function InitTrig_AntiTKSys takes nothing returns nothing
endfunction


//===========================================================================
// Trigger: SpaceCollision
//===========================================================================
function Trig_SpaceCollision_Func002Func004Func002Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetEnumUnit()) != 'h02P' ) ) then
        return false
    endif
    return true
endfunction

function Trig_SpaceCollision_Func002Func004Func002C takes nothing returns boolean
    if ( not ( GetEnumUnit() != udg_TempUnit ) ) then
        return false
    endif
    if ( not ( GetEnumUnit() != gg_unit_h01A_0197 ) ) then
        return false
    endif
    if ( not ( GetUnitPointValue(GetEnumUnit()) != 37 ) ) then
        return false
    endif
    if not ( not ( (GetUnitAbilityLevel((GetEnumUnit()), 'A072') == 1) and udg_TempUnit == gg_unit_h00X_0049 ) ) then // INLINED!!
    return false
    endif
    return true
endfunction

function Trig_SpaceCollision_Func002Func004A takes nothing returns nothing
    local integer r
    if ( Trig_SpaceCollision_Func002Func004Func002C() ) then
        // The above condition prevents the Swagger from pushing stations.
        if ( Trig_SpaceCollision_Func002Func004Func002Func002C() ) then
            set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
            call Push(GetEnumUnit() , 30.0 , 10.0 , AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
            call RemoveLocation(udg_TempPoint2)
        else
            set r=LoadInteger((udg_hash), GetHandleId(GetEnumUnit()), StringHash("PushTolerance")) + 1 // INLINED!!
            call SaveInteger((udg_hash), GetHandleId(GetEnumUnit()), StringHash("PushTolerance"), r) // INLINED!!
            set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
            call Push(GetEnumUnit() , 30.0 / r , 10.0 , AngleBetweenPoints(udg_TempPoint, udg_TempPoint2))
            call RemoveLocation(udg_TempPoint2)
        endif
    else
    endif
endfunction

function Trig_SpaceCollision_Func002A takes nothing returns nothing
    set udg_TempUnit=GetEnumUnit()
    set udg_TempPoint=GetUnitLoc(udg_TempUnit)
    set udg_TempUnitGroup=GetUnitsInRangeOfLocAll(udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)], udg_TempPoint)
    call ForGroupBJ(udg_TempUnitGroup, function Trig_SpaceCollision_Func002Func004A)
    call RemoveLocation(udg_TempPoint)
        call DestroyGroup(udg_TempUnitGroup)
endfunction

function Trig_SpaceCollision_Actions takes nothing returns nothing
    call ForGroupBJ(udg_SpaceObject_CollideGroup, function Trig_SpaceCollision_Func002A)
endfunction

//===========================================================================
function InitTrig_SpaceCollision takes nothing returns nothing
    set gg_trg_SpaceCollision=CreateTrigger()
    call TriggerRegisterTimerEventPeriodic(gg_trg_SpaceCollision, 0.25)
    call TriggerAddAction(gg_trg_SpaceCollision, function Trig_SpaceCollision_Actions)
endfunction

//===========================================================================
// Trigger: SpawnVoidCannon
//===========================================================================
//TESH.scrollpos=2
//TESH.alwaysfold=0
function Trig_SpawnVoidCannon_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'n005' ) ) then //'n005' is snoeglay warden
        return false
    endif
    return true
endfunction

function EnumCannonUnits takes nothing returns nothing
    if ( GetItemTypeId(GetItemOfTypeFromUnitBJ(GetEnumUnit(), 'I018')) == 'I018' ) then
        call AddSpecialEffectLocBJ(udg_TempPoint, "war3mapImported\\AncientExplode.mdx")
        call DestroyEffectBJ(GetLastCreatedEffectBJ())
        call CreateItemLoc('I02C', udg_TempPoint) //Create void cannon, at death of warden
    endif
endfunction

function Trig_SpawnVoidCannon_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetTriggerUnit())
    set udg_TempUnitGroup=GetUnitsInRangeOfLocAll(1000.00, udg_TempPoint)
    call ForGroupBJ(GetUnitsInRangeOfLocAll(1000.00, GetUnitLoc(GetTriggerUnit())), function EnumCannonUnits)
    call DestroyGroup(udg_TempUnitGroup)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_SpawnVoidCannon takes nothing returns nothing
    set gg_trg_SpawnVoidCannon=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SpawnVoidCannon, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_SpawnVoidCannon, Condition(function Trig_SpawnVoidCannon_Conditions))
    call TriggerAddAction(gg_trg_SpawnVoidCannon, function Trig_SpawnVoidCannon_Actions)
endfunction


//===========================================================================
// Trigger: RemindTKBad
//===========================================================================
function Trig_RemindTKBad_Actions takes nothing returns nothing
    call DisplayTextToForce(GetPlayersAll(), ( "|cff008040Never forget, TeamKilling favours the Mutant and Alien!" ))
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

//===========================================================================
function InitTrig_RemindTKBad takes nothing returns nothing
    set gg_trg_RemindTKBad=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_RemindTKBad, 60.00)
    call TriggerAddAction(gg_trg_RemindTKBad, function Trig_RemindTKBad_Actions)
endfunction

//===========================================================================
// Trigger: Albadar Anti Abuse
//===========================================================================
function Trig_Albadar_Anti_Abuse_Conditions takes nothing returns boolean
    if ( not ( udg_ace_Existence == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Albadar_Anti_Abuse_Actions takes nothing returns nothing
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_TransportationPlatform))
endfunction

//===========================================================================
function InitTrig_Albadar_Anti_Abuse takes nothing returns nothing
    set gg_trg_Albadar_Anti_Abuse=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Albadar_Anti_Abuse, gg_rct_SS12)
    call TriggerAddCondition(gg_trg_Albadar_Anti_Abuse, Condition(function Trig_Albadar_Anti_Abuse_Conditions))
    call TriggerAddAction(gg_trg_Albadar_Anti_Abuse, function Trig_Albadar_Anti_Abuse_Actions)
endfunction

//===========================================================================
// Trigger: Defunct dead confirm
//===========================================================================
function Trig_Defunct_dead_confirm_Actions takes nothing returns nothing
    set udg_Defunct_Dead=true
endfunction

//===========================================================================
function InitTrig_Defunct_dead_confirm takes nothing returns nothing
    set gg_trg_Defunct_dead_confirm=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_Defunct_dead_confirm, gg_unit_h005_0281, EVENT_UNIT_DEATH)
    call TriggerAddAction(gg_trg_Defunct_dead_confirm, function Trig_Defunct_dead_confirm_Actions)
endfunction

//===========================================================================
// Trigger: Defunct Anti Teleportation
//===========================================================================
function Trig_Defunct_Anti_Teleportation_Conditions takes nothing returns boolean
    if ( not ( udg_Defunct_Dead == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Defunct_Anti_Teleportation_Func007Func002C takes nothing returns boolean
    if ( not ( udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == GetTriggerUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_Defunct_Anti_Teleportation_Func007C takes nothing returns boolean
    if ( not ( udg_TempInt == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Defunct_Anti_Teleportation_Actions takes nothing returns nothing
    set udg_TempInt=GetRandomInt(1, 2)
    call SetUnitPositionLoc(GetTriggerUnit(), GetRectCenter(gg_rct_BombTeleport))
    call AddSpecialEffectLocBJ(GetRectCenter(gg_rct_BombTeleport), "Abilities\\Spells\\NightElf\\Blink\\BlinkTarget.mdl")
    call DestroyEffectBJ(GetLastCreatedEffectBJ())
    if ( Trig_Defunct_Anti_Teleportation_Func007C() ) then
        call PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), GetRectCenter(gg_rct_BombTeleport), 0)
        if ( Trig_Defunct_Anti_Teleportation_Func007Func002C() ) then
            call SetUnitLifeBJ(GetTriggerUnit(), ( GetUnitStateSwap(UNIT_STATE_LIFE, GetTriggerUnit()) - GetRandomReal(150.00, 250.00) ))
        else
        endif
    else
    endif
endfunction

//===========================================================================
function InitTrig_Defunct_Anti_Teleportation takes nothing returns nothing
    set gg_trg_Defunct_Anti_Teleportation=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_Defunct_Anti_Teleportation, gg_rct_ST2)
    call TriggerAddCondition(gg_trg_Defunct_Anti_Teleportation, Condition(function Trig_Defunct_Anti_Teleportation_Conditions))
    call TriggerAddAction(gg_trg_Defunct_Anti_Teleportation, function Trig_Defunct_Anti_Teleportation_Actions)
endfunction

//===========================================================================
// Trigger: AntiShareControl
//
// Prevents dead players from having control.
//===========================================================================
function Trig_AntiShareControl_Func002Func001Func001Func003C takes nothing returns boolean
    if ( ( GetPlayerAlliance(ConvertedPlayer(GetForLoopIndexA()), GetEnumPlayer(), ALLIANCE_SHARED_CONTROL) == true ) ) then
        return true
    endif
    if ( ( GetPlayerAlliance(ConvertedPlayer(GetForLoopIndexA()), GetEnumPlayer(), ALLIANCE_SHARED_ADVANCED_CONTROL) == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_AntiShareControl_Func002Func001Func001Func005C takes nothing returns boolean
    if ( not ( ConvertedPlayer(GetForLoopIndexA()) == udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_AntiShareControl_Func002Func001Func001C takes nothing returns boolean
    if ( not ( ConvertedPlayer(GetForLoopIndexA()) != GetEnumPlayer() ) ) then
        return false
    endif
    if ( not ( GetEnumPlayer() != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    if ( not Trig_AntiShareControl_Func002Func001Func001Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_AntiShareControl_Func002A takes nothing returns nothing
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=12
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_AntiShareControl_Func002Func001Func001C() ) then
            call SetPlayerAllianceStateBJ(ConvertedPlayer(GetForLoopIndexA()), GetEnumPlayer(), bj_ALLIANCE_ALLIED)
            if ( Trig_AntiShareControl_Func002Func001Func001Func005C() ) then
                call SetPlayerAllianceStateBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), GetEnumPlayer(), bj_ALLIANCE_ALLIED)
            else
            endif
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
endfunction

function Trig_AntiShareControl_Actions takes nothing returns nothing
    call ForForce(GetPlayersAll(), function Trig_AntiShareControl_Func002A)
endfunction

//===========================================================================
function InitTrig_AntiShareControl takes nothing returns nothing
    set gg_trg_AntiShareControl=CreateTrigger()
    call TriggerRegisterTimerEventPeriodic(gg_trg_AntiShareControl, 2)
    call TriggerAddAction(gg_trg_AntiShareControl, function Trig_AntiShareControl_Actions)
endfunction

//===========================================================================
// Trigger: AllSectorsTargetCheck
//===========================================================================
function Trig_AllSectorsTargetCheck_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() != 'A03I' ) ) then
        return false
    endif
    if ( not ( GetSpellAbilityId() != 'A082' ) ) then
        return false
    endif
    if ( not ( GetSpellAbilityId() != 'A087' ) ) then
        return false
    endif
    if ( not ( GetSpellAbilityId() != 'A08H' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AllSectorsTargetCheck_Func010C takes nothing returns boolean
    if ( not ( GetSpellTargetUnit() != null ) ) then
        return false
    endif
    return true
endfunction

function Trig_AllSectorsTargetCheck_Func011C takes nothing returns boolean
    if ( not ( GetLocationX(udg_TempPoint) == 0.00 ) ) then
        return false
    endif
    if ( not ( GetLocationY(udg_TempPoint) == 0.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_AllSectorsTargetCheck_Func014C takes nothing returns boolean
    if ( not ( udg_TempBool == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_AllSectorsTargetCheck_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    set udg_TempInt=GetSector(udg_TempPoint)
    call RemoveLocation(udg_TempPoint)
    set udg_TempPoint=GetSpellTargetLoc()
    if ( Trig_AllSectorsTargetCheck_Func010C() ) then
        call RemoveLocation(udg_TempPoint)
        return
    else
    endif
    if ( Trig_AllSectorsTargetCheck_Func011C() ) then
        call RemoveLocation(udg_TempPoint)
        return
    else
    endif
    set udg_TempBool=LocInSector(udg_TempPoint , udg_TempInt)
    call RemoveLocation(udg_TempPoint)
    if ( Trig_AllSectorsTargetCheck_Func014C() ) then
        call IssueImmediateOrderBJ(GetSpellAbilityUnit(), "stop")
        call PauseUnitForPeriod(GetSpellAbilityUnit() , 0.1)
    else
    endif
endfunction

//===========================================================================
function InitTrig_AllSectorsTargetCheck takes nothing returns nothing
    set gg_trg_AllSectorsTargetCheck=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_AllSectorsTargetCheck, EVENT_PLAYER_UNIT_SPELL_CAST)
    call TriggerAddCondition(gg_trg_AllSectorsTargetCheck, Condition(function Trig_AllSectorsTargetCheck_Conditions))
    call TriggerAddAction(gg_trg_AllSectorsTargetCheck, function Trig_AllSectorsTargetCheck_Actions)
endfunction

//===========================================================================
// Trigger: PreventOutOfSectorAttackGround
//===========================================================================
function Trig_PreventOutOfSectorAttackGround_Conditions takes nothing returns boolean
    if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("attackground") ) ) then
        return false
    endif
    return true
endfunction

function Trig_PreventOutOfSectorAttackGround_Func009C takes nothing returns boolean
    if ( not ( udg_TempBool == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_PreventOutOfSectorAttackGround_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetOrderedUnit())
    set udg_TempInt=GetSector(udg_TempPoint)
    call RemoveLocation(udg_TempPoint)
    set udg_TempPoint=GetOrderPointLoc()
    set udg_TempBool=LocInSector(udg_TempPoint , udg_TempInt)
    call RemoveLocation(udg_TempPoint)
    if ( Trig_PreventOutOfSectorAttackGround_Func009C() ) then
        set udg_TempPoint=GetUnitLoc(GetOrderedUnit())
        call IssuePointOrderLocBJ(GetOrderedUnit(), "move", udg_TempPoint)
        call RemoveLocation(udg_TempPoint)
    else
    endif
endfunction

//===========================================================================
function InitTrig_PreventOutOfSectorAttackGround takes nothing returns nothing
    set gg_trg_PreventOutOfSectorAttackGround=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_PreventOutOfSectorAttackGround, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)
    call TriggerAddCondition(gg_trg_PreventOutOfSectorAttackGround, Condition(function Trig_PreventOutOfSectorAttackGround_Conditions))
    call TriggerAddAction(gg_trg_PreventOutOfSectorAttackGround, function Trig_PreventOutOfSectorAttackGround_Actions)
endfunction

//===========================================================================
// Trigger: PreventOutOfSectorAttack
//===========================================================================
function Trig_PreventOutOfSectorAttack_Conditions takes nothing returns boolean
    if ( not ( GetIssuedOrderIdBJ() == String2OrderIdBJ("attack") ) ) then
        return false
    endif
    return true
endfunction

function Trig_PreventOutOfSectorAttack_Func009C takes nothing returns boolean
    if ( not ( udg_TempBool == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_PreventOutOfSectorAttack_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetOrderedUnit())
    set udg_TempInt=GetSector(udg_TempPoint)
    call RemoveLocation(udg_TempPoint)
    set udg_TempPoint=GetUnitLoc(GetOrderTargetUnit())
    set udg_TempBool=LocInSector(udg_TempPoint , udg_TempInt)
    call RemoveLocation(udg_TempPoint)
    if ( Trig_PreventOutOfSectorAttack_Func009C() ) then
        set udg_TempPoint=GetUnitLoc(GetOrderedUnit())
        call IssuePointOrderLocBJ(GetOrderedUnit(), "move", udg_TempPoint)
        call RemoveLocation(udg_TempPoint)
    else
    endif
endfunction

//===========================================================================
function InitTrig_PreventOutOfSectorAttack takes nothing returns nothing
    set gg_trg_PreventOutOfSectorAttack=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_PreventOutOfSectorAttack, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER)
    call TriggerAddCondition(gg_trg_PreventOutOfSectorAttack, Condition(function Trig_PreventOutOfSectorAttack_Conditions))
    call TriggerAddAction(gg_trg_PreventOutOfSectorAttack, function Trig_PreventOutOfSectorAttack_Actions)
endfunction

//===========================================================================
// Trigger: BnetNames
//===========================================================================
function Trig_BnetNames_Conditions takes nothing returns boolean
    if ( not ( IsPlayerInForce(GetTriggerPlayer(), udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_BnetNames_Func014Func001C takes nothing returns boolean
    if ( not ( IsPlayerInForce(GetEnumPlayer(), udg_DeadGroup) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BnetNames_Func014A takes nothing returns nothing
    if ( Trig_BnetNames_Func014Func001C() ) then
        call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, udg_ColorCode[GetConvertedPlayerId(GetEnumPlayer())] + "(DEAD)" + "|r: " + udg_Player_OriginalName[GetConvertedPlayerId(GetEnumPlayer())])
    else
        call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, udg_ColorCode[GetConvertedPlayerId(GetEnumPlayer())] + GetPlayerName(GetEnumPlayer()) + "|r: " + udg_Player_OriginalName[GetConvertedPlayerId(GetEnumPlayer())])
    endif
endfunction

function Trig_BnetNames_Actions takes nothing returns nothing
    call ForForce(GetPlayersAll(), function Trig_BnetNames_Func014A)
endfunction

//===========================================================================
function InitTrig_BnetNames takes nothing returns nothing
    set gg_trg_BnetNames=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_BnetNames, Player(0), "-names", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_BnetNames, Player(1), "-names", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_BnetNames, Player(2), "-names", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_BnetNames, Player(3), "-names", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_BnetNames, Player(4), "-names", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_BnetNames, Player(5), "-names", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_BnetNames, Player(6), "-names", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_BnetNames, Player(7), "-names", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_BnetNames, Player(8), "-names", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_BnetNames, Player(9), "-names", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_BnetNames, Player(10), "-names", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_BnetNames, Player(11), "-names", true)
    call TriggerAddCondition(gg_trg_BnetNames, Condition(function Trig_BnetNames_Conditions))
    call TriggerAddAction(gg_trg_BnetNames, function Trig_BnetNames_Actions)
endfunction

//===========================================================================
// Trigger: Rename
//===========================================================================
function Trig_Rename_Conditions takes nothing returns boolean
    if ( not ( SubStringBJ(GetEventPlayerChatString(), 1, 7) == "-rename" ) ) then
        return false
    endif
    if ( not ( IsPlayerInForce(GetTriggerPlayer(), udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Rename_Actions takes nothing returns nothing
    call SetPlayerName(GetTriggerPlayer(), ( udg_NamePrepension[GetConvertedPlayerId(GetTriggerPlayer())] + SubStringBJ(GetEventPlayerChatString(), 9, 99) ))
endfunction

//===========================================================================
function InitTrig_Rename takes nothing returns nothing
    set gg_trg_Rename=CreateTrigger()
    call DisableTrigger(gg_trg_Rename)
    call TriggerRegisterPlayerChatEvent(gg_trg_Rename, Player(0), "-rename", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Rename, Player(1), "-rename", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Rename, Player(2), "-rename", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Rename, Player(3), "-rename", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Rename, Player(4), "-rename", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Rename, Player(5), "-rename", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Rename, Player(6), "-rename", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Rename, Player(7), "-rename", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Rename, Player(8), "-rename", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Rename, Player(9), "-rename", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Rename, Player(10), "-rename", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_Rename, Player(11), "-rename", false)
    call TriggerAddCondition(gg_trg_Rename, Condition(function Trig_Rename_Conditions))
    call TriggerAddAction(gg_trg_Rename, function Trig_Rename_Actions)
endfunction

//===========================================================================
// Trigger: RenameEnd
//===========================================================================
function Trig_RenameEnd_Actions takes nothing returns nothing
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1557")
    call DestroyTrigger(GetTriggeringTrigger())
    call DestroyTrigger(gg_trg_Rename)
    call DestroyTrigger(gg_trg_DeathSysTwo)
endfunction

//===========================================================================
function InitTrig_RenameEnd takes nothing returns nothing
    set gg_trg_RenameEnd=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_RenameEnd, 180.00)
    call TriggerAddAction(gg_trg_RenameEnd, function Trig_RenameEnd_Actions)
endfunction

//===========================================================================
// Trigger: Slugglyship
//===========================================================================
function Trig_Slugglyship_Func002Func001Func001C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I018' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Slugglyship_Func002Func001C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I015' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Slugglyship_Func002C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I013' ) ) then
        return false
    endif
    return true
endfunction

function Trig_Slugglyship_Func003C takes nothing returns boolean
    if ( not ( GetItemLevel(GetManipulatedItem()) == 7 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Slugglyship_Actions takes nothing returns nothing
    if ( Trig_Slugglyship_Func002C() ) then
        set udg_TempPoint=GetUnitLoc(GetManipulatingUnit())
        call CreateTextTagLocBJ("TRIGSTR_2323", udg_TempPoint, 0, 10, 100, 100, 100, 0)
        call ShowTextTagForceBJ(true, GetLastCreatedTextTag(), GetPlayersAll())
        call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 32.00, 90)
        call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
        call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 7.00)
        call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 5.00)
        call RemoveLocation(udg_TempPoint)
        return
    else
        if ( Trig_Slugglyship_Func002Func001C() ) then
            set udg_TempPoint=GetUnitLoc(GetManipulatingUnit())
            call CreateTextTagLocBJ("TRIGSTR_2343", udg_TempPoint, 0, 10, 100, 100, 100, 0)
            call ShowTextTagForceBJ(true, GetLastCreatedTextTag(), GetPlayersAll())
            call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 32.00, 90)
            call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
            call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 7.00)
            call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 5.00)
            call RemoveLocation(udg_TempPoint)
            call UnitRemoveItemSwapped(GetManipulatedItem(), gg_unit_n006_0218)
            return
        else
            if ( Trig_Slugglyship_Func002Func001Func001C() ) then
                call DestroyTrigger(GetTriggeringTrigger())
                set udg_TempPoint=GetUnitLoc(GetManipulatingUnit())
                call CreateTextTagLocBJ("TRIGSTR_2340", udg_TempPoint, 0, 10, 100, 100, 100, 0)
                call ShowTextTagForceBJ(true, GetLastCreatedTextTag(), GetPlayersAll())
                call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 32.00, 90)
                call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
                call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 7.00)
                call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 5.00)
                call RemoveLocation(udg_TempPoint)
                call PolledWait(7.00)
                set udg_TempPoint=GetUnitLoc(gg_unit_n006_0218)
                call CreateTextTagLocBJ("TRIGSTR_2341", udg_TempPoint, 0, 10, 100, 100, 100, 0)
                call ShowTextTagForceBJ(true, GetLastCreatedTextTag(), GetPlayersAll())
                call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 32.00, 90)
                call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
                call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 7.00)
                call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 5.00)
                call AddSpecialEffectLocBJ(udg_TempPoint, "war3mapImported\\AncientExplode.mdx")
                call SFXThreadClean()
                call RemoveLocation(udg_TempPoint)
                call PolledWait(4.00)
                call SetUnitPositionLoc(gg_unit_h03J_0180, GetRandomLocInRect(gg_rct_Space))
                set udg_TempPoint=GetUnitLoc(gg_unit_n006_0218)
                call CreateTextTagLocBJ("TRIGSTR_2342", udg_TempPoint, 0, 10, 100, 100, 100, 0)
                call ShowTextTagForceBJ(true, GetLastCreatedTextTag(), GetPlayersAll())
                call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 32.00, 90)
                call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
                call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 7.00)
                call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 5.00)
                call AddSpecialEffectLocBJ(udg_TempPoint, "war3mapImported\\AncientExplode.mdx")
                call CreateNUnitsAtLoc(12, 'nshe', Player(PLAYER_NEUTRAL_PASSIVE), GetRectCenter(gg_rct_SS13), bj_UNIT_FACING)
                call SFXThreadClean()
                call RemoveLocation(udg_TempPoint)
                set udg_TempUnit=gg_unit_h03K_0181
                set udg_TempUnit2=gg_unit_h03J_0180
                set udg_TempUnit3=gg_unit_h004_0179
                set udg_TempRect=gg_rct_SS13
                set udg_TempRect2=gg_rct_SS13EE
                set udg_TempRect3=gg_rct_SS13Control
                set udg_SS_Harbor[GetUnitUserData(gg_unit_h03K_0181)]=null
                set udg_SS_DockGroundedAt[GetUnitUserData(gg_unit_h03K_0181)]=0
                call Spaceship_Build(udg_TempUnit , udg_TempUnit2 , udg_TempUnit3 , udg_TempRect , udg_TempRect2 , udg_TempRect3 , 26)
                return
            else
            endif
        endif
    endif
    if ( Trig_Slugglyship_Func003C() ) then
        set udg_TempPoint=GetUnitLoc(GetManipulatingUnit())
        call CreateTextTagLocBJ("TRIGSTR_2321", udg_TempPoint, 0, 10, 100, 100, 100, 0)
        call ShowTextTagForceBJ(true, GetLastCreatedTextTag(), GetPlayersAll())
        call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 32.00, 90)
        call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
        call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 7.00)
        call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 5.00)
        call RemoveLocation(udg_TempPoint)
    else
        set udg_TempPoint=GetUnitLoc(GetManipulatingUnit())
        call CreateTextTagLocBJ("TRIGSTR_2322", udg_TempPoint, 0, 10, 100, 100, 100, 0)
        call ShowTextTagForceBJ(true, GetLastCreatedTextTag(), GetPlayersAll())
        call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 32.00, 90)
        call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
        call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 7.00)
        call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 5.00)
        call RemoveLocation(udg_TempPoint)
    endif
    call UnitRemoveItemSwapped(GetManipulatedItem(), gg_unit_n006_0218)
endfunction

//===========================================================================
function InitTrig_Slugglyship takes nothing returns nothing
    set gg_trg_Slugglyship=CreateTrigger()
    call TriggerRegisterUnitEvent(gg_trg_Slugglyship, gg_unit_n006_0218, EVENT_UNIT_PICKUP_ITEM)
    call TriggerAddAction(gg_trg_Slugglyship, function Trig_Slugglyship_Actions)
endfunction

//===========================================================================
// Trigger: SlugglyControl
//===========================================================================
function Trig_SlugglyControl_Conditions takes nothing returns boolean
    if ( not ( udg_Player_Slugglied[GetConvertedPlayerId(GetTriggerPlayer())] != true ) ) then
        return false
    endif
    if ( not ( IsPlayerInForce(GetTriggerPlayer(), udg_DeadGroup) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_SlugglyControl_Func017Func002C takes nothing returns boolean
    if ( ( udg_TempUnit == null ) ) then
        return true
    endif
    if ( ( IsUnitDeadBJ(udg_TempUnit) == true ) ) then
        return true
    endif
    if ( ( RectContainsUnit(gg_rct_Cage4, udg_TempUnit) == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_SlugglyControl_Func017C takes nothing returns boolean
    if ( not Trig_SlugglyControl_Func017Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_SlugglyControl_Func018Func001C takes nothing returns boolean
    if ( not ( IsPlayerInForce(GetEnumPlayer(), udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_SlugglyControl_Func018A takes nothing returns nothing
    if ( Trig_SlugglyControl_Func018Func001C() ) then
        call SetPlayerAllianceStateBJ(GetEnumPlayer(), GetTriggerPlayer(), bj_ALLIANCE_ALLIED)
        call SetPlayerAllianceStateBJ(GetTriggerPlayer(), GetEnumPlayer(), bj_ALLIANCE_ALLIED)
    else
    endif
endfunction

function Trig_SlugglyControl_Actions takes nothing returns nothing
    set udg_Player_Slugglied[GetConvertedPlayerId(GetTriggerPlayer())]=true
    set udg_TempUnit=GroupPickRandomUnit(GetUnitsOfPlayerAndTypeId(Player(PLAYER_NEUTRAL_PASSIVE), 'n003'))
    if ( Trig_SlugglyControl_Func017C() ) then
        call DisplayTimedTextToPlayer(GetTriggerPlayer(), 0, 0, 30, "Oops! Try again.")
        return
    else
    endif
    call ForForce(GetPlayersAll(), function Trig_SlugglyControl_Func018A)
    call SetUnitOwner(udg_TempUnit, GetTriggerPlayer(), true)
    call PanCameraToTimedLocForPlayer(GetTriggerPlayer(), GetUnitLoc(udg_TempUnit), 0)
    call SelectUnitForPlayerSingle(udg_TempUnit, GetTriggerPlayer())
    call h__SetUnitMoveSpeed(udg_TempUnit, 330.00)
    call UnitAddAbilityBJ('A02I', udg_TempUnit)
    call UnitAddAbilityBJ('AIl2', udg_TempUnit)
endfunction

//===========================================================================
function InitTrig_SlugglyControl takes nothing returns nothing
    set gg_trg_SlugglyControl=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_SlugglyControl, Player(0), "-iamthesluggly", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_SlugglyControl, Player(1), "-iamthesluggly", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_SlugglyControl, Player(2), "-iamthesluggly", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_SlugglyControl, Player(3), "-iamthesluggly", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_SlugglyControl, Player(4), "-iamthesluggly", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_SlugglyControl, Player(5), "-iamthesluggly", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_SlugglyControl, Player(6), "-iamthesluggly", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_SlugglyControl, Player(7), "-iamthesluggly", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_SlugglyControl, Player(8), "-iamthesluggly", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_SlugglyControl, Player(9), "-iamthesluggly", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_SlugglyControl, Player(10), "-iamthesluggly", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_SlugglyControl, Player(11), "-iamthesluggly", true)
    call TriggerAddCondition(gg_trg_SlugglyControl, Condition(function Trig_SlugglyControl_Conditions))
    call TriggerAddAction(gg_trg_SlugglyControl, function Trig_SlugglyControl_Actions)
endfunction

//===========================================================================
// Trigger: SlugglyDeath
//===========================================================================
function Trig_SlugglyDeath_Conditions takes nothing returns boolean
    if ( not ( 'n003' == GetUnitTypeId(GetDyingUnit()) ) ) then
        return false
    endif
    if ( not ( udg_Player_Slugglied[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_SlugglyDeath_Func004Func001C takes nothing returns boolean
    if ( not ( IsPlayerInForce(GetEnumPlayer(), udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_SlugglyDeath_Func004A takes nothing returns nothing
    if ( Trig_SlugglyDeath_Func004Func001C() ) then
        call SetPlayerAllianceStateBJ(GetEnumPlayer(), GetTriggerPlayer(), bj_ALLIANCE_ALLIED_VISION)
        call SetPlayerAllianceStateBJ(GetTriggerPlayer(), GetEnumPlayer(), bj_ALLIANCE_ALLIED_VISION)
        set udg_Player_Slugglied[GetConvertedPlayerId(GetOwningPlayer(GetDyingUnit()))]=false
    else
    endif
endfunction

function Trig_SlugglyDeath_Actions takes nothing returns nothing
    call ForForce(GetPlayersAll(), function Trig_SlugglyDeath_Func004A)
endfunction

//===========================================================================
function InitTrig_SlugglyDeath takes nothing returns nothing
    set gg_trg_SlugglyDeath=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_SlugglyDeath, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_SlugglyDeath, Condition(function Trig_SlugglyDeath_Conditions))
    call TriggerAddAction(gg_trg_SlugglyDeath, function Trig_SlugglyDeath_Actions)
endfunction

//===========================================================================
// Trigger: FusionBombsInit
//===========================================================================
function Trig_FusionBombsInit_Func003A takes nothing returns nothing
    call SetUnitAnimation(GetEnumUnit(), "stand work")
endfunction

function Trig_FusionBombsInit_Func007A takes nothing returns nothing
    call ResetUnitAnimation(GetEnumUnit())
endfunction

function Trig_FusionBombsInit_Actions takes nothing returns nothing
    set udg_TempUnitGroup=GetUnitsOfTypeIdAll('h014')
    call ForGroupBJ(udg_TempUnitGroup, function Trig_FusionBombsInit_Func003A)
        call DestroyGroup(udg_TempUnitGroup)
    call PolledWait(58.00)
    set udg_TempUnitGroup=GetUnitsOfTypeIdAll('h014')
    call ForGroupBJ(udg_TempUnitGroup, function Trig_FusionBombsInit_Func007A)
        call DestroyGroup(udg_TempUnitGroup)
endfunction

//===========================================================================
function InitTrig_FusionBombsInit takes nothing returns nothing
    set gg_trg_FusionBombsInit=CreateTrigger()
    call TriggerAddAction(gg_trg_FusionBombsInit, function Trig_FusionBombsInit_Actions)
endfunction

//===========================================================================
// Trigger: FusionBombPurchase
//===========================================================================
function Trig_FusionBombPurchase_Conditions takes nothing returns boolean
    if ( not ( GetItemTypeId(GetSoldItem()) == 'I00N' ) ) then
        return false
    endif
    return true
endfunction

function Trig_FusionBombPurchase_Actions takes nothing returns nothing
local unit a=GetSellingUnit()
    call SetUnitAnimation(a, "stand work")
    call PolledWait(58.00)
    if IsUnitAliveBJ(a) then
        call SetUnitAnimation(a, "stand")
        endif
endfunction

//===========================================================================
function InitTrig_FusionBombPurchase takes nothing returns nothing
    set gg_trg_FusionBombPurchase=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_FusionBombPurchase, EVENT_PLAYER_UNIT_SELL_ITEM)
    call TriggerAddCondition(gg_trg_FusionBombPurchase, Condition(function Trig_FusionBombPurchase_Conditions))
    call TriggerAddAction(gg_trg_FusionBombPurchase, function Trig_FusionBombPurchase_Actions)
endfunction


//===========================================================================
// Trigger: TimeIndicator
//===========================================================================
function Trig_TimeIndicator_Func002A takes nothing returns nothing
    call AdjustPlayerStateBJ(1, GetEnumPlayer(), PLAYER_STATE_RESOURCE_GOLD)
endfunction

function Trig_TimeIndicator_Actions takes nothing returns nothing
    call ForForce(GetPlayersAll(), function Trig_TimeIndicator_Func002A)
endfunction

//===========================================================================
function InitTrig_TimeIndicator takes nothing returns nothing
    set gg_trg_TimeIndicator=CreateTrigger()
    call TriggerRegisterTimerEventPeriodic(gg_trg_TimeIndicator, 60.00)
    call TriggerAddAction(gg_trg_TimeIndicator, function Trig_TimeIndicator_Actions)
endfunction

//===========================================================================
// Trigger: RandomEventsInit
//
// Sets up random events.
//===========================================================================
function Trig_RandomEventsInit_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_RandomEvent_Trigger[1]=gg_trg_CommissarPromotion
    set udg_RandomEvent_Trigger[2]=gg_trg_LostStation
    set udg_RandomEvent_Trigger[3]=gg_trg_SilentVoidInit
    set udg_RandomEvent_Trigger[4]=gg_trg_PirateShip
    set udg_RandomEvent_Trigger[5]=gg_trg_Snoeglays
    set udg_RandomEvent_Trigger[6]=gg_trg_Anomaly
    set udg_RandomEvent_Trigger[7]=gg_trg_News
    set udg_RandomEvent_Trigger[8]=gg_trg_PersonnelUpgrade
    set udg_RandomEvent_Trigger[9]=gg_trg_DroneSwarm
    set udg_RandomEvent_Trigger[10]=gg_trg_SolarIntensity
    set udg_RandomEvent_Trigger[11]=gg_trg_DoorMalfunction
    set udg_RandomEvent_Trigger[12]=gg_trg_GiantAsteroid
    set udg_RandomEvent_Trigger[13]=gg_trg_LocalBlackout
    set udg_RandomEvent_Trigger[14]=gg_trg_MultiEvent
    set udg_RandomEvent_Trigger[15]=gg_trg_FakeGameEnd
    set udg_Apocalypse_Trigger[1]=gg_trg_USIBattleFleet
    set udg_Apocalypse_Trigger[2]=gg_trg_BlackHole
    call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(180.00, 720.00))
    call PolledWait(5.00)
    call DialogSetMessageBJ(udg_PersonnelUpgradeDialog, "TRIGSTR_1395")
    call DialogAddButtonBJ(udg_PersonnelUpgradeDialog, "TRIGSTR_1397")
    call DialogAddButtonBJ(udg_PersonnelUpgradeDialog, "TRIGSTR_1398")
    set udg_PersonnelUpgradeDialog_Button[1]=GetLastCreatedButtonBJ()
    call DialogAddButtonBJ(udg_PersonnelUpgradeDialog, "TRIGSTR_1399")
    set udg_PersonnelUpgradeDialog_Button[2]=GetLastCreatedButtonBJ()
    call DialogAddButtonBJ(udg_PersonnelUpgradeDialog, "TRIGSTR_1400")
    set udg_PersonnelUpgradeDialog_Button[3]=GetLastCreatedButtonBJ()
    call DialogAddButtonBJ(udg_PersonnelUpgradeDialog, "TRIGSTR_1401")
    set udg_PersonnelUpgradeDialog_Button[4]=GetLastCreatedButtonBJ()
    call DialogAddButtonBJ(udg_PersonnelUpgradeDialog, "TRIGSTR_1402")
    set udg_PersonnelUpgradeDialog_Button[5]=GetLastCreatedButtonBJ()
    set udg_PersonnelUpgrade_Research[1]='R001'
    set udg_PersonnelUpgrade_Research[2]='R002'
    set udg_PersonnelUpgrade_Research[3]='R003'
    set udg_PersonnelUpgrade_Research[4]='R004'
    set udg_PersonnelUpgrade_Research[5]='R005'
endfunction

//===========================================================================
function InitTrig_RandomEventsInit takes nothing returns nothing
    set gg_trg_RandomEventsInit=CreateTrigger()
    call TriggerAddAction(gg_trg_RandomEventsInit, function Trig_RandomEventsInit_Actions)
endfunction

//===========================================================================
// Trigger: RandomEventsTimer
//
// Uses an ugly but practical loop to find a random event.
//===========================================================================
function Trig_RandomEventsTimer_Func002Func002C takes nothing returns boolean
    if ( not ( udg_RandomEvent_On[udg_TempInt] != true ) ) then
        return false
    endif
    return true
endfunction

function Trig_RandomEventsTimer_Actions takes nothing returns nothing
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=100
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempInt=GetRandomInt(1, 16)
        if ( Trig_RandomEventsTimer_Func002Func002C() ) then
            set bj_forLoopAIndex=1000
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call TriggerExecute(udg_RandomEvent_Trigger[udg_TempInt])
endfunction

//===========================================================================
function InitTrig_RandomEventsTimer takes nothing returns nothing
    set gg_trg_RandomEventsTimer=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_RandomEventsTimer, udg_RandomEvent)
    call TriggerAddAction(gg_trg_RandomEventsTimer, function Trig_RandomEventsTimer_Actions)
endfunction

//===========================================================================
// Trigger: CommissarPromotion
//===========================================================================
function Trig_CommissarPromotion_Func003Func001C takes nothing returns boolean
    if ( not ( udg_PlayerRole[GetConvertedPlayerId(GetEnumPlayer())] == 8 ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommissarPromotion_Func003A takes nothing returns nothing
    if ( Trig_CommissarPromotion_Func003Func001C() ) then
        set udg_TempBool=true
        set udg_TempPlayer=GetEnumPlayer()
    else
    endif
endfunction

function Trig_CommissarPromotion_Func004Func009C takes nothing returns boolean
    if ( ( IsUnitAliveBJ(udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]) == false ) ) then
        return true
    endif
    if ( ( udg_TempBool == false ) ) then
        return true
    endif
    if ( ( udg_TempPlayer == udg_Mutant ) ) then
        return true
    endif
    if ( ( udg_TempPlayer == udg_Parasite ) ) then
        return true
    endif
    return false
endfunction

function Trig_CommissarPromotion_Func004C takes nothing returns boolean
    if ( not Trig_CommissarPromotion_Func004Func009C() ) then
        return false
    endif
    return true
endfunction

function Trig_CommissarPromotion_Actions takes nothing returns nothing
    set udg_RandomEvent_On[1]=true
    set udg_TempBool=false
    call ForForce(GetPlayersAll(), function Trig_CommissarPromotion_Func003A)
    if ( Trig_CommissarPromotion_Func004C() ) then
        call StartTimerBJ(udg_RandomEvent, false, 1.00)
    else
        call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(180.00, 900.00))
        call DisplayTextToForce(GetPlayersAll(), ( GetPlayerName(udg_TempPlayer) + " |cff00FF40has received a promotion!|r" ))
        call DisplayTextToPlayer(udg_TempPlayer, 0, 0, "|cffffcc00You have recieved the Operative suit. Thank you for your dedication to the United Security Initiative and the future of humanity.|r")
        set udg_TempString=SubStringBJ(GetPlayerName(udg_TempPlayer), ( StringLength(udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)]) + 1 ), 99)
        set udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)]="Rebarch "
        call SetPlayerName(udg_TempPlayer, ( udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)] + udg_TempString ))
        call UnitAddItemByIdSwapped('I00X', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
    endif
endfunction

//===========================================================================
function InitTrig_CommissarPromotion takes nothing returns nothing
    set gg_trg_CommissarPromotion=CreateTrigger()
    call DisableTrigger(gg_trg_CommissarPromotion)
    call TriggerAddAction(gg_trg_CommissarPromotion, function Trig_CommissarPromotion_Actions)
endfunction

//===========================================================================
// Trigger: LostStation
//===========================================================================
function Trig_LostStation_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_RandomEvent_On[2]=true
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1332")
    set udg_TempPoint=GetRandomLocInRect(gg_rct_SpaceSound)
    call PingMinimapLocForForce(GetPlayersAll(), udg_TempPoint, 15.00)
    call SetUnitPositionLoc(gg_unit_h029_0114, udg_TempPoint)
    call RemoveLocation(udg_TempPoint)
    call StartTimerBJ(udg_LostStation_Disappear, false, 397.00)
    call CreateTimerDialogBJ(GetLastCreatedTimerBJ(), "TRIGSTR_1333")
    set udg_LostStation_TimerWindow=GetLastCreatedTimerDialogBJ()
    call EnableTrigger(gg_trg_LostStationDisappear)
    call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(90.00, 900.00))
endfunction

//===========================================================================
function InitTrig_LostStation takes nothing returns nothing
    set gg_trg_LostStation=CreateTrigger()
    call DisableTrigger(gg_trg_LostStation)
    call TriggerAddAction(gg_trg_LostStation, function Trig_LostStation_Actions)
endfunction

//===========================================================================
// Trigger: LostStationDisappear
//===========================================================================
function Trig_LostStationDisappear_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call ShowUnitHide(gg_unit_h029_0114)
    call DestroyTimerDialogBJ(udg_LostStation_TimerWindow)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1334")
    call TriggerExecute(gg_trg_ST6Death)
endfunction

//===========================================================================
function InitTrig_LostStationDisappear takes nothing returns nothing
    set gg_trg_LostStationDisappear=CreateTrigger()
    call DisableTrigger(gg_trg_LostStationDisappear)
    call TriggerRegisterTimerExpireEventBJ(gg_trg_LostStationDisappear, udg_LostStation_Disappear)
    call TriggerAddAction(gg_trg_LostStationDisappear, function Trig_LostStationDisappear_Actions)
endfunction

//===========================================================================
// Trigger: SilentVoidInit
//
// Notifies evils 30 seconds in advance.
// Starts and lasts for 60 seconds.
// When it ends, in 30 seconds is another random event. Sounds harsh? 90 seconds is for all random events, and 120 - 30 (notification delay) = 90
//===========================================================================
function Trig_SilentVoidInit_Func004A takes nothing returns nothing
    // If main evil
    if IsPlayerNonhuman(GetEnumPlayer()) then
    call DisplayTextToForce(GetForceOfPlayer(GetEnumPlayer()), "TRIGSTR_5641")
    endif
endfunction

function Trig_SilentVoidInit_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_RandomEvent_On[3]=true
    call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(120.00, 1200.00))
    call ForForce(GetPlayersAll(), function Trig_SilentVoidInit_Func004A)
    call StartTimerBJ(udg_SilentVoidAll_Timer, false, 30.00)
    call StartTimerBJ(udg_SilentVoidEnd_Timer, false, 90.00)
endfunction

//===========================================================================
function InitTrig_SilentVoidInit takes nothing returns nothing
    set gg_trg_SilentVoidInit=CreateTrigger()
    call TriggerAddAction(gg_trg_SilentVoidInit, function Trig_SilentVoidInit_Actions)
endfunction

//===========================================================================
// Trigger: SilentVoidAll
//===========================================================================
function MutePlayer takes nothing returns nothing

    //Store his name, to restore it later.
    set udg_SilentVoid_String[GetPlayerId(GetEnumPlayer())]=GetPlayerName(GetEnumPlayer())
    
    //Notify player he got muted
    call DisplayTextToPlayer(GetEnumPlayer(), 0, 0, "|cff00FFFFYou feel a weird, cold sensation and can no longer seem to form words...|r")
    
    //Change the name to blank.
    call SetPlayerName(GetEnumPlayer

    call DestroyTrigger(GetTriggeringTrigger())

endfunction

function Trig_SilentVoidAll_Actions takes nothing returns nothing
    call ForForce(GetPlayersAll(), function MutePlayer)
endfunction

//===========================================================================
function InitTrig_SilentVoidAll takes nothing returns nothing
    set gg_trg_SilentVoidAll=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_SilentVoidAll, udg_SilentVoidAll_Timer)
    call TriggerAddAction(gg_trg_SilentVoidAll, function Trig_SilentVoidAll_Actions)
endfunction


//===========================================================================
// Trigger: SilentVoidEnd
//===========================================================================
function RestoreName takes nothing returns nothing
    call SetPlayerName(GetEnumPlayer(), udg_SilentVoid_String[GetPlayerId(GetEnumPlayer())])
    
    call DisplayTextToPlayer(GetEnumPlayer(), 0, 0, "|cff00FFFFYour voice returns to you!|r")

endfunction

function Trig_SilentVoidEnd_Actions takes nothing returns nothing
    call ForForce(GetPlayersAll(), function RestoreName)
    
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

//===========================================================================
function InitTrig_SilentVoidEnd takes nothing returns nothing
    set gg_trg_SilentVoidEnd=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_SilentVoidEnd, udg_SilentVoidEnd_Timer)
    call TriggerAddAction(gg_trg_SilentVoidEnd, function Trig_SilentVoidEnd_Actions)
endfunction


//===========================================================================
// Trigger: PirateShip
//===========================================================================
function Trig_PirateShip_Func008A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_PirateShip)
    call DestroyFogModifier(GetLastCreatedFogModifier())
endfunction

function Trig_PirateShip_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_RandomEvent_On[4]=true
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_3012")
    set udg_TempPoint=GetRandomLocInRect(gg_rct_SpaceSound)
    call SetUnitPositionLoc(gg_unit_h02B_0116, udg_TempPoint)
    call PingMinimapLocForForceEx(GetPlayersAll(), udg_TempPoint, 15.00, bj_MINIMAPPINGSTYLE_SIMPLE, 100, 0.00, 0.00)
    call RemoveLocation(udg_TempPoint)
    call ForForce(GetPlayersAll(), function Trig_PirateShip_Func008A)
    call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(90.00, 1200.00))
    call SetUnitOwner(gg_unit_h02B_0116, Player(PLAYER_NEUTRAL_AGGRESSIVE), true)
    set udg_TempUnit=gg_unit_h02B_0116
    set udg_SpaceAI_PirateCaptainAlive=true
endfunction

//===========================================================================
function InitTrig_PirateShip takes nothing returns nothing
    set gg_trg_PirateShip=CreateTrigger()
    call DisableTrigger(gg_trg_PirateShip)
    call TriggerAddAction(gg_trg_PirateShip, function Trig_PirateShip_Actions)
endfunction

//===========================================================================
// Trigger: Snoeglays
//===========================================================================
function Trig_Snoeglays_Func004Func003C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetLastReplacedUnitBJ()) == Player(PLAYER_NEUTRAL_PASSIVE) ) ) then
        return false
    endif
    return true
endfunction

function Trig_Snoeglays_Func004A takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetEnumUnit())
    call ReplaceUnitBJ(GetEnumUnit(), 'h02E', bj_UNIT_STATE_METHOD_RELATIVE)
    if ( Trig_Snoeglays_Func004Func003C() ) then
        call SetUnitOwner(GetLastReplacedUnitBJ(), Player(PLAYER_NEUTRAL_AGGRESSIVE), true)
    else
    endif
    call DropItemFromUnitOnDeath(GetLastReplacedUnitBJ() , 'I024')
    call AddSpecialEffectLocBJ(udg_TempPoint, "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl")
    call SFXThreadClean()
    call RemoveLocation(udg_TempPoint)
endfunction

function Trig_Snoeglays_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_RandomEvent_On[5]=true
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1357")
    call ForGroupBJ(GetUnitsOfTypeIdAll('n003'), function Trig_Snoeglays_Func004A)
    call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(90.00, 1200.00))
endfunction

//===========================================================================
function InitTrig_Snoeglays takes nothing returns nothing
    set gg_trg_Snoeglays=CreateTrigger()
    call DisableTrigger(gg_trg_Snoeglays)
    call TriggerAddAction(gg_trg_Snoeglays, function Trig_Snoeglays_Actions)
endfunction

//===========================================================================
// Trigger: Anomaly
//===========================================================================
function Trig_Anomaly_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_RandomEvent_On[6]=true
    set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(ForcePickRandomPlayer(GetPlayersAll()))])
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=12
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call CreateNUnitsAtLoc(1, 'n00K', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
        call GroupAddUnitSimple(GetLastCreatedUnit(), udg_AnomalyUnitGroup)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveLocation(udg_TempPoint)
    call EnableTrigger(gg_trg_AnomalyDeath)
    call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(90.00, 1200.00))
endfunction

//===========================================================================
function InitTrig_Anomaly takes nothing returns nothing
    set gg_trg_Anomaly=CreateTrigger()
    call DisableTrigger(gg_trg_Anomaly)
    call TriggerAddAction(gg_trg_Anomaly, function Trig_Anomaly_Actions)
endfunction

//===========================================================================
// Trigger: AnomalyDeath
//===========================================================================
//TESH.scrollpos=30
//TESH.alwaysfold=0
function Trig_AnomalyDeath_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'n00K' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AnomalyDeath_Func001C takes nothing returns boolean
    if ( not ( udg_AnomalyWarpalHasSpawned == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AnomalyDeath_Func003Func001C takes nothing returns boolean
    if ( not ( IsUnitGroupDeadBJ(udg_AnomalyUnitGroup) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AnomalyDeath_Func003C takes nothing returns boolean
    if ( not ( udg_TempInt == 12 ) ) then
        return false
    endif
    return true
endfunction

function Trig_AnomalyDeath_Actions takes nothing returns nothing
    if ( Trig_AnomalyDeath_Func001C() ) then
        return
    else
    endif
    set udg_TempInt=GetRandomInt(1, 12)
    if ( Trig_AnomalyDeath_Func003C() ) then
        set udg_AnomalyWarpalHasSpawned=true
        set udg_TempPoint=GetUnitLoc(GetTriggerUnit())
        call CreateItemLoc('I02X', udg_TempPoint)
        call RemoveLocation(udg_TempPoint)
    else
        if ( Trig_AnomalyDeath_Func003Func001C() ) then
            set udg_AnomalyWarpalHasSpawned=true
            set udg_TempPoint=GetUnitLoc(GetTriggerUnit())
            call CreateItemLoc('I02X', udg_TempPoint)
            call RemoveLocation(udg_TempPoint)
        else
        endif
    endif
endfunction

//===========================================================================
function InitTrig_AnomalyDeath takes nothing returns nothing
    set gg_trg_AnomalyDeath=CreateTrigger()
    call DisableTrigger(gg_trg_AnomalyDeath)
    call TriggerRegisterPlayerUnitEventSimple(gg_trg_AnomalyDeath, Player(PLAYER_NEUTRAL_PASSIVE), EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_AnomalyDeath, Condition(function Trig_AnomalyDeath_Conditions))
    call TriggerAddAction(gg_trg_AnomalyDeath, function Trig_AnomalyDeath_Actions)
endfunction


//===========================================================================
// Trigger: News
//===========================================================================
function Trig_News_Func002C takes nothing returns boolean
    if ( not ( udg_NewsString[udg_TempInt3] == "" ) ) then
        return false
    endif
    return true
endfunction

function Trig_News_Actions takes nothing returns nothing
    set udg_TempInt3=GetRandomInt(1, 12)
    if ( Trig_News_Func002C() ) then
        call TriggerExecute(gg_trg_News)
        return
    else
    endif
    call DisplayTextToForce(GetPlayersAll(), ( "|cff00FF00KIRZ95 News: |r" + udg_NewsString[udg_TempInt3] ))
    set udg_NewsString[udg_TempInt3]=""
    call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(10.00, 300.00))
endfunction

//===========================================================================
function InitTrig_News takes nothing returns nothing
    set gg_trg_News=CreateTrigger()
    call DisableTrigger(gg_trg_News)
    call TriggerAddAction(gg_trg_News, function Trig_News_Actions)
endfunction

//===========================================================================
// Trigger: PersonnelUpgrade
//===========================================================================
function Trig_PersonnelUpgrade_Func003C takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(gg_unit_h009_0029) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_PersonnelUpgrade_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_RandomEvent_On[8]=true
    if ( Trig_PersonnelUpgrade_Func003C() ) then
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4205")
        call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(10.00, 1200.00))
        call EnableTrigger(gg_trg_PersonnelUpgradeEnter)
        call EnableTrigger(gg_trg_PersonnelUpgradeDialog)
        set udg_TempPoint=GetRectCenter(gg_rct_PersonnelUpgrade)
        call PingMinimapLocForForce(GetPlayersAll(), udg_TempPoint, 12.00)
        call RemoveLocation(udg_TempPoint)
    else
        call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(10.00, 120.00))
    endif
endfunction

//===========================================================================
function InitTrig_PersonnelUpgrade takes nothing returns nothing
    set gg_trg_PersonnelUpgrade=CreateTrigger()
    call DisableTrigger(gg_trg_PersonnelUpgrade)
    call TriggerAddAction(gg_trg_PersonnelUpgrade, function Trig_PersonnelUpgrade_Actions)
endfunction

//===========================================================================
// Trigger: PersonnelUpgradeEnter
//===========================================================================
function Trig_PersonnelUpgradeEnter_Conditions takes nothing returns boolean
    if ( not ( udg_Personnel_HasUpgrade[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_PersonnelUpgradeEnter_Func003C takes nothing returns boolean
    if ( not ( SubStringBJ(I2S(GetUnitPointValue(GetTriggerUnit())), 2, 2) != "2" ) ) then
        return false
    endif
    if ( not ( udg_TempInt != 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_PersonnelUpgradeEnter_Actions takes nothing returns nothing
    if ( Trig_PersonnelUpgradeEnter_Func003C() ) then
        call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "|cffffcc00We're sorry, but we don't recognize you in our databanks.|r")
        return
    else
    endif
    call DialogDisplayBJ(true, udg_PersonnelUpgradeDialog, GetOwningPlayer(GetTriggerUnit()))
    set udg_Personnel_HasUpgrade[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]=true
endfunction

//===========================================================================
function InitTrig_PersonnelUpgradeEnter takes nothing returns nothing
    set gg_trg_PersonnelUpgradeEnter=CreateTrigger()
    call DisableTrigger(gg_trg_PersonnelUpgradeEnter)
    call TriggerRegisterEnterRectSimple(gg_trg_PersonnelUpgradeEnter, gg_rct_PersonnelUpgrade)
    call TriggerAddCondition(gg_trg_PersonnelUpgradeEnter, Condition(function Trig_PersonnelUpgradeEnter_Conditions))
    call TriggerAddAction(gg_trg_PersonnelUpgradeEnter, function Trig_PersonnelUpgradeEnter_Actions)
endfunction

//===========================================================================
// Trigger: PersonnelUpgradeDialog
//===========================================================================
function Trig_PersonnelUpgradeDialog_Func002Func001C takes nothing returns boolean
    if ( not ( GetClickedButtonBJ() == udg_PersonnelUpgradeDialog_Button[GetForLoopIndexA()] ) ) then
        return false
    endif
    return true
endfunction

function Trig_PersonnelUpgradeDialog_Actions takes nothing returns nothing
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=5
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_PersonnelUpgradeDialog_Func002Func001C() ) then
            call SetPlayerTechResearchedSwap(udg_PersonnelUpgrade_Research[GetForLoopIndexA()], 1, GetTriggerPlayer())
            return
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call DialogDisplayBJ(true, udg_PersonnelUpgradeDialog, GetTriggerPlayer())
endfunction

//===========================================================================
function InitTrig_PersonnelUpgradeDialog takes nothing returns nothing
    set gg_trg_PersonnelUpgradeDialog=CreateTrigger()
    call DisableTrigger(gg_trg_PersonnelUpgradeDialog)
    call TriggerRegisterDialogEventBJ(gg_trg_PersonnelUpgradeDialog, udg_PersonnelUpgradeDialog)
    call TriggerAddAction(gg_trg_PersonnelUpgradeDialog, function Trig_PersonnelUpgradeDialog_Actions)
endfunction

//===========================================================================
// Trigger: DroneSwarm
//===========================================================================

function HostileSpaceAIDrone_Cond takes nothing returns boolean
    if GetOwningPlayer(GetFilterUnit()) != Player(PLAYER_NEUTRAL_AGGRESSIVE) and GetUnitState(GetFilterUnit(), UNIT_STATE_LIFE) > 0 then
        return true
    endif
    
    return false
endfunction

function HostileSpaceAIDroneExpTimer takes nothing returns nothing
    local group g= CreateGroup()
    local location o
    local boolexpr f= Condition(function HostileSpaceAIDrone_Cond)
    local timer t= GetExpiredTimer()
    local integer h= GetHandleId(t)
    local unit a= LoadUnitHandle((udg_hash), h, StringHash("a")) // INLINED!!
        
    set o=GetUnitLoc(a)
    call GroupEnumUnitsInRect(g, gg_rct_Space, f)
    call RemoveLocation(o)

    if FirstOfGroup(g) == gg_unit_h008_0196 then
        if CountUnitsInGroup(g) == 1 then
            call UnitRemoveTypeBJ(UNIT_TYPE_SAPPER, gg_unit_h008_0196)
        else
            call GroupRemoveUnit(g, gg_unit_h008_0196)
        endif
    endif
        
    set o=GetUnitLoc(FirstOfGroup(g))
    call IssuePointOrderLoc(a, "attack", o)
    
    call RemoveLocation(o)
    call DestroyGroup(g)
    call DestroyBoolExpr(f)
    set o=null
    set g=null
    set f=null
    set a=null
    set t=null
endfunction

function HostileSpaceAIDrone takes nothing returns nothing
    local group g= CreateGroup()
    local location o
    local boolexpr f= Condition(function HostileSpaceAIDrone_Cond)
    local unit a= udg_TempUnit
    local timer t= CreateTimer()
    local integer h= GetHandleId(t)
    
    set o=GetUnitLoc(a)
    call GroupEnumUnitsInRect(g, gg_rct_Space, f)
    call RemoveLocation(o)

    if FirstOfGroup(g) == gg_unit_h008_0196 then
        if CountUnitsInGroup(g) == 1 then
            call UnitRemoveTypeBJ(UNIT_TYPE_SAPPER, gg_unit_h008_0196)
        else
            call GroupRemoveUnit(g, gg_unit_h008_0196)
        endif
    endif
        
    set o=GetUnitLoc(FirstOfGroup(g))
    call IssuePointOrderLoc(a, "attack", o)
    
    loop
        exitwhen GetUnitState(a, UNIT_STATE_LIFE) <= 0
        call SaveUnitHandle((udg_hash), h, StringHash("a"), a) // INLINED!!
        call TimerStart(t, 10.00, true, function HostileSpaceAIDroneExpTimer)
    endloop
    
    call DestroyTimer(t)
    call RemoveLocation(o)
    call DestroyGroup(g)
    call DestroyBoolExpr(f)
    set o=null
    set g=null
    set f=null
    set a=null
    set t=null
endfunction

function Trig_DroneSwarm_Actions takes nothing returns nothing
    local integer a
    local integer b
    
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_RandomEvent_On[9]=true
    
    //Code becomes 9999999999 when it is used.
    //In short, this is the boolean flag of BHD having spawned -> doesn't care about syllus -_-
    if udg_Secret_ControlCode == 9999999999 then //GTFO because it will lag the map to infinite!
        call TimerStart(udg_RandomEvent, GetRandomReal(1.00, 2.00), false, null)
        return
    endif
    
    call DisplayTextToPlayer(GetLocalPlayer(), 0, 0, "TRIGSTR_1742")
    call StartSound(gg_snd_PursuitTheme)
    call RemoveAllGuardPositions(Player(PLAYER_NEUTRAL_AGGRESSIVE))
    
    set a=1
    set b=50
    
    loop
        exitwhen a > b
        call TriggerSleepAction(1.00)
        set udg_TempPoint=GetRandomLocInRect(gg_rct_Space)
        call PingMinimapLocForForce(GetPlayersAll(), udg_TempPoint, 1.00)
        call CreateNUnitsAtLoc(1, 'h02T', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
        set bj_lastCreatedEffect=AddSpecialEffectLoc("Objects\\Spawnmodels\\NightElf\\NEDeathSmall\\NEDeathSmall.mdl", udg_TempPoint)
        call SFXThreadClean()
        set udg_TempUnit=bj_lastCreatedUnit
        call ExecuteFunc("HostileSpaceAIDrone")
        call RemoveLocation(udg_TempPoint)
        set a=a + 1
    endloop
    
    call TimerStart(udg_RandomEvent, GetRandomReal(90.00, 1200.00), false, null)
endfunction

//===========================================================================
function InitTrig_DroneSwarm takes nothing returns nothing
    set gg_trg_DroneSwarm=CreateTrigger()
    call DisableTrigger(gg_trg_DroneSwarm)
    call TriggerAddAction(gg_trg_DroneSwarm, function Trig_DroneSwarm_Actions)
endfunction
//===========================================================================
// Trigger: SolarIntensity
//===========================================================================
function Trig_SolarIntensity_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_RandomEvent_On[10]=true
    call RemoveLocation(udg_TempPoint)
    call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(90.00, 1200.00))
    call SetTimeOfDay(12)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2567")
    set udg_SunDamage=6.00
endfunction

//===========================================================================
function InitTrig_SolarIntensity takes nothing returns nothing
    set gg_trg_SolarIntensity=CreateTrigger()
    call DisableTrigger(gg_trg_SolarIntensity)
    call TriggerAddAction(gg_trg_SolarIntensity, function Trig_SolarIntensity_Actions)
endfunction

//===========================================================================
// Trigger: LocalBlackout
//===========================================================================
function Trig_LocalBlackout_Func014A takes nothing returns nothing
    call DestroyFogModifier(udg_SpaceVisibility[GetConvertedPlayerId(GetEnumPlayer())])
endfunction

function Trig_LocalBlackout_Func015Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetEnumUnit()) != 'h04G' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetEnumUnit()) != 'h031' ) ) then
        return false
    endif
    if ( not ( GetUnitTypeId(GetEnumUnit()) != 'h032' ) ) then
        return false
    endif
    return true
endfunction

function Trig_LocalBlackout_Func015A takes nothing returns nothing
    if ( Trig_LocalBlackout_Func015Func001C() ) then
        call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_PASSIVE), true)
    else
    endif
endfunction

function Trig_LocalBlackout_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_RandomEvent_On[13]=true
    call RemoveLocation(udg_TempPoint)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5195")
    call PolledWait(5.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2568")
    call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(90.00, 1200.00))
    call StartTimerBJ(udg_BlackoutTimer, false, GetRandomReal(60.00, 60.00))
    call CreateTimerDialogBJ(GetLastCreatedTimerBJ(), "TRIGSTR_2569")
    set udg_BlackoutTimerWindow=GetLastCreatedTimerDialogBJ()
    call TimerDialogDisplayBJ(true, udg_BlackoutTimerWindow)
    set udg_Blackout=true
    call PlaySoundBJ(gg_snd_Warning01)
    call ForForce(GetPlayersAll(), function Trig_LocalBlackout_Func014A)
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_Space), function Trig_LocalBlackout_Func015A)
    call PolledWait(1.50)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2572")
    call PolledWait(1.50)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2573")
    call PolledWait(1.50)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2574")
    call PolledWait(1.50)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2575")
    call PolledWait(3.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2947")
    call PolledWait(3.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2576")
    call PolledWait(7.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2577")
    call PolledWait(5.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2578")
    call PolledWait(10.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2579")
    call PolledWait(10.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2580")
endfunction

//===========================================================================
function InitTrig_LocalBlackout takes nothing returns nothing
    set gg_trg_LocalBlackout=CreateTrigger()
    call DisableTrigger(gg_trg_LocalBlackout)
    call TriggerAddAction(gg_trg_LocalBlackout, function Trig_LocalBlackout_Actions)
endfunction

//===========================================================================
// Trigger: GiantAsteroid
//===========================================================================
function Trig_GiantAsteroid_Actions takes nothing returns nothing
local integer i=7
local integer b=0
local group g=GetUnitsInRectAll(gg_rct_Space)
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_RandomEvent_On[12]=true
    set udg_TempUnitGroup=GetUnitsInRectAll(gg_rct_Space)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_3443")
    call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(90.00, 1200.00))
    call PlaySoundBJ(gg_snd_Warning01)
    loop
    exitwhen i > 11
    set b=0
    loop
        exitwhen b > i
        set udg_TempPoint=GetRandomLocInRect(gg_rct_GiantAsteroidSpawn)
        call CreateNUnitsAtLoc(1, 'h04D', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
        call SetUnitTimeScalePercent(GetLastCreatedUnit(), GetRandomReal(0.00, 50.00))
        set udg_TempReal=GetRandomReal(0, 1)
        set udg_TempReal2=( ( udg_TempReal * 200.00 ) + 50.00 )
        call SetUnitScalePercent(GetLastCreatedUnit(), udg_TempReal2, udg_TempReal2, udg_TempReal2)
        call SetUnitLifePercentBJ(GetLastCreatedUnit(), ( udg_TempReal * 100.00 ))
        call RemoveLocation(udg_TempPoint)
        set udg_TempUnit=GetLastCreatedUnit()
        if GetRandomInt(1, 2) == 1 then
         call GiantAsteroid(udg_TempUnit , AngleBetweenUnits(udg_TempUnit , GroupPickRandomUnit(g)))
        else
        call GiantAsteroid(udg_TempUnit , 90 + GetRandomReal(- 20.0, 20.0))
        endif
        call DestroyGroup(udg_TempUnitGroup)
        set b=b + 1
    endloop
    call PolledWait(GetRandomReal(0.1, 5))
    set i=i + 1
    endloop
    call DestroyGroup(g)
    set g=null
endfunction

//===========================================================================
function InitTrig_GiantAsteroid takes nothing returns nothing
    set gg_trg_GiantAsteroid=CreateTrigger()
    call DisableTrigger(gg_trg_GiantAsteroid)
    call TriggerAddAction(gg_trg_GiantAsteroid, function Trig_GiantAsteroid_Actions)
endfunction


//===========================================================================
// Trigger: MultiEvent
//===========================================================================
function Trig_MultiEvent_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_RandomEvent_On[14]=true
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4145")
    call TriggerSleepAction(GetRandomReal(15.00, 30.00))
    call TriggerExecute(gg_trg_RandomEventsTimer)
    call TriggerSleepAction(GetRandomReal(15.00, 30.00))
    call TriggerExecute(gg_trg_RandomEventsTimer)
    call TriggerSleepAction(GetRandomReal(15.00, 30.00))
    call TriggerExecute(gg_trg_RandomEventsTimer)
    call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(240.00, 600.00))
endfunction

//===========================================================================
function InitTrig_MultiEvent takes nothing returns nothing
    set gg_trg_MultiEvent=CreateTrigger()
    call DisableTrigger(gg_trg_MultiEvent)
    call TriggerAddAction(gg_trg_MultiEvent, function Trig_MultiEvent_Actions)
endfunction

//===========================================================================
// Trigger: FakeGameEnd
//===========================================================================
function Trig_FakeGameEnd_Func001Func007A takes nothing returns nothing
    call SetUnitAnimation(GetEnumUnit(), "victory")
endfunction

function Trig_FakeGameEnd_Func001C takes nothing returns boolean
    if ( not ( GetRandomInt(1, 6) == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_FakeGameEnd_Actions takes nothing returns nothing
    if ( Trig_FakeGameEnd_Func001C() ) then
        call DestroyTrigger(GetTriggeringTrigger())
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4183")
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4184")
        call PlaySoundBJ(gg_snd_HumanVictory)
        set udg_RandomEvent_On[15]=true
        call PolledWait(2.00)
        call ForGroupBJ(GetUnitsInRectAll(GetPlayableMapRect()), function Trig_FakeGameEnd_Func001Func007A)
        call PolledWait(4.00)
        call StopSoundBJ(gg_snd_HumanVictory, false)
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4185")
    else
    endif
    call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(10.00, 300.00))
endfunction

//===========================================================================
function InitTrig_FakeGameEnd takes nothing returns nothing
    set gg_trg_FakeGameEnd=CreateTrigger()
    call DisableTrigger(gg_trg_FakeGameEnd)
    call TriggerAddAction(gg_trg_FakeGameEnd, function Trig_FakeGameEnd_Actions)
endfunction

//===========================================================================
// Trigger: CommunicationError
//===========================================================================
function Trig_CommunicationError_Func005Func001Func003001002001 takes nothing returns boolean
    return ( GetPlayerController(GetFilterPlayer()) == MAP_CONTROL_USER )
endfunction

function Trig_CommunicationError_Func005Func001C takes nothing returns boolean
    if ( not ( IsPlayerInForce(ConvertedPlayer(GetForLoopIndexA()), GetPlayersMatching(Condition(function Trig_CommunicationError_Func005Func001Func003001002001))) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommunicationError_Func006A takes nothing returns nothing
    call SetPlayerName(GetEnumPlayer
endfunction

function Trig_CommunicationError_Func009Func001Func001001002001 takes nothing returns boolean
    return ( GetPlayerController(GetFilterPlayer()) == MAP_CONTROL_USER )
endfunction

function Trig_CommunicationError_Func009Func001Func002Func002C takes nothing returns boolean
    if ( not ( udg_ColorArray[udg_TempInt] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommunicationError_Func009Func001C takes nothing returns boolean
    if ( not ( IsPlayerInForce(ConvertedPlayer(GetForLoopIndexA()), GetPlayersMatching(Condition(function Trig_CommunicationError_Func009Func001Func001001002001))) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_CommunicationError_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_RandomEvent_On[18]=true
    call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(240.00, 600.00))
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4179")
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=12
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_CommunicationError_Func005Func001C() ) then
            set udg_NamesTemp[GetForLoopIndexA()]=GetPlayerName(ConvertedPlayer(GetForLoopIndexA()))
            set udg_ColorArray[GetForLoopIndexA()]=true
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call ForForce(udg_AllPlayers, function Trig_CommunicationError_Func006A)
    call TriggerSleepAction(60.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4181")
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=12
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_CommunicationError_Func009Func001C() ) then
            set bj_forLoopBIndex=1
            set bj_forLoopBIndexEnd=1000
            loop
                exitwhen bj_forLoopBIndex > bj_forLoopBIndexEnd
                set udg_TempInt=GetRandomInt(1, 12)
                if ( Trig_CommunicationError_Func009Func001Func002Func002C() ) then
                    set bj_forLoopBIndex=10000
                else
                endif
                set bj_forLoopBIndex=bj_forLoopBIndex + 1
            endloop
            call SetPlayerName(ConvertedPlayer(GetForLoopIndexA()), udg_NamesTemp[udg_TempInt])
            call SetPlayerColorBJ(ConvertedPlayer(GetForLoopIndexA()), GetPlayerColor(ConvertedPlayer(udg_TempInt)), true)
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
endfunction

//===========================================================================
function InitTrig_CommunicationError takes nothing returns nothing
    set gg_trg_CommunicationError=CreateTrigger()
    call DisableTrigger(gg_trg_CommunicationError)
    call TriggerAddAction(gg_trg_CommunicationError, function Trig_CommunicationError_Actions)
endfunction

//===========================================================================
// Trigger: DoorMalfunction
//===========================================================================
function Trig_DoorMalfunction_Func004Func001Func001C takes nothing returns boolean
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B000' ) ) then
        return true
    endif
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B001' ) ) then
        return true
    endif
    return false
endfunction

function Trig_DoorMalfunction_Func004Func001C takes nothing returns boolean
    if ( not Trig_DoorMalfunction_Func004Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_DoorMalfunction_Func004A takes nothing returns nothing
    if ( Trig_DoorMalfunction_Func004Func001C() ) then
        call DoorMalfunction(GetEnumDestructable())
    else
    endif
endfunction

function Trig_DoorMalfunction_Actions takes nothing returns nothing
    set udg_RandomEvent_On[11]=true
    call DestroyTrigger(GetTriggeringTrigger())
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4340")
    call EnumDestructablesInRectAll(GetEntireMapRect(), function Trig_DoorMalfunction_Func004A)
    call StartTimerBJ(udg_DoorMalfunctionTimer, false, GetRandomReal(300.00, 600.00))
endfunction

//===========================================================================
function InitTrig_DoorMalfunction takes nothing returns nothing
    set gg_trg_DoorMalfunction=CreateTrigger()
    call DisableTrigger(gg_trg_DoorMalfunction)
    call TriggerAddAction(gg_trg_DoorMalfunction, function Trig_DoorMalfunction_Actions)
endfunction

//===========================================================================
// Trigger: DoorMalfunctionEnd
//===========================================================================
function Trig_DoorMalfunctionEnd_Func004002 takes nothing returns nothing
    call RemoveUnit(GetEnumUnit())
endfunction

function Trig_DoorMalfunctionEnd_Func005Func001Func001C takes nothing returns boolean
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B000' ) ) then
        return true
    endif
    if ( ( GetDestructableTypeId(GetEnumDestructable()) == 'B001' ) ) then
        return true
    endif
    return false
endfunction

function Trig_DoorMalfunctionEnd_Func005Func001C takes nothing returns boolean
    if ( not Trig_DoorMalfunctionEnd_Func005Func001Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_DoorMalfunctionEnd_Func005A takes nothing returns nothing
    if ( Trig_DoorMalfunctionEnd_Func005Func001C() ) then
        call DoorMalfunction_End(GetEnumDestructable())
    else
    endif
endfunction

function Trig_DoorMalfunctionEnd_Actions takes nothing returns nothing
    call TriggerExecute(gg_trg_DoorInit2)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5326")
    call ForGroupBJ(GetUnitsOfTypeIdAll('e039'), function Trig_DoorMalfunctionEnd_Func004002)
    call EnumDestructablesInRectAll(GetEntireMapRect(), function Trig_DoorMalfunctionEnd_Func005A)
    call StartTimerBJ(udg_RandomEvent, false, GetRandomReal(90.00, 1200.00))
    call DestroyTrigger(GetTriggeringTrigger())
endfunction

//===========================================================================
function InitTrig_DoorMalfunctionEnd takes nothing returns nothing
    set gg_trg_DoorMalfunctionEnd=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_DoorMalfunctionEnd, udg_DoorMalfunctionTimer)
    call TriggerAddAction(gg_trg_DoorMalfunctionEnd, function Trig_DoorMalfunctionEnd_Actions)
endfunction

//===========================================================================
// Trigger: BlackoutEnd
//
// Check if pod failz.
//===========================================================================
function Trig_BlackoutEnd_Func015A takes nothing returns nothing
    call CreateFogModifierRectBJ(true, GetEnumPlayer(), FOG_OF_WAR_VISIBLE, gg_rct_Space)
    set udg_SpaceVisibility[GetConvertedPlayerId(GetEnumPlayer())]=GetLastCreatedFogModifier()
endfunction

function Trig_BlackoutEnd_Func016A takes nothing returns nothing
    call h__SetUnitMoveSpeed(GetEnumUnit(), GetUnitDefaultMoveSpeed(GetTriggerUnit()))
    call SetUnitOwner(GetEnumUnit(), udg_EscapePod_Owner[GetUnitUserData(GetEnumUnit())], true)
endfunction

function Trig_BlackoutEnd_Func017Func001C takes nothing returns boolean
    if ( not ( RectContainsUnit(gg_rct_Space, GetEnumUnit()) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BlackoutEnd_Func017A takes nothing returns nothing
    if ( Trig_BlackoutEnd_Func017Func001C() ) then
        call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_AGGRESSIVE), true)
    else
    endif
endfunction

function Trig_BlackoutEnd_Func018Func001C takes nothing returns boolean
    if ( not ( RectContainsUnit(gg_rct_Space, GetEnumUnit()) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BlackoutEnd_Func018A takes nothing returns nothing
    if ( Trig_BlackoutEnd_Func018Func001C() ) then
        call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_AGGRESSIVE), true)
    else
    endif
endfunction

function Trig_BlackoutEnd_Func019Func001C takes nothing returns boolean
    if ( not ( RectContainsUnit(gg_rct_Space, GetEnumUnit()) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BlackoutEnd_Func019A takes nothing returns nothing
    if ( Trig_BlackoutEnd_Func019Func001C() ) then
        call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_AGGRESSIVE), true)
    else
    endif
endfunction

function Trig_BlackoutEnd_Func020Func001C takes nothing returns boolean
    if ( not ( RectContainsUnit(gg_rct_Space, GetEnumUnit()) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BlackoutEnd_Func020A takes nothing returns nothing
    if ( Trig_BlackoutEnd_Func020Func001C() ) then
        call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_AGGRESSIVE), true)
    else
    endif
endfunction

function Trig_BlackoutEnd_Func021Func001C takes nothing returns boolean
    if ( not ( RectContainsUnit(gg_rct_Space, GetEnumUnit()) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BlackoutEnd_Func021A takes nothing returns nothing
    if ( Trig_BlackoutEnd_Func021Func001C() ) then
        call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_AGGRESSIVE), true)
    else
    endif
endfunction

function Trig_BlackoutEnd_Func022Func001C takes nothing returns boolean
    if ( not ( RectContainsUnit(gg_rct_Space, GetEnumUnit()) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BlackoutEnd_Func022A takes nothing returns nothing
    if ( Trig_BlackoutEnd_Func022Func001C() ) then
        call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_AGGRESSIVE), true)
    else
    endif
endfunction

function Trig_BlackoutEnd_Actions takes nothing returns nothing
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4613")
    call PolledWait(2.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4614")
    call PolledWait(2.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4615")
    call PolledWait(2.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4616")
    call PolledWait(2.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4617")
    set udg_Blackout=false
    call PolledWait(2.00)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2571")
    call DestroyTimerDialogBJ(udg_BlackoutTimerWindow)
    call ForForce(GetPlayersAll(), function Trig_BlackoutEnd_Func015A)
    call ForGroupBJ(GetUnitsOfTypeIdAll('h02P'), function Trig_BlackoutEnd_Func016A)
    call ForGroupBJ(GetUnitsOfTypeIdAll('h02B'), function Trig_BlackoutEnd_Func017A)
    call ForGroupBJ(GetUnitsOfTypeIdAll('h043'), function Trig_BlackoutEnd_Func018A)
    call ForGroupBJ(GetUnitsOfTypeIdAll('h040'), function Trig_BlackoutEnd_Func019A)
    call ForGroupBJ(GetUnitsOfTypeIdAll('h041'), function Trig_BlackoutEnd_Func020A)
    call ForGroupBJ(GetUnitsOfTypeIdAll('h042'), function Trig_BlackoutEnd_Func021A)
    call ForGroupBJ(GetUnitsOfTypeIdAll('h02T'), function Trig_BlackoutEnd_Func022A)
endfunction

//===========================================================================
function InitTrig_BlackoutEnd takes nothing returns nothing
    set gg_trg_BlackoutEnd=CreateTrigger()
    call TriggerRegisterTimerExpireEventBJ(gg_trg_BlackoutEnd, udg_BlackoutTimer)
    call TriggerAddAction(gg_trg_BlackoutEnd, function Trig_BlackoutEnd_Actions)
endfunction

//===========================================================================
// Trigger: ApocalypseSpawn
//===========================================================================
function Trig_ApocalypseSpawn_Actions takes nothing returns nothing
    // 50% for each endgame
    set udg_TempInt=GetRandomInt(1, 2)
    call TriggerExecute(udg_Apocalypse_Trigger[udg_TempInt])
    // Disable random events (you can imagine why -_-)
    call DestroyTrigger(gg_trg_RandomEventsTimer)
endfunction

//===========================================================================
function InitTrig_ApocalypseSpawn takes nothing returns nothing
    set gg_trg_ApocalypseSpawn=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_ApocalypseSpawn, 2400.00)
    call TriggerAddAction(gg_trg_ApocalypseSpawn, function Trig_ApocalypseSpawn_Actions)
endfunction

//===========================================================================
// Trigger: USIBattleFleet
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_USIBattleFleet_Actions takes nothing returns nothing
local timer k=CreateTimer()
local timerdialog f
local location r
    set udg_TempPoint=GetRandomLocInRect(gg_rct_Space)
    if ( IsUnitAliveBJ(gg_unit_h003_0018) == true ) then
        if udg_TESTING == false then
            call PingMinimapLocForForce(GetPlayersAll(), udg_TempPoint, 120.00)
        else
            call PingMinimapLocForForce(GetPlayersAll(), udg_TempPoint, 5.00)
        endif
    endif
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_3035")
    if udg_TESTING == false then
        call StartTimerBJ(k, false, 120.00)
    else
        call StartTimerBJ(k, false, 5.00)
    endif
    set f=CreateTimerDialogBJ(k, "TRIGSTR_3036")
    set r=udg_TempPoint
    if udg_TESTING == false then
        call PolledWait(120.00)
    else
        call PolledWait(5.00)
    endif
    call DestroyTimerDialog(f)
    call DestroyTimer(k)
    
    set udg_TempPoint=r
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_3022")
    call PlaySoundBJ(gg_snd_PursuitTheme)
    
    //DummyExplosion VFX
        call CreateNUnitsAtLoc(1, 'e01K', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
    
    //Hapyir
        call CreateNUnitsAtLoc(1, 'h042', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
        set udg_TempUnit=GetLastCreatedUnit()
        call GroupAddUnitSimple(udg_TempUnit, udg_SpaceObject_CollideGroup)
        call NewUnitRegister(udg_TempUnit)
        set udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)]=300.00
        call GroupAddUnit(udg_SpaceAI_USIFleet, udg_TempUnit)
        //call ExecuteFunc("HostileSpaceAIForTempUnit")
    
    //Erstwhile
        call CreateNUnitsAtLoc(1, 'h041', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
        set udg_TempUnit=GetLastCreatedUnit()
        call GroupAddUnitSimple(udg_TempUnit, udg_SpaceObject_CollideGroup)
        call NewUnitRegister(udg_TempUnit)
        set udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)]=200.00
        call GroupAddUnit(udg_SpaceAI_USIFleet, udg_TempUnit)
        //call ExecuteFunc("HostileSpaceAIForTempUnit")
    
    //Cameroon
        call CreateNUnitsAtLoc(1, 'h040', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
        set udg_TempUnit=GetLastCreatedUnit()
        call GroupAddUnitSimple(udg_TempUnit, udg_SpaceObject_CollideGroup)
        call NewUnitRegister(udg_TempUnit)
        set udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)]=200.00
        call GroupAddUnit(udg_SpaceAI_USIFleet, udg_TempUnit)
        //call ExecuteFunc("HostileSpaceAIForTempUnit")
        
    //Loop to create 5 raptors
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call CreateNUnitsAtLoc(1, 'h043', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
        set udg_TempUnit=GetLastCreatedUnit()
        call GroupAddUnit(udg_SpaceAI_USIFleet, udg_TempUnit)
        //call ExecuteFunc("HostileSpaceAIForTempUnit")
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    
    //Make Pirate passive (can't blame fel, wouldn't be easy to make pirate fight players nor does it make sense to help the fleet either)
    call SetUnitOwner(gg_unit_h02B_0116, Player(PLAYER_NEUTRAL_PASSIVE), true)
    
    //Memory Leak cleaning
    call RemoveLocation(udg_TempPoint)
    
endfunction

//===========================================================================
function InitTrig_USIBattleFleet takes nothing returns nothing
    set gg_trg_USIBattleFleet=CreateTrigger()
    call TriggerAddAction(gg_trg_USIBattleFleet, function Trig_USIBattleFleet_Actions)
endfunction


//===========================================================================
// Trigger: BlackHole
//===========================================================================
function Trig_BlackHole_Actions takes nothing returns nothing
    call PlaySoundBJ(gg_snd_PursuitTheme)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5311")
    call DestroyTrigger(gg_trg_MoonMovement)
    call DestroyTrigger(gg_trg_PlanetMovement)
    call EnableTrigger(gg_trg_DragIntoSun)
    call EnableTrigger(gg_trg_Sunpod_apocalypse)
    call DisableTrigger(gg_trg_SunUnitInRange)
endfunction

//===========================================================================
function InitTrig_BlackHole takes nothing returns nothing
    set gg_trg_BlackHole=CreateTrigger()
    call TriggerAddAction(gg_trg_BlackHole, function Trig_BlackHole_Actions)
endfunction

//===========================================================================
// Trigger: DragIntoSun
//===========================================================================
function Trig_DragIntoSun_Func003Func001Func003Func001C takes nothing returns boolean
    if ( ( udg_TempBool == true ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h031' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h032' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetEnumUnit()) == 'h02P' ) ) then
        return true
    endif
    return false
endfunction

function Trig_DragIntoSun_Func003Func001Func003C takes nothing returns boolean
    if ( not Trig_DragIntoSun_Func003Func001Func003Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_DragIntoSun_Func003Func001C takes nothing returns boolean
    if ( not ( GetEnumUnit() != udg_TempUnit ) ) then
        return false
    endif
    return true
endfunction

function Trig_DragIntoSun_Func003A takes nothing returns nothing
    if ( Trig_DragIntoSun_Func003Func001C() ) then
        set udg_TempBool=(GetUnitAbilityLevel((GetEnumUnit()), 'A071') == 1) // INLINED!!
        set udg_TempReal=AngleBetweenUnits(GetEnumUnit() , gg_unit_h01A_0197)
        if ( Trig_DragIntoSun_Func003Func001Func003C() ) then
            call SetUnitX(GetEnumUnit(), GetUnitX(GetEnumUnit()) + CosBJ(udg_TempReal) * ( GetUnitMoveSpeed(GetEnumUnit()) + 15 ) / 25)
            call SetUnitY(GetEnumUnit(), GetUnitY(GetEnumUnit()) + SinBJ(udg_TempReal) * ( GetUnitMoveSpeed(GetEnumUnit()) + 15 ) / 25)
        else
            set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
            set udg_TempPoint=PolarProjectionBJ(udg_TempPoint2, 1.00, udg_TempReal)
            call SetUnitPositionLoc(GetEnumUnit(), udg_TempPoint)
            call RemoveLocation(udg_TempPoint)
            call RemoveLocation(udg_TempPoint2)
        endif
    else
    endif
endfunction

function Trig_DragIntoSun_Actions takes nothing returns nothing
    set udg_TempUnit=gg_unit_h01A_0197
    call ForGroupBJ(GetUnitsInRectAll(gg_rct_Space), function Trig_DragIntoSun_Func003A)
endfunction

//===========================================================================
function InitTrig_DragIntoSun takes nothing returns nothing
    set gg_trg_DragIntoSun=CreateTrigger()
    call DisableTrigger(gg_trg_DragIntoSun)
    call TriggerRegisterTimerEventPeriodic(gg_trg_DragIntoSun, 0.04)
    call TriggerAddAction(gg_trg_DragIntoSun, function Trig_DragIntoSun_Actions)
endfunction

//===========================================================================
// Trigger: CamCommand
//===========================================================================
//===========================================================================
// Trigger: CamAuto
//===========================================================================
function CamAuto_Actions takes nothing returns nothing
    local integer i= 0
    
    loop
        exitwhen i > 11
        if ( GetLocalPlayer() == Player(i) ) then
            if udg_CameraDistanceAuto[i] != 1650 then
                call SetCameraField(CAMERA_FIELD_TARGET_DISTANCE, I2R(udg_CameraDistanceAuto[i]), 0.00)
            endif
        endif
        
        set i=i + 1
    endloop
endfunction

function InitTrig_CamAuto takes nothing returns nothing
    set gg_trg_CamAuto=CreateTrigger()
    call DisableTrigger(gg_trg_CamAuto)
    
    call TriggerRegisterTimerEvent(gg_trg_CamAuto, 1.00, true)
    call TriggerAddAction(gg_trg_CamAuto, function CamAuto_Actions)
endfunction
//===========================================================================
// Trigger: RolesInit
//===========================================================================
function Trig_RolesInit_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    set udg_PlayerRoleTrigger[1]=gg_trg_Researcher
    set udg_PlayerRoleTrigger[2]=gg_trg_Researcher
    set udg_PlayerRoleTrigger[3]=gg_trg_SecurityGuard
    set udg_PlayerRoleTrigger[4]=gg_trg_Medic
    set udg_PlayerRoleTrigger[5]=gg_trg_Captain
    set udg_PlayerRoleTrigger[6]=gg_trg_Janitor
    set udg_PlayerRoleTrigger[7]=gg_trg_CEO
    set udg_PlayerRoleTrigger[8]=gg_trg_Commissar
    set udg_PlayerRoleTrigger[9]=gg_trg_Engineer
    set udg_PlayerRoleTrigger[10]=gg_trg_WarVeteran
    set udg_PlayerRoleTrigger[11]=gg_trg_Pilot
    set udg_PlayerRoleTrigger[12]=gg_trg_SecurityGuard
    set udg_RoleAbility[1]='A00X'
    set udg_RoleAbility[2]='A00X'
    set udg_RoleAbility[3]='A037'
    set udg_RoleAbility[4]='A02C'
    set udg_RoleAbility[5]='A011'
    set udg_RoleAbility[6]='A04B'
    set udg_RoleAbility[7]='A011'
    set udg_RoleAbility[8]='A011'
    set udg_RoleAbility[9]='A053'
    set udg_RoleAbility[10]='A00V'
    set udg_RoleAbility[11]='A038'
    set udg_RoleAbility[12]='A037'
    set udg_Dr_RoleAbility[1]='A00X'
    set udg_Dr_RoleAbility[2]='A035'
    set udg_Dr_RoleAbility[3]='A034'
    set udg_Dr_RoleAbility[4]='A036'
endfunction

//===========================================================================
function InitTrig_RolesInit takes nothing returns nothing
    set gg_trg_RolesInit=CreateTrigger()
    call TriggerAddAction(gg_trg_RolesInit, function Trig_RolesInit_Actions)
endfunction

//===========================================================================
// Trigger: ChooseRoles
//===========================================================================
function Trig_ChooseRoles_Func003Func001C takes nothing returns boolean
    if ( not ( GetPlayerSlotState(GetEnumPlayer()) == PLAYER_SLOT_STATE_PLAYING ) ) then
        return false
    endif
    if ( not ( udg_Player_Left[GetConvertedPlayerId(GetEnumPlayer())] != true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ChooseRoles_Func003A takes nothing returns nothing
    if ( Trig_ChooseRoles_Func003Func001C() ) then
        call ForceAddPlayerSimple(GetEnumPlayer(), udg_ChooseGroup)
    else
    endif
endfunction

function Trig_ChooseRoles_Func005A takes nothing returns nothing
    set udg_TempUnit=GroupPickRandomUnit(udg_ChooseRoles_DummyGroup)
    call GroupRemoveUnitSimple(udg_TempUnit, udg_ChooseRoles_DummyGroup)
    set udg_TempInt=GetUnitUserData(udg_TempUnit)
    set udg_PlayerRole[GetConvertedPlayerId(GetEnumPlayer())]=udg_TempInt
endfunction

function Trig_ChooseRoles_Func006A takes nothing returns nothing
    set udg_TempPlayer=GetEnumPlayer()
    call TriggerExecute(udg_PlayerRoleTrigger[udg_PlayerRole[GetConvertedPlayerId(GetEnumPlayer())]])
endfunction

function Trig_ChooseRoles_Func007Func001Func002Func001Func001C takes nothing returns boolean
    if ( not ( udg_RogueAndroid == GetEnumPlayer() ) ) then
        return false
    endif
    return true
endfunction

function Trig_ChooseRoles_Func007Func001Func002Func001C takes nothing returns boolean
    if ( not ( udg_HiddenAndroid == GetEnumPlayer() ) ) then
        return false
    endif
    return true
endfunction

function Trig_ChooseRoles_Func007Func001Func002C takes nothing returns boolean
    if ( not ( udg_Parasite == GetEnumPlayer() ) ) then
        return false
    endif
    return true
endfunction

function Trig_ChooseRoles_Func007Func001C takes nothing returns boolean
    if ( not ( udg_Mutant == GetEnumPlayer() ) ) then
        return false
    endif
    return true
endfunction

function Trig_ChooseRoles_Func007A takes nothing returns nothing
    if ( Trig_ChooseRoles_Func007Func001C() ) then
        call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 30, "-Kill everybody, or turn them into mindless drones. Use stealth and sabotage at first, but when you become more powerful confront your enemies directly.")
    else
        if ( Trig_ChooseRoles_Func007Func001Func002C() ) then
            call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 30, "-Kill everybody, or turn them into spawns. Use stealth and infection to confront your enemies at first, and later confront them directly when you evolve.")
        else
            if ( Trig_ChooseRoles_Func007Func001Func002Func001C() ) then
                call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 30, "-Kill the mutant, the alien, and all of their allies. Please try to protect company property.\r\n-Protect local personnel. If too many are killed by you, you will be shut down.\r\n-You may upgrade yourself into a combat form if enough time passes.\r\n-If you die, you may be revived at the Arbitress. However you will be under the control of the person who revived you.")
            else
                if ( Trig_ChooseRoles_Func007Func001Func002Func001Func001C() ) then
                    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 30, "-Rampage and kill everybody.\r\n-Human corpses can be harvested for upgrades, or immortality.\r\nEither await for corpses to pile up, or create them yourself, the choice is yours.")
                    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 30, "-|cffff0000Press ESC to evolve, when you are above a corpse!|r\r\n-Destroy company property.")
                else
                    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 30, "-Kill the mutant, the alien, and all of their allies. Please try to protect company property.")
                endif
            endif
        endif
    endif
endfunction

function Trig_ChooseRoles_Func008Func001C takes nothing returns boolean
    if ( ( udg_EngineerUsed == true ) ) then
        return true
    endif
    if ( ( udg_TESTING == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_ChooseRoles_Func008C takes nothing returns boolean
    if ( not Trig_ChooseRoles_Func008Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_ChooseRoles_Func010Func002Func001C takes nothing returns boolean
    if ( ( udg_ExtraStation == 2 ) ) then
        return true
    endif
    if ( ( udg_TESTING == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_ChooseRoles_Func010Func002C takes nothing returns boolean
    if ( not Trig_ChooseRoles_Func010Func002Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_ChooseRoles_Func010C takes nothing returns boolean
    if ( not ( CountPlayersInForceBJ(GetPlayersAll()) >= 11 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ChooseRoles_Func011C takes nothing returns boolean
    if ( not ( CountPlayersInForceBJ(GetPlayersAll()) <= 6 ) ) then
        return false
    endif
    if ( not ( udg_TESTING == false ) ) then
        return false
    endif
    if ( not ( false == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ChooseRoles_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call ForceClear(udg_ChooseGroup)
    call ForForce(GetPlayersAll(), function Trig_ChooseRoles_Func003A)
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=udg_NumberofRoles
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call CreateNUnitsAtLoc(1, 'e000', Player(PLAYER_NEUTRAL_PASSIVE), udg_HoldZone, bj_UNIT_FACING)
        call GroupAddUnitSimple(GetLastCreatedUnit(), udg_ChooseRoles_DummyGroup)
        call SetUnitUserData(GetLastCreatedUnit(), GetForLoopIndexA())
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call ForForce(udg_ChooseGroup, function Trig_ChooseRoles_Func005A)
    call ForForce(udg_ChooseGroup, function Trig_ChooseRoles_Func006A)
    call ForForce(udg_ChooseGroup, function Trig_ChooseRoles_Func007A)
    if ( Trig_ChooseRoles_Func008C() ) then
        call TriggerExecute(gg_trg_ST8mInit)
    else
        call RemoveUnit(gg_unit_h04E_0259)
        call DestroyTrigger(gg_trg_ST8Death)
        call DestroyTrigger(gg_trg_ST8AttackEnd)
        call DestroyTrigger(gg_trg_ST8Attack)
    endif
    call TriggerExecute(gg_trg_ST9Init)
    if ( Trig_ChooseRoles_Func010C() ) then
        call TriggerExecute(gg_trg_ST10Init)
    else
        if ( Trig_ChooseRoles_Func010Func002C() ) then
            call TriggerExecute(gg_trg_ST10Init)
        else
            call TriggerExecute(gg_trg_ST10UnInit)
        endif
    endif
    if ( Trig_ChooseRoles_Func011C() ) then
        // No android? No arbi, its bloat (more playspace to drag games)
        call RemoveUnit(gg_unit_h003_0018)
        call DestroyTrigger(gg_trg_ST1Death)
        call DestroyTrigger(gg_trg_ST1AttackEnd)
        call DestroyTrigger(gg_trg_ST1Attack)
    else
    endif
endfunction

//===========================================================================
function InitTrig_ChooseRoles takes nothing returns nothing
    set gg_trg_ChooseRoles=CreateTrigger()
    call TriggerAddAction(gg_trg_ChooseRoles, function Trig_ChooseRoles_Actions)
endfunction

//===========================================================================
// Trigger: Chooser
//===========================================================================
function Trig_Chooser_Func004Func002C takes nothing returns boolean
    if ( not ( GetPlayerSlotState(GetEnumPlayer()) == PLAYER_SLOT_STATE_PLAYING ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func004A takes nothing returns nothing
    set udg_Player_OriginalName[GetConvertedPlayerId(GetEnumPlayer())]=GetPlayerName(GetEnumPlayer())
    if ( Trig_Chooser_Func004Func002C() ) then
        call ForceAddPlayerSimple(GetEnumPlayer(), udg_ChooseGroup)
    else
    endif
endfunction

function Trig_Chooser_Func005Func001Func001C takes nothing returns boolean
    if ( not ( GetRandomInt(1, 2) == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func005Func001C takes nothing returns boolean
    if ( not ( CountPlayersInForceBJ(udg_ChooseGroup) <= 3 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func005C takes nothing returns boolean
    if ( not ( CountPlayersInForceBJ(udg_ChooseGroup) <= 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func006C takes nothing returns boolean
    if ( not ( CountPlayersInForceBJ(udg_ChooseGroup) < 6 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func007C takes nothing returns boolean
    if ( not ( CountPlayersInForceBJ(udg_ChooseGroup) >= 7 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func008C takes nothing returns boolean
    if ( not ( udg_Allow_Android == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func009C takes nothing returns boolean
    if ( not ( udg_Allow_RogueAndroid == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func010C takes nothing returns boolean
    if ( not ( udg_Allow_Parasite == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func011C takes nothing returns boolean
    if ( not ( udg_Allow_Mutant == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func012Func001Func003Func001Func001C takes nothing returns boolean
    if ( not ( GetEnumPlayer() == udg_RogueAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func012Func001Func003Func001C takes nothing returns boolean
    if ( not ( GetEnumPlayer() == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func012Func001Func003C takes nothing returns boolean
    if ( not ( GetEnumPlayer() == udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func012Func001C takes nothing returns boolean
    if ( not ( GetEnumPlayer() == udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func012A takes nothing returns nothing
    if ( Trig_Chooser_Func012Func001C() ) then
        call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 30, "|cffFF00FFYOU ARE THE MUTANT|r")
        call SetPlayerStateBJ(GetEnumPlayer(), PLAYER_STATE_RESOURCE_FOOD_CAP, 100)
    else
        if ( Trig_Chooser_Func012Func001Func003C() ) then
            call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 30, "|cffFF8000YOU ARE THE ALIEN|r")
            call SetPlayerStateBJ(GetEnumPlayer(), PLAYER_STATE_RESOURCE_FOOD_CAP, 100)
        else
            if ( Trig_Chooser_Func012Func001Func003Func001C() ) then
                call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 30, "|cffFF8000YOU ARE THE ANDROID|r")
                call SetPlayerStateBJ(GetEnumPlayer(), PLAYER_STATE_RESOURCE_FOOD_CAP, 100)
            else
                if ( Trig_Chooser_Func012Func001Func003Func001Func001C() ) then
                    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 30, "|cffFFA000YOU ARE THE CYBORG|r")
                    call SetPlayerStateBJ(GetEnumPlayer(), PLAYER_STATE_RESOURCE_FOOD_CAP, 100)
                else
                    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 30, "|cff808000YOU ARE HUMAN|r")
                endif
            endif
        endif
    endif
endfunction

function Trig_Chooser_Func015Func001C takes nothing returns boolean
    if ( not ( GetPlayerSlotState(GetEnumPlayer()) == PLAYER_SLOT_STATE_PLAYING ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func015A takes nothing returns nothing
    if ( Trig_Chooser_Func015Func001C() ) then
        call ForceAddPlayerSimple(GetEnumPlayer(), udg_ChooseGroup)
    else
    endif
endfunction

function Trig_Chooser_Func020Func001C takes nothing returns boolean
    if ( not ( CountPlayersInForceBJ(GetPlayersAll()) <= 6 ) ) then
        return false
    endif
    if ( not ( RectContainsUnit(gg_rct_ST1, GetEnumUnit()) == true ) ) then
        return false
    endif
    if ( not ( false == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func020A takes nothing returns nothing
    if ( Trig_Chooser_Func020Func001C() ) then
        // Added false equal to true since arbi spawn point shouldnt be removed, as it will always exist now
        call GroupRemoveUnitSimple(GetEnumUnit(), udg_ChooseRoles_SpawnGroup)
        call RemoveUnit(GetEnumUnit())
    else
    endif
endfunction

function Trig_Chooser_Func021Func001C takes nothing returns boolean
    if ( not ( GetLocationX(udg_InitialSpawnPoint[GetConvertedPlayerId(GetEnumPlayer())]) == 0.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func021Func002Func003C takes nothing returns boolean
    if ( ( udg_PlayerRole[GetConvertedPlayerId(GetEnumPlayer())] == 1 ) ) then
        return true
    endif
    if ( ( udg_PlayerRole[GetConvertedPlayerId(GetEnumPlayer())] == 2 ) ) then
        return true
    endif
    return false
endfunction

function Trig_Chooser_Func021Func002C takes nothing returns boolean
    if ( not Trig_Chooser_Func021Func002Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func021Func006C takes nothing returns boolean
    if ( not ( udg_Parasite == GetEnumPlayer() ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func021Func007C takes nothing returns boolean
    if ( not ( udg_Mutant == GetEnumPlayer() ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func021Func008C takes nothing returns boolean
    if ( not ( udg_HiddenAndroid == GetEnumPlayer() ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func021Func009C takes nothing returns boolean
    if ( not ( udg_RogueAndroid == GetEnumPlayer() ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func021A takes nothing returns nothing
    if ( Trig_Chooser_Func021Func001C() ) then
        set udg_TempUnit=GroupPickRandomUnit(udg_ChooseRoles_SpawnGroup)
        set udg_TempPoint=GetUnitLoc(udg_TempUnit)
        call GroupRemoveUnitSimple(udg_TempUnit, udg_ChooseRoles_SpawnGroup)
        call RemoveUnit(udg_TempUnit)
        set udg_InitialSpawnPoint[GetConvertedPlayerId(GetEnumPlayer())]=udg_TempPoint
    else
    endif
    if ( Trig_Chooser_Func021Func002C() ) then
        call UnitAddAbilityBJ(udg_Dr_RoleAbility[udg_Researcher_PhD[GetConvertedPlayerId(GetEnumPlayer())]], udg_Playerhero[GetConvertedPlayerId(GetEnumPlayer())])
    else
        call UnitAddAbilityBJ(udg_RoleAbility[udg_PlayerRole[GetConvertedPlayerId(GetEnumPlayer())]], udg_Playerhero[GetConvertedPlayerId(GetEnumPlayer())])
    endif
    call SetUnitPositionLoc(udg_Playerhero[GetConvertedPlayerId(GetEnumPlayer())], udg_InitialSpawnPoint[GetConvertedPlayerId(GetEnumPlayer())])
    call PanCameraToTimedLocForPlayer(GetEnumPlayer(), udg_InitialSpawnPoint[GetConvertedPlayerId(GetEnumPlayer())], 0)
    call SelectUnitForPlayerSingle(udg_Playerhero[GetConvertedPlayerId(GetEnumPlayer())], GetEnumPlayer())
    if ( Trig_Chooser_Func021Func006C() ) then
        call UnitAddAbilityBJ('A02O', udg_Playerhero[GetConvertedPlayerId(GetEnumPlayer())])
    else
    endif
    if ( Trig_Chooser_Func021Func007C() ) then
        call UnitAddAbilityBJ('A05M', udg_Playerhero[GetConvertedPlayerId(GetEnumPlayer())])
        call CreateNUnitsAtLoc(1, 'e031', GetEnumPlayer(), udg_HoldZone, bj_UNIT_FACING)
    else
    endif
    if ( Trig_Chooser_Func021Func008C() ) then
        call UnitAddAbilityBJ('A05Z', udg_Playerhero[GetConvertedPlayerId(GetEnumPlayer())])
    else
    endif
    if ( Trig_Chooser_Func021Func009C() ) then
        call UnitAddAbilityBJ('A0AI', (udg_Playerhero[GetConvertedPlayerId(GetEnumPlayer())])) // INLINED!!
        call CreateAlienCooldownRequirementsForPlayer(udg_RogueAndroid)
        call VesselUpgrade_VesselInit(udg_RogueAndroid)
    else
    endif
endfunction

function Trig_Chooser_Func033Func001C takes nothing returns boolean
    if ( not ( udg_PlayerRole[GetConvertedPlayerId(GetEnumPlayer())] == 11 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func033A takes nothing returns nothing
    if ( Trig_Chooser_Func033Func001C() ) then
        set udg_TempBool=false
    else
    endif
endfunction

function Trig_Chooser_Func034C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Func036C takes nothing returns boolean
    if ( not ( udg_TESTING == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Chooser_Actions takes nothing returns nothing
    call DestroyTrigger(GetTriggeringTrigger())
    call ForceClear(udg_ChooseGroup)
    call ForForce(GetPlayersAll(), function Trig_Chooser_Func004A)
    if ( Trig_Chooser_Func005C() ) then
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_5513")
        return
    else
        if ( Trig_Chooser_Func005Func001C() ) then
            if ( Trig_Chooser_Func005Func001Func001C() ) then
                set udg_Allow_Mutant=false
            else
                set udg_Allow_Parasite=false
            endif
        else
        endif
    endif
    if ( Trig_Chooser_Func006C() ) then
        set udg_Allow_Android=false
    else
    endif
    if ( Trig_Chooser_Func007C() ) then
        set udg_Allow_RogueAndroid=true
        set udg_ExtraStation=GetRandomInt(1, 3)
    else
    endif
    if ( Trig_Chooser_Func008C() ) then
        set udg_HiddenAndroid=ForcePickRandomPlayer(udg_ChooseGroup)
        call ForceRemovePlayerSimple(udg_HiddenAndroid, udg_ChooseGroup)
    else
    endif
    if ( Trig_Chooser_Func009C() ) then
        set udg_RogueAndroid=ForcePickRandomPlayer(udg_ChooseGroup)
        call ForceRemovePlayerSimple(udg_RogueAndroid, udg_ChooseGroup)
    else
    endif
    if ( Trig_Chooser_Func010C() ) then
        set udg_Parasite=ForcePickRandomPlayer(udg_ChooseGroup)
        call SetPlayerAllianceStateBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), udg_Parasite, bj_ALLIANCE_ALLIED_ADVUNITS)
        call ForceRemovePlayerSimple(udg_Parasite, udg_ChooseGroup)
    else
    endif
    if ( Trig_Chooser_Func011C() ) then
        set udg_Mutant=ForcePickRandomPlayer(udg_ChooseGroup)
        call ForceRemovePlayerSimple(udg_Mutant, udg_ChooseGroup)
    else
    endif
    call ForForce(GetPlayersAll(), function Trig_Chooser_Func012A)
    call TriggerExecute(gg_trg_ChooseRoles)
    call ForceClear(udg_ChooseGroup)
    call ForForce(GetPlayersAll(), function Trig_Chooser_Func015A)
    // SPAWN LOCATIONS BELOW
    call GroupClear(udg_ChooseRoles_SpawnGroup)
    set udg_ChooseRoles_SpawnGroup=GetUnitsOfTypeIdAll('e003')
    // Remove arbi spawn points if 6 players
    call ForGroupBJ(udg_ChooseRoles_SpawnGroup, function Trig_Chooser_Func020A)
    call ForForce(udg_ChooseGroup, function Trig_Chooser_Func021A)
    call DestroyTrigger(gg_trg_Researcher)
    call DestroyTrigger(gg_trg_CEO)
    call DestroyTrigger(gg_trg_Captain)
    call DestroyTrigger(gg_trg_Commissar)
    call DestroyTrigger(gg_trg_Janitor)
    call DestroyTrigger(gg_trg_WarVeteran)
    call DestroyTrigger(gg_trg_Engineer)
    call DestroyTrigger(gg_trg_SecurityGuard)
    call DestroyTrigger(gg_trg_Pilot)
    call DestroyForce(udg_TempRoleGroup)
    set udg_TempBool=true
    call ForForce(GetPlayersAll(), function Trig_Chooser_Func033A)
    if ( Trig_Chooser_Func034C() ) then
        set udg_ace_Existence=true
        call ShowUnitHide(gg_unit_h02Q_0212)
    else
    endif
    call GroupClear(udg_ChooseRoles_SpawnGroup)
    if ( Trig_Chooser_Func036C() ) then
        call ConditionalTriggerExecute(gg_trg_RepickAlien)
        call ConditionalTriggerExecute(gg_trg_RepickMutant)
        call ConditionalTriggerExecute(gg_trg_RepickRogue)
    else
    endif
endfunction

//===========================================================================
function InitTrig_Chooser takes nothing returns nothing
    set gg_trg_Chooser=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_Chooser, 0.00)
    call TriggerAddAction(gg_trg_Chooser, function Trig_Chooser_Actions)
endfunction

//===========================================================================
// Trigger: Researcher
//===========================================================================
function Trig_Researcher_Func002Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_RogueAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Researcher_Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Researcher_Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_Researcher_Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_Researcher_Func005C takes nothing returns boolean
    if ( not ( udg_TempInt == 3 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Researcher_Func006Func001Func001Func001Func006Func002C takes nothing returns boolean
    if ( ( udg_TempPlayer == udg_Mutant ) ) then
        return true
    endif
    if ( ( udg_TempPlayer == udg_Parasite ) ) then
        return true
    endif
    return false
endfunction

function Trig_Researcher_Func006Func001Func001Func001Func006C takes nothing returns boolean
    if ( not Trig_Researcher_Func006Func001Func001Func001Func006Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_Researcher_Func006Func001Func001Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Researcher_Func006Func001Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Researcher_Func006Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 3 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Researcher_Func006Func007Func002C takes nothing returns boolean
    if ( ( udg_TempPlayer == udg_Mutant ) ) then
        return true
    endif
    if ( ( udg_TempPlayer == udg_Parasite ) ) then
        return true
    endif
    if ( ( udg_TempPlayer == udg_RogueAndroid ) ) then
        return true
    endif
    return false
endfunction

function Trig_Researcher_Func006Func007C takes nothing returns boolean
    if ( not Trig_Researcher_Func006Func007Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_Researcher_Func006C takes nothing returns boolean
    if ( not ( udg_TempInt == 4 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Researcher_Actions takes nothing returns nothing
    call ForceAddPlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    if ( Trig_Researcher_Func002C() ) then
        call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5642")
    else
        if ( Trig_Researcher_Func002Func002C() ) then
            call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5643")
        else
            if ( Trig_Researcher_Func002Func002Func002C() ) then
                call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5644")
            else
                if ( Trig_Researcher_Func002Func002Func002Func002C() ) then
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5645")
                else
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5646")
                endif
            endif
        endif
    endif
    call ForceRemovePlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    set udg_TempInt=GetRandomInt(1, 4)
    if ( Trig_Researcher_Func005C() ) then
        set udg_TempInt=GetRandomInt(1, 2)
    else
    endif
    if ( Trig_Researcher_Func006C() ) then
        call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff000080You have a PhD in Biology.|r")
        call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff008080You have 200% health regeneration!|r")
        set udg_Researcher_PhD[GetConvertedPlayerId(udg_TempPlayer)]=4
        call SetPlayerTechResearchedSwap('R006', 1, udg_TempPlayer)
        if ( Trig_Researcher_Func006Func007C() ) then
            call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cffFF0000This only applies while you are human.|r")
        else
        endif
    else
        if ( Trig_Researcher_Func006Func001C() ) then
            call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff000080You have a PhD in Electronics.|r")
            call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff008080Sentries and force shields built by you gain 50 health!|r")
            set udg_Researcher_PhD[GetConvertedPlayerId(udg_TempPlayer)]=3
        else
            if ( Trig_Researcher_Func006Func001Func001C() ) then
                call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff000080You have a PhD in Gravitational Effects.|r")
                call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff008080Ships under your control move 10% faster!|r")
                set udg_Researcher_PhD[GetConvertedPlayerId(udg_TempPlayer)]=2
                call SetPlayerTechResearchedSwap('R007', 1, udg_TempPlayer)
            else
                if ( Trig_Researcher_Func006Func001Func001Func001C() ) then
                    call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff000080You have a PhD in Optics!|r")
                    call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff008080You have extra sight range!|r")
                    set udg_Researcher_PhD[GetConvertedPlayerId(udg_TempPlayer)]=1
                    call SetPlayerTechResearchedSwap('R008', 1, udg_TempPlayer)
                    if ( Trig_Researcher_Func006Func001Func001Func001Func006C() ) then
                        call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cffFF0000This only applies while you are human.|r")
                    else
                    endif
                else
                endif
            endif
        endif
    endif
    call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff800080YOUR OBJECTIVES: |r")
    call UnitAddItemByIdSwapped('I025', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
    call UnitAddItemByIdSwapped('I002', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
    set udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)]="Dr. "
    call SetPlayerName(udg_TempPlayer, ( udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)] + GetPlayerName(udg_TempPlayer) ))
endfunction

//===========================================================================
function InitTrig_Researcher takes nothing returns nothing
    set gg_trg_Researcher=CreateTrigger()
    call TriggerAddAction(gg_trg_Researcher, function Trig_Researcher_Actions)
endfunction

//===========================================================================
// Trigger: CEO
//===========================================================================
function Trig_CEO_Func002Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_RogueAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_CEO_Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_CEO_Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_CEO_Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_CEO_Actions takes nothing returns nothing
    call ForceAddPlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    if ( Trig_CEO_Func002C() ) then
        call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5647")
    else
        if ( Trig_CEO_Func002Func002C() ) then
            call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5648")
        else
            if ( Trig_CEO_Func002Func002Func002C() ) then
                call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5649")
            else
                if ( Trig_CEO_Func002Func002Func002Func002C() ) then
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5650")
                else
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5651")
                endif
            endif
        endif
    endif
    call ForceRemovePlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff800080YOUR OBJECTIVES: |r")
    set udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)]="CEO "
    call SetPlayerName(udg_TempPlayer, ( udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)] + GetPlayerName(udg_TempPlayer) ))
    call CreateNUnitsAtLoc(1, 'H046', udg_TempPlayer, udg_HoldZone, bj_UNIT_FACING)
    set udg_TempUnit=GetLastCreatedUnit()
    set udg_TempUnit2=udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]
    call ExecuteFunc("RoboButler")
endfunction

//===========================================================================
function InitTrig_CEO takes nothing returns nothing
    set gg_trg_CEO=CreateTrigger()
    call TriggerAddAction(gg_trg_CEO, function Trig_CEO_Actions)
endfunction

//===========================================================================
// Trigger: Commissar
//===========================================================================
function Trig_Commissar_Func002Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_RogueAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commissar_Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commissar_Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commissar_Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_Commissar_Actions takes nothing returns nothing
    call ForceAddPlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    if ( Trig_Commissar_Func002C() ) then
        call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5652")
    else
        if ( Trig_Commissar_Func002Func002C() ) then
            call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5653")
        else
            if ( Trig_Commissar_Func002Func002Func002C() ) then
                call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5654")
            else
                if ( Trig_Commissar_Func002Func002Func002Func002C() ) then
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5655")
                else
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5656")
                endif
            endif
        endif
    endif
    call ForceRemovePlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff800080YOUR OBJECTIVES: |r")
    call UnitAddItemByIdSwapped('I00G', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
    set udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)]="Commissar "
    call SetPlayerName(udg_TempPlayer, ( udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)] + GetPlayerName(udg_TempPlayer) ))
endfunction

//===========================================================================
function InitTrig_Commissar takes nothing returns nothing
    set gg_trg_Commissar=CreateTrigger()
    call TriggerAddAction(gg_trg_Commissar, function Trig_Commissar_Actions)
endfunction

//===========================================================================
// Trigger: Engineer
//===========================================================================
function Trig_Engineer_Func002Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_RogueAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Engineer_Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Engineer_Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_Engineer_Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_Engineer_Func009C takes nothing returns boolean
    if ( not ( udg_ExtraStation == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Engineer_Actions takes nothing returns nothing
    call ForceAddPlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    if ( Trig_Engineer_Func002C() ) then
        call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5657")
    else
        if ( Trig_Engineer_Func002Func002C() ) then
            call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5658")
        else
            if ( Trig_Engineer_Func002Func002Func002C() ) then
                call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5659")
            else
                if ( Trig_Engineer_Func002Func002Func002Func002C() ) then
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5660")
                else
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5661")
                endif
            endif
        endif
    endif
    call ForceRemovePlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff800080YOUR OBJECTIVES: |r")
    call UnitAddItemByIdSwapped('I00B', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
    call UnitAddItemByIdSwapped('I00H', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
    set udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)]="Engineer "
    call SetPlayerName(udg_TempPlayer, ( udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)] + GetPlayerName(udg_TempPlayer) ))
    if ( Trig_Engineer_Func009C() ) then
        set udg_InitialSpawnPoint[GetConvertedPlayerId(udg_TempPlayer)]=Location(- 6016.00, 11980.00)
        set udg_EngineerUsed=true
    else
    endif
endfunction

//===========================================================================
function InitTrig_Engineer takes nothing returns nothing
    set gg_trg_Engineer=CreateTrigger()
    call TriggerAddAction(gg_trg_Engineer, function Trig_Engineer_Actions)
endfunction

//===========================================================================
// Trigger: Pilot
//===========================================================================
function Trig_Pilot_Func002Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_RogueAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Pilot_Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Pilot_Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_Pilot_Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_Pilot_Func008Func001Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 3 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Pilot_Func008Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Pilot_Func008C takes nothing returns boolean
    if ( not ( udg_TempInt == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Pilot_Actions takes nothing returns nothing
    call ForceAddPlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    if ( Trig_Pilot_Func002C() ) then
        call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5662")
    else
        if ( Trig_Pilot_Func002Func002C() ) then
            call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5663")
        else
            if ( Trig_Pilot_Func002Func002Func002C() ) then
                call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5664")
            else
                if ( Trig_Pilot_Func002Func002Func002Func002C() ) then
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5665")
                else
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5666")
                endif
            endif
        endif
    endif
    call ForceRemovePlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff800080YOUR OBJECTIVES: |r")
    set udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)]="Ace "
    set udg_InitialSpawnPoint[GetConvertedPlayerId(udg_TempPlayer)]=Location(- 2252.00, 14431.00)
    call SetPlayerName(udg_TempPlayer, ( udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)] + GetPlayerName(udg_TempPlayer) ))
    if ( Trig_Pilot_Func008C() ) then
        call UnitAddItemByIdSwapped('I008', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
    else
        if ( Trig_Pilot_Func008Func001C() ) then
            call UnitAddItemByIdSwapped('I001', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
        else
            if ( Trig_Pilot_Func008Func001Func001C() ) then
                call UnitAddItemByIdSwapped('I000', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
            else
                call UnitAddItemByIdSwapped('I007', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
            endif
        endif
    endif
endfunction

//===========================================================================
function InitTrig_Pilot takes nothing returns nothing
    set gg_trg_Pilot=CreateTrigger()
    call TriggerAddAction(gg_trg_Pilot, function Trig_Pilot_Actions)
endfunction

//===========================================================================
// Trigger: WarVeteran
//===========================================================================
function Trig_WarVeteran_Func002Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_RogueAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_WarVeteran_Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_WarVeteran_Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_WarVeteran_Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_WarVeteran_Actions takes nothing returns nothing
    call ForceAddPlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    if ( Trig_WarVeteran_Func002C() ) then
        call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5667")
    else
        if ( Trig_WarVeteran_Func002Func002C() ) then
            call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5668")
        else
            if ( Trig_WarVeteran_Func002Func002Func002C() ) then
                call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5669")
            else
                if ( Trig_WarVeteran_Func002Func002Func002Func002C() ) then
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5670")
                else
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5671")
                endif
            endif
        endif
    endif
    call ForceRemovePlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff800080YOUR OBJECTIVES: |r")
    call UnitAddItemByIdSwapped('I00F', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
    set udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)]="Corporal "
    call SetPlayerName(udg_TempPlayer, ( udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)] + GetPlayerName(udg_TempPlayer) ))
endfunction

//===========================================================================
function InitTrig_WarVeteran takes nothing returns nothing
    set gg_trg_WarVeteran=CreateTrigger()
    call TriggerAddAction(gg_trg_WarVeteran, function Trig_WarVeteran_Actions)
endfunction

//===========================================================================
// Trigger: Captain
//===========================================================================
function Trig_Captain_Func002Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_RogueAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Captain_Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Captain_Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_Captain_Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_Captain_Actions takes nothing returns nothing
    call ForceAddPlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    if ( Trig_Captain_Func002C() ) then
        call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5672")
    else
        if ( Trig_Captain_Func002Func002C() ) then
            call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5673")
        else
            if ( Trig_Captain_Func002Func002Func002C() ) then
                call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5674")
            else
                if ( Trig_Captain_Func002Func002Func002Func002C() ) then
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5675")
                else
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5676")
                endif
            endif
        endif
    endif
    call ForceRemovePlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff800080YOUR OBJECTIVES: |r")
    call UnitAddItemByIdSwapped('I00I', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
    set udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)]="Captain "
    set udg_InitialSpawnPoint[GetConvertedPlayerId(udg_TempPlayer)]=Location(- 14714.00, - 13302.00)
    call SetPlayerName(udg_TempPlayer, ( udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)] + GetPlayerName(udg_TempPlayer) ))
endfunction

//===========================================================================
function InitTrig_Captain takes nothing returns nothing
    set gg_trg_Captain=CreateTrigger()
    call TriggerAddAction(gg_trg_Captain, function Trig_Captain_Actions)
endfunction

//===========================================================================
// Trigger: Janitor
//===========================================================================
function Trig_Janitor_Func002Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_RogueAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Janitor_Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Janitor_Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_Janitor_Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_Janitor_Actions takes nothing returns nothing
    call ForceAddPlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    if ( Trig_Janitor_Func002C() ) then
        call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5677")
    else
        if ( Trig_Janitor_Func002Func002C() ) then
            call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5678")
        else
            if ( Trig_Janitor_Func002Func002Func002C() ) then
                call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5679")
            else
                if ( Trig_Janitor_Func002Func002Func002Func002C() ) then
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5680")
                else
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5681")
                endif
            endif
        endif
    endif
    call ForceRemovePlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff800080YOUR OBJECTIVES: |r")
    call UnitAddItemByIdSwapped('I00J', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
    set udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)]="Janitor "
    call SetPlayerName(udg_TempPlayer, ( udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)] + GetPlayerName(udg_TempPlayer) ))
endfunction

//===========================================================================
function InitTrig_Janitor takes nothing returns nothing
    set gg_trg_Janitor=CreateTrigger()
    call TriggerAddAction(gg_trg_Janitor, function Trig_Janitor_Actions)
endfunction

//===========================================================================
// Trigger: Medic
//===========================================================================
function Trig_Medic_Func002Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_RogueAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Medic_Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Medic_Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_Medic_Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_Medic_Actions takes nothing returns nothing
    call ForceAddPlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    if ( Trig_Medic_Func002C() ) then
        call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5682")
    else
        if ( Trig_Medic_Func002Func002C() ) then
            call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5683")
        else
            if ( Trig_Medic_Func002Func002Func002C() ) then
                call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5684")
            else
                if ( Trig_Medic_Func002Func002Func002Func002C() ) then
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5685")
                else
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5686")
                endif
            endif
        endif
    endif
    call ForceRemovePlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff800080YOUR OBJECTIVES: |r")
    call UnitAddItemByIdSwapped('I00L', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
    call UnitAddItemByIdSwapped('I002', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
    call UnitAddItemByIdSwapped('I00M', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
    set udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)]="Medic "
    call SetPlayerName(udg_TempPlayer, ( udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)] + GetPlayerName(udg_TempPlayer) ))
endfunction

//===========================================================================
function InitTrig_Medic takes nothing returns nothing
    set gg_trg_Medic=CreateTrigger()
    call TriggerAddAction(gg_trg_Medic, function Trig_Medic_Actions)
endfunction

//===========================================================================
// Trigger: SecurityGuard
//===========================================================================
function Trig_SecurityGuard_Func002Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_RogueAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_SecurityGuard_Func002Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_SecurityGuard_Func002Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_SecurityGuard_Func002C takes nothing returns boolean
    if ( not ( udg_TempPlayer == udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_SecurityGuard_Func008Func001Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 3 ) ) then
        return false
    endif
    return true
endfunction

function Trig_SecurityGuard_Func008Func001C takes nothing returns boolean
    if ( not ( udg_TempInt == 2 ) ) then
        return false
    endif
    return true
endfunction

function Trig_SecurityGuard_Func008C takes nothing returns boolean
    if ( not ( udg_TempInt == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_SecurityGuard_Actions takes nothing returns nothing
    call ForceAddPlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    if ( Trig_SecurityGuard_Func002C() ) then
        call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5687")
    else
        if ( Trig_SecurityGuard_Func002Func002C() ) then
            call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5688")
        else
            if ( Trig_SecurityGuard_Func002Func002Func002C() ) then
                call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5689")
            else
                if ( Trig_SecurityGuard_Func002Func002Func002Func002C() ) then
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5690")
                else
                    call DisplayTimedTextToForce(udg_TempRoleGroup, 30, "TRIGSTR_5691")
                endif
            endif
        endif
    endif
    call ForceRemovePlayerSimple(udg_TempPlayer, udg_TempRoleGroup)
    call DisplayTimedTextToPlayer(udg_TempPlayer, 0, 0, 30, "|cff800080YOUR OBJECTIVES: |r")
    call SetPlayerTechResearchedSwap('R000', 1, udg_TempPlayer)
    set udg_TempInt=GetRandomInt(1, 4)
    set udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)]="Private "
    if ( Trig_SecurityGuard_Func008C() ) then
        call UnitAddItemByIdSwapped('I008', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
    else
        if ( Trig_SecurityGuard_Func008Func001C() ) then
            call UnitAddItemByIdSwapped('I001', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
        else
            if ( Trig_SecurityGuard_Func008Func001Func001C() ) then
                call UnitAddItemByIdSwapped('I000', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
            else
                call UnitAddItemByIdSwapped('I007', udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)])
            endif
        endif
    endif
    call SetPlayerName(udg_TempPlayer, ( udg_NamePrepension[GetConvertedPlayerId(udg_TempPlayer)] + GetPlayerName(udg_TempPlayer) ))
endfunction

//===========================================================================
function InitTrig_SecurityGuard takes nothing returns nothing
    set gg_trg_SecurityGuard=CreateTrigger()
    call TriggerAddAction(gg_trg_SecurityGuard, function Trig_SecurityGuard_Actions)
endfunction

//===========================================================================
// Trigger: RepickAlien
//===========================================================================
function Trig_RepickAlien_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickAlien_Actions takes nothing returns nothing
    call DialogClearBJ(udg_RepickAlienDialog)
    call DialogSetMessageBJ(udg_RepickAlienDialog, "TRIGSTR_5314")
    call DialogAddButtonBJ(udg_RepickAlienDialog, "TRIGSTR_5312")
    set udg_RepickAlienDialogButton[0]=GetLastCreatedButtonBJ()
    call DialogAddButtonBJ(udg_RepickAlienDialog, "TRIGSTR_5315")
    set udg_RepickAlienDialogButton[1]=GetLastCreatedButtonBJ()
    call DialogDisplayBJ(true, udg_RepickAlienDialog, udg_Parasite)
endfunction

//===========================================================================
function InitTrig_RepickAlien takes nothing returns nothing
    set gg_trg_RepickAlien=CreateTrigger()
    call TriggerAddCondition(gg_trg_RepickAlien, Condition(function Trig_RepickAlien_Conditions))
    call TriggerAddAction(gg_trg_RepickAlien, function Trig_RepickAlien_Actions)
endfunction

//===========================================================================
// Trigger: RepickAlienClick0
//===========================================================================
function Trig_RepickAlienClick0_Conditions takes nothing returns boolean
    if ( not ( GetClickedButtonBJ() == udg_RepickAlienDialogButton[0] ) ) then
        return false
    endif
    if ( not ( udg_RepickDialogToggled == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickAlienClick0_Actions takes nothing returns nothing
    set udg_RepickAlienDialogClicked=true
endfunction

//===========================================================================
function InitTrig_RepickAlienClick0 takes nothing returns nothing
    set gg_trg_RepickAlienClick0=CreateTrigger()
    call TriggerRegisterDialogEventBJ(gg_trg_RepickAlienClick0, udg_RepickAlienDialog)
    call TriggerAddCondition(gg_trg_RepickAlienClick0, Condition(function Trig_RepickAlienClick0_Conditions))
    call TriggerAddAction(gg_trg_RepickAlienClick0, function Trig_RepickAlienClick0_Actions)
endfunction

//===========================================================================
// Trigger: RepickAlienClick1
//===========================================================================
function Trig_RepickAlienClick1_Conditions takes nothing returns boolean
    if ( not ( GetClickedButtonBJ() == udg_RepickAlienDialogButton[1] ) ) then
        return false
    endif
    if ( not ( udg_RepickDialogToggled == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickAlienClick1_Actions takes nothing returns nothing
    set udg_RepickAlienDialogClicked=true
    call TriggerExecute(gg_trg_RepickAlienChoice)
endfunction

//===========================================================================
function InitTrig_RepickAlienClick1 takes nothing returns nothing
    set gg_trg_RepickAlienClick1=CreateTrigger()
    call TriggerRegisterDialogEventBJ(gg_trg_RepickAlienClick1, udg_RepickAlienDialog)
    call TriggerAddCondition(gg_trg_RepickAlienClick1, Condition(function Trig_RepickAlienClick1_Conditions))
    call TriggerAddAction(gg_trg_RepickAlienClick1, function Trig_RepickAlienClick1_Actions)
endfunction

//===========================================================================
// Trigger: RepickAlienChoice
//===========================================================================
function Trig_RepickAlienChoice_Func009C takes nothing returns boolean
    if ( not ( GetUnitTypeId(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]) == 'h00H' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickAlienChoice_Func011C takes nothing returns boolean
    if ( not ( udg_RepickAlienDialogClicked == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickAlienChoice_Actions takes nothing returns nothing
    // Remove the old alien's abilities etc etc
    call SetPlayerAllianceStateBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), udg_Parasite, bj_ALLIANCE_NEUTRAL)
    call UnitRemoveAbilityBJ('A02O', udg_Playerhero[GetConvertedPlayerId(udg_Parasite)])
    // Make the new alien
    // Pick a player who is human ((does this include android?!))
    set udg_TempPlayer=NoninfectedForcePickOne()
    set udg_Parasite=udg_TempPlayer
    call SetPlayerAllianceStateBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), udg_Parasite, bj_ALLIANCE_ALLIED_ADVUNITS)
    if ( Trig_RepickAlienChoice_Func009C() ) then
        call UnitAddAbilityBJ('A02O', udg_Playerhero[GetConvertedPlayerId(udg_Parasite)])
    else
    endif
    call DisplayTextToPlayer(udg_Parasite, 0, 0, "|cffFF0000You are now the alien. Seek out all enemies and destroy them.")
    if ( Trig_RepickAlienChoice_Func011C() ) then
        call ConditionalTriggerExecute(gg_trg_RepickAlien)
    else
    endif
endfunction

//===========================================================================
function InitTrig_RepickAlienChoice takes nothing returns nothing
    set gg_trg_RepickAlienChoice=CreateTrigger()
    call TriggerAddAction(gg_trg_RepickAlienChoice, function Trig_RepickAlienChoice_Actions)
endfunction

//===========================================================================
// Trigger: RepickMutant
//===========================================================================
function Trig_RepickMutant_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickMutant_Actions takes nothing returns nothing
    call DialogClearBJ(udg_RepickMutantDialog)
    call DialogSetMessageBJ(udg_RepickMutantDialog, "TRIGSTR_5319")
    call DialogAddButtonBJ(udg_RepickMutantDialog, "TRIGSTR_5320")
    set udg_RepickMutantDialogButton[0]=GetLastCreatedButtonBJ()
    call DialogAddButtonBJ(udg_RepickMutantDialog, "TRIGSTR_5321")
    set udg_RepickMutantDialogButton[1]=GetLastCreatedButtonBJ()
    call DialogDisplayBJ(true, udg_RepickMutantDialog, udg_Mutant)
endfunction

//===========================================================================
function InitTrig_RepickMutant takes nothing returns nothing
    set gg_trg_RepickMutant=CreateTrigger()
    call TriggerAddCondition(gg_trg_RepickMutant, Condition(function Trig_RepickMutant_Conditions))
    call TriggerAddAction(gg_trg_RepickMutant, function Trig_RepickMutant_Actions)
endfunction

//===========================================================================
// Trigger: RepickMutantClick0
//===========================================================================
function Trig_RepickMutantClick0_Conditions takes nothing returns boolean
    if ( not ( GetClickedButtonBJ() == udg_RepickMutantDialogButton[0] ) ) then
        return false
    endif
    if ( not ( udg_RepickDialogToggled == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickMutantClick0_Actions takes nothing returns nothing
    set udg_RepickMutantDialogClicked=true
endfunction

//===========================================================================
function InitTrig_RepickMutantClick0 takes nothing returns nothing
    set gg_trg_RepickMutantClick0=CreateTrigger()
    call TriggerRegisterDialogEventBJ(gg_trg_RepickMutantClick0, udg_RepickMutantDialog)
    call TriggerAddCondition(gg_trg_RepickMutantClick0, Condition(function Trig_RepickMutantClick0_Conditions))
    call TriggerAddAction(gg_trg_RepickMutantClick0, function Trig_RepickMutantClick0_Actions)
endfunction

//===========================================================================
// Trigger: RepickMutantClick1
//===========================================================================
function Trig_RepickMutantClick1_Conditions takes nothing returns boolean
    if ( not ( GetClickedButtonBJ() == udg_RepickMutantDialogButton[1] ) ) then
        return false
    endif
    if ( not ( udg_RepickDialogToggled == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickMutantClick1_Actions takes nothing returns nothing
    set udg_RepickMutantDialogClicked=true
    call TriggerExecute(gg_trg_RepickMutantChoice)
endfunction

//===========================================================================
function InitTrig_RepickMutantClick1 takes nothing returns nothing
    set gg_trg_RepickMutantClick1=CreateTrigger()
    call TriggerRegisterDialogEventBJ(gg_trg_RepickMutantClick1, udg_RepickMutantDialog)
    call TriggerAddCondition(gg_trg_RepickMutantClick1, Condition(function Trig_RepickMutantClick1_Conditions))
    call TriggerAddAction(gg_trg_RepickMutantClick1, function Trig_RepickMutantClick1_Actions)
endfunction

//===========================================================================
// Trigger: RepickMutantChoice
//===========================================================================
function Trig_RepickMutantChoice_Func003C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A05M', udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickMutantChoice_Func008C takes nothing returns boolean
    if ( not ( GetUnitTypeId(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) == 'h00H' ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickMutantChoice_Func010C takes nothing returns boolean
    if ( not ( udg_RepickMutantDialogClicked == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickMutantChoice_Actions takes nothing returns nothing
    // Make the new mutant
    // Remove the old mutant's abilities etc etc
    if ( Trig_RepickMutantChoice_Func003C() ) then
        call UnitRemoveAbilityBJ('A05M', udg_Playerhero[GetConvertedPlayerId(udg_Mutant)])
    else
    endif
    // Pick a player who is human ((does this include android?!))
    set udg_TempPlayer=NoninfectedForcePickOne()
    set udg_Mutant=udg_TempPlayer
    call CreateNUnitsAtLoc(1, 'e031', udg_Mutant, udg_HoldZone, bj_UNIT_FACING)
    if ( Trig_RepickMutantChoice_Func008C() ) then
        call UnitAddAbilityBJ('A05M', udg_Playerhero[GetConvertedPlayerId(udg_Mutant)])
    else
    endif
    call DisplayTextToPlayer(udg_Mutant, 0, 0, "|cffFF0000You are now the Mutant. Seek out all enemies and destroy them.")
    if ( Trig_RepickMutantChoice_Func010C() ) then
        call ConditionalTriggerExecute(gg_trg_RepickMutant)
    else
    endif
endfunction

//===========================================================================
function InitTrig_RepickMutantChoice takes nothing returns nothing
    set gg_trg_RepickMutantChoice=CreateTrigger()
    call TriggerAddAction(gg_trg_RepickMutantChoice, function Trig_RepickMutantChoice_Actions)
endfunction

//===========================================================================
// Trigger: RepickRogue
//===========================================================================
function Trig_RepickRogue_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickRogue_Actions takes nothing returns nothing
    call DialogClearBJ(udg_RepickRogueDialog)
    call DialogSetMessageBJ(udg_RepickRogueDialog, "TRIGSTR_5438")
    call DialogAddButtonBJ(udg_RepickRogueDialog, "TRIGSTR_5439")
    set udg_RepickRogueDialogButton[0]=GetLastCreatedButtonBJ()
    call DialogAddButtonBJ(udg_RepickRogueDialog, "TRIGSTR_5440")
    set udg_RepickRogueDialogButton[1]=GetLastCreatedButtonBJ()
    call DialogDisplayBJ(true, udg_RepickRogueDialog, udg_RogueAndroid)
endfunction

//===========================================================================
function InitTrig_RepickRogue takes nothing returns nothing
    set gg_trg_RepickRogue=CreateTrigger()
    call TriggerAddCondition(gg_trg_RepickRogue, Condition(function Trig_RepickRogue_Conditions))
    call TriggerAddAction(gg_trg_RepickRogue, function Trig_RepickRogue_Actions)
endfunction

//===========================================================================
// Trigger: RepickRogueClick0
//===========================================================================
function Trig_RepickRogueClick0_Conditions takes nothing returns boolean
    if ( not ( GetClickedButtonBJ() == udg_RepickRogueDialogButton[0] ) ) then
        return false
    endif
    if ( not ( udg_RepickDialogToggled == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickRogueClick0_Actions takes nothing returns nothing
    set udg_RepickRogueDialogClicked=true
endfunction

//===========================================================================
function InitTrig_RepickRogueClick0 takes nothing returns nothing
    set gg_trg_RepickRogueClick0=CreateTrigger()
    call TriggerRegisterDialogEventBJ(gg_trg_RepickRogueClick0, udg_RepickRogueDialog)
    call TriggerAddCondition(gg_trg_RepickRogueClick0, Condition(function Trig_RepickRogueClick0_Conditions))
    call TriggerAddAction(gg_trg_RepickRogueClick0, function Trig_RepickRogueClick0_Actions)
endfunction

//===========================================================================
// Trigger: RepickRogueClick1
//===========================================================================
function Trig_RepickRogueClick1_Conditions takes nothing returns boolean
    if ( not ( GetClickedButtonBJ() == udg_RepickRogueDialogButton[1] ) ) then
        return false
    endif
    if ( not ( udg_RepickDialogToggled == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickRogueClick1_Actions takes nothing returns nothing
    set udg_RepickRogueDialogClicked=true
    call TriggerExecute(gg_trg_RepickRogueChoice)
endfunction

//===========================================================================
function InitTrig_RepickRogueClick1 takes nothing returns nothing
    set gg_trg_RepickRogueClick1=CreateTrigger()
    call TriggerRegisterDialogEventBJ(gg_trg_RepickRogueClick1, udg_RepickRogueDialog)
    call TriggerAddCondition(gg_trg_RepickRogueClick1, Condition(function Trig_RepickRogueClick1_Conditions))
    call TriggerAddAction(gg_trg_RepickRogueClick1, function Trig_RepickRogueClick1_Actions)
endfunction

//===========================================================================
// Trigger: RepickRogueChoice
//===========================================================================
function Trig_RepickRogueChoice_Func010C takes nothing returns boolean
    if ( not ( udg_RepickRogueDialogClicked == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickRogueChoice_Actions takes nothing returns nothing
    // Remove the old rogue droid's abilities etc etc
    call UnitRemoveAbilityBJ('A0AI', (udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)])) // INLINED!!
    // Make the new rogue droid
    // Pick a player who is human
    set udg_TempPlayer=NoninfectedForcePickOne()
    set udg_RogueAndroid=udg_TempPlayer
    call UnitAddAbilityBJ('A0AI', (udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)])) // INLINED!!
    call CreateAlienCooldownRequirementsForPlayer(udg_RogueAndroid)
    call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffFF0000You are now the Cyborg. Seek out all enemies and destroy them.")
    if ( Trig_RepickRogueChoice_Func010C() ) then
        call ConditionalTriggerExecute(gg_trg_RepickRogue)
    else
    endif
endfunction

//===========================================================================
function InitTrig_RepickRogueChoice takes nothing returns nothing
    set gg_trg_RepickRogueChoice=CreateTrigger()
    call TriggerAddAction(gg_trg_RepickRogueChoice, function Trig_RepickRogueChoice_Actions)
endfunction

//===========================================================================
// Trigger: RepickDialogTimeout
//===========================================================================
function Trig_RepickDialogTimeout_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickDialogTimeout_Func004C takes nothing returns boolean
    if ( not ( udg_Allow_Parasite == true ) ) then
        return false
    endif
    if ( not ( udg_RepickAlienDialogClicked == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickDialogTimeout_Func005C takes nothing returns boolean
    if ( not ( udg_Allow_Mutant == true ) ) then
        return false
    endif
    if ( not ( udg_RepickMutantDialogClicked == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickDialogTimeout_Func006C takes nothing returns boolean
    if ( not ( udg_Allow_RogueAndroid == true ) ) then
        return false
    endif
    if ( not ( udg_RepickRogueDialogClicked == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_RepickDialogTimeout_Actions takes nothing returns nothing
    set udg_RepickDialogToggled=true
    if ( Trig_RepickDialogTimeout_Func004C() ) then
        call TriggerExecute(gg_trg_RepickAlienChoice)
    else
    endif
    if ( Trig_RepickDialogTimeout_Func005C() ) then
        call TriggerExecute(gg_trg_RepickMutantChoice)
    else
    endif
    if ( Trig_RepickDialogTimeout_Func006C() ) then
        call TriggerExecute(gg_trg_RepickRogueChoice)
    else
    endif
endfunction

//===========================================================================
function InitTrig_RepickDialogTimeout takes nothing returns nothing
    set gg_trg_RepickDialogTimeout=CreateTrigger()
    call TriggerRegisterTimerEventSingle(gg_trg_RepickDialogTimeout, 70.00)
    call TriggerAddCondition(gg_trg_RepickDialogTimeout, Condition(function Trig_RepickDialogTimeout_Conditions))
    call TriggerAddAction(gg_trg_RepickDialogTimeout, function Trig_RepickDialogTimeout_Actions)
endfunction

//===========================================================================
// Trigger: BadSpawns
//
// -liquidate (color) Destroys spawn of color.
//===========================================================================
//TESH.scrollpos=7
//TESH.alwaysfold=0
function Trig_BadSpawns_Conditions takes nothing returns boolean
    if ( not ( SubStringBJ(GetEventPlayerChatString(), 1, 10) == "-liquidate" or SubStringBJ(GetEventPlayerChatString(), 1, 2) == "-l" ) ) then
        return false
    endif
    return true
endfunction

function Trig_BadSpawns_Actions takes nothing returns nothing

    call ExecuteFunc("ClearArguments")
    call ExecuteFunc("ParseEnteredString")
    
    if not ( HaveSavedInteger((udg_hash), GetHandleId(gg_trg_ChatGroupBroadcast), StringHash(udg_arguments[2])) ) then // INLINED!!
        return
    endif
    
    set udg_TempInt=LoadInteger((udg_hash), GetHandleId(gg_trg_ChatGroupBroadcast), StringHash(udg_arguments[2])) // INLINED!!
    
    if ( udg_TempInt != 0 ) then
    
        //If Alien Master and Spawn slot exists
        if ( udg_Parasite == GetTriggerPlayer() and udg_Player_IsParasiteSpawn[udg_TempInt] == true ) then
            //call KillUnit( udg_Playerhero[udg_TempInt] )
            call DialogClearBJ(udg_Liquidate_AreYouSureAlien)
            call DialogSetMessageBJ(udg_Liquidate_AreYouSureAlien, ( "Are you sure you wish to liquidate " + ( udg_ColorCode[udg_TempInt] + ( GetPlayerName(ConvertedPlayer(udg_TempInt)) + "|r?" ) ) ))
            call DialogAddButtonBJ(udg_Liquidate_AreYouSureAlien, "TRIGSTR_2556")
            set udg_Liquidate_AreYouSureButtonAl[1]=GetLastCreatedButtonBJ()
            call DialogAddButtonBJ(udg_Liquidate_AreYouSureAlien, "TRIGSTR_2557")
            set udg_Liquidate_AreYouSureButtonAl[2]=GetLastCreatedButtonBJ()
            set udg_Liquidate_ToLiquidateAlien=udg_TempInt
            call DialogDisplayBJ(true, udg_Liquidate_AreYouSureAlien, udg_Parasite)
        endif
        
        //If Mutant Overlord, and Spawn slot exists
        if ( udg_Mutant == GetTriggerPlayer() and udg_Player_IsMutantSpawn[udg_TempInt] == true ) then
            //call KillUnit( udg_Playerhero[udg_TempInt] )
            call DialogClearBJ(udg_Liquidate_AreYouSureMutant)
            call DialogSetMessageBJ(udg_Liquidate_AreYouSureMutant, ( "Are you sure you wish to liquidate " + ( udg_ColorCode[udg_TempInt] + ( GetPlayerName(ConvertedPlayer(udg_TempInt)) + "|r?" ) ) ))
            call DialogAddButtonBJ(udg_Liquidate_AreYouSureMutant, "TRIGSTR_2556")
            set udg_Liquidate_AreYouSureButtonMut[1]=GetLastCreatedButtonBJ()
            call DialogAddButtonBJ(udg_Liquidate_AreYouSureMutant, "TRIGSTR_2557")
            set udg_Liquidate_AreYouSureButtonMut[2]=GetLastCreatedButtonBJ()
            set udg_Liquidate_ToLiquidateMutant=udg_TempInt
            call DialogDisplayBJ(true, udg_Liquidate_AreYouSureMutant, udg_Mutant)
        endif
        
        //If Mutant Overlord, and Spawn slot exists
        if ( udg_RogueAndroid == GetTriggerPlayer() and udg_Player_IsRogueAndroidSpawn[udg_TempInt] == true ) then
            //call KillUnit( udg_Playerhero[udg_TempInt] )
            call DialogClearBJ(udg_Liquidate_AreYouSureRogue)
            call DialogSetMessageBJ(udg_Liquidate_AreYouSureRogue, ( "Are you sure you wish to liquidate " + ( udg_ColorCode[udg_TempInt] + ( GetPlayerName(ConvertedPlayer(udg_TempInt)) + "|r?" ) ) ))
            call DialogAddButtonBJ(udg_Liquidate_AreYouSureRogue, "TRIGSTR_2556")
            set udg_Liquidate_AreYouSureButtonRog[1]=GetLastCreatedButtonBJ()
            call DialogAddButtonBJ(udg_Liquidate_AreYouSureRogue, "TRIGSTR_2557")
            set udg_Liquidate_AreYouSureButtonRog[2]=GetLastCreatedButtonBJ()
            set udg_Liquidate_ToLiquidateRogue=udg_TempInt
            call DialogDisplayBJ(true, udg_Liquidate_AreYouSureRogue, udg_RogueAndroid)
        endif

    endif
endfunction

//===========================================================================
function InitTrig_BadSpawns takes nothing returns nothing
local integer i=0
    set gg_trg_BadSpawns=CreateTrigger()
    loop
    exitwhen i > 11
    call TriggerRegisterPlayerChatEvent(gg_trg_BadSpawns, Player(i), "-liquidate ", false)
        call TriggerRegisterPlayerChatEvent(gg_trg_BadSpawns, Player(i), "-l ", false)
    set i=i + 1
    endloop
    call TriggerAddCondition(gg_trg_BadSpawns, Condition(function Trig_BadSpawns_Conditions))
    call TriggerAddAction(gg_trg_BadSpawns, function Trig_BadSpawns_Actions)
endfunction


//===========================================================================
// Trigger: Allow
//===========================================================================
function Trig_Allow_Func013C takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_Allow_Func014C takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_Allow_Func015C takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_RogueAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Allow_Actions takes nothing returns nothing
    if ( Trig_Allow_Func013C() ) then
        set udg_AllowMutantTK=true
        call DisableTrigger(gg_trg_NoMutantTK)
        call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "Your spawns may now attack you.")
    else
    endif
    if ( Trig_Allow_Func014C() ) then
        set udg_AllowAlienTK=true
        call DisableTrigger(gg_trg_NoAlienTK)
        call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "Your spawns may now attack you.")
    else
    endif
    if ( Trig_Allow_Func015C() ) then
        set udg_AllowRogueAndroidTK=true
        call DisableTrigger(gg_trg_NoCyborgTK)
        call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "Your spawns may now attack you.")
    else
    endif
endfunction

//===========================================================================
function InitTrig_Allow takes nothing returns nothing
    set gg_trg_Allow=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_Allow, Player(0), "-allow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Allow, Player(1), "-allow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Allow, Player(2), "-allow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Allow, Player(3), "-allow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Allow, Player(4), "-allow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Allow, Player(5), "-allow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Allow, Player(6), "-allow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Allow, Player(7), "-allow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Allow, Player(8), "-allow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Allow, Player(9), "-allow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Allow, Player(10), "-allow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Allow, Player(11), "-allow", true)
    call TriggerAddAction(gg_trg_Allow, function Trig_Allow_Actions)
endfunction

//===========================================================================
// Trigger: Disallow
//===========================================================================
function Trig_Disallow_Func013C takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_Mutant ) ) then
        return false
    endif
    return true
endfunction

function Trig_Disallow_Func014C takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_Parasite ) ) then
        return false
    endif
    return true
endfunction

function Trig_Disallow_Func015C takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_RogueAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Disallow_Actions takes nothing returns nothing
    if ( Trig_Disallow_Func013C() ) then
        set udg_AllowMutantTK=false
        call EnableTrigger(gg_trg_NoMutantTK)
        call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "Your spawns may no longer attack you.")
    else
    endif
    if ( Trig_Disallow_Func014C() ) then
        set udg_AllowAlienTK=false
        call EnableTrigger(gg_trg_NoAlienTK)
        call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "Your spawns may no longer attack you.")
    else
    endif
    if ( Trig_Disallow_Func015C() ) then
        set udg_AllowRogueAndroidTK=false
        call EnableTrigger(gg_trg_NoCyborgTK)
        call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "Your spawns may no longer attack you.")
    else
    endif
endfunction

//===========================================================================
function InitTrig_Disallow takes nothing returns nothing
    set gg_trg_Disallow=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_Disallow, Player(0), "-disallow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Disallow, Player(1), "-disallow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Disallow, Player(2), "-disallow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Disallow, Player(3), "-disallow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Disallow, Player(4), "-disallow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Disallow, Player(5), "-disallow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Disallow, Player(6), "-disallow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Disallow, Player(7), "-disallow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Disallow, Player(8), "-disallow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Disallow, Player(9), "-disallow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Disallow, Player(10), "-disallow", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Disallow, Player(11), "-disallow", true)
    call TriggerAddAction(gg_trg_Disallow, function Trig_Disallow_Actions)
endfunction

//===========================================================================
// Trigger: NoMutantTK
//===========================================================================
function Trig_NoMutantTK_Func002Func003Func002C takes nothing returns boolean
    if ( ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(udg_EscapePod_Owner[GetUnitUserData(GetAttackedUnitBJ())])] == true ) ) then
        return true
    endif
    if ( ( udg_EscapePod_Owner[GetUnitUserData(GetAttackedUnitBJ())] == udg_Mutant ) ) then
        return true
    endif
    return false
endfunction

function Trig_NoMutantTK_Func002Func003C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetAttackedUnitBJ()) == 'h02P' ) ) then
        return false
    endif
    if ( not Trig_NoMutantTK_Func002Func003Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_NoMutantTK_Func002C takes nothing returns boolean
    if ( ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetAttackedUnitBJ()))] == true ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetAttackedUnitBJ()) == udg_Mutant ) ) then
        return true
    endif
    if ( Trig_NoMutantTK_Func002Func003C() ) then
        return true
    endif
    return false
endfunction

function Trig_NoMutantTK_Conditions takes nothing returns boolean
    if ( not ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
        return false
    endif
    if ( not Trig_NoMutantTK_Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_NoMutantTK_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(GetAttacker(), "stop")
    call DisplayTimedTextToPlayer(GetOwningPlayer(GetAttacker()), 0, 0, 30, "|cffFF0000You cannot attack your fellow mutant!|r")
endfunction

//===========================================================================
function InitTrig_NoMutantTK takes nothing returns nothing
    set gg_trg_NoMutantTK=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_NoMutantTK, EVENT_PLAYER_UNIT_ATTACKED)
    call TriggerAddCondition(gg_trg_NoMutantTK, Condition(function Trig_NoMutantTK_Conditions))
    call TriggerAddAction(gg_trg_NoMutantTK, function Trig_NoMutantTK_Actions)
endfunction

//===========================================================================
// Trigger: ListMutants
//===========================================================================
function Trig_ListMutants_Func001C takes nothing returns boolean
    if ( ( udg_Mutant == GetTriggerPlayer() ) ) then
        return true
    endif
    if ( ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetTriggerPlayer())] == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_ListMutants_Conditions takes nothing returns boolean
    if ( not Trig_ListMutants_Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_ListMutants_Func015Func001Func002C takes nothing returns boolean
    if ( not ( IsPlayerInForce(GetEnumPlayer(), udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ListMutants_Func015Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsMutantSpawn[GetForLoopIndexA()] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ListMutants_Func015Func002Func002C takes nothing returns boolean
    if ( not ( IsPlayerInForce(GetEnumPlayer(), udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ListMutants_Func015Func002C takes nothing returns boolean
    if ( not ( udg_Mutant == ConvertedPlayer(GetForLoopIndexA()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ListMutants_Actions takes nothing returns nothing
    set udg_TempPlayerGroup=GetForceOfPlayer(GetTriggerPlayer())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=12
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_ListMutants_Func015Func001C() ) then
            call DisplayTimedTextToPlayer(GetTriggerPlayer(), 0, 0, 30, udg_ColorCode[GetForLoopIndexA()] + GetPlayerName(ConvertedPlayer(GetForLoopIndexA())) + "|r (|cffffcc00Spawn|r)")
            if ( Trig_ListMutants_Func015Func001Func002C() ) then
                set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetForLoopIndexA()])
                call PingMinimapLocForForceEx(udg_TempPlayerGroup, udg_TempPoint, 5.00, bj_MINIMAPPINGSTYLE_SIMPLE, ( I2R(udg_ColorCodesRed[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ), ( I2R(udg_ColorCodesGreen[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ), ( I2R(udg_ColorCodesBlue[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ))
                call RemoveLocation(udg_TempPoint)
            else
            endif
        else
        endif
        if ( Trig_ListMutants_Func015Func002C() ) then
            call DisplayTimedTextToPlayer(GetTriggerPlayer(), 0, 0, 30, udg_ColorCode[GetForLoopIndexA()] + GetPlayerName(ConvertedPlayer(GetForLoopIndexA())) + "|r (|cffffcc00Overlord|r)")
            if ( Trig_ListMutants_Func015Func002Func002C() ) then
                set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetForLoopIndexA()])
                call PingMinimapLocForForceEx(udg_TempPlayerGroup, udg_TempPoint, 5.00, bj_MINIMAPPINGSTYLE_SIMPLE, ( I2R(udg_ColorCodesRed[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ), ( I2R(udg_ColorCodesGreen[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ), ( I2R(udg_ColorCodesBlue[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ))
                call RemoveLocation(udg_TempPoint)
            else
            endif
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call DestroyForce(udg_TempPlayerGroup)
endfunction

//===========================================================================
function InitTrig_ListMutants takes nothing returns nothing
    set gg_trg_ListMutants=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_ListMutants, Player(0), "-listmutants", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListMutants, Player(1), "-listmutants", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListMutants, Player(2), "-listmutants", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListMutants, Player(3), "-listmutants", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListMutants, Player(4), "-listmutants", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListMutants, Player(5), "-listmutants", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListMutants, Player(6), "-listmutants", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListMutants, Player(7), "-listmutants", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListMutants, Player(8), "-listmutants", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListMutants, Player(9), "-listmutants", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListMutants, Player(10), "-listmutants", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListMutants, Player(11), "-listmutants", true)
    call TriggerAddCondition(gg_trg_ListMutants, Condition(function Trig_ListMutants_Conditions))
    call TriggerAddAction(gg_trg_ListMutants, function Trig_ListMutants_Actions)
endfunction

//===========================================================================
// Trigger: LiquidateDialogAlien
//===========================================================================
function Trig_LiquidateDialogAlien_Func002C takes nothing returns boolean
    if ( not ( GetClickedButtonBJ() == udg_Liquidate_AreYouSureButtonAl[2] ) ) then
        return false
    endif
    return true
endfunction

function Trig_LiquidateDialogAlien_Actions takes nothing returns nothing
    if ( Trig_LiquidateDialogAlien_Func002C() ) then
        call KillUnit(udg_Playerhero[udg_Liquidate_ToLiquidateAlien])
    else
    endif
endfunction

//===========================================================================
function InitTrig_LiquidateDialogAlien takes nothing returns nothing
    set gg_trg_LiquidateDialogAlien=CreateTrigger()
    call TriggerRegisterDialogEventBJ(gg_trg_LiquidateDialogAlien, udg_Liquidate_AreYouSureAlien)
    call TriggerAddAction(gg_trg_LiquidateDialogAlien, function Trig_LiquidateDialogAlien_Actions)
endfunction

//===========================================================================
// Trigger: NoAlienTK
//===========================================================================
function Trig_NoAlienTK_Func002Func002C takes nothing returns boolean
    if ( ( GetOwningPlayer(GetAttackedUnitBJ()) == udg_Parasite ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetAttackedUnitBJ()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return true
    endif
    return false
endfunction

function Trig_NoAlienTK_Func002Func003Func002C takes nothing returns boolean
    if ( ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(udg_EscapePod_Owner[GetUnitUserData(GetAttackedUnitBJ())])] == true ) ) then
        return true
    endif
    if ( ( udg_EscapePod_Owner[GetUnitUserData(GetAttackedUnitBJ())] == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return true
    endif
    if ( ( udg_EscapePod_Owner[GetUnitUserData(GetAttackedUnitBJ())] == udg_Parasite ) ) then
        return true
    endif
    return false
endfunction

function Trig_NoAlienTK_Func002Func003C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetAttackedUnitBJ()) == 'h02P' ) ) then
        return false
    endif
    if ( not Trig_NoAlienTK_Func002Func003Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_NoAlienTK_Func002C takes nothing returns boolean
    if ( ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(GetAttackedUnitBJ()))] == true ) ) then
        return true
    endif
    if ( Trig_NoAlienTK_Func002Func002C() ) then
        return true
    endif
    if ( Trig_NoAlienTK_Func002Func003C() ) then
        return true
    endif
    return false
endfunction

function Trig_NoAlienTK_Conditions takes nothing returns boolean
    if ( not ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
        return false
    endif
    if ( not Trig_NoAlienTK_Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_NoAlienTK_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(GetAttacker(), "stop")
    call DisplayTimedTextToPlayer(GetOwningPlayer(GetAttacker()), 0, 0, 30, "|cffFF0000You cannot attack your fellow alien!|r")
endfunction

//===========================================================================
function InitTrig_NoAlienTK takes nothing returns nothing
    set gg_trg_NoAlienTK=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_NoAlienTK, EVENT_PLAYER_UNIT_ATTACKED)
    call TriggerAddCondition(gg_trg_NoAlienTK, Condition(function Trig_NoAlienTK_Conditions))
    call TriggerAddAction(gg_trg_NoAlienTK, function Trig_NoAlienTK_Actions)
endfunction

//===========================================================================
// Trigger: ListAliens
//===========================================================================
function Trig_ListAliens_Func001C takes nothing returns boolean
    if ( ( udg_Parasite == GetTriggerPlayer() ) ) then
        return true
    endif
    if ( ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetTriggerPlayer())] == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_ListAliens_Conditions takes nothing returns boolean
    if ( not Trig_ListAliens_Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_ListAliens_Func015Func001Func002C takes nothing returns boolean
    if ( not ( IsPlayerInForce(GetEnumPlayer(), udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ListAliens_Func015Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsParasiteSpawn[GetForLoopIndexA()] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ListAliens_Func015Func002Func002C takes nothing returns boolean
    if ( not ( IsPlayerInForce(GetEnumPlayer(), udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ListAliens_Func015Func002C takes nothing returns boolean
    if ( not ( udg_Parasite == ConvertedPlayer(GetForLoopIndexA()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ListAliens_Actions takes nothing returns nothing
    set udg_TempPlayerGroup=GetForceOfPlayer(GetTriggerPlayer())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=12
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_ListAliens_Func015Func001C() ) then
            call DisplayTimedTextToPlayer(GetTriggerPlayer(), 0, 0, 30, udg_ColorCode[GetForLoopIndexA()] + GetPlayerName(ConvertedPlayer(GetForLoopIndexA())) + "|r (|cffffcc00Spawn|r)")
            if ( Trig_ListAliens_Func015Func001Func002C() ) then
                set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetForLoopIndexA()])
                call PingMinimapLocForForceEx(udg_TempPlayerGroup, udg_TempPoint, 5.00, bj_MINIMAPPINGSTYLE_SIMPLE, ( I2R(udg_ColorCodesRed[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ), ( I2R(udg_ColorCodesGreen[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ), ( I2R(udg_ColorCodesBlue[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ))
                call RemoveLocation(udg_TempPoint)
            else
            endif
        else
        endif
        if ( Trig_ListAliens_Func015Func002C() ) then
            call DisplayTimedTextToPlayer(GetTriggerPlayer(), 0, 0, 30, udg_ColorCode[GetForLoopIndexA()] + GetPlayerName(ConvertedPlayer(GetForLoopIndexA())) + "|r (|cffffcc00Overlord|r)")
            if ( Trig_ListAliens_Func015Func002Func002C() ) then
                set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetForLoopIndexA()])
                call PingMinimapLocForForceEx(udg_TempPlayerGroup, udg_TempPoint, 5.00, bj_MINIMAPPINGSTYLE_SIMPLE, ( I2R(udg_ColorCodesRed[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ), ( I2R(udg_ColorCodesGreen[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ), ( I2R(udg_ColorCodesBlue[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ))
                call RemoveLocation(udg_TempPoint)
            else
            endif
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call DestroyForce(udg_TempPlayerGroup)
endfunction

//===========================================================================
function InitTrig_ListAliens takes nothing returns nothing
    set gg_trg_ListAliens=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_ListAliens, Player(0), "-listaliens", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListAliens, Player(1), "-listaliens", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListAliens, Player(2), "-listaliens", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListAliens, Player(3), "-listaliens", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListAliens, Player(4), "-listaliens", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListAliens, Player(5), "-listaliens", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListAliens, Player(6), "-listaliens", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListAliens, Player(7), "-listaliens", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListAliens, Player(8), "-listaliens", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListAliens, Player(9), "-listaliens", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListAliens, Player(10), "-listaliens", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListAliens, Player(11), "-listaliens", true)
    call TriggerAddCondition(gg_trg_ListAliens, Condition(function Trig_ListAliens_Conditions))
    call TriggerAddAction(gg_trg_ListAliens, function Trig_ListAliens_Actions)
endfunction

//===========================================================================
// Trigger: LiquidateDialogMutant
//===========================================================================
function Trig_LiquidateDialogMutant_Func002C takes nothing returns boolean
    if ( not ( GetClickedButtonBJ() == udg_Liquidate_AreYouSureButtonMut[2] ) ) then
        return false
    endif
    return true
endfunction

function Trig_LiquidateDialogMutant_Actions takes nothing returns nothing
    if ( Trig_LiquidateDialogMutant_Func002C() ) then
        call KillUnit(udg_Playerhero[udg_Liquidate_ToLiquidateMutant])
    else
    endif
endfunction

//===========================================================================
function InitTrig_LiquidateDialogMutant takes nothing returns nothing
    set gg_trg_LiquidateDialogMutant=CreateTrigger()
    call TriggerRegisterDialogEventBJ(gg_trg_LiquidateDialogMutant, udg_Liquidate_AreYouSureMutant)
    call TriggerAddAction(gg_trg_LiquidateDialogMutant, function Trig_LiquidateDialogMutant_Actions)
endfunction

//===========================================================================
// Trigger: NoCyborgTK
//===========================================================================
function Trig_NoCyborgTK_Func002Func003Func002C takes nothing returns boolean
    if ( ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(udg_EscapePod_Owner[GetUnitUserData(GetAttackedUnitBJ())])] == true ) ) then
        return true
    endif
    if ( ( udg_EscapePod_Owner[GetUnitUserData(GetAttackedUnitBJ())] == udg_RogueAndroid ) ) then
        return true
    endif
    return false
endfunction

function Trig_NoCyborgTK_Func002Func003C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetAttackedUnitBJ()) == 'h02P' ) ) then
        return false
    endif
    if ( not Trig_NoCyborgTK_Func002Func003Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_NoCyborgTK_Func002C takes nothing returns boolean
    if ( ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetOwningPlayer(GetAttackedUnitBJ()))] == true ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetAttackedUnitBJ()) == udg_RogueAndroid ) ) then
        return true
    endif
    if ( Trig_NoCyborgTK_Func002Func003C() ) then
        return true
    endif
    return false
endfunction

function Trig_NoCyborgTK_Conditions takes nothing returns boolean
    if ( not ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetOwningPlayer(GetAttacker()))] == true ) ) then
        return false
    endif
    if ( not Trig_NoCyborgTK_Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_NoCyborgTK_Actions takes nothing returns nothing
    call IssueImmediateOrderBJ(GetAttacker(), "stop")
    call DisplayTimedTextToPlayer(GetOwningPlayer(GetAttacker()), 0, 0, 30, "|cffFF0000You cannot attack your fellow Cyborg!|r")
endfunction

//===========================================================================
function InitTrig_NoCyborgTK takes nothing returns nothing
    set gg_trg_NoCyborgTK=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_NoCyborgTK, EVENT_PLAYER_UNIT_ATTACKED)
    call TriggerAddCondition(gg_trg_NoCyborgTK, Condition(function Trig_NoCyborgTK_Conditions))
    call TriggerAddAction(gg_trg_NoCyborgTK, function Trig_NoCyborgTK_Actions)
endfunction

//===========================================================================
// Trigger: ListCyborgs
//===========================================================================
function Trig_ListCyborgs_Func001C takes nothing returns boolean
    if ( ( udg_RogueAndroid == GetTriggerPlayer() ) ) then
        return true
    endif
    if ( ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetTriggerPlayer())] == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_ListCyborgs_Conditions takes nothing returns boolean
    if ( not Trig_ListCyborgs_Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_ListCyborgs_Func015Func001Func002C takes nothing returns boolean
    if ( not ( IsPlayerInForce(GetEnumPlayer(), udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ListCyborgs_Func015Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsRogueAndroidSpawn[GetForLoopIndexA()] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ListCyborgs_Func015Func002Func002C takes nothing returns boolean
    if ( not ( IsPlayerInForce(GetEnumPlayer(), udg_DeadGroup) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ListCyborgs_Func015Func002C takes nothing returns boolean
    if ( not ( udg_RogueAndroid == ConvertedPlayer(GetForLoopIndexA()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ListCyborgs_Actions takes nothing returns nothing
    set udg_TempPlayerGroup=GetForceOfPlayer(GetTriggerPlayer())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=12
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_ListCyborgs_Func015Func001C() ) then
            call DisplayTimedTextToPlayer(GetTriggerPlayer(), 0, 0, 30, udg_ColorCode[GetForLoopIndexA()] + GetPlayerName(ConvertedPlayer(GetForLoopIndexA())) + "|r (|cffffcc00Spawn|r)")
            if ( Trig_ListCyborgs_Func015Func001Func002C() ) then
                set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetForLoopIndexA()])
                call PingMinimapLocForForceEx(udg_TempPlayerGroup, udg_TempPoint, 5.00, bj_MINIMAPPINGSTYLE_SIMPLE, ( I2R(udg_ColorCodesRed[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ), ( I2R(udg_ColorCodesGreen[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ), ( I2R(udg_ColorCodesBlue[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ))
                call RemoveLocation(udg_TempPoint)
            else
            endif
        else
        endif
        if ( Trig_ListCyborgs_Func015Func002C() ) then
            call DisplayTimedTextToPlayer(GetTriggerPlayer(), 0, 0, 30, udg_ColorCode[GetForLoopIndexA()] + GetPlayerName(ConvertedPlayer(GetForLoopIndexA())) + "|r (|cffffcc00Overlord|r)")
            if ( Trig_ListCyborgs_Func015Func002Func002C() ) then
                set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetForLoopIndexA()])
                call PingMinimapLocForForceEx(udg_TempPlayerGroup, udg_TempPoint, 5.00, bj_MINIMAPPINGSTYLE_SIMPLE, ( I2R(udg_ColorCodesRed[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ), ( I2R(udg_ColorCodesGreen[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ), ( I2R(udg_ColorCodesBlue[( GetConvertedPlayerId(GetEnumPlayer()) - 1 )]) / 2.55 ))
                call RemoveLocation(udg_TempPoint)
            else
            endif
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call DestroyForce(udg_TempPlayerGroup)
endfunction

//===========================================================================
function InitTrig_ListCyborgs takes nothing returns nothing
    set gg_trg_ListCyborgs=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_ListCyborgs, Player(0), "-listcyborgs", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListCyborgs, Player(1), "-listcyborgs", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListCyborgs, Player(2), "-listcyborgs", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListCyborgs, Player(3), "-listcyborgs", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListCyborgs, Player(4), "-listcyborgs", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListCyborgs, Player(5), "-listcyborgs", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListCyborgs, Player(6), "-listcyborgs", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListCyborgs, Player(7), "-listcyborgs", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListCyborgs, Player(8), "-listcyborgs", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListCyborgs, Player(9), "-listcyborgs", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListCyborgs, Player(10), "-listcyborgs", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_ListCyborgs, Player(11), "-listcyborgs", true)
    call TriggerAddCondition(gg_trg_ListCyborgs, Condition(function Trig_ListCyborgs_Conditions))
    call TriggerAddAction(gg_trg_ListCyborgs, function Trig_ListCyborgs_Actions)
endfunction

//===========================================================================
// Trigger: LiquidateDialogCyborg
//===========================================================================
function Trig_LiquidateDialogCyborg_Func002C takes nothing returns boolean
    if ( not ( GetClickedButtonBJ() == udg_Liquidate_AreYouSureButtonRog[2] ) ) then
        return false
    endif
    return true
endfunction

function Trig_LiquidateDialogCyborg_Actions takes nothing returns nothing
    if ( Trig_LiquidateDialogCyborg_Func002C() ) then
        call KillUnit(udg_Playerhero[udg_Liquidate_ToLiquidateRogue])
    else
    endif
endfunction

//===========================================================================
function InitTrig_LiquidateDialogCyborg takes nothing returns nothing
    set gg_trg_LiquidateDialogCyborg=CreateTrigger()
    call TriggerRegisterDialogEventBJ(gg_trg_LiquidateDialogCyborg, udg_Liquidate_AreYouSureRogue)
    call TriggerAddAction(gg_trg_LiquidateDialogCyborg, function Trig_LiquidateDialogCyborg_Actions)
endfunction

//===========================================================================
// Trigger: MutantUpgrade
//===========================================================================
function Trig_MutantUpgrade_Conditions takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_Mutant ) ) then
        return false
    endif
    if ( not ( udg_MutantIsUpgrading == false ) ) then
        return false
    endif
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgrade_Func017Func006Func001Func001C takes nothing returns boolean
    if ( not ( GetUnitTypeId(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) == 'h01B' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgrade_Func017Func006Func001Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) == 'h01I' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgrade_Func017Func006Func001Func003C takes nothing returns boolean
    if ( not ( GetUnitTypeId(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) == 'h01O' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgrade_Func017Func006Func001Func004C takes nothing returns boolean
    if ( not ( GetUnitTypeId(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) == 'h01E' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgrade_Func017Func006Func001C takes nothing returns boolean
    if ( not ( udg_MutantUpgradeLevel == 2 ) ) then
        return false
    endif
    if ( not ( udg_UpgradePointsMutant >= 1800.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgrade_Func017Func006Func002C takes nothing returns boolean
    if ( not ( GetUnitTypeId(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) == 'h00V' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgrade_Func017Func006C takes nothing returns boolean
    if ( not ( udg_MutantUpgradeLevel == 1 ) ) then
        return false
    endif
    if ( not ( udg_UpgradePointsMutant >= 900.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgrade_Func017C takes nothing returns boolean
    if ( not ( udg_MutantUpgradeLevel == 0 ) ) then
        return false
    endif
    if ( not ( udg_UpgradePointsMutant >= 300.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgrade_Actions takes nothing returns nothing
    call RemoveUnit(udg_Mutant_EvoSelector)
    if ( Trig_MutantUpgrade_Func017C() ) then
        set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])
        call CreateNUnitsAtLoc(1, 'e02A', udg_Mutant, udg_TempPoint, bj_UNIT_FACING)
        set udg_Mutant_EvoSelector=GetLastCreatedUnit()
        call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_Mutant)
        call RemoveLocation(udg_TempPoint)
    else
        if ( Trig_MutantUpgrade_Func017Func006C() ) then
            if ( Trig_MutantUpgrade_Func017Func006Func002C() ) then
                set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])
                call CreateNUnitsAtLoc(1, 'e02C', udg_Mutant, udg_TempPoint, bj_UNIT_FACING)
                set udg_Mutant_EvoSelector=GetLastCreatedUnit()
                call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_Mutant)
                call RemoveLocation(udg_TempPoint)
            else
                set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])
                call CreateNUnitsAtLoc(1, 'e02B', udg_Mutant, udg_TempPoint, bj_UNIT_FACING)
                set udg_Mutant_EvoSelector=GetLastCreatedUnit()
                call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_Mutant)
                call RemoveLocation(udg_TempPoint)
            endif
        else
            if ( Trig_MutantUpgrade_Func017Func006Func001C() ) then
                if ( Trig_MutantUpgrade_Func017Func006Func001Func001C() ) then
                    set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])
                    call CreateNUnitsAtLoc(1, 'e02F', udg_Mutant, udg_TempPoint, bj_UNIT_FACING)
                    set udg_Mutant_EvoSelector=GetLastCreatedUnit()
                    call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_Mutant)
                    call RemoveLocation(udg_TempPoint)
                else
                endif
                if ( Trig_MutantUpgrade_Func017Func006Func001Func002C() ) then
                    set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])
                    call CreateNUnitsAtLoc(1, 'e02D', udg_Mutant, udg_TempPoint, bj_UNIT_FACING)
                    set udg_Mutant_EvoSelector=GetLastCreatedUnit()
                    call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_Mutant)
                    call RemoveLocation(udg_TempPoint)
                else
                endif
                if ( Trig_MutantUpgrade_Func017Func006Func001Func003C() ) then
                    set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])
                    call CreateNUnitsAtLoc(1, 'e02E', udg_Mutant, udg_TempPoint, bj_UNIT_FACING)
                    set udg_Mutant_EvoSelector=GetLastCreatedUnit()
                    call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_Mutant)
                    call RemoveLocation(udg_TempPoint)
                else
                endif
                if ( Trig_MutantUpgrade_Func017Func006Func001Func004C() ) then
                    set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])
                    call CreateNUnitsAtLoc(1, 'e02G', udg_Mutant, udg_TempPoint, bj_UNIT_FACING)
                    set udg_Mutant_EvoSelector=GetLastCreatedUnit()
                    call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_Mutant)
                    call RemoveLocation(udg_TempPoint)
                else
                endif
            else
            endif
        endif
    endif
    // Trigger - Turn on Infinite Mutant bugfix <gen>
endfunction

//===========================================================================
function InitTrig_MutantUpgrade takes nothing returns nothing
    set gg_trg_MutantUpgrade=CreateTrigger()
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_MutantUpgrade, Player(0))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_MutantUpgrade, Player(1))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_MutantUpgrade, Player(2))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_MutantUpgrade, Player(3))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_MutantUpgrade, Player(4))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_MutantUpgrade, Player(5))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_MutantUpgrade, Player(6))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_MutantUpgrade, Player(7))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_MutantUpgrade, Player(8))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_MutantUpgrade, Player(9))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_MutantUpgrade, Player(10))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_MutantUpgrade, Player(11))
    call TriggerAddCondition(gg_trg_MutantUpgrade, Condition(function Trig_MutantUpgrade_Conditions))
    call TriggerAddAction(gg_trg_MutantUpgrade, function Trig_MutantUpgrade_Actions)
endfunction

//===========================================================================
// Trigger: MutantDialog
//===========================================================================
function Trig_MutantDialog_Conditions takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A078', GetTriggerUnit()) == 1 ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetTriggerUnit()) == udg_Mutant ) ) then
        return false
    endif
    if ( not ( RectContainsUnit(gg_rct_Timeout, udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantDialog_Func005C takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) != true ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantDialog_Func026C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A046', udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) >= 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantDialog_Func030002001 takes nothing returns boolean
    return ( GetFilterPlayer() != udg_Mutant )
endfunction

function Trig_MutantDialog_Func033Func001C takes nothing returns boolean
    if ( not ( udg_IsNiffyLockdownActive == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantDialog_Func033C takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantDialog_Actions takes nothing returns nothing
    if ( Trig_MutantDialog_Func005C() ) then
        call RemoveUnit(GetTrainedUnit())
        return
    else
    endif
    set udg_MutantIsUpgrading=true
    set udg_MutantUpgradeLevel=( udg_MutantUpgradeLevel + 1 )
    set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)])
    set udg_MutantUpgradingTo=GetUnitTypeId(GetTrainedUnit())
    call UnitAddAbilityBJ('Avul', udg_Playerhero[GetConvertedPlayerId(udg_Mutant)])
    call PauseUnitBJ(true, udg_Playerhero[GetConvertedPlayerId(udg_Mutant)])
    call SetUnitOwner(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)], Player(PLAYER_NEUTRAL_PASSIVE), true)
    set udg_MutantUpgrade_Health=GetUnitLifePercent(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)])
    call RemoveUnit(udg_Mutant_EvoSelector)
    call RemoveUnit(GetTrainedUnit())
    call CreateNUnitsAtLoc(1, 'h00T', udg_Mutant, udg_TempPoint, bj_UNIT_FACING)
    call UnitAddAbilityBJ('A07E', udg_Playerhero[GetConvertedPlayerId(udg_Mutant)])
    set udg_Mutant_EvolvingMass=GetLastCreatedUnit()
    call SetUnitX(GetLastCreatedUnit(), GetLocationX(udg_TempPoint))
    call SetUnitY(GetLastCreatedUnit(), GetLocationY(udg_TempPoint))
    call SizeUnitOverTime(udg_Mutant_EvolvingMass , 2.5 , 0.01 , 1 , false)
    call RemoveLocation(udg_TempPoint)
    call PolledWait(2.00)
    call SetUnitPositionLoc(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)], udg_HoldZone)
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call UnitAddItemSwapped(UnitItemInSlotBJ(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)], GetForLoopIndexA()), udg_Mutant_EvolvingMass)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    if ( Trig_MutantDialog_Func026C() ) then
        set udg_TempItem=udg_Player_Suit[GetConvertedPlayerId(udg_Mutant)]
        call SetItemUserData(udg_TempItem, 0)
        call SetItemVisibleBJ(true, udg_TempItem)
        call SetItemPositionLoc(udg_TempItem, udg_TempPoint)
        call UnitAddItemSwapped(udg_TempItem, GetLastCreatedUnit())
    else
    endif
    call RemoveUnit(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)])
    set udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]=udg_Mutant_EvolvingMass
    set udg_TempUnit=udg_Mutant_EvolvingMass
    set udg_TempPlayerGroup=GetPlayersMatching(Condition(function Trig_MutantDialog_Func030002001))
    set udg_CountupBar_HideTempBool=true
    set udg_CountUpBarColor="|cffFF8000"
    if ( Trig_MutantDialog_Func033C() ) then
        call CountUpBar(udg_TempUnit , 2 , 1 , "MutantUpgrade")
    else
        if ( Trig_MutantDialog_Func033Func001C() ) then
            call CountUpBar(udg_TempUnit , 8 , 1 , "MutantUpgrade")
        else
            call CountUpBar(udg_TempUnit , 30 , 1 , "MutantUpgrade")
        endif
    endif
endfunction

//===========================================================================
function InitTrig_MutantDialog takes nothing returns nothing
    set gg_trg_MutantDialog=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_MutantDialog, EVENT_PLAYER_UNIT_TRAIN_FINISH)
    call TriggerAddCondition(gg_trg_MutantDialog, Condition(function Trig_MutantDialog_Conditions))
    call TriggerAddAction(gg_trg_MutantDialog, function Trig_MutantDialog_Actions)
endfunction

//===========================================================================
// Trigger: MutantUpgradeFinish
//===========================================================================
function Trig_MutantUpgradeFinish_Func001C takes nothing returns boolean
    if ( not ( IsUnitDeadBJ(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgradeFinish_Func002C takes nothing returns boolean
    if ( not ( udg_MutantUpgradingTo == 'h00U' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgradeFinish_Func003C takes nothing returns boolean
    if ( not ( udg_MutantUpgradeLevel == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgradeFinish_Func010Func003C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    if ( not ( RectContainsUnit(gg_rct_Timeout, udg_TempUnit2) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgradeFinish_Func010Func005C takes nothing returns boolean
    if ( not ( udg_MutantUpgradingTo == 'h04W' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgradeFinish_Func010Func006C takes nothing returns boolean
    if ( not ( RectContainsLoc(gg_rct_Space, udg_TempPoint2) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgradeFinish_Func010Func008C takes nothing returns boolean
    if ( not ( RectContainsLoc(gg_rct_Space, udg_TempPoint) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgradeFinish_Func010Func024A takes nothing returns nothing
    call SetUnitOwner(GetEnumUnit(), udg_Mutant, true)
endfunction

function Trig_MutantUpgradeFinish_Func010C takes nothing returns boolean
    if ( not ( udg_MutantUpgradingTo == 'h04G' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgradeFinish_Func021Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsMutantSpawn[GetForLoopIndexA()] == true ) ) then
        return false
    endif
    if ( not ( udg_HiddenAndroid != ConvertedPlayer(GetForLoopIndexA()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgradeFinish_Func022C takes nothing returns boolean
    if ( not ( udg_MutantUpgradingTo == 'h01G' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgradeFinish_Func023C takes nothing returns boolean
    if ( not ( udg_MutantUpgradingTo == 'h01V' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgradeFinish_Func024C takes nothing returns boolean
    if ( not ( udg_MutantUpgradingTo == 'h01C' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgradeFinish_Func025C takes nothing returns boolean
    if ( not ( udg_MutantUpgradingTo == 'h01L' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgradeFinish_Func026C takes nothing returns boolean
    if ( not ( udg_MutantUpgradingTo == 'h01B' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantUpgradeFinish_Actions takes nothing returns nothing
    if ( Trig_MutantUpgradeFinish_Func001C() ) then
        return
    else
    endif
    if ( Trig_MutantUpgradeFinish_Func002C() ) then
        set udg_Mutant_IsPerfection=true
    else
    endif
    if ( Trig_MutantUpgradeFinish_Func003C() ) then
        call Status_changeStr((LoadStr(Table__ht, (((GroupChat))), (- 2))) , - 2 , true) // INLINED!!
    else
    endif
    set udg_MutantChildInfectee=GetMutantSpawnId(udg_MutantUpgradingTo)
    set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)])
    call CreateNUnitsAtLoc(1, udg_MutantUpgradingTo, udg_Mutant, udg_TempPoint, bj_UNIT_FACING)
    set udg_TempUnit=GetLastCreatedUnit()
    call SetUnitX(GetLastCreatedUnit(), GetLocationX(udg_TempPoint))
    call SetUnitY(GetLastCreatedUnit(), GetLocationY(udg_TempPoint))
    if ( Trig_MutantUpgradeFinish_Func010C() ) then
        set udg_TempUnit2=udg_Sector_Space[GetUnitSector(udg_TempUnit)]
        set udg_TempBool=(GetUnitAbilityLevel((udg_TempUnit2), 'A071') == 1) // INLINED!!
        if ( Trig_MutantUpgradeFinish_Func010Func003C() ) then
            set udg_TempPoint2=GetUnitLoc(udg_Sector_Space[GetUnitSector(udg_SS_Landed[(GetUnitUserData((udg_TempUnit2)))])]) // INLINED!!
        else
            set udg_TempPoint2=GetUnitLoc(udg_TempUnit2)
        endif
        if ( Trig_MutantUpgradeFinish_Func010Func006C() ) then
            call RemoveLocation(udg_TempPoint2)
            set udg_TempPoint2=GetRandomLocInRect(gg_rct_Space)
        else
        endif
        set udg_TempPoint=PolarProjectionBJ(udg_TempPoint2, 256, GetRandomDirectionDeg())
        if ( Trig_MutantUpgradeFinish_Func010Func008C() ) then
            call RemoveLocation(udg_TempPoint)
            set udg_TempPoint=udg_TempPoint2
        else
            call RemoveLocation(udg_TempPoint2)
        endif
        call SetUnitX(GetLastCreatedUnit(), GetLocationX(udg_TempPoint))
        call SetUnitY(GetLastCreatedUnit(), GetLocationY(udg_TempPoint))
        call PanCameraToTimedLocForPlayer(udg_Mutant, udg_TempPoint, 0)
        call RemoveLocation(udg_TempPoint)
        set udg_TempPoint=GetRectCenter(gg_rct_OverlordRect)
        set udg_Sector_Space[27]=udg_TempUnit
        call GroupAddUnitSimple(udg_TempUnit, udg_SpaceObject_CollideGroup)
        call NewUnitRegister(udg_TempUnit)
        set udg_SpaceObject_CollideRadius[GetUnitUserData(udg_TempUnit)]=100.00
        call TriggerExecute(gg_trg_ST11Init)
        call SetPlayerTechMaxAllowedSwap('h01T', 1, udg_Mutant)
        call SetPlayerTechMaxAllowedSwap('h01U', 10, udg_Mutant)
        set udg_UpgradePointsMutant=600.00
        call SetPlayerStateBJ(udg_Mutant, PLAYER_STATE_RESOURCE_LUMBER, 600)
        set bj_forLoopAIndex=1
        set bj_forLoopAIndexEnd=6
        loop
            exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
            call SetItemPositionLoc(UnitItemInSlotBJ(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)], GetForLoopIndexA()), udg_TempPoint)
            set bj_forLoopAIndex=bj_forLoopAIndex + 1
        endloop
        call ForGroupBJ(GetUnitsInRectAll(gg_rct_OverlordRect), function Trig_MutantUpgradeFinish_Func010Func024A)
    else
        call SetUnitLifePercentBJ(GetLastCreatedUnit(), udg_MutantUpgrade_Health)
        if ( Trig_MutantUpgradeFinish_Func010Func005C() ) then
            call SetPlayerTechMaxAllowedSwap('h01T', 1, udg_Mutant)
            call SetPlayerTechMaxAllowedSwap('h01U', 10, udg_Mutant)
            set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)])
            call CreateNUnitsAtLoc(1, 'h01T', udg_Mutant, udg_TempPoint, bj_UNIT_FACING)
            set bj_forLoopAIndex=1
            set bj_forLoopAIndexEnd=6
            loop
                exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                call UnitAddItemSwapped(UnitItemInSlotBJ(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)], GetForLoopIndexA()), GetLastCreatedUnit())
                set bj_forLoopAIndex=bj_forLoopAIndex + 1
            endloop
        else
            set bj_forLoopAIndex=1
            set bj_forLoopAIndexEnd=6
            loop
                exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
                call UnitAddItemSwapped(UnitItemInSlotBJ(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)], GetForLoopIndexA()), GetLastCreatedUnit())
                set bj_forLoopAIndex=bj_forLoopAIndex + 1
            endloop
        endif
    endif
    call SetUnitOwner(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)], Player(PLAYER_NEUTRAL_PASSIVE), true)
    call SizeUnitOverTime(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)] , 3 , 1 , 0.01 , false)
    call FadeUnitOverTime(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)] , 5 , true)
    call RemoveLocation(udg_TempPoint)
    set udg_MutantIsUpgrading=false
    set udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]=udg_TempUnit
    call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_Mutant)
    call PlaySoundBJ(gg_snd_FreakyForest4)
    call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 2, "ReplaceableTextures\\CameraMasks\\DiagonalSlash_mask.blp", 100.00, 100.00, 0, 0)
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_2935")
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=12
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_MutantUpgradeFinish_Func021Func001C() ) then
            set udg_TempUnitType=udg_MutantChildInfectee
            set udg_TempUnit=udg_Playerhero[GetForLoopIndexA()]
            set udg_TempPlayer=ConvertedPlayer(GetForLoopIndexA())
            call ExecuteFunc("PendUpgrade")
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    if ( Trig_MutantUpgradeFinish_Func022C() ) then
        set udg_TempUnit=GetLastCreatedUnit()
        call ExecuteFunc("FleshGolemLoop")
    else
    endif
    if ( Trig_MutantUpgradeFinish_Func023C() ) then
        set udg_TempUnit=GetLastCreatedUnit()
        call ExecuteFunc("DefilerGoo")
    else
    endif
    if ( Trig_MutantUpgradeFinish_Func024C() ) then
        call EnableTrigger(gg_trg_CrabMutant)
        call CrabTeleport(GetLastCreatedUnit())
    else
    endif
    if ( Trig_MutantUpgradeFinish_Func025C() ) then
        set udg_Mutant_IsRapidGestation=true
    else
    endif
    if ( Trig_MutantUpgradeFinish_Func026C() ) then
        call SetUnitTimeScalePercent(GetLastReplacedUnitBJ(), 160.00)
    else
    endif
endfunction

//===========================================================================
function InitTrig_MutantUpgradeFinish takes nothing returns nothing
    set gg_trg_MutantUpgradeFinish=CreateTrigger()
    call TriggerAddAction(gg_trg_MutantUpgradeFinish, function Trig_MutantUpgradeFinish_Actions)
endfunction

//===========================================================================
// Trigger: MutantDevour
//===========================================================================
function Trig_MutantDevour_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A05M' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantDevour_Func003Func003C takes nothing returns boolean
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'n006' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'n001' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'n000' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'n002' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'n00A' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'nech' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'nfro' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'necr' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'nder' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'nshe' ) ) then
        return true
    endif
    if ( ( GetUnitTypeId(GetSpellTargetUnit()) == 'e01H' ) ) then
        return true
    endif
    return false
endfunction

function Trig_MutantDevour_Func003C takes nothing returns boolean
    if ( not Trig_MutantDevour_Func003Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_MutantDevour_Func004C takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetSpellTargetUnit()) == 'e01H' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantDevour_Actions takes nothing returns nothing
    if ( Trig_MutantDevour_Func003C() ) then
    else
        call IssueImmediateOrderBJ(GetSpellAbilityUnit(), "stop")
        return
    endif
    if ( Trig_MutantDevour_Func004C() ) then
        call KillUnit(GetSpellTargetUnit())
        set udg_UpgradePointsMutant=( udg_UpgradePointsMutant + 200.00 )
    else
        call RemoveUnit(GetSpellTargetUnit())
        set udg_UpgradePointsMutant=( udg_UpgradePointsMutant + 75.00 )
    endif
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    call SetSoundPositionLocBJ(gg_snd_Devour, udg_TempPoint, 0)
    call PlaySoundBJ(gg_snd_Devour)
    call AddSpecialEffectLocBJ(udg_TempPoint, "Objects\\Spawnmodels\\Orc\\Orcblood\\BattrollBlood.mdl")
    call SFXThreadClean()
    call RemoveLocation(udg_TempPoint)
    set udg_TempReal=12.00
    set udg_TempUnitType='e031'
    set udg_TempPlayer=GetOwningPlayer(GetSpellAbilityUnit())
    call ExecuteFunc("AlienRequirementRemove")
    call ExecuteFunc("AlienRequirementRestore")
endfunction

//===========================================================================
function InitTrig_MutantDevour takes nothing returns nothing
    set gg_trg_MutantDevour=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_MutantDevour, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_MutantDevour, Condition(function Trig_MutantDevour_Conditions))
    call TriggerAddAction(gg_trg_MutantDevour, function Trig_MutantDevour_Actions)
endfunction

//===========================================================================
// Trigger: MutantCannibalize
//
// local integer i = 0
//     
//     //Iterate all chipped corpses, and compare with the unit/corpse given
//     loop
//         exitwhen i > 17
//     
//         if udg_RogueAndroidChippedCorpses[i] == bodyToCheck then
//             return true
//         endif
//         
//         set i = i + 1
//     endloop
//===========================================================================
function Trig_MutantCannibalize_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A076' ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantCannibalize_Func004Func001Func002C takes nothing returns boolean
    if ( not ( DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2) <= 140.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantCannibalize_Func004Func001C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A077', GetEnumUnit()) == 1 ) ) then
        return false
    endif
    if ( not ( GetUnitAbilityLevelSwapped('A07P', GetEnumUnit()) == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_MutantCannibalize_Func004A takes nothing returns nothing
    if ( Trig_MutantCannibalize_Func004Func001C() ) then
        set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
        if ( Trig_MutantCannibalize_Func004Func001Func002C() ) then
            // Rogue Android Chip Check!
            if IsBodyChipped(GetEnumUnit()) then
            call KillUnit(udg_RogueAndroidChips[GetBodyChippedIndex(GetEnumUnit())])
            endif
            call SetSoundPositionLocBJ(gg_snd_Devour, udg_TempPoint, 0)
            call PlaySoundBJ(gg_snd_Devour)
            call RemoveUnit(GetEnumUnit())
            set udg_UpgradePointsMutant=( udg_UpgradePointsMutant + 220.00 )
            call AddSpecialEffectLocBJ(udg_TempPoint2, "Objects\\Spawnmodels\\Orc\\Orcblood\\BattrollBlood.mdl")
            call SFXThreadClean()
            call AddSpecialEffectLocBJ(udg_TempPoint2, "Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl")
            call SFXThreadClean()
        else
        endif
        call RemoveLocation(udg_TempPoint2)
    else
    endif
endfunction

function Trig_MutantCannibalize_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    call ForGroupBJ(GetUnitsOfPlayerAll(Player(PLAYER_NEUTRAL_PASSIVE)), function Trig_MutantCannibalize_Func004A)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_MutantCannibalize takes nothing returns nothing
    set gg_trg_MutantCannibalize=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_MutantCannibalize, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_MutantCannibalize, Condition(function Trig_MutantCannibalize_Conditions))
    call TriggerAddAction(gg_trg_MutantCannibalize, function Trig_MutantCannibalize_Actions)
endfunction

//===========================================================================
// Trigger: PrionRemoveParasite
//===========================================================================
function Trig_PrionRemoveParasite_Func001C takes nothing returns boolean
    if ( ( GetSpellAbilityId() == 'A013' ) ) then
        return true
    endif
    if ( ( GetSpellAbilityId() == 'A01S' ) ) then
        return true
    endif
    if ( ( GetSpellAbilityId() == 'A01X' ) ) then
        return true
    endif
    return false
endfunction

function Trig_PrionRemoveParasite_Conditions takes nothing returns boolean
    if ( not Trig_PrionRemoveParasite_Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_PrionRemoveParasite_Actions takes nothing returns nothing
    call UnitRemoveBuffBJ('BNpa', GetSpellTargetUnit())
    call UnitRemoveBuffBJ('B00H', GetSpellTargetUnit())
    call UnitRemoveBuffBJ('B01V', GetSpellTargetUnit())
    call UnitRemoveBuffBJ('B01T', GetSpellTargetUnit())
    call UnitRemoveBuffBJ('B01W', GetSpellTargetUnit())
    call UnitRemoveBuffBJ('B01U', GetSpellTargetUnit())
endfunction

//===========================================================================
function InitTrig_PrionRemoveParasite takes nothing returns nothing
    set gg_trg_PrionRemoveParasite=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_PrionRemoveParasite, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_PrionRemoveParasite, Condition(function Trig_PrionRemoveParasite_Conditions))
    call TriggerAddAction(gg_trg_PrionRemoveParasite, function Trig_PrionRemoveParasite_Actions)
endfunction

//===========================================================================
// Trigger: AlienEgg
//===========================================================================
function Trig_AlienEgg_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'e01H' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienEgg_Func003C takes nothing returns boolean
    if ( not ( CountUnitsInGroup(udg_Parasite_EggGroup) >= 3 ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienEgg_Actions takes nothing returns nothing
    if ( Trig_AlienEgg_Func003C() ) then
        call KillUnit(GetTriggerUnit())
    else
        set udg_TempPoint=GetUnitLoc(GetTriggerUnit())
        call AddSpecialEffectLocBJ(udg_TempPoint, "Objects\\Spawnmodels\\NightElf\\EntBirthTarget\\EntBirthTarget.mdl")
        call SFXThreadClean()
        call GroupAddUnitSimple(GetTriggerUnit(), udg_Parasite_EggGroup)
        call RemoveLocation(udg_TempPoint)
    endif
endfunction

//===========================================================================
function InitTrig_AlienEgg takes nothing returns nothing
    set gg_trg_AlienEgg=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_AlienEgg, GetPlayableMapRect())
    call TriggerAddCondition(gg_trg_AlienEgg, Condition(function Trig_AlienEgg_Conditions))
    call TriggerAddAction(gg_trg_AlienEgg, function Trig_AlienEgg_Actions)
endfunction

//===========================================================================
// Trigger: AlienEggDeath
//===========================================================================
function Trig_AlienEggDeath_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetDyingUnit()) == 'e01H' ) ) then
        return false
    endif
    if ( not ( IsUnitInGroup(GetTriggerUnit(), udg_Parasite_EggGroup) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienEggDeath_Func006C takes nothing returns boolean
    if ( not ( IsUnitType(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)], UNIT_TYPE_MECHANICAL) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienEggDeath_Func013C takes nothing returns boolean
    if not ( GetLocalPlayer() == udg_Parasite ) then
    return false
    endif
    return true
endfunction

function Trig_AlienEggDeath_Actions takes nothing returns nothing
    call GroupRemoveUnitSimple(GetTriggerUnit(), udg_Parasite_EggGroup)
    set udg_UpgradePointsAlien=( udg_UpgradePointsAlien - 75.00 )
    if ( Trig_AlienEggDeath_Func006C() ) then
        call UnitDamageTargetBJ(GetKillingUnitBJ(), udg_AlienForm_Alien, 100.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
    else
    endif
    set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)])
    call AddSpecialEffectLocBJ(udg_TempPoint, "Objects\\Spawnmodels\\NightElf\\NightElfBlood\\NightElfBloodHippogryph.mdl")
    call CreateNUnitsAtLoc(1, 'e000', Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_TempPoint, bj_UNIT_FACING)
    call IssueTargetOrderBJ(GetLastCreatedUnit(), "firebolt", udg_Playerhero[GetConvertedPlayerId(udg_Parasite)])
    call RemoveLocation(udg_TempPoint)
    call CinematicFilterGenericForPlayer(udg_Parasite , 2.0 , BLEND_MODE_BLEND , "ReplaceableTextures\\CameraMasks\\DiagonalSlash_mask.blp" , 0 , 100 , 100 , 25 , 0 , 0 , 0 , 100)
    if ( Trig_AlienEggDeath_Func013C() ) then
        call StartSound(gg_snd_EggSackDeath1)
    else
    endif
endfunction

//===========================================================================
function InitTrig_AlienEggDeath takes nothing returns nothing
    set gg_trg_AlienEggDeath=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_AlienEggDeath, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_AlienEggDeath, Condition(function Trig_AlienEggDeath_Conditions))
    call TriggerAddAction(gg_trg_AlienEggDeath, function Trig_AlienEggDeath_Actions)
endfunction

//===========================================================================
// Trigger: AlienAdjustShop
//
// When the alien is in alien form, this adjusts the position of the workaround vendor every fifth of a second and sets the adjustable inventory size to prevent item overflows.
//===========================================================================
function Trig_AlienAdjustShop_Conditions takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(udg_AlienForm_Alien) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienAdjustShop_Func007Func001C takes nothing returns boolean
    if ( not ( UnitItemInSlotBJ(udg_AlienForm_Alien, GetForLoopIndexA()) != null ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienAdjustShop_Func008Func002C takes nothing returns boolean
    if ( not ( ( 7 - udg_TempInt ) == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienAdjustShop_Func008C takes nothing returns boolean
    if ( not ( ( 7 - udg_TempInt ) != GetUnitAbilityLevelSwapped('A03E', udg_Alien_ShopWorkaround) ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienAdjustShop_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(udg_AlienForm_Alien)
    call SetUnitPositionLoc(udg_Alien_ShopWorkaround, udg_TempPoint)
    call RemoveLocation(udg_TempPoint)
    set udg_TempInt=0
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_AlienAdjustShop_Func007Func001C() ) then
            set udg_TempInt=( udg_TempInt + 1 )
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    if ( Trig_AlienAdjustShop_Func008C() ) then
        call SetUnitAbilityLevelSwapped('A03E', udg_Alien_ShopWorkaround, ( 7 - udg_TempInt ))
        if ( Trig_AlienAdjustShop_Func008Func002C() ) then
            call UnitAddItemByIdSwapped('I01B', udg_Alien_ShopWorkaround)
        else
            call RemoveItem(GetItemOfTypeFromUnitBJ(udg_Alien_ShopWorkaround, 'I01B'))
        endif
    else
    endif
endfunction

//===========================================================================
function InitTrig_AlienAdjustShop takes nothing returns nothing
    set gg_trg_AlienAdjustShop=CreateTrigger()
    call DisableTrigger(gg_trg_AlienAdjustShop)
    call TriggerRegisterTimerEventPeriodic(gg_trg_AlienAdjustShop, 0.20)
    call TriggerAddCondition(gg_trg_AlienAdjustShop, Condition(function Trig_AlienAdjustShop_Conditions))
    call TriggerAddAction(gg_trg_AlienAdjustShop, function Trig_AlienAdjustShop_Actions)
endfunction

//===========================================================================
// Trigger: AlienForm
//
// Begins the alien form for the main alien, not the spawns.
//===========================================================================
function Trig_AlienForm_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02O' ) ) then
        return false
    endif
    if ( not ( udg_Player_IsMasquerading[GetConvertedPlayerId(GetOwningPlayer(GetSpellAbilityUnit()))] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienForm_Actions takes nothing returns nothing
    local unit c
    // Hide the personnel!
    call ShowUnitHide(GetSpellAbilityUnit())
    // Set temp point to the position of the caster.
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    // Dummy explosion 9 is an egg. Create it, make sure it plays its death animation, and execute Remove2 which will remove it in 2 seconds.
    call CreateNUnitsAtLoc(1, 'e00H', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPoint, GetUnitFacing(GetSpellAbilityUnit()))
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    set udg_TempUnit=GetLastCreatedUnit()
    call Remove2()
    // Create the alien current form at temppoint!
    call CreateNUnitsAtLoc(1, udg_AlienCurrentForm, Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPoint, GetUnitFacing(GetSpellAbilityUnit()))
    // Adjust relative life and mana percentages.
    call SetUnitLifePercentBJ(GetLastCreatedUnit(), GetUnitLifePercent(GetSpellAbilityUnit()))
    call SetUnitManaPercentBJ(GetLastCreatedUnit(), GetUnitManaPercent(GetSpellAbilityUnit()))
    // Select it for the owner of the casting unit, who will always be the parasite.
    call SelectUnitForPlayerSingle(GetLastCreatedUnit(), GetOwningPlayer(GetSpellAbilityUnit()))
    // Set AlienForm_Alien, playerhero for neutral extra, playerhero for parasite player to the alien.
    set udg_AlienForm_Alien=GetLastCreatedUnit()
    set udg_Playerhero[GetConvertedPlayerId(Player(bj_PLAYER_NEUTRAL_EXTRA))]=GetLastCreatedUnit()
    set udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]=GetLastCreatedUnit()
    // Transfer items and remove caster.
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call UnitAddItemSwapped(UnitItemInSlotBJ(GetSpellAbilityUnit(), GetForLoopIndexA()), GetLastCreatedUnit())
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call SetUnitPositionLoc(GetSpellAbilityUnit(), udg_HoldZone)
    call RemoveUnit(GetSpellAbilityUnit())
    // Create the ALIEN SHOP WORKAROUND!
    call CreateNUnitsAtLoc(1, 'e00L', udg_Parasite, udg_HoldZone, bj_UNIT_FACING)
    set udg_Alien_ShopWorkaround=GetLastCreatedUnit()
    call EnableTrigger(gg_trg_AlienAdjustShop)
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_AlienForm takes nothing returns nothing
    set gg_trg_AlienForm=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_AlienForm, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_AlienForm, Condition(function Trig_AlienForm_Conditions))
    call TriggerAddAction(gg_trg_AlienForm, function Trig_AlienForm_Actions)
endfunction

//===========================================================================
// Trigger: AlienFormTransfer
//
// If a shop sells the alien workaround an item, then give the item to the alien form alien.
//===========================================================================
function Trig_AlienFormTransfer_Conditions takes nothing returns boolean
    if ( not ( udg_Alien_ShopWorkaround == GetBuyingUnit() ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienFormTransfer_Actions takes nothing returns nothing
    call UnitAddItemByIdSwapped(GetItemTypeId(GetSoldItem()), udg_AlienForm_Alien)
    call RemoveItem(GetSoldItem())
endfunction

//===========================================================================
function InitTrig_AlienFormTransfer takes nothing returns nothing
    set gg_trg_AlienFormTransfer=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_AlienFormTransfer, EVENT_PLAYER_UNIT_SELL_ITEM)
    call TriggerAddCondition(gg_trg_AlienFormTransfer, Condition(function Trig_AlienFormTransfer_Conditions))
    call TriggerAddAction(gg_trg_AlienFormTransfer, function Trig_AlienFormTransfer_Actions)
endfunction

//===========================================================================
// Trigger: AlienFormSpawn
//
// Alien form for spawns won't disguise as the neutral extra player.
//===========================================================================
function Trig_AlienFormSpawn_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02W' ) ) then
        return false
    endif
    if ( not ( udg_Player_IsMasquerading[GetConvertedPlayerId(GetOwningPlayer(GetSpellAbilityUnit()))] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienFormSpawn_Actions takes nothing returns nothing
    // Pretty much the same as AlienForm trigger.
    set udg_TempUnit3=GetSpellAbilityUnit()
    call ShowUnitHide(udg_TempUnit3)
    set udg_TempPoint=GetUnitLoc(udg_TempUnit3)
    call CreateNUnitsAtLoc(1, udg_ParasiteChildInfectee, GetOwningPlayer(udg_TempUnit3), udg_TempPoint, GetUnitFacing(GetSpellAbilityUnit()))
    set udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetLastCreatedUnit()))]=GetLastCreatedUnit()
    call SetUnitLifePercentBJ(GetLastCreatedUnit(), GetUnitLifePercent(GetSpellAbilityUnit()))
    call SetUnitManaPercentBJ(GetLastCreatedUnit(), GetUnitManaPercent(GetSpellAbilityUnit()))
    call SelectUnitForPlayerSingle(GetLastCreatedUnit(), GetOwningPlayer(GetSpellAbilityUnit()))
    call SetUnitPositionLoc(GetLastCreatedUnit(), udg_TempPoint)
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call UnitAddItemSwapped(UnitItemInSlotBJ(udg_TempUnit3, GetForLoopIndexA()), GetLastCreatedUnit())
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call SetUnitPositionLoc(udg_TempUnit3, udg_HoldZone)
    call RemoveUnit(udg_TempUnit3)
    call CreateNUnitsAtLoc(1, 'e00H', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPoint, GetUnitFacing(GetSpellAbilityUnit()))
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    set udg_TempUnit=GetLastCreatedUnit()
    call Remove2()
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_AlienFormSpawn takes nothing returns nothing
    set gg_trg_AlienFormSpawn=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_AlienFormSpawn, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_AlienFormSpawn, Condition(function Trig_AlienFormSpawn_Conditions))
    call TriggerAddAction(gg_trg_AlienFormSpawn, function Trig_AlienFormSpawn_Actions)
endfunction

//===========================================================================
// Trigger: HumanForm
//
// Human form for the alien.
//===========================================================================
function Trig_HumanForm_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02S' ) ) then
        return false
    endif
    if ( not ( udg_Player_IsMasquerading[GetConvertedPlayerId(GetOwningPlayer(GetSpellAbilityUnit()))] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_HumanForm_Actions takes nothing returns nothing
    local unit c
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    call CreateNUnitsAtLoc(1, 'e00H', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPoint, GetUnitFacing(GetSpellAbilityUnit()))
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    set udg_TempUnit=GetLastCreatedUnit()
    call Remove2()
    call CreateNUnitsAtLoc(1, 'h00H', udg_Parasite, udg_TempPoint, bj_UNIT_FACING)
    set udg_TempUnit=GetLastCreatedUnit()
    set c=udg_TempUnit
    call SetUnitLifePercentBJ(udg_TempUnit, GetUnitLifePercent(GetSpellAbilityUnit()))
    call SetUnitManaPercentBJ(udg_TempUnit, GetUnitManaPercent(GetSpellAbilityUnit()))
    call SetUnitPositionLoc(GetSpellAbilityUnit(), udg_HoldZone)
    set udg_TempUnit=c
    call ShowUnitShow(udg_TempUnit)
    set udg_TempUnit=c
    call PauseUnitBJ(false, udg_TempUnit)
    set udg_TempUnit=c
    call UnitRemoveAbilityBJ('Avul', udg_TempUnit)
    set udg_TempUnit=c
    call SetUnitPositionLoc(udg_TempUnit, udg_TempPoint)
    call UnitAddAbilityBJ('A02O', GetLastCreatedUnit())
    // Will screw up the Dr.'s tooltip. Fix later!
    call UnitAddAbilityBJ(udg_RoleAbility[udg_PlayerRole[GetConvertedPlayerId(udg_Parasite)]], GetLastCreatedUnit())
    call SelectUnitForPlayerSingle(GetLastCreatedUnit(), GetOwningPlayer(GetSpellAbilityUnit()))
    set udg_TempUnit=c
    call SelectUnitForPlayerSingle(udg_TempUnit, udg_Parasite)
    set udg_AlienForm_Alien=null
    set udg_Playerhero[GetConvertedPlayerId(Player(bj_PLAYER_NEUTRAL_EXTRA))]=GetLastCreatedUnit()
    set udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]=GetLastCreatedUnit()
    call DisableTrigger(gg_trg_AlienAdjustShop)
    call RemoveUnit(udg_Alien_ShopWorkaround)
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempUnit=c
        call UnitAddItemSwapped(UnitItemInSlotBJ(GetSpellAbilityUnit(), GetForLoopIndexA()), udg_TempUnit)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveUnit(GetSpellAbilityUnit())
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_HumanForm takes nothing returns nothing
    set gg_trg_HumanForm=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_HumanForm, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_HumanForm, Condition(function Trig_HumanForm_Conditions))
    call TriggerAddAction(gg_trg_HumanForm, function Trig_HumanForm_Actions)
endfunction

//===========================================================================
// Trigger: HumanFormSpawn
//
// Human form for spawns.
//===========================================================================
function Trig_HumanFormSpawn_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02X' ) ) then
        return false
    endif
    if ( not ( udg_Player_IsMasquerading[GetConvertedPlayerId(GetOwningPlayer(GetSpellAbilityUnit()))] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_HumanFormSpawn_Actions takes nothing returns nothing
    local unit c
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    call CreateNUnitsAtLoc(1, 'e00H', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPoint, GetUnitFacing(GetSpellAbilityUnit()))
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    set udg_TempUnit=GetLastCreatedUnit()
    call Remove2()
    call CreateNUnitsAtLoc(1, 'h00H', GetOwningPlayer(GetSpellAbilityUnit()), udg_TempPoint, GetUnitFacing(GetSpellAbilityUnit()))
    set udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetLastCreatedUnit()))]=GetLastCreatedUnit()
    set udg_TempUnit=GetLastCreatedUnit()
    set c=udg_TempUnit
    call SetUnitPositionLoc(GetSpellAbilityUnit(), udg_HoldZone)
    call SetUnitLifePercentBJ(udg_TempUnit, GetUnitLifePercent(GetSpellAbilityUnit()))
    call SetUnitManaPercentBJ(udg_TempUnit, GetUnitManaPercent(GetSpellAbilityUnit()))
    set udg_TempUnit=c
    call SetUnitPositionLoc(udg_TempUnit, udg_TempPoint)
    set udg_TempUnit=c
    call SelectUnitForPlayerSingle(udg_TempUnit, udg_TempPlayer)
    call UnitAddAbilityBJ(udg_RoleAbility[udg_PlayerRole[GetConvertedPlayerId(GetOwningPlayer(GetSpellAbilityUnit()))]], GetLastCreatedUnit())
    call UnitAddAbilityBJ('A02W', GetLastCreatedUnit())
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        set udg_TempUnit=c
        call UnitAddItemSwapped(UnitItemInSlotBJ(GetSpellAbilityUnit(), GetForLoopIndexA()), udg_TempUnit)
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    call RemoveUnit(GetSpellAbilityUnit())
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_HumanFormSpawn takes nothing returns nothing
    set gg_trg_HumanFormSpawn=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_HumanFormSpawn, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_HumanFormSpawn, Condition(function Trig_HumanFormSpawn_Conditions))
    call TriggerAddAction(gg_trg_HumanFormSpawn, function Trig_HumanFormSpawn_Actions)
endfunction

//===========================================================================
// Trigger: AlienFormDies
//
// If AlienForm_Alien dies, create a dummy for parasite and kill that too.
//===========================================================================
function Trig_AlienFormDies_Conditions takes nothing returns boolean
    if ( not ( GetDyingUnit() == udg_AlienForm_Alien ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienFormDies_Actions takes nothing returns nothing
    call CreateNUnitsAtLoc(1, 'e000', udg_Parasite, udg_HoldZone, bj_UNIT_FACING)
    set udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]=GetLastCreatedUnit()
    set udg_SpawnTemp=false
    call KillUnit(GetLastCreatedUnit())
    call UnitAddAbilityBJ('A02T', GetLastCreatedUnit())
    call UnitRemoveBuffsBJ(bj_REMOVEBUFFS_ALL, GetLastCreatedUnit())
    call DisableTrigger(gg_trg_AlienAdjustShop)
endfunction

//===========================================================================
function InitTrig_AlienFormDies takes nothing returns nothing
    set gg_trg_AlienFormDies=CreateTrigger()
    call TriggerRegisterPlayerUnitEventSimple(gg_trg_AlienFormDies, Player(bj_PLAYER_NEUTRAL_EXTRA), EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_AlienFormDies, Condition(function Trig_AlienFormDies_Conditions))
    call TriggerAddAction(gg_trg_AlienFormDies, function Trig_AlienFormDies_Actions)
endfunction

//===========================================================================
// Trigger: ParasiteUpgrade
//===========================================================================
function Trig_ParasiteUpgrade_Conditions takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_Parasite ) ) then
        return false
    endif
    if ( not ( udg_ParasiteIsUpgrading == false ) ) then
        return false
    endif
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgrade_Func017Func006Func002C takes nothing returns boolean
    if ( not ( udg_AlienCurrentForm == 'h035' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgrade_Func017Func006Func003C takes nothing returns boolean
    if ( not ( udg_AlienCurrentForm == 'h02V' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgrade_Func017Func006Func004C takes nothing returns boolean
    if ( not ( udg_AlienCurrentForm == 'h03E' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgrade_Func017Func006C takes nothing returns boolean
    if ( not ( udg_ParasiteUpgradeLevel == 1 ) ) then
        return false
    endif
    if ( not ( udg_UpgradePointsAlien >= 1370.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgrade_Func017C takes nothing returns boolean
    if ( not ( udg_ParasiteUpgradeLevel == 0 ) ) then
        return false
    endif
    if ( not ( udg_UpgradePointsAlien >= 660.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgrade_Actions takes nothing returns nothing
    call RemoveUnit(udg_Parasite_EvoSelector)
    if ( Trig_ParasiteUpgrade_Func017C() ) then
        set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])
        call CreateNUnitsAtLoc(1, 'e023', udg_Parasite, udg_TempPoint, bj_UNIT_FACING)
        set udg_Parasite_EvoSelector=GetLastCreatedUnit()
        call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_Parasite)
        call RemoveLocation(udg_TempPoint)
    else
        if ( Trig_ParasiteUpgrade_Func017Func006C() ) then
            call DialogClearBJ(udg_ParasiteChooseDialog)
            if ( Trig_ParasiteUpgrade_Func017Func006Func002C() ) then
                set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])
                call CreateNUnitsAtLoc(1, 'e029', udg_Parasite, udg_TempPoint, bj_UNIT_FACING)
                set udg_Parasite_EvoSelector=GetLastCreatedUnit()
                call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_Parasite)
                call RemoveLocation(udg_TempPoint)
            else
            endif
            if ( Trig_ParasiteUpgrade_Func017Func006Func003C() ) then
                set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])
                call CreateNUnitsAtLoc(1, 'e028', udg_Parasite, udg_TempPoint, bj_UNIT_FACING)
                set udg_Parasite_EvoSelector=GetLastCreatedUnit()
                call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_Parasite)
                call RemoveLocation(udg_TempPoint)
            else
            endif
            if ( Trig_ParasiteUpgrade_Func017Func006Func004C() ) then
                set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])
                call CreateNUnitsAtLoc(1, 'e027', udg_Parasite, udg_TempPoint, bj_UNIT_FACING)
                set udg_Parasite_EvoSelector=GetLastCreatedUnit()
                call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_Parasite)
                call RemoveLocation(udg_TempPoint)
            else
            endif
        else
        endif
    endif
    // Trigger - Turn on Infinite Alien bugfix <gen>
endfunction

//===========================================================================
function InitTrig_ParasiteUpgrade takes nothing returns nothing
    set gg_trg_ParasiteUpgrade=CreateTrigger()
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_ParasiteUpgrade, Player(0))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_ParasiteUpgrade, Player(1))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_ParasiteUpgrade, Player(2))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_ParasiteUpgrade, Player(3))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_ParasiteUpgrade, Player(4))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_ParasiteUpgrade, Player(5))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_ParasiteUpgrade, Player(6))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_ParasiteUpgrade, Player(7))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_ParasiteUpgrade, Player(8))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_ParasiteUpgrade, Player(9))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_ParasiteUpgrade, Player(10))
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_ParasiteUpgrade, Player(11))
    call TriggerAddCondition(gg_trg_ParasiteUpgrade, Condition(function Trig_ParasiteUpgrade_Conditions))
    call TriggerAddAction(gg_trg_ParasiteUpgrade, function Trig_ParasiteUpgrade_Actions)
endfunction

//===========================================================================
// Trigger: ParasiteDialog
//
// --
//===========================================================================
function Trig_ParasiteDialog_Conditions takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A078', GetTriggerUnit()) == 1 ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetTriggerUnit()) == udg_Parasite ) ) then
        return false
    endif
    if ( not ( RectContainsUnit(gg_rct_Timeout, udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))]) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteDialog_Func006C takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]) != true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteDialog_Func021C takes nothing returns boolean
    if ( not ( GetUnitAbilityLevelSwapped('A046', udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]) >= 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteDialog_Func027002001 takes nothing returns boolean
    return ( GetFilterPlayer() != udg_Parasite )
endfunction

function Trig_ParasiteDialog_Func040Func001C takes nothing returns boolean
    if ( not ( udg_IsNiffyLockdownActive == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteDialog_Func040C takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteDialog_Actions takes nothing returns nothing
    local unit a
    if ( Trig_ParasiteDialog_Func006C() ) then
        call RemoveUnit(GetTrainedUnit())
        return
    else
    endif
    set udg_ParasiteIsUpgrading=true
    set udg_ParasiteUpgradeLevel=( udg_ParasiteUpgradeLevel + 1 )
    set udg_ParasiteUpgradingTo=GetUnitTypeId(GetTrainedUnit())
    call RemoveUnit(udg_Parasite_EvoSelector)
    call RemoveUnit(GetTrainedUnit())
    call UnitAddAbilityBJ('Avul', udg_Playerhero[GetConvertedPlayerId(udg_Parasite)])
    call PauseUnitBJ(true, udg_Playerhero[GetConvertedPlayerId(udg_Parasite)])
    call SetUnitOwner(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)], Player(PLAYER_NEUTRAL_PASSIVE), true)
    call UnitAddAbilityBJ('A07E', udg_Playerhero[GetConvertedPlayerId(udg_Parasite)])
    call PolledWait(2)
    set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)])
    call CreateNUnitsAtLoc(1, 'h02X', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPoint, GetRandomDirectionDeg())
    set a=GetLastCreatedUnit()
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call UnitAddItemSwapped(UnitItemInSlotBJ(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)], GetForLoopIndexA()), GetLastCreatedUnit())
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    if ( Trig_ParasiteDialog_Func021C() ) then
        set udg_TempItem=udg_Player_Suit[GetConvertedPlayerId(udg_Parasite)]
        call SetItemUserData(udg_TempItem, 0)
        call SetItemVisibleBJ(true, udg_TempItem)
        call SetItemPositionLoc(udg_TempItem, udg_TempPoint)
        call UnitAddItemSwapped(udg_TempItem, GetLastCreatedUnit())
    else
    endif
    call SetUnitPositionLoc(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)], udg_HoldZone)
    call RemoveUnit(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)])
    set udg_AlienForm_Alien=GetLastCreatedUnit()
    set udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]=GetLastCreatedUnit()
    set udg_Playerhero[GetConvertedPlayerId(Player(bj_PLAYER_NEUTRAL_EXTRA))]=GetLastCreatedUnit()
    set udg_TempPlayerGroup=GetPlayersMatching(Condition(function Trig_ParasiteDialog_Func027002001))
    set udg_CountupBar_HideTempBool=true
    set udg_CountUpBarColor="|cff800080"
    call RemoveLocation(udg_TempPoint)
    set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)])
    call CreateNUnitsAtLoc(1, 'e00H', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    call CreateNUnitsAtLoc(1, 'e00H', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
    call SetUnitAnimation(GetLastCreatedUnit(), "death")
    call CreateNUnitsAtLoc(1, 'e00A', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
    call CreateNUnitsAtLoc(1, 'e00A', Player(PLAYER_NEUTRAL_PASSIVE), udg_TempPoint, GetRandomDirectionDeg())
    call RemoveLocation(udg_TempPoint)
    set udg_TempUnit=a
    if ( Trig_ParasiteDialog_Func040C() ) then
        call CountUpBar(udg_TempUnit , 2 , 1 , "ParasiteUpgrade")
    else
        if ( Trig_ParasiteDialog_Func040Func001C() ) then
            call CountUpBar(udg_TempUnit , 8 , 1 , "ParasiteUpgrade")
        else
            call CountUpBar(udg_TempUnit , 30 , 1 , "ParasiteUpgrade")
        endif
    endif
endfunction

//===========================================================================
function InitTrig_ParasiteDialog takes nothing returns nothing
    set gg_trg_ParasiteDialog=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ParasiteDialog, EVENT_PLAYER_UNIT_TRAIN_FINISH)
    call TriggerAddCondition(gg_trg_ParasiteDialog, Condition(function Trig_ParasiteDialog_Conditions))
    call TriggerAddAction(gg_trg_ParasiteDialog, function Trig_ParasiteDialog_Actions)
endfunction

//===========================================================================
// Trigger: ParasiteUpgradeFinish
//===========================================================================
function Trig_ParasiteUpgradeFinish_Func002C takes nothing returns boolean
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgradeFinish_Func006C takes nothing returns boolean
    if ( not ( udg_ParasiteUpgradeLevel == 1 ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgradeFinish_Func007C takes nothing returns boolean
    if ( not ( udg_ParasiteUpgradingTo == 'h02V' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgradeFinish_Func008C takes nothing returns boolean
    if ( not ( udg_ParasiteUpgradingTo == 'h02Y' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgradeFinish_Func009Func002Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsParasiteSpawn[GetForLoopIndexA()] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgradeFinish_Func009C takes nothing returns boolean
    if ( not ( udg_ParasiteUpgradingTo == 'h031' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgradeFinish_Func010Func003Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsParasiteSpawn[GetForLoopIndexA()] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgradeFinish_Func010C takes nothing returns boolean
    if ( not ( udg_ParasiteUpgradingTo == 'h037' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgradeFinish_Func011C takes nothing returns boolean
    if ( not ( udg_ParasiteUpgradingTo == 'h03E' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgradeFinish_Func012C takes nothing returns boolean
    if ( not ( udg_ParasiteUpgradingTo == 'h033' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgradeFinish_Func013C takes nothing returns boolean
    if ( not ( udg_ParasiteUpgradingTo == 'h03C' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgradeFinish_Func014C takes nothing returns boolean
    if ( not ( udg_ParasiteUpgradingTo == 'h03G' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgradeFinish_Func036C takes nothing returns boolean
    if ( not ( udg_Masq_evolved == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgradeFinish_Func037Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsParasiteSpawn[GetForLoopIndexA()] == true ) ) then
        return false
    endif
    if ( not ( IsUnitType(udg_Playerhero[GetForLoopIndexA()], UNIT_TYPE_MECHANICAL) == true ) ) then
        return false
    endif
    if ( not ( udg_HiddenAndroid != ConvertedPlayer(GetForLoopIndexA()) ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteUpgradeFinish_Actions takes nothing returns nothing
    local unit a
    if ( Trig_ParasiteUpgradeFinish_Func002C() ) then
    else
        return
    endif
    // Below it finds the spawn unit-type ID matching the master unit-type ID
    set udg_ParasiteChildInfectee=GetAlienSpawnId(udg_ParasiteUpgradingTo)
    // Below is enabling abilities for each form pretty much (they are like this so cooldown is not reset by changing form!)
    if ( Trig_ParasiteUpgradeFinish_Func006C() ) then
        call Status_changeStr((LoadStr(Table__ht, (((GroupChat))), (- 1))) , - 1 , true) // INLINED!!
    else
    endif
    if ( Trig_ParasiteUpgradeFinish_Func007C() ) then
        call CreateNUnitsAtLoc(1, 'e00T', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_HoldZone, bj_UNIT_FACING)
    else
    endif
    if ( Trig_ParasiteUpgradeFinish_Func008C() ) then
        call EnableTrigger(gg_trg_ClosedTimeLikeLoopSavePos)
        call CreateNUnitsAtLoc(1, 'e00J', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_HoldZone, bj_UNIT_FACING)
        call ExecuteFunc("CreateCTLRequirement")
    else
    endif
    if ( Trig_ParasiteUpgradeFinish_Func009C() ) then
        call CreateNUnitsAtLoc(1, 'e00M', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_HoldZone, bj_UNIT_FACING)
        set bj_forLoopAIndex=1
        set bj_forLoopAIndexEnd=12
        loop
            exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
            if ( Trig_ParasiteUpgradeFinish_Func009Func002Func001C() ) then
                call CreateNUnitsAtLoc(1, 'e00M', ConvertedPlayer(GetForLoopIndexA()), udg_HoldZone, bj_UNIT_FACING)
            else
            endif
            set bj_forLoopAIndex=bj_forLoopAIndex + 1
        endloop
    else
    endif
    if ( Trig_ParasiteUpgradeFinish_Func010C() ) then
        call CreateNUnitsAtLoc(1, 'e00O', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_HoldZone, bj_UNIT_FACING)
        call CreateNUnitsAtLoc(1, 'e00P', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_HoldZone, bj_UNIT_FACING)
        set bj_forLoopAIndex=1
        set bj_forLoopAIndexEnd=12
        loop
            exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
            if ( Trig_ParasiteUpgradeFinish_Func010Func003Func001C() ) then
                call CreateNUnitsAtLoc(1, 'e00P', ConvertedPlayer(GetForLoopIndexA()), udg_HoldZone, bj_UNIT_FACING)
            else
            endif
            set bj_forLoopAIndex=bj_forLoopAIndex + 1
        endloop
    else
    endif
    if ( Trig_ParasiteUpgradeFinish_Func011C() ) then
        call EnableTrigger(gg_trg_NeurotoxicPoison)
    else
    endif
    if ( Trig_ParasiteUpgradeFinish_Func012C() ) then
        set udg_Masq_evolved=true
        call CreateNUnitsAtLoc(1, 'e015', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_HoldZone, bj_UNIT_FACING)
    else
    endif
    if ( Trig_ParasiteUpgradeFinish_Func013C() ) then
        call CreateNUnitsAtLoc(1, 'e00S', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_HoldZone, bj_UNIT_FACING)
    else
    endif
    if ( Trig_ParasiteUpgradeFinish_Func014C() ) then
        call CreateNUnitsAtLoc(1, 'e00V', Player(bj_PLAYER_NEUTRAL_EXTRA), udg_HoldZone, bj_UNIT_FACING)
    else
    endif
    set udg_TempPoint=GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)])
    set a=udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]
    set udg_AlienCurrentForm=udg_ParasiteUpgradingTo
    set udg_AlienForm_Alien=null
    call CreateNUnitsAtLoc(1, udg_ParasiteUpgradingTo, Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPoint, bj_UNIT_FACING)
    call SetUnitX(GetLastCreatedUnit(), GetLocationX(udg_TempPoint))
    call SetUnitY(GetLastCreatedUnit(), GetLocationY(udg_TempPoint))
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        call UnitAddItemSwapped(UnitItemInSlotBJ(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)], GetForLoopIndexA()), GetLastCreatedUnit())
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    set udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]=null
    set udg_Playerhero[GetConvertedPlayerId(Player(bj_PLAYER_NEUTRAL_EXTRA))]=null
    set udg_TempUnit=a
    call KillUnit(udg_TempUnit)
    set udg_ParasiteIsUpgrading=false
    set udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]=GetLastCreatedUnit()
    set udg_Playerhero[GetConvertedPlayerId(Player(bj_PLAYER_NEUTRAL_EXTRA))]=GetLastCreatedUnit()
    set udg_AlienForm_Alien=GetLastCreatedUnit()
    call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_Parasite)
    call RemoveLocation(udg_TempPoint)
    call CreateNUnitsAtLoc(1, 'e00L', udg_Parasite, udg_HoldZone, bj_UNIT_FACING)
    set udg_Alien_ShopWorkaround=GetLastCreatedUnit()
    call EnableTrigger(gg_trg_AlienAdjustShop)
    if ( Trig_ParasiteUpgradeFinish_Func036C() ) then
        call PlaySoundBJ(gg_snd_DragonYesAttack3)
        call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 2, "ReplaceableTextures\\CameraMasks\\DiagonalSlash_mask.blp", 0.00, 100.00, 100.00, 0)
        call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_4587")
    else
    endif
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=12
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_ParasiteUpgradeFinish_Func037Func001C() ) then
            set udg_TempUnitType=udg_ParasiteChildInfectee
            set udg_TempUnit=udg_Playerhero[GetForLoopIndexA()]
            set udg_TempPlayer=ConvertedPlayer(GetForLoopIndexA())
            call ExecuteFunc("PendUpgrade")
            call TriggerExecute(gg_trg_ParasiteSpawnCreateSpell)
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
endfunction

//===========================================================================
function InitTrig_ParasiteUpgradeFinish takes nothing returns nothing
    set gg_trg_ParasiteUpgradeFinish=CreateTrigger()
    call TriggerAddAction(gg_trg_ParasiteUpgradeFinish, function Trig_ParasiteUpgradeFinish_Actions)
endfunction

//===========================================================================
// Trigger: ParasiteSpawnCreateSpell
//===========================================================================
function Trig_ParasiteSpawnCreateSpell_Actions takes nothing returns nothing
    call CreateNUnitsAtLoc(1, 'e00M', udg_TempPlayer, udg_HoldZone, bj_UNIT_FACING)
    call CreateNUnitsAtLoc(1, 'e00P', udg_TempPlayer, udg_HoldZone, bj_UNIT_FACING)
    call CreateNUnitsAtLoc(1, 'e015', udg_TempPlayer, udg_HoldZone, bj_UNIT_FACING)
endfunction

//===========================================================================
function InitTrig_ParasiteSpawnCreateSpell takes nothing returns nothing
    set gg_trg_ParasiteSpawnCreateSpell=CreateTrigger()
    call TriggerAddAction(gg_trg_ParasiteSpawnCreateSpell, function Trig_ParasiteSpawnCreateSpell_Actions)
endfunction

//===========================================================================
// Trigger: ParasiteRemovePrion
//
// fix this so as prion is gud
//===========================================================================
function Trig_ParasiteRemovePrion_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A02N' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteRemovePrion_Func003C takes nothing returns boolean
    if ( not ( udg_MutantUpgradingTo != 'h01L' ) ) then
        return false
    endif
    if ( not ( UnitHasBuffBJ(GetSpellTargetUnit(), 'B009') == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ParasiteRemovePrion_Actions takes nothing returns nothing
    if ( Trig_ParasiteRemovePrion_Func003C() ) then
        call IssueImmediateOrderBJ(GetTriggerUnit(), "stop")
        call DisplayTextToPlayer(GetOwningPlayer(GetTriggerUnit()), 0, 0, "This unit is infected by a Rapid Gestation Infection!|nYour infection will have no use!")
    else
        call UnitRemoveBuffBJ('B009', GetSpellTargetUnit())
        call UnitRemoveBuffBJ('B01F', GetSpellTargetUnit())
        call UnitRemoveBuffBJ('B01T', GetSpellTargetUnit())
        call UnitRemoveBuffBJ('B01U', GetSpellTargetUnit())
        call UnitRemoveBuffBJ('B01V', GetSpellTargetUnit())
        call UnitRemoveBuffBJ('B01W', GetSpellTargetUnit())
    endif
endfunction

//===========================================================================
function InitTrig_ParasiteRemovePrion takes nothing returns nothing
    set gg_trg_ParasiteRemovePrion=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ParasiteRemovePrion, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_ParasiteRemovePrion, Condition(function Trig_ParasiteRemovePrion_Conditions))
    call TriggerAddAction(gg_trg_ParasiteRemovePrion, function Trig_ParasiteRemovePrion_Actions)
endfunction

//===========================================================================
// Trigger: Shutdown
//===========================================================================
function Trig_Shutdown_Conditions takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_Shutdown_Actions takes nothing returns nothing
    call CreateNUnitsAtLoc(1, 'hpea', udg_HiddenAndroid, udg_HoldZone, bj_UNIT_FACING)
    set udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)]=GetLastCreatedUnit()
    set udg_HiddenAndroid=Player(PLAYER_NEUTRAL_PASSIVE)
    call KillUnit(GetLastCreatedUnit())
    call RemoveItem(udg_Android_MemoryCard)
endfunction

//===========================================================================
function InitTrig_Shutdown takes nothing returns nothing
    set gg_trg_Shutdown=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_Shutdown, Player(0), "-shutdown", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Shutdown, Player(1), "-shutdown", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Shutdown, Player(2), "-shutdown", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Shutdown, Player(3), "-shutdown", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Shutdown, Player(4), "-shutdown", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Shutdown, Player(5), "-shutdown", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Shutdown, Player(6), "-shutdown", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Shutdown, Player(7), "-shutdown", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Shutdown, Player(8), "-shutdown", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Shutdown, Player(9), "-shutdown", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Shutdown, Player(10), "-shutdown", true)
    call TriggerRegisterPlayerChatEvent(gg_trg_Shutdown, Player(11), "-shutdown", true)
    call TriggerAddCondition(gg_trg_Shutdown, Condition(function Trig_Shutdown_Conditions))
    call TriggerAddAction(gg_trg_Shutdown, function Trig_Shutdown_Actions)
endfunction

//===========================================================================
// Trigger: AndroidChat
//===========================================================================
function Trig_AndroidChat_Conditions takes nothing returns boolean
    if ( not ( GetTriggerPlayer() == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidChat_Func014Func002Func003Func001C takes nothing returns boolean
    if ( not ( UnitHasItem(GetEnumUnit(), udg_Android_MemoryCard) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidChat_Func014Func002Func003A takes nothing returns nothing
    if ( Trig_AndroidChat_Func014Func002Func003Func001C() ) then
        set udg_Android_MemoryCardOwner=GetEnumUnit()
    else
    endif
endfunction

function Trig_AndroidChat_Func014Func002C takes nothing returns boolean
    if ( not ( UnitHasItem(udg_Android_MemoryCardOwner, udg_Android_MemoryCard) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidChat_Func014C takes nothing returns boolean
    if ( not ( CheckItemStatus(udg_Android_MemoryCard, bj_ITEM_STATUS_OWNED) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidChat_Actions takes nothing returns nothing
    if ( Trig_AndroidChat_Func014C() ) then
        if ( Trig_AndroidChat_Func014Func002C() ) then
            set udg_TempPoint=GetUnitLoc(udg_Android_MemoryCardOwner)
        else
            set udg_TempUnitGroup=GetUnitsInRectAll(GetPlayableMapRect())
            call ForGroupBJ(udg_TempUnitGroup, function Trig_AndroidChat_Func014Func002Func003A)
            set udg_TempPoint=GetUnitLoc(udg_Android_MemoryCardOwner)
                call DestroyGroup(udg_TempUnitGroup)
        endif
    else
        set udg_TempPoint=GetItemLoc(udg_Android_MemoryCard)
    endif
    call CreateTextTagLocBJ(GetEventPlayerChatString(), udg_TempPoint, 0, 8.00, 100, 100, 100, 0)
    call SetTextTagVelocityBJ(GetLastCreatedTextTag(), 32.00, 90)
    call SetTextTagPermanentBJ(GetLastCreatedTextTag(), false)
    call SetTextTagLifespanBJ(GetLastCreatedTextTag(), 5)
    call SetTextTagFadepointBJ(GetLastCreatedTextTag(), 4)
    call ShowTextTagForceBJ(false, GetLastCreatedTextTag(), GetPlayersAll())
    if IsLocationVisibleToPlayer(udg_TempPoint, GetLocalPlayer()) then
    call SetTextTagVisibility(bj_lastCreatedTextTag, true)
    endif
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_AndroidChat takes nothing returns nothing
    set gg_trg_AndroidChat=CreateTrigger()
    call DisableTrigger(gg_trg_AndroidChat)
    call TriggerRegisterPlayerChatEvent(gg_trg_AndroidChat, Player(0), "", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_AndroidChat, Player(1), "", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_AndroidChat, Player(2), "", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_AndroidChat, Player(3), "", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_AndroidChat, Player(4), "", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_AndroidChat, Player(5), "", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_AndroidChat, Player(6), "", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_AndroidChat, Player(7), "", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_AndroidChat, Player(8), "", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_AndroidChat, Player(9), "", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_AndroidChat, Player(10), "", false)
    call TriggerRegisterPlayerChatEvent(gg_trg_AndroidChat, Player(11), "", false)
    call TriggerAddCondition(gg_trg_AndroidChat, Condition(function Trig_AndroidChat_Conditions))
    call TriggerAddAction(gg_trg_AndroidChat, function Trig_AndroidChat_Actions)
endfunction

//===========================================================================
// Trigger: AndroidCardVision
//===========================================================================
function Trig_AndroidCardVision_Func003Func002Func003Func001C takes nothing returns boolean
    if ( not ( UnitHasItem(GetEnumUnit(), udg_Android_MemoryCard) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidCardVision_Func003Func002Func003A takes nothing returns nothing
    if ( Trig_AndroidCardVision_Func003Func002Func003Func001C() ) then
        set udg_Android_MemoryCardOwner=GetEnumUnit()
    else
    endif
endfunction

function Trig_AndroidCardVision_Func003Func002C takes nothing returns boolean
    if ( not ( UnitHasItem(udg_Android_MemoryCardOwner, udg_Android_MemoryCard) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidCardVision_Func003C takes nothing returns boolean
    if ( not ( CheckItemStatus(udg_Android_MemoryCard, bj_ITEM_STATUS_OWNED) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidCardVision_Func005C takes nothing returns boolean
    if ( not ( IsUnitDeadBJ(udg_TempUnit) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidCardVision_Actions takes nothing returns nothing
    call DestroyFogModifier(udg_AndroidCardVisibility)
    if ( Trig_AndroidCardVision_Func003C() ) then
        if ( Trig_AndroidCardVision_Func003Func002C() ) then
            set udg_TempPoint=GetUnitLoc(udg_Android_MemoryCardOwner)
        else
            set udg_TempUnitGroup=GetUnitsInRectAll(GetPlayableMapRect())
            call ForGroupBJ(udg_TempUnitGroup, function Trig_AndroidCardVision_Func003Func002Func003A)
            set udg_TempPoint=GetUnitLoc(udg_Android_MemoryCardOwner)
            call DestroyGroup(udg_TempUnitGroup)
        endif
    else
        set udg_TempPoint=GetItemLoc(udg_Android_MemoryCard)
    endif
    set udg_TempUnit=udg_Sector_Space[GetSector(udg_TempPoint)]
    if ( Trig_AndroidCardVision_Func005C() ) then
        call DestroyTrigger(GetTriggeringTrigger())
        return
    else
    endif
    call CreateFogModifierRadiusLocBJ(true, udg_HiddenAndroid, FOG_OF_WAR_VISIBLE, udg_TempPoint, 650.00)
    set udg_AndroidCardVisibility=GetLastCreatedFogModifier()
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_AndroidCardVision takes nothing returns nothing
    set gg_trg_AndroidCardVision=CreateTrigger()
    call DisableTrigger(gg_trg_AndroidCardVision)
    call TriggerRegisterTimerEventPeriodic(gg_trg_AndroidCardVision, 1.00)
    call TriggerAddAction(gg_trg_AndroidCardVision, function Trig_AndroidCardVision_Actions)
endfunction

//===========================================================================
// Trigger: AntiacquireRemote
//===========================================================================
function Trig_AntiacquireRemote_Conditions takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetTriggerUnit()) == udg_HiddenAndroid ) ) then
        return false
    endif
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I01I' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AntiacquireRemote_Actions takes nothing returns nothing
    call UnitRemoveItemSwapped(GetManipulatedItem(), GetManipulatingUnit())
endfunction

//===========================================================================
function InitTrig_AntiacquireRemote takes nothing returns nothing
    set gg_trg_AntiacquireRemote=CreateTrigger()
    call DisableTrigger(gg_trg_AntiacquireRemote)
    call TriggerRegisterAnyUnitEventBJ(gg_trg_AntiacquireRemote, EVENT_PLAYER_UNIT_PICKUP_ITEM)
    call TriggerAddCondition(gg_trg_AntiacquireRemote, Condition(function Trig_AntiacquireRemote_Conditions))
    call TriggerAddAction(gg_trg_AntiacquireRemote, function Trig_AntiacquireRemote_Actions)
endfunction

//===========================================================================
// Trigger: AndroidRemote
//===========================================================================
function Trig_AndroidRemote_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A05W' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidRemote_Func003C takes nothing returns boolean
    if ( not ( GetItemUserData(GetItemOfTypeFromUnitBJ(GetSpellAbilityUnit(), 'I01I')) != udg_AndroidRemoteID ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidRemote_Func005Func001Func001Func001Func001C takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) != udg_Parasite ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) != Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return false
    endif
    if ( not ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(GetSpellAbilityUnit()))] == false ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) != udg_Mutant ) ) then
        return false
    endif
    if ( not ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetSpellAbilityUnit()))] != true ) ) then
        return false
    endif
    if ( not ( GetOwningPlayer(GetSpellAbilityUnit()) != udg_RogueAndroid ) ) then
        return false
    endif
    if ( not ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetOwningPlayer(GetSpellAbilityUnit()))] != true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidRemote_Func005Func001Func001Func001Func002C takes nothing returns boolean
    if ( ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(udg_HiddenAndroid)] == true ) ) then
        return true
    endif
    if ( ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(udg_HiddenAndroid)] == true ) ) then
        return true
    endif
    if ( ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(udg_HiddenAndroid)] == true ) ) then
        return true
    endif
    return false
endfunction

function Trig_AndroidRemote_Func005Func001Func001Func001Func008A takes nothing returns nothing
    call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 7.00, "|cff800080Android successfully configured for HUMAN classification.|r")
endfunction

function Trig_AndroidRemote_Func005Func001Func001Func001C takes nothing returns boolean
    if ( not Trig_AndroidRemote_Func005Func001Func001Func001Func001C() ) then
        return false
    endif
    if ( not Trig_AndroidRemote_Func005Func001Func001Func001Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidRemote_Func005Func001Func001Func008Func001Func002C takes nothing returns boolean
    if ( ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetEnumPlayer())] == true ) ) then
        return true
    endif
    if ( ( GetEnumPlayer() == udg_RogueAndroid ) ) then
        return true
    endif
    return false
endfunction

function Trig_AndroidRemote_Func005Func001Func001Func008Func001C takes nothing returns boolean
    if ( not Trig_AndroidRemote_Func005Func001Func001Func008Func001Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidRemote_Func005Func001Func001Func008A takes nothing returns nothing
    if ( Trig_AndroidRemote_Func005Func001Func001Func008Func001C() ) then
        call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 7.00, "|cff800080Android successfully configured for CYBORG classification.|r")
    else
    endif
endfunction

function Trig_AndroidRemote_Func005Func001Func001Func009C takes nothing returns boolean
    if ( ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(GetOwningPlayer(GetSpellAbilityUnit()))] == true ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetSpellAbilityUnit()) == udg_RogueAndroid ) ) then
        return true
    endif
    return false
endfunction

function Trig_AndroidRemote_Func005Func001Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(udg_HiddenAndroid)] == false ) ) then
        return false
    endif
    if ( not Trig_AndroidRemote_Func005Func001Func001Func009C() ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidRemote_Func005Func001Func008Func001Func002C takes nothing returns boolean
    if ( ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetEnumPlayer())] == true ) ) then
        return true
    endif
    if ( ( GetEnumPlayer() == udg_Parasite ) ) then
        return true
    endif
    return false
endfunction

function Trig_AndroidRemote_Func005Func001Func008Func001C takes nothing returns boolean
    if ( not Trig_AndroidRemote_Func005Func001Func008Func001Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidRemote_Func005Func001Func008A takes nothing returns nothing
    if ( Trig_AndroidRemote_Func005Func001Func008Func001C() ) then
        call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 7.00, "|cff800080Android successfully configured for ALIEN classification.|r")
    else
    endif
endfunction

function Trig_AndroidRemote_Func005Func001Func009C takes nothing returns boolean
    if ( ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(GetOwningPlayer(GetSpellAbilityUnit()))] == true ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetSpellAbilityUnit()) == udg_Parasite ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetSpellAbilityUnit()) == Player(bj_PLAYER_NEUTRAL_EXTRA) ) ) then
        return true
    endif
    return false
endfunction

function Trig_AndroidRemote_Func005Func001C takes nothing returns boolean
    if ( not ( udg_Player_IsParasiteSpawn[GetConvertedPlayerId(udg_HiddenAndroid)] == false ) ) then
        return false
    endif
    if ( not Trig_AndroidRemote_Func005Func001Func009C() ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidRemote_Func005Func008Func001Func002C takes nothing returns boolean
    if ( ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetEnumPlayer())] == true ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetEnumUnit()) == udg_Mutant ) ) then
        return true
    endif
    return false
endfunction

function Trig_AndroidRemote_Func005Func008Func001C takes nothing returns boolean
    if ( not Trig_AndroidRemote_Func005Func008Func001Func002C() ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidRemote_Func005Func008A takes nothing returns nothing
    if ( Trig_AndroidRemote_Func005Func008Func001C() ) then
        call DisplayTimedTextToPlayer(GetEnumPlayer(), 0, 0, 7.00, "|cff800080Android successfully configured for MUTANT classification.|r")
    else
    endif
endfunction

function Trig_AndroidRemote_Func005Func009C takes nothing returns boolean
    if ( ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(GetOwningPlayer(GetSpellAbilityUnit()))] == true ) ) then
        return true
    endif
    if ( ( GetOwningPlayer(GetSpellAbilityUnit()) == udg_Mutant ) ) then
        return true
    endif
    return false
endfunction

function Trig_AndroidRemote_Func005C takes nothing returns boolean
    if ( not ( udg_Player_IsMutantSpawn[GetConvertedPlayerId(udg_HiddenAndroid)] == false ) ) then
        return false
    endif
    if ( not Trig_AndroidRemote_Func005Func009C() ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidRemote_Func006Func001Func005A takes nothing returns nothing
    call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_PASSIVE), true)
endfunction

function Trig_AndroidRemote_Func006Func001Func010Func001C takes nothing returns boolean
    if ( not ( udg_EscapePod_Owner[GetUnitUserData(GetEnumUnit())] == udg_HiddenAndroid ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidRemote_Func006Func001Func010A takes nothing returns nothing
    if ( Trig_AndroidRemote_Func006Func001Func010Func001C() ) then
        call SetUnitOwner(GetEnumUnit(), udg_HiddenAndroid, true)
    else
    endif
endfunction

function Trig_AndroidRemote_Func006Func001C takes nothing returns boolean
    if ( not ( udg_Android_Deactivated == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidRemote_Func006C takes nothing returns boolean
    if ( not ( udg_TempBool == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidRemote_Actions takes nothing returns nothing
    if ( Trig_AndroidRemote_Func003C() ) then
        call DisplayTimedTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, 7.00, "|cff800080ERROR: Unit not responsive. Clearance code out of date; please find the newest remote.|r")
        return
    else
    endif
    set udg_TempBool=true
    if ( Trig_AndroidRemote_Func005C() ) then
        call DisplayTimedTextToPlayer(udg_HiddenAndroid, 0, 0, 7.00, "|cff800080New friendly classification: MUTANT|r")
        set udg_TempBool=false
        set udg_Player_IsParasiteSpawn[GetConvertedPlayerId(udg_HiddenAndroid)]=false
        set udg_Player_IsMutantSpawn[GetConvertedPlayerId(udg_HiddenAndroid)]=true
        set udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(udg_HiddenAndroid)]=false
        call ForForce(GetPlayersAll(), function Trig_AndroidRemote_Func005Func008A)
    else
        if ( Trig_AndroidRemote_Func005Func001C() ) then
            call DisplayTimedTextToPlayer(udg_HiddenAndroid, 0, 0, 7.00, "|cff800080New friendly classification: ALIEN|r")
            set udg_TempBool=false
            set udg_Player_IsParasiteSpawn[GetConvertedPlayerId(udg_HiddenAndroid)]=true
            set udg_Player_IsMutantSpawn[GetConvertedPlayerId(udg_HiddenAndroid)]=false
            set udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(udg_HiddenAndroid)]=false
            call ForForce(GetPlayersAll(), function Trig_AndroidRemote_Func005Func001Func008A)
        else
            if ( Trig_AndroidRemote_Func005Func001Func001C() ) then
                call DisplayTimedTextToPlayer(udg_HiddenAndroid, 0, 0, 7.00, "|cff800080New friendly classification: Cyborg|r")
                set udg_TempBool=false
                set udg_Player_IsParasiteSpawn[GetConvertedPlayerId(udg_HiddenAndroid)]=false
                set udg_Player_IsMutantSpawn[GetConvertedPlayerId(udg_HiddenAndroid)]=false
                set udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(udg_HiddenAndroid)]=true
                call ForForce(GetPlayersAll(), function Trig_AndroidRemote_Func005Func001Func001Func008A)
            else
                if ( Trig_AndroidRemote_Func005Func001Func001Func001C() ) then
                    call DisplayTimedTextToPlayer(udg_HiddenAndroid, 0, 0, 7.00, "|cff800080New friendly classification: HUMAN|r")
                    set udg_TempBool=false
                    set udg_Player_IsParasiteSpawn[GetConvertedPlayerId(udg_HiddenAndroid)]=false
                    set udg_Player_IsMutantSpawn[GetConvertedPlayerId(udg_HiddenAndroid)]=false
                    set udg_Player_IsRogueAndroidSpawn[GetConvertedPlayerId(udg_HiddenAndroid)]=false
                    call ForForce(GetPlayersAll(), function Trig_AndroidRemote_Func005Func001Func001Func001Func008A)
                else
                endif
            endif
        endif
    endif
    if ( Trig_AndroidRemote_Func006C() ) then
        if ( Trig_AndroidRemote_Func006Func001C() ) then
            set udg_Android_Deactivated=false
            call PauseUnitBJ(false, udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)])
            call DisplayTimedTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, 7.00, "|cff800080Android reactivated.|r")
            call DisplayTimedTextToPlayer(udg_HiddenAndroid, 0, 0, 7.00, "|cff800080You have been reactivated.|r")
            call ForGroupBJ(GetUnitsOfTypeIdAll('h02P'), function Trig_AndroidRemote_Func006Func001Func010A)
        else
            set udg_Android_Deactivated=true
            call DisplayTimedTextToPlayer(GetOwningPlayer(GetSpellAbilityUnit()), 0, 0, 7.00, "|cff800080Android deactivated.|r")
            call PauseUnitBJ(true, udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)])
            call DisplayTimedTextToPlayer(udg_HiddenAndroid, 0, 0, 7.00, "|cff800080You have been deactivated.|r")
            call ForGroupBJ(GetUnitsInRectOfPlayer(gg_rct_Space, udg_HiddenAndroid), function Trig_AndroidRemote_Func006Func001Func005A)
        endif
    else
    endif
    call TriggerExecute(gg_trg_WinCheck)
endfunction

//===========================================================================
function InitTrig_AndroidRemote takes nothing returns nothing
    set gg_trg_AndroidRemote=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_AndroidRemote, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_AndroidRemote, Condition(function Trig_AndroidRemote_Conditions))
    call TriggerAddAction(gg_trg_AndroidRemote, function Trig_AndroidRemote_Actions)
endfunction

//===========================================================================
// Trigger: AndroidUpgrade
//
// udg_HiddenAndroid_TKDamageDone
//===========================================================================
function Trig_AndroidUpgrade_Conditions takes nothing returns boolean
    if ( not ( IsUnitIdType(GetUnitTypeId(GetTriggerUnit()), UNIT_TYPE_MECHANICAL) == false ) ) then
        return false
    endif
    if ( not ( udg_Android_DialogOn == false ) ) then
        return false
    endif
    if ( not ( udg_UpgradePointsAndroid >= 2000.00 ) ) then
        return false
    endif
    if ( not ( GetTriggerUnit() == udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)] ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidUpgrade_Func017Func001C takes nothing returns boolean
    if ( not ( GetItemTypeId(UnitItemInSlotBJ(GetTriggerUnit(), GetForLoopIndexA())) == 'I013' ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidUpgrade_Func020Func001C takes nothing returns boolean
    if ( not ( GetItemTypeId(UnitItemInSlotBJ(GetTriggerUnit(), GetForLoopIndexA())) == 'I018' ) ) then
        return false
    endif
    if ( not ( udg_HiddenAndroid_TKDamageDone <= 0.50 ) ) then
        return false
    endif
    if ( not ( udg_AndroidRemoteID == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidUpgrade_Actions takes nothing returns nothing
    set udg_Android_DialogOn=true
    call DialogClearBJ(udg_AndroidUpgradeDialog)
    call DialogAddButtonBJ(udg_AndroidUpgradeDialog, "TRIGSTR_3073")
    set udg_AndroidUpgradeDialogButtons[1]=GetLastCreatedButtonBJ()
    call DialogAddButtonBJ(udg_AndroidUpgradeDialog, "TRIGSTR_3074")
    set udg_AndroidUpgradeDialogButtons[2]=GetLastCreatedButtonBJ()
    set udg_Android_UpgradingTo[2]='h02F'
    call DialogAddButtonBJ(udg_AndroidUpgradeDialog, "TRIGSTR_3235")
    set udg_AndroidUpgradeDialogButtons[3]=GetLastCreatedButtonBJ()
    set udg_Android_UpgradingTo[3]='h047'
    // Penguin Check Begin
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_AndroidUpgrade_Func017Func001C() ) then
            call DialogAddButtonBJ(udg_AndroidUpgradeDialog, "TRIGSTR_3976")
            set udg_AndroidUpgradeDialogButtons[4]=GetLastCreatedButtonBJ()
            set udg_Android_UpgradingTo[4]='h02U'
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    // Penguin Check End
    // Phoenix Check Begin
    set bj_forLoopAIndex=1
    set bj_forLoopAIndexEnd=6
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( Trig_AndroidUpgrade_Func020Func001C() ) then
            call DialogAddButtonBJ(udg_AndroidUpgradeDialog, "TRIGSTR_5288")
            set udg_AndroidUpgradeDialogButtons[5]=GetLastCreatedButtonBJ()
            set udg_Android_UpgradingTo[5]='h052'
        else
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    // Phoenix Check End
    call DialogDisplayBJ(true, udg_AndroidUpgradeDialog, udg_HiddenAndroid)
    call IssuePointOrderLocBJ(GetTriggerUnit(), "move", GetRectCenter(gg_rct_AndroidUpgrade))
endfunction

//===========================================================================
function InitTrig_AndroidUpgrade takes nothing returns nothing
    set gg_trg_AndroidUpgrade=CreateTrigger()
    call DisableTrigger(gg_trg_AndroidUpgrade)
    call TriggerRegisterEnterRectSimple(gg_trg_AndroidUpgrade, gg_rct_AndroidUpgrade)
    call TriggerAddCondition(gg_trg_AndroidUpgrade, Condition(function Trig_AndroidUpgrade_Conditions))
    call TriggerAddAction(gg_trg_AndroidUpgrade, function Trig_AndroidUpgrade_Actions)
endfunction

//===========================================================================
// Trigger: AndroidUpgradeDialogClick
//===========================================================================
//TESH.scrollpos=48
//TESH.alwaysfold=0
function Trig_AndroidUpgradeDialogClick_Actions takes nothing returns nothing
    local unit c=udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)]
    local location b=GetRectCenter(gg_rct_AndroidUpgrade)
    local effect r
    local integer i=0
    local integer m
    local item i1
    local item i2
    local item i3
    local item i4
    local item i5
    local item i6
    
    //[1] is Cancel option
    if ( GetClickedButtonBJ() == udg_AndroidUpgradeDialogButtons[1] ) then
        call RemoveLocation(b)
        set udg_Android_DialogOn=false
        return
    endif
    
    //Loop, iterating through android evolution choices
    set bj_forLoopAIndex=2
    set bj_forLoopAIndexEnd=10
    loop
        exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
        if ( GetClickedButtonBJ() == udg_AndroidUpgradeDialogButtons[GetForLoopIndexA()] ) then
            set m=udg_Android_UpgradingTo[GetForLoopIndexA()]
        endif
        set bj_forLoopAIndex=bj_forLoopAIndex + 1
    endloop
    
    call ChangeElevatorWalls(false, bj_ELEVATOR_WALL_TYPE_ALL, gg_dest_DTrx_0642)
    call ChangeElevatorHeight(gg_dest_DTrx_0642, 3)
    call UnitAddAbilityBJ('Avul', c) //Invulnerable
    call PauseUnit(c, true)
    call SetUnitTimeScalePercent(c, 0.0)
    call SetUnitPositionLoc(c, b)
    
    loop
        exitwhen i > 60.0
        set r=AddSpecialEffectLocBJ(b, "war3mapImported\\AncientExplode.mdl")
        set i=i + 1
        call PolledWait(0.5) //Emphasis here! This is where the delay of evolution happens!
        call DestroyEffect(r)
    endloop
    
    call RemoveLocation(b)
    set i1=UnitItemInSlotBJ(udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)], 1)
    set i2=UnitItemInSlotBJ(udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)], 2)
    set i3=UnitItemInSlotBJ(udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)], 3)
    set i4=UnitItemInSlotBJ(udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)], 4)
    set i5=UnitItemInSlotBJ(udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)], 5)
    set i6=UnitItemInSlotBJ(udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)], 6)
    set i=1
    
    loop
        exitwhen i > 6
        call UnitDropItem(udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)], i)
        set i=i + 1
    endloop
    
    call ReplaceUnitBJ(udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)], m, bj_UNIT_STATE_METHOD_RELATIVE)

    set udg_Android_Preference=m
    set udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)]=GetLastReplacedUnitBJ()
        call UnitAddItem(GetLastReplacedUnitBJ(), i1)
            call UnitAddItem(GetLastReplacedUnitBJ(), i2)
                call UnitAddItem(GetLastReplacedUnitBJ(), i3)
                    call UnitAddItem(GetLastReplacedUnitBJ(), i4)
                        call UnitAddItem(GetLastReplacedUnitBJ(), i5)
                            call UnitAddItem(GetLastReplacedUnitBJ(), i6)
    call ChangeElevatorHeight(gg_dest_DTrx_0642, 1)
    call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, gg_dest_DTrx_0642)
    call UnitAddAbilityForPeriod(GetLastReplacedUnitBJ() , 'Avul' , 6.0) //Invulnerable
    
    //Below makes the color be neutral
    //if GetUnitTypeId(GetLastReplacedUnitBJ())=='h047' then
        //call SetUnitColor(GetLastReplacedUnitBJ(),ConvertPlayerColor(12))
    //endif
endfunction

//===========================================================================
function InitTrig_AndroidUpgradeDialogClick takes nothing returns nothing
    set gg_trg_AndroidUpgradeDialogClick=CreateTrigger()
    call TriggerRegisterDialogEventBJ(gg_trg_AndroidUpgradeDialogClick, udg_AndroidUpgradeDialog)
    call TriggerAddAction(gg_trg_AndroidUpgradeDialogClick, function Trig_AndroidUpgradeDialogClick_Actions)
endfunction


//===========================================================================
// Trigger: AndroidRevive
//===========================================================================
//TESH.scrollpos=27
//TESH.alwaysfold=0

function Trig_AndroidRevive_Func001Func014A takes nothing returns nothing
    call SetPlayerAllianceStateBJ(GetEnumPlayer(), udg_TempPlayer, bj_ALLIANCE_ALLIED)
    call SetPlayerAllianceStateBJ(udg_TempPlayer, GetEnumPlayer(), bj_ALLIANCE_ALLIED)
endfunction

function Trig_AndroidRevive_Func001Func017A takes nothing returns nothing
    call SetPlayerAllianceStateBJ(GetEnumPlayer(), udg_TempPlayer, bj_ALLIANCE_UNALLIED)
    call SetPlayerAllianceStateBJ(udg_TempPlayer, GetEnumPlayer(), bj_ALLIANCE_ALLIED_VISION)
endfunction

function Trig_AndroidRevive_Func001C takes nothing returns boolean
    if ( not ( GetItemTypeId(GetManipulatedItem()) == 'I01H' ) ) then //android card
        return false
    endif
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)]) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidRevive_Actions takes nothing returns nothing
local location a
local effect r
local integer i=1
local integer b=GetInventoryIndexOfItemTypeBJ(GetTriggerUnit(), 'I01H')
local item k=UnitItemInSlot(GetTriggerUnit(), b - 1)
local unit l=GetTriggerUnit()
local item z

if IsUnitDeadBJ(udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)]) then
    if b > 0 then
   // call UnitDropItem(l,'I01H')
        call RemoveItem(k)
        call DisableTrigger(gg_trg_AndroidUpgradeDialogClick)
        call DisableTrigger(GetTriggeringTrigger())
                call DisableTrigger(gg_trg_AndroidCardVision)
                        call DisableTrigger(gg_trg_AndroidChat)
    call ChangeElevatorWalls(false, bj_ELEVATOR_WALL_TYPE_ALL, gg_dest_DTrx_0642)
    call ChangeElevatorHeight(gg_dest_DTrx_0642, 1)
        set a=GetUnitLoc(gg_unit_h03Z_0188)
        set z=UnitAddItemById(l, 'I01I')
        set udg_AndroidRemoteID=GetRandomInt(1, 999999999)
        call SetItemUserData(z, udg_AndroidRemoteID)
        call RemoveLocation(a)
        set a=GetRectCenter(gg_rct_AndroidUpgrade)
        loop
            exitwhen i > 60
            set r=AddSpecialEffectLocBJ(a, "war3mapImported\\AncientExplode.mdx")
            call PolledWait(0.50)
            call DestroyEffectBJ(r)
            set i=i + 1
        endloop
        set udg_TempPoint=a
        set udg_TempPlayer=udg_HiddenAndroid
        if udg_UpgradePointsAndroid >= 2000.00 then
            call CreateNUnitsAtLoc(1, udg_Android_Preference, udg_TempPlayer, udg_TempPoint, bj_UNIT_FACING)
        else
            call CreateNUnitsAtLoc(1, 'h00H', udg_TempPlayer, udg_TempPoint, bj_UNIT_FACING)
        endif
                            call ShowInterfaceForceOn(GetForceOfPlayer(udg_HiddenAndroid), 0.01)
        set udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]=GetLastCreatedUnit()
        call SetPlayerName(udg_TempPlayer, udg_Player_NameBeforeDead[GetConvertedPlayerId(udg_TempPlayer)])
        call PanCameraToTimedLocForPlayer(udg_TempPlayer, udg_TempPoint, 0)
        call SelectUnitForPlayerSingle(GetLastCreatedUnit(), udg_TempPlayer)
        call ForceRemovePlayerSimple(udg_TempPlayer, udg_DeadGroup)
        call ForForce(GetPlayersAll(), function Trig_AndroidRevive_Func001Func014A)
        call SetPlayerAllianceStateBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPlayer, bj_ALLIANCE_ALLIED)
        call SetPlayerAllianceStateBJ(udg_TempPlayer, Player(bj_PLAYER_NEUTRAL_EXTRA), bj_ALLIANCE_ALLIED)
        call ForForce(udg_DeadGroup, function Trig_AndroidRevive_Func001Func017A)
        call RemoveLocation(udg_TempPoint)
                call EnableTrigger(gg_trg_AndroidUpgradeDialogClick)
        call RemoveLocation(udg_TempPoint)
            call ChangeElevatorWalls(true, bj_ELEVATOR_WALL_TYPE_ALL, gg_dest_DTrx_0642)
    call ChangeElevatorHeight(gg_dest_DTrx_0642, 1)
    call EnableTrigger(gg_trg_AndroidRevive)
    
    if udg_PlayerRole[GetConvertedPlayerId(udg_HiddenAndroid)] == 7 then
    set udg_TempPlayer=udg_HiddenAndroid
        call CreateNUnitsAtLoc(1, 'H046', udg_TempPlayer, udg_HoldZone, bj_UNIT_FACING)
    set udg_TempUnit=GetLastCreatedUnit()
    set udg_TempUnit2=udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]
    call ExecuteFunc("RoboButler")
    endif
    endif
    endif
endfunction

//===========================================================================
function InitTrig_AndroidRevive takes nothing returns nothing
    set gg_trg_AndroidRevive=CreateTrigger()
    call TriggerRegisterEnterRectSimple(gg_trg_AndroidRevive, gg_rct_Fabricate)
    call TriggerAddAction(gg_trg_AndroidRevive, function Trig_AndroidRevive_Actions)
endfunction


//===========================================================================
// Trigger: AndroidPacificationRevive
//===========================================================================
//TESH.scrollpos=33
//TESH.alwaysfold=0

function Trig_AndroidPacificationRevive_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A094' ) ) then
    return false
    endif
    if GetSpellTargetUnit() != gg_unit_h04A_0144 then
    return false
    endif
    if ( not ( IsUnitAliveBJ(udg_Playerhero[GetConvertedPlayerId(udg_HiddenAndroid)]) == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_AndroidPacificationRevive_Actions takes nothing returns nothing
    local item z
    local unit q=GetSpellAbilityUnit()
    local integer i=0
    loop
        exitwhen i > 5
        if GetItemTypeId(UnitItemInSlot(q, i)) == 'I01H' then //Android Card
            call RemoveItem(UnitItemInSlot(q, i))
            set i=10 //endloop ;)
        endif
        set i=i + 1
    endloop
    
    set udg_TempPlayer=udg_HiddenAndroid
    set udg_TempPoint=GetUnitLoc(gg_unit_h04A_0144)
    //set udg_TempPoint2=PolarProjectionBJ(udg_TempPoint,45.0,GetRandomDirectionDeg())
    //set udg_TempUnit=ReplaceUnitBJ(gg_unit_h04A_0144,GetUnitTypeId(gg_unit_h04A_0144),bj_UNIT_STATE_METHOD_RELATIVE)
    call UnitAddAbility(gg_unit_h04A_0144, 'AInv') //Inventory(Hero)
    //set z=CreateItemLoc('I01I',udg_TempPoint2)
    set z=UnitAddItemById(q, 'I01I') //Remote Control
    
    //Make the remote control unique/final
    set udg_AndroidRemoteID=GetRandomInt(1, 999999999)
    call SetItemUserData(z, udg_AndroidRemoteID)
    
    //Change ownership of the pacification bot, to the android
    call SetUnitOwner(gg_unit_h04A_0144, udg_TempPlayer, true)
    call ShowInterfaceForceOn(GetForceOfPlayer(udg_HiddenAndroid), 0.01)
    
    //Set pacification bot as the playerhero of the android
    set udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]=gg_unit_h04A_0144
    
    //Rename the player to his name before death
    call SetPlayerName(udg_TempPlayer, udg_Player_NameBeforeDead[GetConvertedPlayerId(udg_TempPlayer)])
    
    //Set the boolean so we know he died as pacification bot
    set hasRevivedAsPacificationBot=true
        
        call DisableTrigger(gg_trg_AndroidUpgradeDialogClick)
        call DisableTrigger(GetTriggeringTrigger())
        call DisableTrigger(gg_trg_AndroidCardVision)
        call DisableTrigger(gg_trg_AndroidChat)
        
        call PanCameraToTimedLocForPlayer(udg_TempPlayer, udg_TempPoint, 0)
        call SelectUnitForPlayerSingle(gg_unit_h04A_0144, udg_TempPlayer)
        call ForceRemovePlayerSimple(udg_TempPlayer, udg_DeadGroup)
        call ForForce(GetPlayersAll(), function Trig_AndroidRevive_Func001Func014A)
        call SetPlayerAllianceStateBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), udg_TempPlayer, bj_ALLIANCE_ALLIED)
        call SetPlayerAllianceStateBJ(udg_TempPlayer, Player(bj_PLAYER_NEUTRAL_EXTRA), bj_ALLIANCE_ALLIED)
        call ForForce(udg_DeadGroup, function Trig_AndroidRevive_Func001Func017A)
                
        //Clean Memory Leaks
        call RemoveLocation(udg_TempPoint)
        //call PauseUnitForPeriod(udg_TempUnit,4.0)
        call RemoveLocation(udg_TempPoint2)
                
        //If CEO -> Create Robo-Butler unit
        if udg_PlayerRole[GetConvertedPlayerId(udg_HiddenAndroid)] == 7 then //If Android == CEO
            set udg_TempPlayer=udg_HiddenAndroid
            call CreateNUnitsAtLoc(1, 'H046', udg_TempPlayer, udg_HoldZone, bj_UNIT_FACING)
            set udg_TempUnit=GetLastCreatedUnit()
            set udg_TempUnit2=udg_Playerhero[GetConvertedPlayerId(udg_TempPlayer)]
            call ExecuteFunc("RoboButler")
        endif
endfunction

//===========================================================================
function InitTrig_AndroidPacificationRevive takes nothing returns nothing
    set gg_trg_AndroidPacificationRevive=CreateTrigger()
     call TriggerRegisterAnyUnitEventBJ(gg_trg_AndroidPacificationRevive, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    //call TriggerRegisterUnitEvent( gg_trg_AndroidPacificationRevive, gg_unit_h04A_0144, EVENT_UNIT_PICKUP_ITEM )
    call TriggerAddCondition(gg_trg_AndroidPacificationRevive, Condition(function Trig_AndroidPacificationRevive_Conditions))
    call TriggerAddAction(gg_trg_AndroidPacificationRevive, function Trig_AndroidPacificationRevive_Actions)
endfunction


//===========================================================================
// Trigger: PlantChip
//===========================================================================
function Trig_PlantChip_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0AI' ) ) then
        return false
    endif
    return true
endfunction

function HeightDebug takes nothing returns nothing
    local unit corpseChip
    local timer corpseHeightDebugTimer= GetExpiredTimer()

    
    if udg_TESTING then
        set corpseChip=LoadUnitHandle((udg_hash), GetHandleId(corpseHeightDebugTimer), StringHash("CorpseChipDebugHeight")) // INLINED!!
    
        call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "Before - Chip Corpse Height: " + R2S(GetUnitFlyHeight(corpseChip)))
    
        //Add and remove crow form so it can go up and down
        //call UnitAddAbility( 'Amrf', corpseChip )
        //call UnitRemoveAbility( 'Amrf', corpseChip)
    
        call SetUnitFlyHeight(corpseChip, GetUnitFlyHeight(corpseChip) - 200, 0)

        call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "After - Chip Corpse Height: " + R2S(GetUnitFlyHeight(corpseChip)))
    endif

endfunction

//Literally just spawns the android countdown bar, pure visuals, not linked with mechanics (e.g. when hit it stops feelsbadman)
function RogueAndroidCorpseCountUpBar takes nothing returns nothing
    set udg_TempUnit=udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)]
    set udg_CountupBar_HideTempBool=true
    set udg_CountUpBarColor="|c009C54F3"
    call CountUpBar(udg_TempUnit , 7 , 0.65 , "RogueAndroidUnpause")
    
    //^Bar Duration is the bars * interval for each bar -_-
    //So 25*0.2 = 5 seconds
    //8*0.8 = 4.9 seconds
endfunction

function ChipBody takes unit bodyToChip returns unit
    local integer i= 0
    
    //Iterate all chipped corpses
    loop
        exitwhen i > 17
    
        if udg_RogueAndroidChippedCorpses[i] == null then
        
            set udg_RogueAndroidChippedCorpses[i]=bodyToChip
            
            //Create chip unit with 50 hp, with no health bar, which is the chipped card
            set udg_RogueAndroidChips[i]=CreateUnitAtLoc(Player(PLAYER_NEUTRAL_PASSIVE), 'h056', udg_TempPoint, 0)
            
            //The above creates it like a unit far away. With ghost ability added, it can now go at center
            call SetUnitX(udg_RogueAndroidChips[i], GetLocationX(udg_TempPoint))
            call SetUnitY(udg_RogueAndroidChips[i], GetLocationY(udg_TempPoint))
            
            //Break the loop
            exitwhen true
        endif
        
        set i=i + 1
    endloop
    
    return udg_RogueAndroidChips[i]
    
endfunction

function IterateCorpsesRevival takes nothing returns nothing
    local unit corpseChip
    local timer corpseHeightDebugTimer

	//If picked unit is a corpse (A077 is the corpse tag)
    if GetUnitAbilityLevel(GetEnumUnit(), 'A077') == 1 and GetUnitAbilityLevel(GetEnumUnit(), 'A07P') == 0 then
    
        
    
        //TempPoint1 = the rogue android's location.
        //TempPoint2 = the corpse's location
        set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
        
        if DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2) <= 140.00 then
        
            if IsBodyChipped(GetEnumUnit()) then
                call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffffba00Your chip is already present in this corpse.")
                return
            endif
            
            //Rotating wheel VFX! All its animations ftw! It doesn't die after 3 seconds via code, but by hp regeneration rate -_-
            call CreateUnitAtLoc(Player(PLAYER_NEUTRAL_PASSIVE), 'e03K', udg_TempPoint, 0)
            
            //Pause Rogue Android Unit
            //call PauseUnit(GetSpellAbilityUnit(), true)
            
            //call SetUnitTimeScalePercent(GetSpellAbilityUnit(), 0.2)
            
            //call DisplayTextToForce(GetPlayersAll(), "Chip reached HERE!")
            
            set corpseChip=ChipBody(GetEnumUnit())
            
            //call DisplayTextToForce(GetPlayersAll(), "Chip reached here?")
            
            set corpseHeightDebugTimer=CreateTimer()
            call TimerStart(corpseHeightDebugTimer, 10, false, function HeightDebug)
            call SaveUnitHandle((udg_hash), GetHandleId(corpseHeightDebugTimer), StringHash("CorpseChipDebugHeight"), corpseChip) // INLINED!!

            call RogueAndroidCorpseCountUpBar()
            
        
        elseif DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2) <= 300.00 then
            call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffffba00No android can inject his chip properly from such a distance, please stand above your target corpse.")
        endif
    
    //notify to the player he cant chip android corpse for obvious reasons
    elseif GetUnitAbilityLevel(GetEnumUnit(), 'A07P') == 1 then
        //TempPoint1 = the rogue android's location.
        //TempPoint2 = the corpse's location
        set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
        
        if DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2) <= 140.00 then
            call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffff0000This corpse seems to be of a machine. No flesh, no use.")
        endif
    endif
endfunction

function Trig_PlantChip_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    
    //Pick all Neutral Passive Units (and by there you filter to the corpses)
    call ForGroupBJ(GetUnitsOfPlayerAll(Player(PLAYER_NEUTRAL_PASSIVE)), function IterateCorpsesRevival)
    
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_PlantChip takes nothing returns nothing
    set gg_trg_PlantChip=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_PlantChip, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_PlantChip, Condition(function Trig_PlantChip_Conditions))
    call TriggerAddAction(gg_trg_PlantChip, function Trig_PlantChip_Actions)
endfunction


//===========================================================================
// Trigger: UnpauseRogueAndroidChip
//===========================================================================
function Trig_UnpauseRogueAndroidChip_Actions takes nothing returns nothing
    call PauseUnitBJ(false, udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)])
    call IssueImmediateOrderBJ(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], "coldarrows")
    call TriggerSleepAction(0.03)
    call IssueImmediateOrderBJ(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], "stop")
    call SetUnitTimeScalePercent(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], 100)
endfunction

//===========================================================================
function InitTrig_UnpauseRogueAndroidChip takes nothing returns nothing
    set gg_trg_UnpauseRogueAndroidChip=CreateTrigger()
    call TriggerAddAction(gg_trg_UnpauseRogueAndroidChip, function Trig_UnpauseRogueAndroidChip_Actions)
endfunction

//===========================================================================
// Trigger: ChipRevival
//===========================================================================
function Trig_ChipRevival_Func003C takes nothing returns boolean
    if ( ( GetTriggerUnit() == udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)] ) ) then
        return true
    endif
    if ( ( GetTriggerUnit() == udg_Playerhero[GetConvertedPlayerId(GetOwningPlayer(GetTriggerUnit()))] ) ) then
        return true
    endif
    return false
endfunction

function Trig_ChipRevival_Conditions takes nothing returns boolean
    if ( not ( GetOwningPlayer(GetTriggerUnit()) == udg_RogueAndroid ) ) then
        return false
    endif
    if ( not Trig_ChipRevival_Func003C() ) then
        return false
    endif
    return true
endfunction

function Trig_ChipRevival_Actions takes nothing returns nothing
	
    local integer i= 0
    local unit revivedDroidUnit

	if ( GetChippedCorpses() == 0 ) then //No more corpses! Permadeath!
        call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffffba00Warning: Zero corpses detected to transfer consciousness into.|r Initiating mortal experience simulator:")
		return
	endif
    
    loop
        exitwhen i > 17

		if ( udg_RogueAndroidChippedCorpses[i] != null ) then
			//Literally create a duplicate of the corpse. Could be T3 evil :)
			//Let all edge use-cases for now. Parasite killing to convert to Alien and Infection to Mutant, is expected. You should have used parasite to do more dps, but dont cry if you get greedy and you spawn some1 and he escapes after lmao
			//Maybe in the future I will fix crab lmao
                set revivedDroidUnit=CreateUnitAtLoc(GetOwningPlayer(GetTriggerUnit()), GetUnitTypeId(udg_RogueAndroidChippedCorpses[i]), GetUnitLoc(udg_RogueAndroidChippedCorpses[i]), bj_UNIT_FACING)
			
            //30% HP on spawn
            call SetUnitLifePercentBJ(revivedDroidUnit, 30.00)

            //Give Plant Chip Ability
            call UnitAddAbility(revivedDroidUnit, 'A0AI')
            
            //If human form, give VesselUpgrade ability
            if GetUnitRace(udg_RogueAndroidChippedCorpses[i]) == RACE_ORC then
                call UnitAddAbility(revivedDroidUnit, 'A0AQ')
            endif
			
            //If Alien, remove the Alien/Human form so no bugs happen -_-
            call UnitRemoveAbility(revivedDroidUnit, 'A02S')
            call UnitRemoveAbility(revivedDroidUnit, 'A02X')
            //call UnitRemoveAbility( revivedDroidUnit, 'A02O')
            //call UnitRemoveAbility( revivedDroidUnit, 'A02W')
            
            call ConvertInfectionParasiteUnitToCyborgInfection(revivedDroidUnit)
            
            //If Defiler, give slime skill
            if GetUnitTypeId(revivedDroidUnit) == 'h01V' then
                set udg_TempUnit=revivedDroidUnit
                call ExecuteFunc("DefilerGoo")
                
            //If Flesh Golem, give rubble killer
            elseif GetUnitTypeId(revivedDroidUnit) == 'h01G' then
                set udg_TempUnit=revivedDroidUnit
                call ExecuteFunc("FleshGolemLoop")
                
            //If Crab, give teleport skill
            elseif GetUnitTypeId(revivedDroidUnit) == 'h01C' then
                call CrabTeleport(revivedDroidUnit)
                
            //If Temporal, give backfromhell stolen boolean
            elseif GetUnitTypeId(revivedDroidUnit) == 'h02Y' then
                set udg_RogueAndroidStoleBackFromHell=true
                // ++ Ytrec 16.05.2022
                call EnableTrigger(gg_trg_ClosedTimeLikeLoopSavePos)
                call CreateCTLRequirement()
                // -- Ytrec 16.05.2022
            endif
            
            set udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)]=revivedDroidUnit
            
            //Move the camera of rogue android to his new unit
                call PanCameraToTimedForPlayer(udg_RogueAndroid, GetUnitX(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)]), GetUnitY(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)]), 0)

            //Select the unit for rogue android
                call SelectUnitForPlayerSingle(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], udg_RogueAndroid)

            //VFX
                call AddSpecialEffectLocBJ(GetUnitLoc(udg_RogueAndroidChippedCorpses[i]), "Objects\\Spawnmodels\\Undead\\UndeadLargeDeathExplode\\UndeadLargeDeathExplode.mdl")
                call DestroyEffect(GetLastCreatedEffectBJ())
                
                call AddSpecialEffectLocBJ(GetUnitLoc(udg_RogueAndroidChippedCorpses[i]), "Abilities\\Weapons\\Bolt\\BoltImpact.mdl")
                call DestroyEffect(GetLastCreatedEffectBJ())

            //Destroy the corpse+chip of the revived corpse
                set udg_RogueAndroidChipConsumption=true
                call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cff397727Corpse Vitals: Initialized")
                
                call RemoveUnit(udg_RogueAndroidChippedCorpses[i])
                call KillUnit(udg_RogueAndroidChips[i]) //Automatically removes chip+corpse from the indexes, but without destroying the corpse
                
                set udg_RogueAndroidChipConsumption=false
                
            //Reset the speed level
                set udg_RogueAndroidSpeedLevel=0
            
            return //So it won't loop and mass-revive lmao
		endif
        
        set i=i + 1
	endloop
    
endfunction

//===========================================================================
function InitTrig_ChipRevival takes nothing returns nothing
    set gg_trg_ChipRevival=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ChipRevival, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_ChipRevival, Condition(function Trig_ChipRevival_Conditions))
    call TriggerAddAction(gg_trg_ChipRevival, function Trig_ChipRevival_Actions)
endfunction


//===========================================================================
// Trigger: ChipDestruction
//===========================================================================
function Trig_ChipDestruction_Conditions takes nothing returns boolean
    if ( not ( GetUnitTypeId(GetTriggerUnit()) == 'h056' ) ) then
        return false
    endif
    return true
endfunction

function Trig_ChipDestruction_Actions takes nothing returns nothing
    local integer i= 0
    local integer chippedCorpses= 0
    
    //Iterate all chipped corpses, and compare with the unit/corpse given
    loop
        exitwhen i > 17
    
        if udg_RogueAndroidChips[i] == GetTriggerUnit() then
            //Remove this chip from the chip group and the corpses as well!
            set udg_RogueAndroidChips[i]=null
            set udg_RogueAndroidChippedCorpses[i]=null
            
            //Get how many corpses are remaining
            set chippedCorpses=GetChippedCorpses()
            
            //If the chip wasnt consumed by revival or evolution -> Notify the android of the destruction
            if udg_RogueAndroidChipConsumption == false then
                call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffffba00Warning: One of your duplicate chips is destroyed!|r" + "\n|cffffba00Duplicate Chips Remaining: " + I2S(chippedCorpses))
            else
                call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffffba00Duplicate Chips Remaining: " + I2S(chippedCorpses))
            endif
        
            exitwhen true
        endif
        
        set i=i + 1
    endloop
endfunction

//===========================================================================
function InitTrig_ChipDestruction takes nothing returns nothing
    set gg_trg_ChipDestruction=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_ChipDestruction, EVENT_PLAYER_UNIT_DEATH)
    call TriggerAddCondition(gg_trg_ChipDestruction, Condition(function Trig_ChipDestruction_Conditions))
    call TriggerAddAction(gg_trg_ChipDestruction, function Trig_ChipDestruction_Actions)
endfunction


//===========================================================================
// Trigger: PingChips
//===========================================================================
function Trig_PingChips_Conditions takes nothing returns boolean
    if ( GetTriggerPlayer() == udg_RogueAndroid ) then
        return true
    endif
    return false
endfunction

function Trig_PingChips_Actions takes nothing returns nothing
    local integer i= 0
    
    loop
        exitwhen i > 17
    
        if ( udg_RogueAndroidChippedCorpses[i] != null ) then
            call PingMinimapForPlayer(udg_RogueAndroid, GetUnitX(udg_RogueAndroidChippedCorpses[i]), GetUnitY(udg_RogueAndroidChippedCorpses[i]), 7)
        endif
    
        set i=i + 1
    endloop
endfunction

//===========================================================================
function InitTrig_PingChips takes nothing returns nothing
    local integer i=0

    set gg_trg_PingChips=CreateTrigger()
    
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_PingChips, Player(i), "-corpses", false)
        call TriggerRegisterPlayerChatEvent(gg_trg_PingChips, Player(i), "-chips", false)
        call TriggerRegisterPlayerChatEvent(gg_trg_PingChips, Player(i), "-listcorpses", false)
        call TriggerRegisterPlayerChatEvent(gg_trg_PingChips, Player(i), "-listchips", false)
        set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_PingChips, Condition(function Trig_PingChips_Conditions))
    call TriggerAddAction(gg_trg_PingChips, function Trig_PingChips_Actions)
endfunction
//===========================================================================
// Trigger: PingNextChip
//===========================================================================
function Trig_PingNextChip_Conditions takes nothing returns boolean
    if ( GetTriggerPlayer() == udg_RogueAndroid ) then
        return true
    endif
    return false
endfunction

function Trig_PingNextChip_Actions takes nothing returns nothing
    local integer i= 0
    
    loop
        exitwhen i > 17
    
        if ( udg_RogueAndroidChippedCorpses[i] != null ) then
            call PingMinimapForPlayer(udg_RogueAndroid, GetUnitX(udg_RogueAndroidChippedCorpses[i]), GetUnitY(udg_RogueAndroidChippedCorpses[i]), 7)
            return
        endif
    
        set i=i + 1
    endloop
    
    if i > 17 then
        call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffffba00Warning: No Duplicate Chips Exist.|r")
    endif
endfunction

//===========================================================================
function InitTrig_PingNextChip takes nothing returns nothing
    local integer i=0

    set gg_trg_PingNextChip=CreateTrigger()
    
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_PingNextChip, Player(i), "-next", false)
        set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_PingNextChip, Condition(function Trig_PingNextChip_Conditions))
    call TriggerAddAction(gg_trg_PingNextChip, function Trig_PingNextChip_Actions)
endfunction
//===========================================================================
// Trigger: SwapChips
//===========================================================================
function IsRogueAndroid_Condition takes nothing returns boolean
    if ( GetTriggerPlayer() == udg_RogueAndroid ) then
        return true
    endif
    return false
endfunction

function Trig_SwapChips_Actions takes nothing returns nothing
    local unit cachedCorpseUnit
    local unit cachedChipUnit
    
    local integer firstSwapSlot
    local integer secondSwapSlot
    
    //-swap 0 1
    
    set firstSwapSlot=S2I(SubStringBJ(GetEventPlayerChatString(), 7, 7))
    set secondSwapSlot=S2I(SubStringBJ(GetEventPlayerChatString(), 9, 10))
    
    if firstSwapSlot > 16 or secondSwapSlot > 16 then
        call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "One of the slots you typed, was not a number.")
        return
    endif
    
    if firstSwapSlot < 0 or secondSwapSlot < 0 then
        call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "One of the slots you typed, was not a number.")
        return
    endif
    
    //If you try to swap a chip which doesn't exist (so many errors because of 0 slot...)
    if udg_RogueAndroidChippedCorpses[firstSwapSlot] == null or udg_RogueAndroidChippedCorpses[secondSwapSlot] == null then

        call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "One of the slots you typed, does not have chips. Maybe you forgot the first slot, which is 0?")
        
        //Notify the rogue android player which slot doesn't exist//Compiler for some reason cant compile this code-block!
        //if udg_RogueAndroidChippedCorpses[firstSwapSlot] == null and udg_RogueAndroidChippedCorpses[secondSwapSlot] == null then
            //call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "Neither of the slots you typed, have chips. They do not exist.")
        //elseif udg_RogueAndroidChippedCorpses[firstSwapSlot] == null then
            //call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, I2S(firstSwapSlot) " chip does not exist.")
        //else
            //call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, I2S(secondSwapSlot) " chip does not exist.")
        //endif
    
        return
    endif
    
    //Classic Swap Algorithm
    set cachedCorpseUnit=udg_RogueAndroidChippedCorpses[firstSwapSlot]
    set cachedChipUnit=udg_RogueAndroidChips[firstSwapSlot]
    
    set udg_RogueAndroidChippedCorpses[firstSwapSlot]=udg_RogueAndroidChippedCorpses[secondSwapSlot]
    set udg_RogueAndroidChips[firstSwapSlot]=udg_RogueAndroidChips[secondSwapSlot]
    
    set udg_RogueAndroidChippedCorpses[secondSwapSlot]=cachedCorpseUnit
    set udg_RogueAndroidChips[secondSwapSlot]=cachedChipUnit
    
    call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "Swap Complete\nType -next to see where you revive next!")
endfunction

//===========================================================================
function InitTrig_SwapChips takes nothing returns nothing
    local integer i=0

    set gg_trg_SwapChips=CreateTrigger()
    
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_SwapChips, Player(i), "-swap", false)
        set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_SwapChips, Condition(function IsRogueAndroid_Condition))
    call TriggerAddAction(gg_trg_SwapChips, function Trig_SwapChips_Actions)
endfunction
//===========================================================================
// Trigger: ResetAbility
//===========================================================================
function Trig_ResetAbility_Actions takes nothing returns nothing
    local string abilitySlotLetter
    
    //-reset q
    
    set abilitySlotLetter=SubStringBJ(GetEventPlayerChatString(), 8, 8)
    
    if abilitySlotLetter == "q" or abilitySlotLetter == "Q" then
        call UnitRemoveAbility(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], udg_RogueAndroidAbsorbedSkills[0])
        call UnitAddAbility(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], 'A0AK')
    elseif abilitySlotLetter == "w" or abilitySlotLetter == "W" then
        call UnitRemoveAbility(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], udg_RogueAndroidAbsorbedSkills[1])
        call UnitAddAbility(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], 'A0AN')
    elseif abilitySlotLetter == "e" or abilitySlotLetter == "E" then
        call UnitRemoveAbility(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], udg_RogueAndroidAbsorbedSkills[2])
        call UnitAddAbility(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], 'A0B1')
    else
        call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "Type -reset q, to reset Q ability, and so on for W and E.")
    endif

endfunction

//===========================================================================
function InitTrig_ResetAbility takes nothing returns nothing
    local integer i=0

    set gg_trg_ResetAbility=CreateTrigger()
    
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_ResetAbility, Player(i), "-reset", false)
        set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_ResetAbility, Condition(function IsRogueAndroid_Condition))
    call TriggerAddAction(gg_trg_ResetAbility, function Trig_ResetAbility_Actions)
endfunction
//===========================================================================
// Trigger: ShutdownRogue
//===========================================================================
function Trig_ShutdownRogue_Conditions takes nothing returns boolean
    if ( GetTriggerPlayer() == udg_RogueAndroid ) then
        return true
    endif
    return false
endfunction

function Trig_ShutdownRogue_Actions takes nothing returns nothing

    //Remove items (could be ccs or w/e)
    call UnitRemoveItemFromSlot(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], 1)
    call UnitRemoveItemFromSlot(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], 2)
    call UnitRemoveItemFromSlot(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], 3)
    call UnitRemoveItemFromSlot(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], 4)
    call UnitRemoveItemFromSlot(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], 5)
    call UnitRemoveItemFromSlot(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)], 6)

    call KillUnit(udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)])
endfunction

//===========================================================================
function InitTrig_ShutdownRogue takes nothing returns nothing
    local integer i=0

    set gg_trg_ShutdownRogue=CreateTrigger()
    
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_ShutdownRogue, Player(i), "-shutdown", false)
        set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_ShutdownRogue, Condition(function Trig_ShutdownRogue_Conditions))
    call TriggerAddAction(gg_trg_ShutdownRogue, function Trig_ShutdownRogue_Actions)
endfunction
//===========================================================================
// Trigger: VesselUpgrade
//
// call Vessel
//===========================================================================

//===========================================================================
// Trigger: VesselUpgradeFinish
//
// call Status.changeStr(GroupChat.string[-1],-1,true)
//===========================================================================
function IterateCorpsesEvolutionCleanUp takes nothing returns nothing
    local unit u= GetEnumUnit()
    local real x
    local real y
    local integer pi= GetPlayerId(udg_RogueAndroid) + 1
    //If picked unit is a corpse
    if GetUnitAbilityLevel(u, 'A077') == 1 and GetUnitAbilityLevel(u, 'A07P') == 0 then
    
        //TempPoint1 = the rogue android's location.
        //TempPoint2 = the corpse's location
        set x=GetUnitX(udg_Playerhero[pi])
        set y=GetUnitY(udg_Playerhero[pi])
        
        if IsUnitInRangeXY(u, x, y, 140) then
        
            //If chipped, destroy everything in there, so as to simplify things, aka the corpse never has chip
            if IsBodyChipped(u) then
                set udg_TempInt=GetBodyChippedIndex(u)
                
                //Destroy the corpse+chip of the revived corpse
                    set udg_RogueAndroidChipConsumption=true
                    call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cff397727Vessel Status: Upgrading")
                    
                    call KillUnit(udg_RogueAndroidChips[udg_TempInt]) //Automatically removes chip+corpse from the indexes, but without destroying the corpse
                    
                    set udg_RogueAndroidChipConsumption=false
            endif
            
            //Remove the corpse unit
            call RemoveUnit(u)
            
            //Notify players of upgrade
            call PlaySoundBJ(gg_snd_StarfallCaster1)
            call CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 2, "ReplaceableTextures\\CameraMasks\\DiagonalSlash_mask.blp", 100.00, 20.00, 0, 0)
            call DisplayTextToForce(bj_FORCE_ALL_PLAYERS, "|cff8000FFThe Cyborg has upgraded! It has grown more powerful...|r")
            
            //Boolean flag to be able to re-evolve ;)
            set udg_RogueAndroidIsUpgrading=false
            
            set u=null
            
            return
        endif
        

    endif
    
    set u=null
    
endfunction

function RogueAndroidEvolutionFinish takes nothing returns nothing
    // 'h057' Android Rogue ID
    local integer i= 0
    
    local item i1
    local item i2
    local item i3
    local item i4
    local item i5
    local item i6
    
    local integer pi= GetPlayerId(udg_RogueAndroid) + 1
    
    local real x= GetUnitX(udg_Playerhero[pi])
    local real y= GetUnitY(udg_Playerhero[pi])
    
    //VFX
    call DestroyEffect(AddSpecialEffect("war3mapImported\\AncientExplode.mdl", x, y))
    call DestroyEffect(udg_RogueAndroidEvolveVisualEffect)

    //Cache the items
    set i1=UnitItemInSlot(udg_Playerhero[pi], 0)
    set i2=UnitItemInSlot(udg_Playerhero[pi], 1)
    set i3=UnitItemInSlot(udg_Playerhero[pi], 2)
    set i4=UnitItemInSlot(udg_Playerhero[pi], 3)
    set i5=UnitItemInSlot(udg_Playerhero[pi], 4)
    set i6=UnitItemInSlot(udg_Playerhero[pi], 5)
    set i=0
    loop
        exitwhen i > 5
        call UnitDropItemPoint(udg_Playerhero[pi], UnitItemInSlot(udg_Playerhero[pi], i), x, y)
        set i=i + 1
    endloop
        
    //Replaces unit with new shiny rogue droid
    call ReplaceUnitBJ(udg_Playerhero[pi], 'h057', bj_UNIT_STATE_METHOD_RELATIVE)
    
    set udg_Playerhero[pi]=bj_lastReplacedUnit
        
    //Changes color, because it is always red.
    call SetUnitColor(udg_Playerhero[pi], GetPlayerColor(udg_RogueAndroid))
        

    call UnitAddItem(bj_lastReplacedUnit, i1)
    call UnitAddItem(bj_lastReplacedUnit, i2)
    call UnitAddItem(bj_lastReplacedUnit, i3)
    call UnitAddItem(bj_lastReplacedUnit, i4)
    call UnitAddItem(bj_lastReplacedUnit, i5)
    call UnitAddItem(bj_lastReplacedUnit, i6)

    //Add invulnerability for 4 seconds
    call UnitAddAbilityForPeriod(bj_lastReplacedUnit , 'Avul' , 4.0)
    
    //call SetUnitColor(bj_lastReplacedUnit,ConvertPlayerColor(12))//removed heh
		
    //Select the unit for rogue android
    call SelectUnitForPlayerSingle(udg_Playerhero[pi], udg_RogueAndroid)
        
    //Move the camera of rogue android to his new unit
    call PanCameraToTimedForPlayer(udg_RogueAndroid, GetUnitX(udg_Playerhero[pi]), GetUnitY(udg_Playerhero[pi]), 0)
    
    //Changes the status to Alive
    call Status_changeStr((LoadStr(Table__ht, (((GroupChat))), (- 3))) , - 3 , true) // INLINED!!
    
    set i1=null
    set i2=null
    set i3=null
    set i4=null
    set i5=null
    set i6=null
    
    
    //Adds the backpack
    //call AddSpecialEffectTargetUnitBJ( "chest", bj_lastReplacedUnit, "war3mapImported\\ReactorBackpackV1.1_ByEpsilon.mdx" )
endfunction


    function s__VesselUpgradeFinish_Done takes nothing returns nothing
        local integer pi= GetPlayerId(udg_RogueAndroid) + 1
        //6 seconds
        if udg_RogueAndroidEvolveTick < 12 then
    
            //VFX
            call DestroyEffect(AddSpecialEffect("Rogue Droid Evolve.mdx", GetUnitX(udg_Playerhero[pi]), GetUnitY(udg_Playerhero[pi]))) //Tech circles
            
            set udg_RogueAndroidEvolveTick=udg_RogueAndroidEvolveTick + 1
        
        else
    
            //Pause timer and start rogue android evolution
            call PauseTimer(udg_RogueAndroidEvolveTimer)
            set udg_RogueAndroidEvolveTick=0
        
            //Pick all corpses nearby
            call GroupEnumUnitsOfPlayer(TempEnumGroup, Player(PLAYER_NEUTRAL_PASSIVE), Condition(function IterateCorpsesEvolutionCleanUp))
        
            call RogueAndroidEvolutionFinish()
        endif
    endfunction
    


//===========================================================================



//===========================================================================
// Trigger: SuitSkillDatabase
//===========================================================================
function Trig_SkillDatabase_Actions takes nothing returns nothing

    //Tesla
    set udg_SuitSkillsQ[0]='A04K' //Chargeup
    set udg_SuitSkillsW[0]='A092' //Lighting Storm
    
    //Rocket
    set udg_SuitSkillsQ[1]='A009' //Hand Missile
    set udg_SuitSkillsW[1]='A03S' //Halberd Rocket
    
    //Cryo
    set udg_SuitSkillsQ[2]='A07M' //Cryogenesis
    set udg_SuitSkillsW[2]='A00I' //Cryo Shock (Dummy), yes its a dummy -_-
    set udg_SuitSkillsE[3]='A00G' //Freezing Effect ((passive))
    
    //Plasma
    set udg_SuitSkillsQ[3]='A04L' //Plasma Ball
    set udg_SuitSkillsW[3]='A02Q' //Matter Draining Device
    
    //Flamethrower
    set udg_SuitSkillsQ[4]='A07J' //Kidot Projection
    set udg_SuitSkillsW[4]='A04G' //Overheat
    
    //Photon
    set udg_SuitSkillsQ[5]='A04F' //Firefly
    set udg_SuitSkillsW[5]='A00N' //Blind
    
    //Service
    set udg_SuitSkillsQ[6]='A061' //Magnetic Saw
    set udg_SuitSkillsW[6]='A00Q' //Welding Torch
    
    //Dark Matter
    set udg_SuitSkillsQ[7]='A00R' //Phase Shift
    set udg_SuitSkillsW[7]='A09L' //Phase Vortex
    set udg_SuitSkillsE[7]='A00S' //Energy Destabilization ((passive))
    
    //Illusion
    set udg_SuitSkillsQ[8]='A04E' //Swap
    set udg_SuitSkillsW[8]='A00T' //Illusory Double
    
    
    //Radiation
    set udg_SuitSkillsQ[9]='A06C' //Core Overload
    set udg_SuitSkillsW[9]='A00U' //Radiation ((passive))
    
    //Operative
    set udg_SuitSkillsQ[10]='A056' //Toss RDG
    set udg_SuitSkillsW[10]='A057' //Detonate RDG
    set udg_SuitSkillsE[10]='A08X' //Kinetic Rush
    set udg_SuitSkillsR[10]='A08W' //Firefly
    
    //Scientist
    set udg_SuitSkillsQ[11]='A029' //Physics
    set udg_SuitSkillsW[11]='A02A' //Biology
    set udg_SuitSkillsE[11]='A028' //Chemistry
    
    //Guard
    set udg_SuitSkillsQ[12]='A02H' //Energy Transmission
    set udg_SuitSkillsW[12]='A09R' //Cleansing Nanovirus
    set udg_SuitSkillsE[12]='A026' //Automatic Restoration
    set udg_SuitSkillsR[12]='A09Q' //Deterministic Invigoration
    
    //Acid
    set udg_SuitSkillsQ[13]='A04P' //Blinding Cloud (Dummy)
    set udg_SuitSkillsW[13]='A07Y' //Goo Spray
    set udg_SuitSkillsE[13]='A02L' //Acid ((passive))
    
    //Machinegun
    set udg_SuitSkillsQ[14]='A056' //Toss RDG
    set udg_SuitSkillsW[14]='A057' //Detonate RDG
    
    //Force
    set udg_SuitSkillsQ[15]='A05T' //Kinetic Rush
    set udg_SuitSkillsW[15]='A06A' //Force Vortex
    set udg_SuitSkillsE[15]='A097' //Reverse Polarity
    
    //Magnetic
    set udg_SuitSkillsQ[16]='A07T' //Summon Metal
    set udg_SuitSkillsW[16]='A07U' //Magnetic Thrust
    set udg_SuitSkillsE[16]='A07S' //Detonate Slivs
    
    //Pulse
    set udg_SuitSkillsQ[17]='A07X' //Energy Leech
    set udg_SuitSkillsW[17]='A0A7' //Energy Shift
    set udg_SuitSkillsE[17]='A090' //Energy Bank
    
endfunction

//===========================================================================
function InitTrig_SuitSkillDatabase takes nothing returns nothing
    set gg_trg_SuitSkillDatabase=CreateTrigger()
    call TriggerAddAction(gg_trg_SuitSkillDatabase, function Trig_SkillDatabase_Actions)
endfunction


//===========================================================================
// Trigger: LoadCapabilities
//===========================================================================
function Trig_LoadCapabilities_Conditions takes nothing returns boolean
    if GetSpellAbilityId() == 'A0AK' or GetSpellAbilityId() == 'A0AN' or GetSpellAbilityId() == 'A0B1' then
        return true
    endif
    
    return false
endfunction

function IterateCorpsesQapabilities takes nothing returns nothing
    //If picked unit is a corpse
    if GetUnitAbilityLevelSwapped('A077', GetEnumUnit()) == 1 then
        
        //TempPoint1 = the rogue android's location.
        //TempPoint2 = the corpse's location
        set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
        
        if DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2) <= 140.00 then

                //If Suited, get ability
                if (GetUnitAbilityLevel((GetEnumUnit()), 'A070') == 1) then // INLINED!!
                
                    //Give Q or W or E ability (and remove the Q or W or E absorption ability)
                    if GetSpellAbilityId() == 'A0AK' then
                        set udg_TempInt=udg_SuitSkillsQ[(GetRawSuitID((GetEnumUnit())) - 2)] // INLINED!!
                        set udg_TempInt2=0
                    elseif GetSpellAbilityId() == 'A0AN' then
                        set udg_TempInt=udg_SuitSkillsW[(GetRawSuitID((GetEnumUnit())) - 2)] // INLINED!!
                        set udg_TempInt2=1
                    elseif GetSpellAbilityId() == 'A0B1' then
                        set udg_TempInt=udg_SuitSkillsE[(GetRawSuitID((GetEnumUnit())) - 2)] // INLINED!!
                        set udg_TempInt2=2
                    endif
                    
                    //Checking first if E ability even exists
                    if udg_TempInt == - 1 then
                        call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffff0000This suit's components do not have the target capabilities.")
                        return
                    endif
                    
                //If Peasant
                elseif GetUnitTypeId(GetEnumUnit()) == 'h00H' then
                    call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffff0000This corpse has no unique capabilities. The databanks are full of corpses like this.")
                    return
 
                //If Alien (has Parasite)
                elseif GetUnitAbilityLevel(GetEnumUnit(), 'A02N') == 1 then
                    
                    if GetSpellAbilityId() == 'A0AK' then
                        set udg_TempInt='A0AT' //Parasite Cyborg
                        set udg_TempInt2=0
                    elseif GetSpellAbilityId() == 'A0AN' then
                        set udg_TempInt=GetAlienUnitW(GetEnumUnit())
                        set udg_TempInt2=1
                    elseif GetSpellAbilityId() == 'A0B1' then
                        set udg_TempInt=GetAlienUnitE(GetEnumUnit())
                        set udg_TempInt2=2
                    endif
                        
                    //If ability doesn't exist
                    if udg_TempInt == - 1 then
                        call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffff0000This Alien corpse seems to have no target capabilities.")
                        return
                    endif
                    
                //If Mutant
                else
                    if GetSpellAbilityId() == 'A0AK' then
                        set udg_TempInt=GetMutantUnitQ(GetEnumUnit())
                        set udg_TempInt2=0
                    elseif GetSpellAbilityId() == 'A0AN' then
                        set udg_TempInt=GetMutantUnitW(GetEnumUnit())
                        set udg_TempInt2=1
                    elseif GetSpellAbilityId() == 'A0B1' then
                        set udg_TempInt=GetMutantUnitE(GetEnumUnit())
                        set udg_TempInt2=2
                    endif
                    
                    //If ability doesn't exist
                    if udg_TempInt == - 1 then
                        call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffff0000This Mutated corpse seems to have no target capabilities.")
                        return
                    endif

                endif
                
                //Add the ability, remove the load capability, display the ability to the cyborg
                call UnitAddAbility(GetSpellAbilityUnit(), udg_TempInt)
                call UnitRemoveAbility(GetSpellAbilityUnit(), GetSpellAbilityId())
                call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cff397727Vessel Status: " + GetAbilityName(udg_TempInt) + " Ability Acquired.")
                
                //Cache the ability (so it can be removed on -reset)
                set udg_RogueAndroidAbsorbedSkills[udg_TempInt2]=udg_TempInt
                
                //If chipped, destroy everything in there, so as to simplify things, aka the corpse never has chip
                if IsBodyChipped(GetEnumUnit()) then
                    set udg_TempInt=GetBodyChippedIndex(GetEnumUnit())
                    
                    //Destroy the corpse+chip of the revived corpse
                        set udg_RogueAndroidChipConsumption=true
                        
                        call KillUnit(udg_RogueAndroidChips[udg_TempInt]) //Automatically removes chip+corpse from the indexes, but without destroying the corpse
                        
                        set udg_RogueAndroidChipConsumption=false
                endif
                
                //Destroy the corpse!
                call RemoveUnit(GetEnumUnit())
                
                
                
                //VFX
                call AddSpecialEffect("Abilities\\Spells\\Items\\TomeOfRetraining\\TomeOfRetrainingCaster.mdl", GetUnitX(GetSpellAbilityUnit()), GetUnitY(GetSpellAbilityUnit()))
                call DestroyEffect(GetLastCreatedEffectBJ())
                
                //SFX
                call SetSoundPositionLocBJ(gg_snd_ThunderBoltMissileDeath, udg_TempPoint, 0)
                call PlaySoundBJ(gg_snd_ThunderBoltMissileDeath)
            
            
            
            
            
        elseif DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2) <= 300.00 then
            call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "Aluminium Tendrils are not installed. Please stand above your target corpse.")
        endif
    
    endif
endfunction

function Trig_LoadCapabilities_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    
    //Pick all Neutral Passive Units (and by there you filter to the corpses)
    call ForGroupBJ(GetUnitsOfPlayerAll(Player(PLAYER_NEUTRAL_PASSIVE)), function IterateCorpsesQapabilities)
    
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_LoadCapabilities takes nothing returns nothing
    set gg_trg_LoadCapabilities=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_LoadCapabilities, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_LoadCapabilities, Condition(function Trig_LoadCapabilities_Conditions))
    call TriggerAddAction(gg_trg_LoadCapabilities, function Trig_LoadCapabilities_Actions)
endfunction
//===========================================================================
// Trigger: InstallBiomass
//===========================================================================
function Trig_InstallBiomass_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0AO' ) ) then
        return false
    endif
    return true
endfunction

function IterateCorpsesBiomass takes nothing returns nothing
    //If picked unit is a corpse
    if GetUnitAbilityLevelSwapped('A077', GetEnumUnit()) == 1 and GetUnitAbilityLevelSwapped('A07P', GetEnumUnit()) == 0 then
        
        //TempPoint1 = the rogue android's location.
        //TempPoint2 = the corpse's location
        set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
        
        if DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2) <= 140.00 then
        
            call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cff397727Vessel Structural Durability: Increased")
        
            //SFX
            call SetSoundPositionLocBJ(gg_snd_MarkOfChaos, udg_TempPoint2, 0)
            call PlaySoundBJ(gg_snd_MarkOfChaos)
            
            //VFX
            call AddSpecialEffectLocBJ(udg_TempPoint2, "Objects\\Spawnmodels\\Orc\\Orcblood\\BattrollBlood.mdl")
            call SFXThreadClean()
            call AddSpecialEffectLocBJ(udg_TempPoint2, "Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl")
            call SFXThreadClean()
            call AddSpecialEffectLocBJ(udg_TempPoint, "Objects\\Spawnmodels\\Undead\\UndeadBlood\\UndeadBloodCryptFiend.mdl")
            call SFXThreadClean()
            
            
        
            //If chipped, destroy everything in there, so as to simplify things, aka the corpse never has chip
            if IsBodyChipped(GetEnumUnit()) then
                set udg_TempInt=GetBodyChippedIndex(GetEnumUnit())
                
                //Destroy the corpse+chip of the revived corpse
                    set udg_RogueAndroidChipConsumption=true
                    
                    call KillUnit(udg_RogueAndroidChips[udg_TempInt]) //Automatically removes chip+corpse from the indexes, but without destroying the corpse
                    
                    set udg_RogueAndroidChipConsumption=false
            endif
            
            //+300 HP
            call UnitAddItem(GetSpellAbilityUnit(), CreateItemLoc('I02D', udg_TempPoint))
            
            //Max HP
            call SetUnitLifePercentBJ(GetSpellAbilityUnit(), 100)
            
            //Destroy the corpse!
            call RemoveUnit(GetEnumUnit())
            
        elseif DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2) <= 300.00 then
            call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffffba00Aluminium Tendrils are not installed. Please stand above your target corpse.")
        endif
    
    //else if its android corpse, notify to the player he cant chip it for obvious reasons
    elseif GetUnitAbilityLevelSwapped('A07P', GetEnumUnit()) == 1 then
        //TempPoint1 = the rogue android's location.
        //TempPoint2 = the corpse's location
        set udg_TempPoint2=GetUnitLoc(GetEnumUnit())
        
        if DistanceBetweenPoints(udg_TempPoint, udg_TempPoint2) <= 140.00 then
            call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffff0000This corpse seems to be of a machine. No flesh, no use.")
        endif
    endif
endfunction

function Trig_InstallBiomass_Actions takes nothing returns nothing
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    
    //Pick all Neutral Passive Units (and by there you filter to the corpses)
    call ForGroupBJ(GetUnitsOfPlayerAll(Player(PLAYER_NEUTRAL_PASSIVE)), function IterateCorpsesBiomass)
    
    call RemoveLocation(udg_TempPoint)
endfunction

//===========================================================================
function InitTrig_InstallBiomass takes nothing returns nothing
    set gg_trg_InstallBiomass=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_InstallBiomass, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_InstallBiomass, Condition(function Trig_InstallBiomass_Conditions))
    call TriggerAddAction(gg_trg_InstallBiomass, function Trig_InstallBiomass_Actions)
endfunction


//===========================================================================
// Trigger: CompressBiomass
//===========================================================================
function Trig_CompressBiomass_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0B0' ) ) then
        return false
    endif
    return true
endfunction

function Trig_CompressBiomass_Actions takes nothing returns nothing

    //TempPoint = the rogue android's location.
    set udg_TempPoint=GetUnitLoc(GetSpellAbilityUnit())
    
    //-300 HP (This can kill btw LUL)
    if GetUnitState(GetSpellAbilityUnit(), UNIT_STATE_MAX_LIFE) > 300 then
        call UnitAddItem(GetSpellAbilityUnit(), CreateItemLoc('I02E', udg_TempPoint))
    else //kills the player, but with ccs you gain infinite hp so I have to do this -_-
        call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffff0000Error: Biomass Shortage")
        return
    endif
    
    call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cffffa000Vessel Structural Durability: Decreased")
    call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cff397727Vessel Mobility: Increased")
    
    //SFX
    call SetSoundPositionLocBJ(gg_snd_EntDeath1, udg_TempPoint, 0)
    call PlaySoundBJ(gg_snd_EntDeath1)
        
        //VFX
        //call AddSpecialEffectLocBJ( udg_TempPoint, "Objects\\Spawnmodels\\Human\\HumanBlood\\HeroBloodElfBlood.mdl" )
        //call SFXThreadClean()
        //call AddSpecialEffectLocBJ( udg_TempPoint, "Objects\\Spawnmodels\\NightElf\\NightElfBlood\\NightElfBloodHippogryph.mdl" )
        //call SFXThreadClean()
        
    //Increase movement speed (each boost is +30)
    set udg_RogueAndroidSpeedLevel=udg_RogueAndroidSpeedLevel + 1
    call h__SetUnitMoveSpeed(GetSpellAbilityUnit(), GetUnitDefaultMoveSpeed(GetSpellAbilityUnit()) + 30 * udg_RogueAndroidSpeedLevel)


    //Display movement speed
    call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "\n|cffffba00Vessel Previous Speed: " + R2S(GetUnitDefaultMoveSpeed(GetSpellAbilityUnit()) + 30 * ( udg_RogueAndroidSpeedLevel - 1 )))
    call DisplayTextToPlayer(udg_RogueAndroid, 0, 0, "|cff397727Vessel Current Speed: " + R2S(GetUnitDefaultMoveSpeed(GetSpellAbilityUnit()) + 30 * udg_RogueAndroidSpeedLevel))

endfunction

//===========================================================================
function InitTrig_CompressBiomass takes nothing returns nothing
    set gg_trg_CompressBiomass=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_CompressBiomass, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_CompressBiomass, Condition(function Trig_CompressBiomass_Conditions))
    call TriggerAddAction(gg_trg_CompressBiomass, function Trig_CompressBiomass_Actions)
endfunction


//===========================================================================
// Trigger: MissileBarrage
//===========================================================================
function Trig_MissileBarrage_Conditions takes nothing returns boolean
    if ( not ( GetSpellAbilityId() == 'A0AM' ) ) then
        return false
    endif
    return true
endfunction

//Summon Dummy which can hand missile -> Order it to hand missile -> Give it expiration timer -> WaitXseconds and repeat.
//Original was 2.5 seconds, with delay of each rocket being 0.5, so that's 5 rockets in total. 
//Though not sure, I see 0.02 difference of each rocket, yet he uses 0.5 for each rocket, but not as a timer delay?
function Trig_MissileBarrage_Actions takes nothing returns nothing
    local unit casterUnit
    local location casterTarget
    local location casterLocation
    local real degreesFacing
    local unit handMissileDummyUnit

    
    local integer i= 0
    
    set casterUnit=GetTriggerUnit()
    set casterTarget=GetSpellTargetLoc()
    set casterLocation=GetUnitLoc(casterUnit)
    
    set degreesFacing=AngleBetweenPoints(casterLocation, casterTarget)
    set casterTarget=PolarProjectionBJ(casterTarget, - 64.00, degreesFacing) //Since it increases by 64 in first loop, yet we want it 0 there.
    //set degreesFacing = GetUnitFacing(GetTriggerUnit())
    
    loop
        exitwhen i > 4
        
            
            set handMissileDummyUnit=CreateUnit(GetOwningPlayer(GetTriggerUnit()), 'e000', GetUnitX(casterUnit), GetUnitY(casterUnit), degreesFacing)
            call UnitApplyTimedLife(handMissileDummyUnit, 'BTLF', 5.00)
            //set degreesFacing = AngleBetweenPoints(casterLocation, casterTarget)
            set casterTarget=PolarProjectionBJ(casterTarget, 64.00, degreesFacing)
            call IssuePointOrderLoc(handMissileDummyUnit, "clusterrockets", casterTarget)
            
            //SFX
            call SetSoundPositionLocBJ(gg_snd_FlakCannon, casterLocation, 0)
            call PlaySoundBJ(gg_snd_FlakCannon)
        
            call PolledWait(0.2)
        
        set i=i + 1
    endloop
endfunction

//===========================================================================
function InitTrig_MissileBarrage takes nothing returns nothing
    set gg_trg_MissileBarrage=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_MissileBarrage, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_MissileBarrage, Condition(function Trig_MissileBarrage_Conditions))
    call TriggerAddAction(gg_trg_MissileBarrage, function Trig_MissileBarrage_Actions)
endfunction


//===========================================================================
// Trigger: CyborgInfectionRemoveInfections
//===========================================================================
function Trig_CyborgInfectionRemoveInfections_Func001C takes nothing returns boolean
    if ( ( GetSpellAbilityId() == 'A0AU' ) ) then
        return true
    endif
    if ( ( GetSpellAbilityId() == 'A0AV' ) ) then
        return true
    endif
    if ( ( GetSpellAbilityId() == 'A0AW' ) ) then
        return true
    endif
    return false
endfunction

function Trig_CyborgInfectionRemoveInfections_Conditions takes nothing returns boolean
    if ( not Trig_CyborgInfectionRemoveInfections_Func001C() ) then
        return false
    endif
    return true
endfunction

function Trig_CyborgInfectionRemoveInfections_Actions takes nothing returns nothing
    call UnitRemoveBuffBJ('BNpa', GetSpellTargetUnit())
    call UnitRemoveBuffBJ('B00H', GetSpellTargetUnit())
    call UnitRemoveBuffBJ('B01G', GetSpellTargetUnit())
    call UnitRemoveBuffBJ('B009', GetSpellTargetUnit())
    call UnitRemoveBuffBJ('B01F', GetSpellTargetUnit())
endfunction

//===========================================================================
function InitTrig_CyborgInfectionRemoveInfections takes nothing returns nothing
    set gg_trg_CyborgInfectionRemoveInfections=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_CyborgInfectionRemoveInfections, EVENT_PLAYER_UNIT_SPELL_EFFECT)
    call TriggerAddCondition(gg_trg_CyborgInfectionRemoveInfections, Condition(function Trig_CyborgInfectionRemoveInfections_Conditions))
    call TriggerAddAction(gg_trg_CyborgInfectionRemoveInfections, function Trig_CyborgInfectionRemoveInfections_Actions)
endfunction

//===========================================================================
// Trigger: Help
//===========================================================================
function Trig_Help_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Help_Actions takes nothing returns nothing
    call DisplayTextToForce(GetPlayersAll(), "-EP ### (grants EP to alien/mutant/android)\n-nowin (disables win conditions\n-mine (takes control of selected units)\n-forcerandom ## (forces random event # to occur, type -randomevents for a list)\n-spawn #### (spawns unit based on unit code; for most units this is custom_####, type -spawnhelp for further info)\n-forceapocalypse (forces apocalypse event; 1 for USI fleet and 2 for black hole)\n-playerhero (makes selected unit playerhero; you lose if it dies)\n-test_abilities (grants ultrablink ability to selected units)\n-hostile (selected unit becomes hostile)\n-vision (gives global vision)\n-alien (makes you alien)\n-mutant (makes you mutant)\n-android (makes you android?)")
endfunction

//===========================================================================
function InitTrig_Help takes nothing returns nothing
local integer i=0
    set gg_trg_Help=CreateTrigger()
    loop
    exitwhen i > 11
    call TriggerRegisterPlayerChatEvent(gg_trg_Help, Player(i), "-help", true)
    set i=i + 1
    endloop
    call TriggerAddCondition(gg_trg_Help, Condition(function Trig_Help_Conditions))
    call TriggerAddAction(gg_trg_Help, function Trig_Help_Actions)
endfunction


//===========================================================================
// Trigger: SpawnHelp
//===========================================================================
function Trig_SpawnHelp_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_SpawnHelp_Actions takes nothing returns nothing
    call DisplayTextToForce(GetPlayersAll(), "For standard wc3 units, you can simply use the unit's name. '-spawn peasant' for example will spawn a peasant. To get the code for any unit ingame, select it and enter '-spawncode'. Most codes will be of the form custom_h0XY, where X and Y are either numbers or letters. The defiler mutant for example is custom_h01V")
endfunction

//===========================================================================
function InitTrig_SpawnHelp takes nothing returns nothing
local integer i=0
    set gg_trg_SpawnHelp=CreateTrigger()
    loop
    exitwhen i > 11
    call TriggerRegisterPlayerChatEvent(gg_trg_SpawnHelp, Player(i), "-spawnhelp", true)
    set i=i + 1
    endloop
    call TriggerAddCondition(gg_trg_SpawnHelp, Condition(function Trig_SpawnHelp_Conditions))
    call TriggerAddAction(gg_trg_SpawnHelp, function Trig_SpawnHelp_Actions)
endfunction


//===========================================================================
// Trigger: SpawnCodeGet
//===========================================================================
function Trig_SpawnCodeGet_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function DisplaySpawnCode takes nothing returns nothing
call DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "Spawn code " + UnitId2String(GetUnitTypeId(GetEnumUnit())))
endfunction

function Trig_SpawnCodeGet_Actions takes nothing returns nothing
local group g=GetUnitsSelectedAll(GetTriggerPlayer())
call ForGroup(g, function DisplaySpawnCode)
call DestroyGroup(g)
endfunction

//===========================================================================
function InitTrig_SpawnCodeGet takes nothing returns nothing
local integer i=0
    set gg_trg_SpawnCodeGet=CreateTrigger()
    loop
    exitwhen i > 11
    call TriggerRegisterPlayerChatEvent(gg_trg_SpawnCodeGet, Player(i), "-spawncode", true)
    set i=i + 1
    endloop
    call TriggerAddCondition(gg_trg_SpawnCodeGet, Condition(function Trig_SpawnCodeGet_Conditions))
    call TriggerAddAction(gg_trg_SpawnCodeGet, function Trig_SpawnCodeGet_Actions)
endfunction


//===========================================================================
// Trigger: SpawnUnit
//===========================================================================
function Trig_SpawnUnit_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
        if ( not ( SubStringBJ(GetEventPlayerChatString(), 1, 7) == "-spawn " ) ) then
        return false
    endif
    return true
endfunction

function Trig_SpawnUnit_Actions takes nothing returns nothing
    set udg_TempInt=S2I(SubStringBJ(GetEventPlayerChatString(), 8, 99))
    set udg_TempUnitType=udg_TempInt
set bj_lastCreatedUnit=null
    call CreateNUnitsAtLoc(1, String2UnitIdBJ(SubStringBJ(GetEventPlayerChatString(), 8, 999)), GetTriggerPlayer(), GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())]), bj_UNIT_FACING)
if bj_lastCreatedUnit == null then
    call DisplayTextToForce(GetPlayersAll(), "Spawn command NOT successful.")
    else
        call DisplayTextToForce(GetPlayersAll(), "Spawn command successful.")
    endif
    endfunction

//===========================================================================
function InitTrig_SpawnUnit takes nothing returns nothing
local integer i=0
    set gg_trg_SpawnUnit=CreateTrigger()
    loop
    exitwhen i > 11
    call TriggerRegisterPlayerChatEvent(gg_trg_SpawnUnit, Player(i), "-spawn ", false)
    set i=i + 1
    endloop
    call TriggerAddCondition(gg_trg_SpawnUnit, Condition(function Trig_SpawnUnit_Conditions))
    call TriggerAddAction(gg_trg_SpawnUnit, function Trig_SpawnUnit_Actions)
endfunction


//===========================================================================
// Trigger: AlienEvoPoints
//===========================================================================
function Trig_AlienEvoPoints_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_AlienEvoPoints_Actions takes nothing returns nothing
    set udg_UpgradePointsAlien=( udg_UpgradePointsAlien + 9999.00 )
    set udg_UpgradePointsMutant=( udg_UpgradePointsMutant + 9999.00 )
    set udg_UpgradePointsAndroid=( udg_UpgradePointsAndroid + 9999.00 )
endfunction

//===========================================================================
function InitTrig_AlienEvoPoints takes nothing returns nothing
local integer i=0
    set gg_trg_AlienEvoPoints=CreateTrigger()
    loop
    exitwhen i > 11
    call TriggerRegisterPlayerChatEvent(gg_trg_AlienEvoPoints, Player(i), "-EP", true)
    set i=i + 1
    endloop
    call TriggerAddCondition(gg_trg_AlienEvoPoints, Condition(function Trig_AlienEvoPoints_Conditions))
    call TriggerAddAction(gg_trg_AlienEvoPoints, function Trig_AlienEvoPoints_Actions)
endfunction


//===========================================================================
// Trigger: NoWin
//===========================================================================
function Trig_NoWin_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_NoWin_Actions takes nothing returns nothing
    call DestroyTrigger(gg_trg_WinCheck)
endfunction

//===========================================================================
function InitTrig_NoWin takes nothing returns nothing
local integer i=0
    set gg_trg_NoWin=CreateTrigger()
    loop
    exitwhen i > 11
    call TriggerRegisterPlayerChatEvent(gg_trg_NoWin, Player(i), "-nowin", true)
    set i=i + 1
    endloop
    call TriggerAddCondition(gg_trg_NoWin, Condition(function Trig_NoWin_Conditions))
    call TriggerAddAction(gg_trg_NoWin, function Trig_NoWin_Actions)
endfunction


//===========================================================================
// Trigger: Mine
//===========================================================================
//TESH.scrollpos=8
//TESH.alwaysfold=0
function Trig_Mine_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function ChangeOwner takes nothing returns nothing
    call SetUnitOwner(GetEnumUnit(), GetTriggerPlayer(), true)
endfunction

function Trig_Mine_Actions takes nothing returns nothing
    call ForGroupBJ(GetUnitsSelectedAll(GetTriggerPlayer()), function ChangeOwner)
endfunction

//===========================================================================
function InitTrig_Mine takes nothing returns nothing
local integer i=0
    set gg_trg_Mine=CreateTrigger()
    loop
    exitwhen i > 11
    call TriggerRegisterPlayerChatEvent(gg_trg_Mine, Player(i), "-mine", true)
    set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_Mine, Condition(function Trig_Mine_Conditions))
    call TriggerAddAction(gg_trg_Mine, function Trig_Mine_Actions)
endfunction


//===========================================================================
// Trigger: Hostile
//===========================================================================
//TESH.scrollpos=0
//TESH.alwaysfold=0
function Trig_Hostile_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Hostile_Func002A takes nothing returns nothing
    call SetUnitOwner(GetEnumUnit(), Player(PLAYER_NEUTRAL_AGGRESSIVE), true)
endfunction

function Trig_Hostile_Actions takes nothing returns nothing
    call ForGroupBJ(GetUnitsSelectedAll(GetTriggerPlayer()), function Trig_Hostile_Func002A)
endfunction

//===========================================================================
function InitTrig_Hostile takes nothing returns nothing
local integer i=0
    set gg_trg_Hostile=CreateTrigger()
    loop
    exitwhen i > 11
    call TriggerRegisterPlayerChatEvent(gg_trg_Hostile, Player(0), "-hostile", true)
    set i=i + 1
    endloop
    call TriggerAddCondition(gg_trg_Hostile, Condition(function Trig_Hostile_Conditions))
    call TriggerAddAction(gg_trg_Hostile, function Trig_Hostile_Actions)
endfunction


//===========================================================================
// Trigger: ForceRandom
//===========================================================================
function Trig_ForceRandom_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_ForceRandom_Actions takes nothing returns nothing
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_1290")
    call TriggerExecute(udg_RandomEvent_Trigger[S2I(SubStringBJ(GetEventPlayerChatString(), 13, 999))])
endfunction

//===========================================================================
function InitTrig_ForceRandom takes nothing returns nothing
local integer i=0
    set gg_trg_ForceRandom=CreateTrigger()
    loop
    exitwhen i > 11
    call TriggerRegisterPlayerChatEvent(gg_trg_ForceRandom, Player(i), "-forcerandom ", false)
    set i=i + 1
    endloop
    call TriggerAddCondition(gg_trg_ForceRandom, Condition(function Trig_ForceRandom_Conditions))
    call TriggerAddAction(gg_trg_ForceRandom, function Trig_ForceRandom_Actions)
endfunction


//===========================================================================
// Trigger: TestAbilities
//===========================================================================
function Trig_TestAbilities_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_TestAbilities_Func001A takes nothing returns nothing
    call UnitAddAbilityBJ('A087', GetEnumUnit())
endfunction

function Trig_TestAbilities_Actions takes nothing returns nothing
    call ForGroupBJ(GetUnitsSelectedAll(GetTriggerPlayer()), function Trig_TestAbilities_Func001A)
endfunction

//===========================================================================
function InitTrig_TestAbilities takes nothing returns nothing
local integer i=0
    set gg_trg_TestAbilities=CreateTrigger()
    
    loop
        exitwhen i > 11
            call TriggerRegisterPlayerChatEvent(gg_trg_TestAbilities, Player(i), "-test", true)
            call TriggerRegisterPlayerChatEvent(gg_trg_TestAbilities, Player(i), "--", true)
            set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_TestAbilities, Condition(function Trig_TestAbilities_Conditions))
    call TriggerAddAction(gg_trg_TestAbilities, function Trig_TestAbilities_Actions)
endfunction


//===========================================================================
// Trigger: SetPlayerhero
//===========================================================================
function Trig_SetPlayerhero_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_SetPlayerhero_Func002A takes nothing returns nothing
    set udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())]=GetEnumUnit()
endfunction

function Trig_SetPlayerhero_Actions takes nothing returns nothing
    call ForGroupBJ(GetUnitsSelectedAll(GetTriggerPlayer()), function Trig_SetPlayerhero_Func002A)
endfunction

//===========================================================================
function InitTrig_SetPlayerhero takes nothing returns nothing
local integer i=0
    set gg_trg_SetPlayerhero=CreateTrigger()
    loop
    exitwhen i > 11
    call TriggerRegisterPlayerChatEvent(gg_trg_SetPlayerhero, Player(i), "-playerhero", false)
    set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_SetPlayerhero, Condition(function Trig_SetPlayerhero_Conditions))
    call TriggerAddAction(gg_trg_SetPlayerhero, function Trig_SetPlayerhero_Actions)
endfunction


//===========================================================================
// Trigger: SpawnApocalypse
//===========================================================================
function Trig_SpawnApocalypse_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_SpawnApocalypse_Actions takes nothing returns nothing
    call TriggerExecute(udg_Apocalypse_Trigger[S2I(SubStringBJ(GetEventPlayerChatString(), 17, 999))])
endfunction

//===========================================================================
function InitTrig_SpawnApocalypse takes nothing returns nothing
local integer i=0
    set gg_trg_SpawnApocalypse=CreateTrigger()
    loop
    exitwhen i > 11
    call TriggerRegisterPlayerChatEvent(gg_trg_SpawnApocalypse, Player(i), "-forceapocalypse", false)
    set i=i + 1
    endloop
    call TriggerAddCondition(gg_trg_SpawnApocalypse, Condition(function Trig_SpawnApocalypse_Conditions))
    call TriggerAddAction(gg_trg_SpawnApocalypse, function Trig_SpawnApocalypse_Actions)
endfunction


//===========================================================================
// Trigger: UseItemSlot
//
// Takes the chat message, and first number is which player, and 2nd number is the slot.
// Example: "-useitem 1 2" (and at 2nd slot, there is an emergency medpack), it uses for red player's unit, his emergency medpack. If it was a testing device, he would use it on himself.
//===========================================================================
function Trig_UseItemSlot_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_UseItemSlot_Actions takes nothing returns nothing

    //Call UnitUseItem(playerhero[first number typed], itemslot of second number typed)
    //^Second has a unit in between, which is the target if the item needs targetting and it is itself
    call UnitUseItem(udg_Playerhero[S2I(SubStringBJ(GetEventPlayerChatString(), 10, 10))], UnitItemInSlotBJ(udg_Playerhero[S2I(SubStringBJ(GetEventPlayerChatString(), 10, 10))], S2I(SubStringBJ(GetEventPlayerChatString(), 12, 15))))
    call UnitUseItemTarget(udg_Playerhero[S2I(SubStringBJ(GetEventPlayerChatString(), 10, 10))], UnitItemInSlotBJ(udg_Playerhero[S2I(SubStringBJ(GetEventPlayerChatString(), 10, 10))], S2I(SubStringBJ(GetEventPlayerChatString(), 12, 15))), udg_Playerhero[S2I(SubStringBJ(GetEventPlayerChatString(), 10, 10))])
            //call DisplayTextToForce( GetPlayersAll(), SubStringBJ(GetEventPlayerChatString(), 10, 11))// Debug msg
            //call DisplayTextToForce( GetPlayersAll(), SubStringBJ(GetEventPlayerChatString(), 12, 15))// Debug msg
    
endfunction

//===========================================================================
function InitTrig_UseItemSlot takes nothing returns nothing
local integer i=0
    set gg_trg_UseItemSlot=CreateTrigger()
    
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_UseItemSlot, Player(i), "-useitem", false)
        set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_UseItemSlot, Condition(function Trig_UseItemSlot_Conditions))
    call TriggerAddAction(gg_trg_UseItemSlot, function Trig_UseItemSlot_Actions)
endfunction


//===========================================================================
// Trigger: GlobalVision
//
// Takes the chat message, and first number is which player, and 2nd number is the slot.
// Example: "-useitem 1 2" (and at 2nd slot, there is an emergency medpack), it uses for red player's unit, his emergency medpack. If it was a testing device, he would use it on himself.
//===========================================================================
function Trig_GlobalVision_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_GlobalVision_Actions takes nothing returns nothing

    call FogEnableOff()
    call FogMaskEnableOff()
    call CreateFogModifierRectBJ(true, GetTriggerPlayer(), FOG_OF_WAR_VISIBLE, GetPlayableMapRect())
    
endfunction

//===========================================================================
function InitTrig_GlobalVision takes nothing returns nothing
local integer i=0
    set gg_trg_GlobalVision=CreateTrigger()
    
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_GlobalVision, Player(i), "-vision", true)
        call TriggerRegisterPlayerChatEvent(gg_trg_GlobalVision, Player(i), "-v", true)
        set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_GlobalVision, Condition(function Trig_GlobalVision_Conditions))
    call TriggerAddAction(gg_trg_GlobalVision, function Trig_GlobalVision_Actions)
endfunction


//===========================================================================
// Trigger: DebugMultiplayer
//
// Takes the chat message, and first number is which player, and 2nd number is the slot.
// Example: "-useitem 1 2" (and at 2nd slot, there is an emergency medpack), it uses for red player's unit, his emergency medpack. If it was a testing device, he would use it on himself.
//===========================================================================

function Trig_DebugMultiplayer_Conditions takes nothing returns boolean
    return true
endfunction

function SetActivePlayers takes nothing returns nothing
    if GetPlayerSlotState(GetEnumPlayer()) == PLAYER_SLOT_STATE_PLAYING and udg_Player_Left[GetConvertedPlayerId(GetEnumPlayer())] == false then
        set playersActive=playersActive + 1
    endif
endfunction

function Trig_DebugMultiplayer_Actions takes nothing returns nothing

    //If not toggled before (it toggles only once for obvious reasons)
    if udg_PlayerDebugMultiplayerToggled[GetPlayerId(GetTriggerPlayer())] == false then
        set udg_PlayerDebugMultiplayerToggled[GetPlayerId(GetTriggerPlayer())]=true //So it won't enter here again
                
        //Increase players toggled by one
        set playersToggled=playersToggled + 1
        
        
        //Enumerate/Count how many players there are ((sets playersActive))
        set playersActive=0
        call ForForce(GetPlayersAll(), function SetActivePlayers)
        
        call DisplayTextToForce(GetPlayersAll(), I2S(playersToggled) + "/" + I2S(playersActive) + " have voted for Debugging mode.")
        call DisplayTextToForce(GetPlayersAll(), I2S(playersActive - 2 - playersToggled) + " more are needed to activate Debugging mode.")
        
        //If all players wrote -debug, activate it.
        if ( playersToggled >= playersActive - 2 ) then
            set udg_TESTING=true
            
            call DisplayTextToForce(GetPlayersAll(), "Debugging Mode A C T I V A T E D")
        endif
    endif
    
endfunction

//===========================================================================
function InitTrig_DebugMultiplayer takes nothing returns nothing
    local integer i=0
    set gg_trg_DebugMultiplayer=CreateTrigger()
    
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_DebugMultiplayer, Player(i), "-debug", false)
        set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_DebugMultiplayer, Condition(function Trig_DebugMultiplayer_Conditions))
    call TriggerAddAction(gg_trg_DebugMultiplayer, function Trig_DebugMultiplayer_Actions)
endfunction
//===========================================================================
// Trigger: Kill
//===========================================================================
function Trig_Kill_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function KillPickedUnit takes nothing returns nothing
    call KillUnit(GetEnumUnit())
endfunction

function Trig_Kill_Actions takes nothing returns nothing
    call ForGroupBJ(GetUnitsSelectedAll(GetTriggerPlayer()), function KillPickedUnit)
endfunction

//===========================================================================
function InitTrig_Kill takes nothing returns nothing
    local integer i=0

    set gg_trg_Kill=CreateTrigger()
    
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_Kill, Player(i), "-kill", true)
        call TriggerRegisterPlayerChatEvent(gg_trg_Kill, Player(i), "-k", true)
        set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_Kill, Condition(function Trig_Kill_Conditions))
    call TriggerAddAction(gg_trg_Kill, function Trig_Kill_Actions)
endfunction


//===========================================================================
// Trigger: BecomeAlien
//===========================================================================
function Trig_BecomeAlien_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BecomeAlien_Actions takes nothing returns nothing
    set udg_Parasite=GetTriggerPlayer()
    call SetPlayerAllianceStateBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), GetTriggerPlayer(), bj_ALLIANCE_ALLIED_ADVUNITS)
    
    //if playerhero not in suit, give alien form ability
    if GetUnitTypeId(udg_Playerhero[GetConvertedPlayerId(udg_Parasite)]) == 'h00H' then
        call UnitAddAbilityBJ('A02O', udg_Playerhero[GetConvertedPlayerId(udg_Parasite)])
    endif
    
    //Win condition
    set udg_Allow_Parasite=true
endfunction

//===========================================================================
function InitTrig_BecomeAlien takes nothing returns nothing
    local integer i=0

    set gg_trg_BecomeAlien=CreateTrigger()
    
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_BecomeAlien, Player(i), "-alien", false)
        set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_BecomeAlien, Condition(function Trig_BecomeAlien_Conditions))
    call TriggerAddAction(gg_trg_BecomeAlien, function Trig_BecomeAlien_Actions)
endfunction


//===========================================================================
// Trigger: BecomeMutant
//===========================================================================
//TESH.scrollpos=12
//TESH.alwaysfold=0
function Trig_BecomeMutant_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BecomeMutant_Actions takes nothing returns nothing
    set udg_Mutant=GetTriggerPlayer()
    call CreateNUnitsAtLoc(1, 'e031', GetTriggerPlayer(), udg_HoldZone, bj_UNIT_FACING) //Was GetEnumUnit()
    
    //if playerhero not in suit, give devour ability
    if ( GetUnitTypeId(udg_Playerhero[GetConvertedPlayerId(udg_Mutant)]) == 'h00H' ) then
        call UnitAddAbilityBJ('A05M', udg_Playerhero[GetConvertedPlayerId(udg_Mutant)])
    endif
    
    //Win Condition
    set udg_Allow_Mutant=true
endfunction

//===========================================================================
function InitTrig_BecomeMutant takes nothing returns nothing
    local integer i=0

    set gg_trg_BecomeMutant=CreateTrigger()
    
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_BecomeMutant, Player(i), "-mutant", false)
        set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_BecomeMutant, Condition(function Trig_BecomeMutant_Conditions))
    call TriggerAddAction(gg_trg_BecomeMutant, function Trig_BecomeMutant_Actions)
endfunction


//===========================================================================
// Trigger: BecomeAndroid
//===========================================================================
function Trig_BecomeAndroid_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BecomeAndroid_Actions takes nothing returns nothing
    set udg_HiddenAndroid=GetTriggerPlayer()
    
    //Win condition allowed
    set udg_Allow_Android=true
endfunction

//===========================================================================
function InitTrig_BecomeAndroid takes nothing returns nothing
    local integer i=0

    set gg_trg_BecomeAndroid=CreateTrigger()
    
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_BecomeAndroid, Player(i), "-android", false)
        set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_BecomeAndroid, Condition(function Trig_BecomeAndroid_Conditions))
    call TriggerAddAction(gg_trg_BecomeAndroid, function Trig_BecomeAndroid_Actions)
endfunction
//===========================================================================
// Trigger: BecomeRogueAndroid
//===========================================================================
function Trig_BecomeRogueAndroid_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BecomeRogueAndroid_Actions takes nothing returns nothing
    if not udg_Allow_RogueAndroid then
        set udg_RogueAndroid=GetTriggerPlayer()
        set udg_Allow_RogueAndroid=true
    
        call VesselUpgrade_VesselInit(udg_RogueAndroid)
    
        call UnitAddAbilityBJ('A0AI', (udg_Playerhero[GetConvertedPlayerId(udg_RogueAndroid)])) // INLINED!!
        call CreateAlienCooldownRequirementsForPlayer(udg_RogueAndroid)
    endif
endfunction

//===========================================================================
function InitTrig_BecomeRogueAndroid takes nothing returns nothing
    local integer i=0

    set gg_trg_BecomeRogueAndroid=CreateTrigger()
    
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_BecomeRogueAndroid, Player(i), "-cyborg", false)
        set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_BecomeRogueAndroid, Condition(function Trig_BecomeRogueAndroid_Conditions))
    call TriggerAddAction(gg_trg_BecomeRogueAndroid, function Trig_BecomeRogueAndroid_Actions)
endfunction
//===========================================================================
// Trigger: BecomeHuman
//===========================================================================
function Trig_BecomeHuman_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_BecomeHuman_Actions takes nothing returns nothing
    //Remove Alien
    set udg_Parasite=Player(PLAYER_NEUTRAL_PASSIVE)
    call SetPlayerAllianceStateBJ(Player(bj_PLAYER_NEUTRAL_EXTRA), udg_Parasite, bj_ALLIANCE_NEUTRAL)
    call UnitRemoveAbilityBJ('A02O', udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])
    set udg_Allow_Parasite=false
    
    //Remove Mutant
    set udg_Mutant=Player(PLAYER_NEUTRAL_PASSIVE)
    call UnitRemoveAbilityBJ('A05M', udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])
    set udg_Allow_Mutant=false

    //Remove Android
    set udg_HiddenAndroid=Player(PLAYER_NEUTRAL_PASSIVE)
    call UnitRemoveAbilityBJ('A05Z', udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])
    set udg_Allow_Android=false

    //Remove Rogue Android
    set udg_RogueAndroid=Player(PLAYER_NEUTRAL_PASSIVE)
    call UnitRemoveAbilityBJ('A0AI', (udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())])) // INLINED!!
    set udg_Allow_RogueAndroid=false

endfunction

//===========================================================================
function InitTrig_BecomeHuman takes nothing returns nothing
    local integer i=0

    set gg_trg_BecomeHuman=CreateTrigger()
    
    loop
    exitwhen i > 11
        call TriggerRegisterPlayerChatEvent(gg_trg_BecomeHuman, Player(i), "-human", false)
        set i=i + 1
    endloop
    
    call TriggerAddCondition(gg_trg_BecomeHuman, Condition(function Trig_BecomeHuman_Conditions))
    call TriggerAddAction(gg_trg_BecomeHuman, function Trig_BecomeHuman_Actions)
endfunction


//===========================================================================
// Trigger: DEBUGQ
//===========================================================================
function Trig_DEBUGQ_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_DEBUGQ_Actions takes nothing returns nothing
    call CreateItemLoc('I01F', GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())]))
    call CreateItemLoc('I01F', GetUnitLoc(udg_Playerhero[GetConvertedPlayerId(GetTriggerPlayer())]))
endfunction

//===========================================================================
function InitTrig_DEBUGQ takes nothing returns nothing
    set gg_trg_DEBUGQ=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_DEBUGQ, Player(0), "q", true)
    call TriggerAddCondition(gg_trg_DEBUGQ, Condition(function Trig_DEBUGQ_Conditions))
    call TriggerAddAction(gg_trg_DEBUGQ, function Trig_DEBUGQ_Actions)
endfunction

//===========================================================================
// Trigger: DEBUGW
//===========================================================================
function Trig_DEBUGW_Conditions takes nothing returns boolean
    if ( not ( udg_TESTING == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_DEBUGW_Func003A takes nothing returns nothing
    call DisplayTextToForce(GetPlayersAll(), I2S(GetConvertedPlayerId(GetTriggerPlayer())))
endfunction

function Trig_DEBUGW_Actions takes nothing returns nothing
    call ForGroupBJ(GetUnitsOfTypeIdAll('e01I'), function Trig_DEBUGW_Func003A)
endfunction

//===========================================================================
function InitTrig_DEBUGW takes nothing returns nothing
    set gg_trg_DEBUGW=CreateTrigger()
    call TriggerRegisterPlayerChatEvent(gg_trg_DEBUGW, Player(0), "ww", true)
    call TriggerAddCondition(gg_trg_DEBUGW, Condition(function Trig_DEBUGW_Conditions))
    call TriggerAddAction(gg_trg_DEBUGW, function Trig_DEBUGW_Actions)
endfunction

//===========================================================================
// Trigger: AttachObject
//===========================================================================
//===========================================================================
// Trigger: ListT
//===========================================================================

//===========================================================================
// Trigger: RiseAndFall
//===========================================================================
//===========================================================================
// Trigger: Spell System Config
//===========================================================================
function Trig_Spell_System_Config_Actions takes nothing returns nothing
    // Only one dummy unit type is needed as you can attach an effect to it of any kind
    //  
    set udg_Spell__DummyType='n000'
    set udg_Spell__DummyOwner=Player(bj_PLAYER_NEUTRAL_EXTRA)
    set udg_Spell__Interval=( 1 / 32.00 )
    //  
    // Configure default values for the unit filter:
    //  
    set udg_Spell__Filter_AllowEnemy=true
    set udg_Spell__Filter_AllowLiving=true
    set udg_Spell__Filter_AllowHero=true
    set udg_Spell__Filter_AllowNonHero=true
    set udg_Spell__Filter_AllowAlly=true
    set udg_Spell__Filter_AllowDead=false
    set udg_Spell__Filter_AllowFlying=true
    set udg_Spell__Filter_AllowMechanical=true
    set udg_Spell__Filter_AllowStructure=true
    //  
    // Magic immunity is a great thing to block, as it also discludes invulnerable units from being picked
    //  
    set udg_Spell__Filter_AllowMagicImmune=false
    //  
    // Normal WC3 abilities, like Channel, wake sleeping creeps - even if they don't deal damage or apply buffs.
    // Because of this, I provided an option to wake up creeps when they are enumerated by an InRange command.
    //  
    set udg_Spell__WakeTargets=true
    //  
    // Do not enable the following lines as they are variable declarations which make copying this system easier
    //  
endfunction

//===========================================================================
function InitTrig_Spell_System_Config takes nothing returns nothing
    set gg_trg_Spell_System_Config=CreateTrigger()
    call TriggerAddAction(gg_trg_Spell_System_Config, function Trig_Spell_System_Config_Actions)
endfunction

//===========================================================================
// Trigger: Spell System
//===========================================================================
function SpellIndexGetVars takes integer i returns nothing
    set udg_Spell__Ability=udg_Spell_i_Abil[udg_Spell_i_Head[i]]
    set udg_Spell__Index=i
    set udg_Spell__Caster=udg_Spell_i_Caster[i]
    set udg_Spell__CasterOwner=GetOwningPlayer(udg_Spell__Caster)
    set udg_Spell__Level=udg_Spell_i_Level[i]
    set udg_Spell__LevelMultiplier=udg_Spell__Level //Spell__LevelMultiplier is a real variable.
    set udg_Spell__Target=udg_Spell_i_Target[i]
    
    //Magic to ensure the locations never leak.
    call MoveLocation(udg_Spell__CastPoint, GetUnitX(udg_Spell__Caster), GetUnitY(udg_Spell__Caster))
    if udg_Spell__Target == null then
        call MoveLocation(udg_Spell__TargetPoint, udg_Spell_i_TargetX[i], udg_Spell_i_TargetY[i])
    else
        call MoveLocation(udg_Spell__TargetPoint, GetUnitX(udg_Spell__Target), GetUnitY(udg_Spell__Target))
    endif
    set udg_Spell__TargetGroup=udg_Spell_i_TargetGroup[i]
    set udg_Spell__Completed=udg_Spell_i_Completed[i]
    set udg_Spell__Channeling=udg_Spell_i_Channeling[i]
endfunction

function SpellSetFilters takes integer i returns nothing
    set udg_Spell_i_AllowEnemy[i]=udg_Spell__Filter_AllowEnemy
    set udg_Spell_i_AllowAlly[i]=udg_Spell__Filter_AllowAlly
    set udg_Spell_i_AllowDead[i]=udg_Spell__Filter_AllowDead
    set udg_Spell_i_AllowLiving[i]=udg_Spell__Filter_AllowLiving
    set udg_Spell_i_AllowMagicImmune[i]=udg_Spell__Filter_AllowMagicImmune
    set udg_Spell_i_AllowMechanical[i]=udg_Spell__Filter_AllowMechanical
    set udg_Spell_i_AllowStructure[i]=udg_Spell__Filter_AllowStructure
    set udg_Spell_i_AllowFlying[i]=udg_Spell__Filter_AllowFlying
    set udg_Spell_i_AllowHero[i]=udg_Spell__Filter_AllowHero
    set udg_Spell_i_AllowNonHero[i]=udg_Spell__Filter_AllowNonHero
endfunction

function SpellIndexDestroy takes integer i returns nothing
    local integer indexOf
    local integer index
    if udg_Spell_i_RecycleList[i] >= 0 then
        return
    endif
    //If the caster is still channeling on the spell, don't destroy until it's finished:
    if not udg_Spell_i_Channeling[i] then
        set index=udg_Spell_i_Head[i]
        set udg_Spell_i_RecycleList[i]=udg_Spell_i_Recycle
        set udg_Spell_i_Recycle=i
        
        //Reset things to defaults:
        set udg_Spell_i_Time[i]=0.00
        set udg_Spell_i_LastTime[i]=0.00
        set udg_Spell_i_Duration[i]=0.00
        set udg_Spell_i_Completed[i]=false
        set udg_Spell_i_Caster[i]=null
        set udg_Spell_i_Target[i]=null
        set udg_Spell_i_OnLoopStack[i]=null
        
        //Recycle any applicable target unit group.
        if udg_Spell_i_TargetGroup[i] != null then
            call GroupClear(udg_Spell_i_TargetGroup[i])
            set udg_Spell_i_GroupStack[udg_Spell_i_GroupN]=udg_Spell_i_TargetGroup[i]
            set udg_Spell_i_GroupN=udg_Spell_i_GroupN + 1
            set udg_Spell_i_TargetGroup[i]=null
        endif
        
        //Clear any user-specified data in the hashtable:
        call FlushChildHashtable(udg_Spell__Hash, i)
        //call BJDebugMsg("Destroying index: " + I2S(i))
    endif
    
    set indexOf=udg_Spell_i_StackRef[i]
    if indexOf >= 0 then
        set index=udg_Spell_i_StackN - 1
        set udg_Spell_i_StackN=index
        
        set udg_Spell_i_StackRef[udg_Spell_i_Stack[index]]=indexOf
        set udg_Spell_i_Stack[indexOf]=udg_Spell_i_Stack[index]
        if index == 0 then
            //If no more spells require the timer, pause it.
            call PauseTimer(udg_Spell_i_Timer)
        endif
        set udg_Spell_i_StackRef[i]=- 1
    endif
endfunction

function SpellTriggerExecute takes integer i,trigger t returns real
    local real d= udg_Spell_i_Duration[i]
    local boolean b= false
    set udg_Spell__Duration=d
    set udg_Spell__Time=0.00
    if t != null then
        set udg_Spell__Trigger_OnLoop=null
        set udg_Spell__Expired=d <= 0.00 //If the duration is <= 0, the spell has expired.
        call SpellIndexGetVars(i)
        if TriggerEvaluate(t) then
            call TriggerExecute(t)
        endif
        if udg_Spell__Trigger_OnLoop != null then
            set udg_Spell_i_OnLoopStack[i]=udg_Spell__Trigger_OnLoop
        endif
        //The remaining lines in this function process the duration specified by the user.
        if udg_Spell__StartDuration then
            set udg_Spell__StartDuration=false
            set udg_Spell__Duration=udg_Spell_i_Duration[udg_Spell_i_Head[i]] + udg_Spell_i_LastTime[udg_Spell_i_Head[i]] * udg_Spell__LevelMultiplier
        elseif ( udg_Spell__Expired and d > 0.00 ) or ( udg_Spell__Duration <= 0.00 ) then
            set udg_Spell__Duration=0.00
            return udg_Spell__Time
            //The user manually expired the spell or the spell duration ended on its own.
        endif
        if d != udg_Spell__Duration then
            //A new duration has been assigned
            set d=udg_Spell__Duration
            set b=true
        endif
        set udg_Spell__Duration=0.00
        if udg_Spell__Time == 0.00 then
            if udg_Spell_i_LastTime[i] == 0.00 then
                if udg_Spell_i_Time[udg_Spell_i_Head[i]] > 0.00 then
                    //The user specified a default interval to follow:
                    set udg_Spell__Time=udg_Spell_i_Time[udg_Spell_i_Head[i]]
                else
                    //Set the spell time to the minimum.
                    set udg_Spell__Time=udg_Spell__Interval
                endif
            else
                //Otherwise, set it to what it was before.
                set udg_Spell__Time=udg_Spell_i_LastTime[i]
            endif
        //else, the user is specifying a new time for the spell.
        endif
        set udg_Spell_i_LastTime[i]=udg_Spell__Time //Whatever the case, remember this time for next time.
        if b then
            //The duration was just assigned
            set udg_Spell_i_Duration[i]=d
        else
            //The duration has been ongoing
            set udg_Spell_i_Duration[i]=d - udg_Spell__Time
        endif
    endif
    return udg_Spell__Time
endfunction

//===========================================================================
// Runs every Spell__Interval seconds and handles all of the timed events.
// 
function SpellTimerLoop takes nothing returns nothing
    local integer i= udg_Spell_i_StackN
    local integer node
    local real time
    set udg_Spell__Running=true
    
    //Run stack top to bottom to avoid skipping slots when destroying.
    loop
        set i=i - 1
        exitwhen i < 0
        set node=udg_Spell_i_Stack[i]
        set time=udg_Spell_i_Time[node] - udg_Spell__Interval
        if time <= 0.00 then
            set time=SpellTriggerExecute(node , udg_Spell_i_OnLoopStack[node])
        endif
        if time <= 0.00 then
            call SpellIndexDestroy(node)
        else
            set udg_Spell_i_Time[node]=time
        endif
    endloop
    set udg_Spell__Running=false
endfunction

//===========================================================================
// This is the meat of the system as it handles the event responses.
// 
function RunSpellEvent takes nothing returns boolean
    local boolean b
    local integer aid= GetSpellAbilityId()
    local integer head= LoadInteger(udg_Spell__Hash, 0, aid)
    local integer i
    local integer id
    local trigger t
    local playerunitevent eid
    if head == 0 then
        //Nothing for this ability has been registered. Skip the sequence.
        return false
    endif
    set eid=ConvertPlayerUnitEvent(GetHandleId(GetTriggerEventId()))
    set udg_Spell__Caster=GetTriggerUnit()
    set id=GetHandleId(udg_Spell__Caster)
    set i=LoadInteger(udg_Spell__Hash, aid, id)
    if i == 0 then
        //This block will almost always happen with the OnChannel event. In the
        //case of Charge Gold and Lumber, only an OnEffect event will run.
        set i=udg_Spell_i_Recycle
        if i == 0 then
            //Create a new, unique index
            set i=udg_Spell_i_Instances + 1
            set udg_Spell_i_Instances=i
        else
            //Repurpose an existing one
            set udg_Spell_i_Recycle=udg_Spell_i_RecycleList[i]
        endif
        //call BJDebugMsg("Creating index: " + I2S(i))
        set udg_Spell_i_RecycleList[i]=- 1
        set udg_Spell_i_StackRef[i]=- 1
        set udg_Spell_i_Head[i]=head
        
        if eid == EVENT_PLAYER_UNIT_SPELL_CHANNEL then
            set udg_Spell_i_Channeling[i]=true
            call SaveInteger(udg_Spell__Hash, aid, id, i)
            set t=udg_Spell_i_OnChannelStack[head]
        else //eid == EVENT_PLAYER_UNIT_SPELL_EFFECT
            set t=udg_Spell_i_OnEffectStack[head]
        endif
        set udg_Spell_i_Caster[i]=udg_Spell__Caster
        set udg_Spell_i_Level[i]=GetUnitAbilityLevel(udg_Spell__Caster, aid)
        set udg_Spell_i_Target[i]=GetSpellTargetUnit()
        set udg_Spell_i_TargetX[i]=GetSpellTargetX()
        set udg_Spell_i_TargetY[i]=GetSpellTargetY()
        
        set udg_Spell_i_OnLoopStack[i]=udg_Spell_i_OnLoopStack[head]
        if udg_Spell_i_UseTG[head] then
            //Get a recycled unit group or create a new one.
            set id=udg_Spell_i_GroupN - 1
            if id >= 0 then
                set udg_Spell_i_GroupN=id
                set udg_Spell_i_TargetGroup[i]=udg_Spell_i_GroupStack[id]
            else
                set udg_Spell_i_TargetGroup[i]=CreateGroup()
            endif
        endif
    elseif eid == EVENT_PLAYER_UNIT_SPELL_CAST then
        set t=udg_Spell_i_OnCastStack[head]
    elseif eid == EVENT_PLAYER_UNIT_SPELL_EFFECT then
        set t=udg_Spell_i_OnEffectStack[head]
    elseif eid == EVENT_PLAYER_UNIT_SPELL_FINISH then
        set udg_Spell_i_Completed[i]=true
        return true
    else //eid == EVENT_PLAYER_UNIT_SPELL_ENDCAST
        set udg_Spell_i_Channeling[i]=false
        call RemoveSavedInteger(udg_Spell__Hash, aid, id)
        set t=udg_Spell_i_OnFinishStack[head]
    endif
    if SpellTriggerExecute(i , t) > 0.00 then
        //Set the spell time to the user-specified one.
        set udg_Spell_i_Time[i]=udg_Spell__Time
        if udg_Spell_i_StackRef[i] < 0 then
            //Allocate the spell index onto the loop stack.
            set aid=udg_Spell_i_StackN
            set udg_Spell_i_Stack[aid]=i
            set udg_Spell_i_StackRef[i]=aid
            set udg_Spell_i_StackN=aid + 1
            if aid == 0 then
                //If this is the first spell index using the timer, start it up:
                call TimerStart(udg_Spell_i_Timer, udg_Spell__Interval, true, function SpellTimerLoop)
            endif
        endif
    elseif ( not udg_Spell_i_Channeling[i] ) and ( t != null or udg_Spell_i_Time[i] <= 0.00 ) then
        call SpellIndexDestroy(i)
    endif
    set t=null
    return true
endfunction

//This function is invoked if an event was launched recursively by another event's callback.
function RunPreSpellEvent takes nothing returns nothing
    local integer i= udg_Spell__Index
    local real time= udg_Spell__Time
    local real d= udg_Spell__Duration
    local boolean expired= udg_Spell__Expired
    if udg_Spell__Trigger_OnLoop != null then
        set udg_Spell_i_OnLoopStack[i]=udg_Spell__Trigger_OnLoop
    endif
    if RunSpellEvent() then
        set udg_Spell__Time=time
        set udg_Spell__Duration=d
        set udg_Spell__Expired=expired
        call SpellIndexGetVars(i)
    endif
endfunction

//===========================================================================
// Base function of the system: runs when an ability event does something.
// 
function SpellSystemEvent takes nothing returns boolean
    if udg_Spell__Running then
        call RunPreSpellEvent()
    else
        set udg_Spell__Running=true
        call RunSpellEvent()
        set udg_Spell__Running=false
    endif
    return false
endfunction

//===========================================================================
// Set Spell__Ability to your spell's ability
// Set Spell__Trigger_OnChannel/Cast/Effect/Finish/Loop to any trigger(s) you
// want to automatically run.
// 
// GUI-friendly: Run Spell System <gen> (ignoring conditions)
// 
function SpellSystemRegister takes nothing returns nothing
    local integer aid= udg_Spell__Ability
    local integer head= udg_Spell_i_Instances + 1
    
    if HaveSavedInteger(udg_Spell__Hash, 0, aid) or aid == 0 then
        //The system rejects duplicate or unassigned abilities.
        return
    endif
    set udg_Spell_i_Instances=head
    set udg_Spell_i_Abil[head]=aid
    
    //Preload the ability on dummy unit to help prevent first-instance lag
    call UnitAddAbility(udg_Spell_i_PreloadDummy, aid)
    
    //Save head index to the spell ability so it be referenced later.
    call SaveInteger(udg_Spell__Hash, 0, aid, head)
    
    //Set any applicable event triggers.
    set udg_Spell_i_OnChannelStack[head]=udg_Spell__Trigger_OnChannel
    set udg_Spell_i_OnCastStack[head]=udg_Spell__Trigger_OnCast
    set udg_Spell_i_OnEffectStack[head]=udg_Spell__Trigger_OnEffect
    set udg_Spell_i_OnFinishStack[head]=udg_Spell__Trigger_OnFinish
    set udg_Spell_i_OnLoopStack[head]=udg_Spell__Trigger_OnLoop
    set udg_Spell_i_InRangeFilter[head]=udg_Spell__Trigger_InRangeFilter
    
    //Set any customized filter variables:
    call SpellSetFilters(head)
    
    //Tell the system to automatically create target groups, if needed
    set udg_Spell_i_AutoAddTargets[head]=udg_Spell__AutoAddTargets
    set udg_Spell_i_UseTG[head]=udg_Spell__UseTargetGroup or udg_Spell__AutoAddTargets
    
    //Handle automatic buff assignment
    set udg_Spell_i_BuffAbil[head]=udg_Spell__BuffAbility
    set udg_Spell_i_BuffOrder[head]=udg_Spell__BuffOrder
    
    //Set the default time sequences if a duration is used:
    set udg_Spell_i_Time[head]=udg_Spell__Time
    set udg_Spell_i_Duration[head]=udg_Spell__Duration
    set udg_Spell_i_LastTime[head]=udg_Spell__DurationPerLevel
    
    //Set variables back to their defaults:
    set udg_Spell__Trigger_OnChannel=null
    set udg_Spell__Trigger_OnCast=null
    set udg_Spell__Trigger_OnEffect=null
    set udg_Spell__Trigger_OnFinish=null
    set udg_Spell__Trigger_OnLoop=null
    set udg_Spell__Trigger_InRangeFilter=null
    set udg_Spell__AutoAddTargets=false
    set udg_Spell__UseTargetGroup=false
    set udg_Spell__Time=0.00
    set udg_Spell__Duration=0.00
    set udg_Spell__DurationPerLevel=0.00
    set udg_Spell__BuffAbility=0
    set udg_Spell__BuffOrder=0
    
    set udg_Spell__Filter_AllowEnemy=udg_Spell_i_AllowEnemy[0]
    set udg_Spell__Filter_AllowAlly=udg_Spell_i_AllowAlly[0]
    set udg_Spell__Filter_AllowDead=udg_Spell_i_AllowDead[0]
    set udg_Spell__Filter_AllowMagicImmune=udg_Spell_i_AllowMagicImmune[0]
    set udg_Spell__Filter_AllowMechanical=udg_Spell_i_AllowMechanical[0]
    set udg_Spell__Filter_AllowStructure=udg_Spell_i_AllowStructure[0]
    set udg_Spell__Filter_AllowFlying=udg_Spell_i_AllowFlying[0]
    set udg_Spell__Filter_AllowHero=udg_Spell_i_AllowHero[0]
    set udg_Spell__Filter_AllowNonHero=udg_Spell_i_AllowNonHero[0]
    set udg_Spell__Filter_AllowLiving=udg_Spell_i_AllowLiving[0]
endfunction

function SpellFilterCompare takes boolean is,boolean yes,boolean no returns boolean
    return ( is and yes ) or ( ( not is ) and no )
endfunction

//===========================================================================
// Before calling this function, set Spell__InRangePoint to whatever point
// you need, THEN set Spell__InRange to the radius you need. The system will
// enumerate the units matching the configured filter and fill them into
// Spell_InRangeGroup.
// 
function SpellGroupUnitsInRange takes nothing returns boolean
    local integer i= udg_Spell_i_Head[udg_Spell__Index]
    local integer j= 0
    local unit u
    local real padding= 64.00
    if udg_Spell_i_AllowStructure[i] then
        //A normal unit can only have up to size 64.00 collision, but if the
        //user needs to check for structures we need a padding big enough for
        //the "fattest" ones: Tier 3 town halls.
        set padding=197.00
    endif
    call GroupEnumUnitsInRangeOfLoc(udg_Spell__InRangeGroup, udg_Spell__InRangePoint, udg_Spell__InRange + padding, null)
    loop
        set u=FirstOfGroup(udg_Spell__InRangeGroup)
        exitwhen u == null
        call GroupRemoveUnit(udg_Spell__InRangeGroup, u)
        loop
            exitwhen udg_Spell_i_AutoAddTargets[i] and IsUnitInGroup(u, udg_Spell__TargetGroup)
            exitwhen not IsUnitInRangeLoc(u, udg_Spell__InRangePoint, udg_Spell__InRange)
            exitwhen not SpellFilterCompare(IsUnitType(u, UNIT_TYPE_DEAD) , udg_Spell_i_AllowDead[i] , udg_Spell_i_AllowLiving[i])
            exitwhen not SpellFilterCompare(IsUnitAlly(u, udg_Spell__CasterOwner) , udg_Spell_i_AllowAlly[i] , udg_Spell_i_AllowEnemy[i])
            exitwhen not SpellFilterCompare(IsUnitType(u, UNIT_TYPE_HERO) or IsUnitType(u, UNIT_TYPE_RESISTANT) , udg_Spell_i_AllowHero[i] , udg_Spell_i_AllowNonHero[i])
            exitwhen IsUnitType(u, UNIT_TYPE_STRUCTURE) and not udg_Spell_i_AllowStructure[i]
            exitwhen IsUnitType(u, UNIT_TYPE_FLYING) and not udg_Spell_i_AllowFlying[i]
            exitwhen IsUnitType(u, UNIT_TYPE_MECHANICAL) and not udg_Spell_i_AllowMechanical[i]
            exitwhen IsUnitType(u, UNIT_TYPE_MAGIC_IMMUNE) and not udg_Spell_i_AllowMagicImmune[i]
            set udg_Spell__InRangeUnit=u
            //Run the user's designated filter, if one exists.
            exitwhen udg_Spell_i_InRangeFilter[i] != null and not TriggerEvaluate(udg_Spell_i_InRangeFilter[i])
            set j=j + 1
            set udg_Spell__InRangeUnits[j]=u
            exitwhen true
        endloop
    endloop
    if j > udg_Spell__InRangeMax and udg_Spell__InRangeMax > 0 then
        //The user has defined a maximum number of units allowed in the group.
        //Remove a random unit until the total does not exceed capacity.
        loop
            set i=GetRandomInt(1, j)
            set udg_Spell__InRangeUnits[i]=udg_Spell__InRangeUnits[j]
            set j=j - 1
            exitwhen j == udg_Spell__InRangeMax
        endloop
    endif
    set udg_Spell__InRangeCount=j
    set udg_Spell__InRangeMax=0
    set udg_Spell__InRange=0.00
    set i=udg_Spell_i_Head[udg_Spell__Index]
    loop
        exitwhen j == 0
        set u=udg_Spell__InRangeUnits[j]
        call GroupAddUnit(udg_Spell__InRangeGroup, u)
        if udg_Spell_i_AutoAddTargets[i] then
            call GroupAddUnit(udg_Spell__TargetGroup, u)
        endif
        if udg_Spell__WakeTargets and UnitIsSleeping(u) then
            call UnitWakeUp(u)
        endif
        if udg_Spell_i_BuffAbil[i] != 0 and udg_Spell_i_BuffOrder[i] != 0 then
            //Auto-buff units added to group:
            call UnitAddAbility(udg_Spell_i_PreloadDummy, udg_Spell_i_BuffAbil[i])
            call IssueTargetOrderById(udg_Spell_i_PreloadDummy, udg_Spell_i_BuffOrder[i], u)
            call UnitRemoveAbility(udg_Spell_i_PreloadDummy, udg_Spell_i_BuffAbil[i])
        endif
        set j=j - 1
    endloop
    set u=null
    return false
endfunction

function SpellPreloadEnd takes nothing returns nothing
    local integer i= udg_Spell_i_Instances
    loop
        exitwhen i == 0
        //Remove preloaded abilities so they don't interfere with orders
        call UnitRemoveAbility(udg_Spell_i_PreloadDummy, udg_Spell_i_Abil[udg_Spell_i_Head[i]])
        set i=i - 1
    endloop
endfunction

//===========================================================================
function InitTrig_Spell_System takes nothing returns nothing
    local integer i= bj_MAX_PLAYER_SLOTS
    local player p
    local trigger t
    
    if gg_trg_Spell_System != null then
        //A JASS function call already initialized the system.
        return
    endif
    
    //This runs before map init events so the hashtable is ready before then.
    set udg_Spell__Hash=InitHashtable()
    
    //Initialize these two locations which will never get removed
    set udg_Spell__CastPoint=Location(0, 0)
    set udg_Spell__TargetPoint=Location(0, 0)
    
    //Recycle existing unit groups into the recycle stack to avoid needing to destroy any extras.
    set udg_Spell_i_GroupStack[2]=udg_Spell__TargetGroup
    set udg_Spell_i_GroupStack[3]=udg_Spell_i_TargetGroup[0]
    set udg_Spell_i_GroupStack[4]=udg_Spell_i_TargetGroup[1]
    set udg_Spell_i_GroupN=5 //There are already five valid unit groups thanks to Variable Editor.
    
    set t=CreateTrigger()
    call h__TriggerRegisterVariableEvent(t, "udg_Spell__InRange", GREATER_THAN, 0.00)
    call TriggerAddCondition(t, Filter(function SpellGroupUnitsInRange))
    
    set t=CreateTrigger()
    call TriggerAddCondition(t, Filter(function SpellSystemEvent))
    loop
        set i=i - 1
        set p=Player(i)
        call TriggerRegisterPlayerUnitEvent(t, p, EVENT_PLAYER_UNIT_SPELL_CHANNEL, null)
        call TriggerRegisterPlayerUnitEvent(t, p, EVENT_PLAYER_UNIT_SPELL_CAST, null)
        call TriggerRegisterPlayerUnitEvent(t, p, EVENT_PLAYER_UNIT_SPELL_EFFECT, null)
        call TriggerRegisterPlayerUnitEvent(t, p, EVENT_PLAYER_UNIT_SPELL_FINISH, null)
        call TriggerRegisterPlayerUnitEvent(t, p, EVENT_PLAYER_UNIT_SPELL_ENDCAST, null)
        exitwhen i == 0
    endloop
    set p=null
    set t=null
    
    //Run the configuration trigger so its variables are ready before the
    //map initialization events run.
    call TriggerExecute(gg_trg_Spell_System_Config)
    call SpellSetFilters(0)
    
    //Create this trigger so it's GUI-friendly.
    set gg_trg_Spell_System=CreateTrigger()
    call TriggerAddAction(gg_trg_Spell_System, function SpellSystemRegister)
    set gg_trg_Spell_System_Config=gg_trg_Spell_System //In case the user accidentally picks this one
    
    //Create a dummy unit for preloading abilities and casting buffs.
    set udg_Spell_i_PreloadDummy=CreateUnit(udg_Spell__DummyOwner, udg_Spell__DummyType, 0, 0, 0)
    
    //Start the timer to remove its abilities:
    call TimerStart(udg_Spell_i_Timer, 0.00, false, function SpellPreloadEnd)
    call UnitRemoveAbility(udg_Spell_i_PreloadDummy, 'Amov') //Force it to never move to cast spells
    
endfunction


//===========================================================================
// Trigger: Table
//===========================================================================
//===========================================================================
// Trigger: Unit Event Config
//
// GUI Unit Event by Bribe, version 2.5.3.2
//===========================================================================
function Trig_Unit_Event_Config_Actions takes nothing returns nothing
    //  
    // Copy Unit Event Ability from Object Editor, then set DetectRemoveAbility to it as follows:
    //  
    set udg_DetectRemoveAbility='A0B2'
    //  
    // Paste it a second time, then set DetectTransformAbility to it as follows:
    //  
    set udg_DetectTransformAbility='A0B3'
    //  
    // Don't enable the following lines as they exist simply to make copying the system easier
    //  
    // One additional event to run right before Unit Indexer initializes, added 29 May 2017 for ZiBitheWand3r3r 
    set udg_UnitIndexEvent=- 1.00
    //  
    // Initialize Unit Event now that all the InitTrig_ functions have run
    //  
    set udg_IsUnitPreplaced[0]=true
    call ExecuteFunc("UnitEventInit")
    set udg_UnitIndexEvent=3.00
    set udg_IsUnitPreplaced[0]=udg_IsUnitTransforming[0]
    call TriggerExecute(gg_trg_InitGUI)
endfunction

//===========================================================================
function InitTrig_Unit_Event_Config takes nothing returns nothing
    set gg_trg_Unit_Event_Config=CreateTrigger()
    call TriggerAddAction(gg_trg_Unit_Event_Config, function Trig_Unit_Event_Config_Actions)
endfunction

//===========================================================================
// Trigger: Unit Event
//===========================================================================
//===========================================================================
function UnitEventDestroyGroup takes integer i returns nothing
    if udg_CargoTransportGroup[i] != null then
        call DestroyGroup(udg_CargoTransportGroup[i])
        set udg_CargoTransportGroup[i]=null
    endif
endfunction
function UnitEventCheckAfter takes nothing returns nothing
    local integer id= 0
    local unit u
    loop
        set id=udg_CheckDeathList[id]
        exitwhen id == 0
        set udg_UDex=id
        set u=udg_UDexUnits[id]
        if udg_IsUnitNew[id] then
            //The unit was just created.
            set udg_IsUnitNew[id]=false
            set udg_UnitIndexEvent=1.50 //New event requested by SpellBound to detect when unit fully enters scope.
            set udg_UnitIndexEvent=0.00
        elseif udg_IsUnitTransforming[id] then
           //Added 21 July 2017 to fix the issue re-adding this ability in the same instant
           set udg_UnitTypeEvent=0.00
           set udg_UnitTypeEvent=1.00
           set udg_UnitTypeOf[id]=GetUnitTypeId(u) //Set this afterward as otherwise the user won't know what the previous unittype was.
           set udg_IsUnitTransforming[id]=false
           call UnitAddAbility(u, udg_DetectTransformAbility)
        elseif udg_IsUnitAlive[id] then
            //The unit has started reincarnating.
            set udg_IsUnitReincarnating[id]=true
            set udg_IsUnitAlive[id]=false
            set udg_DeathEvent=0.50
            set udg_DeathEvent=0.00
        elseif GetUnitTypeId(u) != 0 and not IsUnitType(u, UNIT_TYPE_DEAD) then //with vJass, could just use UnitAlive instead of both of these values.
            //Moved this code to fire after a 0 second timer instead.
            set udg_IsUnitAlive[id]=true
            set udg_DeathEvent=2.00
            set udg_DeathEvent=0.00
            set udg_IsUnitReincarnating[id]=false
        endif
        set udg_CheckDeathInList[id]=false
    endloop
    set u=null
    //Empty the list
    set udg_CheckDeathList[0]=0
endfunction
function UnitEventCheckAfterProxy takes integer i returns nothing
    if udg_CheckDeathList[0] == 0 then
        call TimerStart(udg_CheckDeathTimer, 0.00, false, function UnitEventCheckAfter)
    endif
    if not udg_CheckDeathInList[i] then
        set udg_CheckDeathList[i]=udg_CheckDeathList[0]
        set udg_CheckDeathList[0]=i
        set udg_CheckDeathInList[i]=true
    endif
endfunction

function UnitEventOnUnload takes nothing returns nothing
    local integer i= udg_UDex
    call GroupRemoveUnit(udg_CargoTransportGroup[GetUnitUserData(udg_CargoTransportUnit[i])], udg_UDexUnits[i])
    set udg_IsUnitBeingUnloaded[i]=true
    set udg_CargoEvent=0.00
    set udg_CargoEvent=2.00
    set udg_CargoEvent=0.00
    set udg_IsUnitBeingUnloaded[i]=false
    if not IsUnitLoaded(udg_UDexUnits[i]) or IsUnitType(udg_CargoTransportUnit[i], UNIT_TYPE_DEAD) or GetUnitTypeId(udg_CargoTransportUnit[i]) == 0 then
        set udg_CargoTransportUnit[i]=null
    endif
endfunction

function UnitEventOnDeath takes nothing returns boolean
    local integer pdex= udg_UDex
    set udg_UDex=GetUnitUserData(GetTriggerUnit())
    if udg_UDex != 0 then
        set udg_KillerOfUnit[udg_UDex]=GetKillingUnit() //Added 29 May 2017 for GIMLI_2 
        set udg_IsUnitAlive[udg_UDex]=false
        set udg_DeathEvent=0.00
        set udg_DeathEvent=1.00
        set udg_DeathEvent=0.00
        set udg_KillerOfUnit[udg_UDex]=null
        if udg_CargoTransportUnit[udg_UDex] != null then
            call UnitEventOnUnload()
        endif
    endif
    set udg_UDex=pdex
    return false
endfunction
  
function UnitEventOnOrder takes nothing returns boolean
    local integer pdex= udg_UDex
    local unit u= GetFilterUnit()
    local integer i= GetUnitUserData(u)
    if i > 0 then
        set udg_UDex=i
        if GetUnitAbilityLevel(u, udg_DetectRemoveAbility) == 0 then
            if not udg_IsUnitRemoved[i] then
                set udg_IsUnitRemoved[i]=true
                set udg_IsUnitAlive[i]=false
                set udg_SummonerOfUnit[i]=null
                
                //For backwards-compatibility:
                set udg_DeathEvent=0.00
                set udg_DeathEvent=3.00
                set udg_DeathEvent=0.00
                
                //Fire deindex event for UDex:
                set udg_UnitIndexEvent=0.00
                set udg_UnitIndexEvent=2.00
                set udg_UnitIndexEvent=0.00
                
                set udg_UDexNext[udg_UDexPrev[i]]=udg_UDexNext[i]
                set udg_UDexPrev[udg_UDexNext[i]]=udg_UDexPrev[i]
                
                // Recycle the index for later use
                set udg_UDexUnits[i]=null
                set udg_UDexPrev[i]=udg_UDexLastRecycled
                set udg_UDexLastRecycled=i
                call UnitEventDestroyGroup(i)
            endif
        elseif not udg_IsUnitAlive[i] then
            if not IsUnitType(u, UNIT_TYPE_DEAD) then
                call UnitEventCheckAfterProxy(i) //modified 22 Oct 2022 to ensure the unit is fully revived before firing the event.
            endif
        elseif IsUnitType(u, UNIT_TYPE_DEAD) then
            if udg_IsUnitNew[i] then
                //This unit was created as a corpse.
                set udg_IsUnitAlive[i]=false
                set udg_DeathEvent=0.00
                set udg_DeathEvent=1.00
                set udg_DeathEvent=0.00
            elseif udg_CargoTransportUnit[i] == null or not IsUnitType(u, UNIT_TYPE_HERO) then
                //The unit may have just started reincarnating.
                call UnitEventCheckAfterProxy(i)
            endif
        elseif GetUnitAbilityLevel(u, udg_DetectTransformAbility) == 0 and not udg_IsUnitTransforming[i] then
            set udg_IsUnitTransforming[i]=true
            call UnitEventCheckAfterProxy(i) //This block has been updated on 21 July 2017
        endif
        if udg_CargoTransportUnit[i] != null and not udg_IsUnitBeingUnloaded[i] and not IsUnitLoaded(u) or IsUnitType(u, UNIT_TYPE_DEAD) then
            call UnitEventOnUnload()
        endif
        set udg_UDex=pdex
    endif
    set u=null
    return false
endfunction
function UnitEventOnSummon takes nothing returns boolean
    local integer pdex= udg_UDex
    set udg_UDex=GetUnitUserData(GetTriggerUnit())
    if udg_IsUnitNew[udg_UDex] then
        set udg_SummonerOfUnit[udg_UDex]=GetSummoningUnit()
        set udg_UnitIndexEvent=0.00
        set udg_UnitIndexEvent=0.50
        set udg_UnitIndexEvent=0.00
    endif
    set udg_UDex=pdex
    return false
endfunction
function UnitEventOnLoad takes nothing returns boolean
    local integer pdex= udg_UDex
    local integer i= GetUnitUserData(GetTriggerUnit())
    local integer index
    if i != 0 then
        set udg_UDex=i
        if udg_CargoTransportUnit[i] != null then
            call UnitEventOnUnload()
        endif
        //Loaded corpses do not issue an order when unloaded, therefore must
        //use the enter-region event method taken from Jesus4Lyf's Transport.
        if not udg_IsUnitAlive[i] then
            call SetUnitX(udg_UDexUnits[i], udg_WorldMaxX)
            call SetUnitY(udg_UDexUnits[i], udg_WorldMaxY)
        endif
        
        set udg_CargoTransportUnit[i]=GetTransportUnit()
        set index=GetUnitUserData(udg_CargoTransportUnit[i])
        if udg_CargoTransportGroup[index] == null then
            set udg_CargoTransportGroup[index]=CreateGroup()
        endif
        call GroupAddUnit(udg_CargoTransportGroup[index], udg_UDexUnits[i])
        set udg_CargoEvent=0.00
        set udg_CargoEvent=1.00
        set udg_CargoEvent=0.00
        set udg_UDex=pdex
    endif
    return false
endfunction
function UnitEventEnter takes nothing returns boolean
    local integer pdex= udg_UDex
    local integer i= udg_UDexLastRecycled
    local unit u= GetFilterUnit()
    if udg_UnitIndexerEnabled and GetUnitAbilityLevel(u, udg_DetectRemoveAbility) == 0 then
        //Generate a unique integer index for this unit
        if i == 0 then
            set i=udg_UDexMax + 1
            set udg_UDexMax=i
        else
            set udg_UDexLastRecycled=udg_UDexPrev[i]
        endif
        //Link index to unit, unit to index
        set udg_UDexUnits[i]=u
        call SetUnitUserData(u, i)
        
        //For backwards-compatibility, add the unit to a linked list
        set udg_UDexNext[i]=udg_UDexNext[0]
        set udg_UDexPrev[udg_UDexNext[0]]=i
        set udg_UDexNext[0]=i
        set udg_UDexPrev[i]=0

        set udg_CheckDeathInList[i]=false

        call UnitAddAbility(u, udg_DetectRemoveAbility)
        call UnitMakeAbilityPermanent(u, true, udg_DetectRemoveAbility)
        call UnitAddAbility(u, udg_DetectTransformAbility)
        set udg_UnitTypeOf[i]=GetUnitTypeId(u)
        set udg_IsUnitNew[i]=true
        set udg_IsUnitAlive[i]=true
        set udg_IsUnitRemoved[i]=false
        set udg_IsUnitReincarnating[i]=false
        set udg_IsUnitPreplaced[i]=udg_IsUnitPreplaced[0] //Added 29 May 2017 for Spellbound
        call UnitEventCheckAfterProxy(i)
        
        //Fire index event for UDex
        set udg_UDex=i
        set udg_UnitIndexEvent=0.00
        set udg_UnitIndexEvent=1.00
        set udg_UnitIndexEvent=0.00
    else
        set udg_UDex=GetUnitUserData(u)
        if udg_CargoTransportUnit[udg_UDex] != null and not IsUnitLoaded(u) then
            //The unit was dead, but has re-entered the map.
            call UnitEventOnUnload()
        endif
    endif
    set udg_UDex=pdex
    set u=null
    return false
endfunction
//===========================================================================
function UnitEventInit takes nothing returns nothing
    local integer i= bj_MAX_PLAYER_SLOTS
    local player p
    local trigger t= CreateTrigger()
    local trigger load= CreateTrigger()
    local trigger death= CreateTrigger()
    local trigger summon= CreateTrigger()
    local rect r= GetWorldBounds()
    local region re= CreateRegion()
    local boolexpr enterB= Filter(function UnitEventEnter)
    local boolexpr orderB= Filter(function UnitEventOnOrder)
    set udg_WorldMaxX=GetRectMaxX(r)
    set udg_WorldMaxY=GetRectMaxY(r)
    call RegionAddRect(re, r)
    call RemoveRect(r)
    call UnitEventDestroyGroup(0)
    call UnitEventDestroyGroup(1)
    
    set udg_CheckDeathList[0]=0
    set udg_UnitIndexerEnabled=true
    call TriggerRegisterEnterRegion(CreateTrigger(), re, enterB)
    call TriggerAddCondition(load, Filter(function UnitEventOnLoad))
    call TriggerAddCondition(death, Filter(function UnitEventOnDeath))
    call TriggerAddCondition(summon, Filter(function UnitEventOnSummon))
    loop
        set i=i - 1
        set p=Player(i)
        call SetPlayerAbilityAvailable(p, udg_DetectRemoveAbility, false)
        call SetPlayerAbilityAvailable(p, udg_DetectTransformAbility, false)
        call TriggerRegisterPlayerUnitEvent(summon, p, EVENT_PLAYER_UNIT_SUMMON, null)
        call TriggerRegisterPlayerUnitEvent(t, p, EVENT_PLAYER_UNIT_ISSUED_ORDER, orderB)
        call TriggerRegisterPlayerUnitEvent(death, p, EVENT_PLAYER_UNIT_DEATH, null)
        call TriggerRegisterPlayerUnitEvent(load, p, EVENT_PLAYER_UNIT_LOADED, null)
        call GroupEnumUnitsOfPlayer(bj_lastCreatedGroup, p, enterB)
        exitwhen i == 0
    endloop
    set summon=null
    set death=null
    set load=null
    set re=null
    set enterB=null
    set orderB=null
    set p=null
    set r=null
    set t=null
endfunction
function InitTrig_Unit_Event takes nothing returns nothing
endfunction

//===========================================================================
// Trigger: Knockback 2D Config
//
// Knockback 2D version 4.2.3.1
// Flying units now display special effect art attached to their "origin". Simplified the pathing check for flying units to only check for air unit pathability.
// For the full list of changes, please review the Knockback 2D Spell resource on HiveWorkshop.com
//===========================================================================
function Trig_Knockback_2D_Config_Actions takes nothing returns nothing
    //  
    // Configure things below
    //  
    // Set the timeout to be used throughout the system
    //  
    set udg_K2DTimeout=( 1.00 / 60.00 )
    //  
    // Robust Pathing at 0 is only safe for collision sizes 16 and lower, but requires only one SetItemPosition check per timeout.
    // -------- 1 checks collision vertically and horizontally to momentum. Uses an extra 4 SetItemPosition checks pet timeout.
    // -------- 2 checks collision diagonally with momentum. Uses a total of 9 SetItemPosition checks per timeout.
    // In any case, if the unit only has size 16 or lower collision, only one SetItemPosition check will be used for it.
    // If RobustPathing is set to 2 and the unit has 36 or less collision, it will only use the normal check of 5 SetItemPosition calls
    // The only reason to use robustness above 1 is for visual continuity - it features potentially-less glitchy movement.
    //  
    set udg_Knockback2DRobustPathing=2
    //  
    // Keep the friction between 0.00 and 1.00, At 0.00, friction keeps the unit at the same speed for the knockback
    // 1.00 friction will be an evenly-distributed deceleration which sees the unit slow to a complete stop
    // Friction outside of these bounds gives the knockback a boomerang-effect, so you are welcome to experiment.
    //  
    set udg_Knockback2DDefaultFriction=1.00
    set udg_Knockback2DFriction=udg_Knockback2DDefaultFriction
    //  
    // Determine the default bouncing behavior of units. You can set this before knocking a unit back.
    //  
    set udg_Knockback2DDefaultBounce=true
    set udg_Knockback2DBounces=udg_Knockback2DDefaultBounce
    //  
    // Determine the default mechanics of whether a unit should be unable to move while knocked back
    //  
    set udg_Knockback2DDefaultPause=false
    set udg_Knockback2DPause=udg_Knockback2DDefaultPause
    //  
    // Determine if surrounding trees should be killed by default or not
    //  
    set udg_Knockback2DDefaultKillTrees=true
    set udg_Knockback2DKillTrees=udg_Knockback2DDefaultKillTrees
    //  
    // If so, how wide should the radius be? 128.00 should be the minimum if you use pathing robustness greater than 0.
    // The minimum should be 64 if you use a robustness of 0.
    //  
    set udg_Knockback2DDefaultDestRadius=128.00
    set udg_Knockback2DDestRadius=udg_Knockback2DDefaultDestRadius
    //  
    // The "attack" option below will destroy any valid debris, from trees to barrels to creep homes.
    // If you just want to destroy trees, change the string to: harvest
    //  
    set udg_Knockback2DTreeOrDebris="attack"
    //  
    // 0.50 gravity will have equal ascend and decline rate, 1.00 is instant descend, 0.67 is twice as fast, 0.75 is three times as fast.
    //  
    set udg_Knockback2DDefaultGravity=0.71
    set udg_Knockback2DGravity=udg_Knockback2DDefaultGravity
    //  
    // Change the following to the default type of looping FX you want to have if you use Knockback Effects
    //  
    set udg_Knockback2DDefaultFX="Abilities\\Weapons\\AncientProtectorMissile\\AncientProtectorMissile.mdl"
    set udg_Knockback2DLoopFX=udg_Knockback2DDefaultFX
    //  
    // How frequently should the effects appear per unit? This can also be customized per-knockback
    //  
    set udg_Knockback2DDefaultFXRate=0.10
    set udg_Knockback2DFXRate=udg_Knockback2DDefaultFXRate
    //  
    // Create an item to help verify pathing throughout the game
    //  
    set udg_CenterPoint=Location(udg_K2DX, udg_K2DY)
    call CreateItemLoc('rag1', udg_CenterPoint)
    set udg_K2DItem=GetLastCreatedItem()
    //  
    // Create a harvest-capable unit to check if debris can be killed
    //  
    set udg_UnitIndexerEnabled=false
    call CreateNUnitsAtLoc(1, 'ugho', Player(PLAYER_NEUTRAL_PASSIVE), udg_CenterPoint, 0.00)
    set udg_K2DDebrisKiller=GetLastCreatedUnit()
    //  
    // End Configuration
    //  
    set udg_UnitIndexerEnabled=true
    call RemoveLocation(udg_CenterPoint)
    call Preload(udg_Knockback2DDefaultFX)
    call SetItemVisibleBJ(false, udg_K2DItem)
    call ShowUnitHide(udg_K2DDebrisKiller)
    call UnitAddAbilityBJ('A0B4', udg_K2DDebrisKiller)
    call UnitRemoveAbilityBJ('A0B4', udg_K2DDebrisKiller)
    call PauseUnitBJ(true, udg_K2DDebrisKiller)
    call UnitAddAbility(udg_K2DDebrisKiller, 'Aloc')
    set udg_Radians_Turn=Deg2Rad(360.00)
    set udg_Radians_QuarterTurn=Deg2Rad(90.00)
    set udg_Radians_QuarterPi=Deg2Rad(45.00)
    set udg_K2DRegion=GetEntireMapRect()
    set udg_K2DMaxX=GetRectMaxX(udg_K2DRegion)
    set udg_K2DMaxY=GetRectMaxY(udg_K2DRegion)
    set udg_K2DMinX=GetRectMinX(udg_K2DRegion)
    set udg_K2DMinY=GetRectMinY(udg_K2DRegion)
    set udg_K2DMaxDestRadius=( udg_Knockback2DDefaultDestRadius * 2.00 )
    call SetRect(udg_K2DRegion, 0.00, 0.00, udg_K2DMaxDestRadius, udg_K2DMaxDestRadius)
    set udg_K2DItemsFound=false
    set udg_K2DItemOffset=false
endfunction

//===========================================================================
function InitTrig_Knockback_2D_Config takes nothing returns nothing
    set gg_trg_Knockback_2D_Config=CreateTrigger()
    call TriggerAddAction(gg_trg_Knockback_2D_Config, function Trig_Knockback_2D_Config_Actions)
endfunction

//===========================================================================
// Trigger: Knockback 2D Destroy
//===========================================================================
function Trig_Knockback_2D_Destroy_Conditions takes nothing returns boolean
    if ( not ( udg_IsUnitBeingKnockedBack[udg_UDex] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Destroy_Func010C takes nothing returns boolean
    if ( not ( udg_K2DNext[0] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Destroy_Func011C takes nothing returns boolean
    if ( not ( udg_K2DHeight[udg_UDex] != 0.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Destroy_Func012C takes nothing returns boolean
    if ( not ( udg_K2DFreeze[udg_UDex] != true ) ) then
        return false
    endif
    if ( not ( IsTriggerEnabled(udg_K2DImpact[udg_UDex]) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Destroy_Actions takes nothing returns nothing
    //  
    // This trigger destroys any knockback; you can execute it yourself by first setting UDex to the custom value
    //  
    set udg_IsUnitBeingKnockedBack[udg_UDex]=false
    set udg_K2DNext[udg_K2DPrev[udg_UDex]]=udg_K2DNext[udg_UDex]
    set udg_K2DPrev[udg_K2DNext[udg_UDex]]=udg_K2DPrev[udg_UDex]
    set udg_K2DPrev[udg_UDex]=0
    if ( Trig_Knockback_2D_Destroy_Func010C() ) then
        call PauseTimerBJ(true, udg_K2DTimer)
    else
    endif
    if ( Trig_Knockback_2D_Destroy_Func011C() ) then
        call SetUnitFlyHeightBJ(udg_Knockback2DUnit, GetUnitDefaultFlyHeight(udg_Knockback2DUnit), 0.00)
    else
    endif
    if ( Trig_Knockback_2D_Destroy_Func012C() ) then
        call ConditionalTriggerExecute(udg_K2DImpact[udg_UDex])
    else
    endif
    set udg_K2DOverride[udg_UDex]=false
    set udg_K2DSource[udg_UDex]=null
endfunction

//===========================================================================
function InitTrig_Knockback_2D_Destroy takes nothing returns nothing
    set gg_trg_Knockback_2D_Destroy=CreateTrigger()
    call h__TriggerRegisterVariableEvent(gg_trg_Knockback_2D_Destroy, "udg_UnitIndexEvent", EQUAL, 2.00)
    call TriggerAddCondition(gg_trg_Knockback_2D_Destroy, Condition(function Trig_Knockback_2D_Destroy_Conditions))
    call TriggerAddAction(gg_trg_Knockback_2D_Destroy, function Trig_Knockback_2D_Destroy_Actions)
endfunction

//===========================================================================
// Trigger: Knockback 2D
//
// You can run this trigger, checking conditions if you want to play it safe.
//===========================================================================
function Trig_Knockback_2D_Conditions takes nothing returns boolean
    if ( not ( GetUnitDefaultMoveSpeed(udg_Knockback2DUnit) != 0.00 ) ) then
        return false
    endif
    if ( not ( udg_K2DOverride[GetUnitUserData(udg_Knockback2DUnit)] == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func005Func001C takes nothing returns boolean
    if ( not ( udg_Knockback2DOverride == false ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func005C takes nothing returns boolean
    if ( not ( udg_IsUnitBeingKnockedBack[udg_UDex] == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func006C takes nothing returns boolean
    if ( not ( udg_K2DNext[0] == 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func011C takes nothing returns boolean
    if ( not ( udg_Knockback2DHeight != 0.00 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func014C takes nothing returns boolean
    if ( not ( udg_Knockback2DPause == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func018Func004Func019C takes nothing returns boolean
    if ( not ( udg_Knockback2DRobustPathing == 2 ) ) then
        return false
    endif
    if ( not ( udg_K2DRadius[udg_UDex] > 16 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func018Func004C takes nothing returns boolean
    if ( not ( udg_Knockback2DRobustPathing > 0 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func018C takes nothing returns boolean
    if ( not ( IsUnitType(udg_Knockback2DUnit, UNIT_TYPE_FLYING) == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func025Func003C takes nothing returns boolean
    if ( not ( ( udg_Knockback2DDestRadius * 2.00 ) > udg_K2DMaxDestRadius ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Func025C takes nothing returns boolean
    if ( not ( udg_Knockback2DKillTrees == true ) ) then
        return false
    endif
    return true
endfunction

function Trig_Knockback_2D_Actions takes nothing returns nothing
    local integer pdex= udg_UDex
    set udg_UDex=GetUnitUserData(udg_Knockback2DUnit)
    if ( Trig_Knockback_2D_Func005C() ) then
        if ( Trig_Knockback_2D_Func005Func001C() ) then
            set udg_K2DAngle[udg_UDex]=Rad2Deg(udg_K2DAngle[udg_UDex])
            set udg_Knockback2DAngle=( ( udg_Knockback2DAngle + udg_K2DAngle[udg_UDex] ) * 0.50 )
            set udg_Knockback2DDistance=( ( udg_K2DDistanceLeft[udg_UDex] + udg_Knockback2DDistance ) * 0.50 )
            set udg_Knockback2DTime=( ( udg_K2DTimeLeft[udg_UDex] + udg_Knockback2DTime ) * 0.50 )
        else
        endif
        call TriggerExecute(gg_trg_Knockback_2D_Destroy)
    else
    endif
    if ( Trig_Knockback_2D_Func006C() ) then
        call ExecuteFunc("StartKnockback2DTimer")
    else
    endif
    set udg_IsUnitBeingKnockedBack[udg_UDex]=true
    set udg_K2DPrev[udg_K2DNext[0]]=udg_UDex
    set udg_K2DNext[udg_UDex]=udg_K2DNext[0]
    set udg_K2DNext[0]=udg_UDex
    if ( Trig_Knockback_2D_Func011C() ) then
        set udg_K2DHeight[udg_UDex]=udg_Knockback2DHeight
        if UnitAddAbility(udg_Knockback2DUnit, 'Amrf') then
            call UnitRemoveAbility(udg_Knockback2DUnit, 'Amrf')
        endif
        call SetUnitFlyHeightBJ(udg_Knockback2DUnit, ( GetUnitDefaultFlyHeight(udg_Knockback2DUnit) + udg_Knockback2DHeight ), ( ( udg_Knockback2DHeight - GetUnitDefaultFlyHeight(udg_Knockback2DUnit) ) / ( udg_Knockback2DGravity * udg_Knockback2DTime ) ))
        set udg_K2DHeightThreshold[udg_UDex]=( ( 1 - udg_Knockback2DGravity ) * udg_Knockback2DTime )
        set udg_Knockback2DHeight=0.00
    else
        set udg_K2DHeight[udg_UDex]=0.00
    endif
    set udg_K2DX=GetUnitX(udg_Knockback2DUnit)
    set udg_K2DY=GetUnitY(udg_Knockback2DUnit)
    if ( Trig_Knockback_2D_Func014C() ) then
        set udg_K2DLastX[udg_UDex]=udg_K2DX
        set udg_K2DLastY[udg_UDex]=udg_K2DY
    else
    endif
    set udg_K2DAngle[udg_UDex]=Deg2Rad(udg_Knockback2DAngle)
    set udg_K2DCos[udg_UDex]=CosBJ(udg_Knockback2DAngle)
    set udg_K2DSin[udg_UDex]=SinBJ(udg_Knockback2DAngle)
    if ( Trig_Knockback_2D_Func018C() ) then
        set udg_K2DFlying[udg_UDex]=true
    else
        set udg_K2DFlying[udg_UDex]=false
        if ( Trig_Knockback_2D_Func018Func004C() ) then
            //  
            // Handle the pathing checker based on the unit's collision size
            //  
            if not IsUnitInRangeXY(udg_Knockback2DUnit, udg_K2DX + 17, udg_K2DY, 0) then
            set udg_K2DRadius[udg_UDex]=0
            else
            if not IsUnitInRangeXY(udg_Knockback2DUnit, udg_K2DX + 25, udg_K2DY, 0) then
            set udg_K2DRadius[udg_UDex]=8
            elseif not IsUnitInRangeXY(udg_Knockback2DUnit, udg_K2DX + 33, udg_K2DY, 0) then
            set udg_K2DRadius[udg_UDex]=16
            elseif not IsUnitInRangeXY(udg_Knockback2DUnit, udg_K2DX + 49, udg_K2DY, 0) then
            set udg_K2DRadius[udg_UDex]=32
            else
            set udg_K2DRadius[udg_UDex]=48
            endif
            set udg_Knockback2DAngle=ModuloReal(( udg_Knockback2DAngle + 90.00 ), 360.00)
            set udg_K2DCosH[udg_UDex]=CosBJ(udg_Knockback2DAngle)
            set udg_K2DSinH[udg_UDex]=SinBJ(udg_Knockback2DAngle)
            if ( Trig_Knockback_2D_Func018Func004Func019C() ) then
                set udg_Knockback2DAngle=ModuloReal(( udg_Knockback2DAngle + 45.00 ), 360.00)
                set udg_K2DCosD1[udg_UDex]=CosBJ(udg_Knockback2DAngle)
                set udg_K2DSinD1[udg_UDex]=SinBJ(udg_Knockback2DAngle)
                set udg_Knockback2DAngle=ModuloReal(( udg_Knockback2DAngle + 90.00 ), 360.00)
                set udg_K2DCosD2[udg_UDex]=CosBJ(udg_Knockback2DAngle)
                set udg_K2DSinD2[udg_UDex]=SinBJ(udg_Knockback2DAngle)
            else
            endif
            endif
        else
        endif
    endif
    set udg_K2DDistanceLeft[udg_UDex]=udg_Knockback2DDistance
    set udg_Knockback2DDistance=( ( ( 1.00 + udg_Knockback2DFriction ) * udg_Knockback2DDistance ) / udg_Knockback2DTime )
    set udg_K2DFriction[udg_UDex]=( ( udg_Knockback2DDistance / udg_Knockback2DTime ) * ( ( 1.00 - ( 1 - udg_Knockback2DFriction ) ) * ( udg_K2DTimeout * udg_K2DTimeout ) ) )
    set udg_K2DVelocity[udg_UDex]=( udg_Knockback2DDistance * udg_K2DTimeout )
    //  
    set udg_K2DKillTrees[udg_UDex]=udg_Knockback2DKillTrees
    if ( Trig_Knockback_2D_Func025C() ) then
        // Square the radius so we don't have to use SquareRoot when comparing distance.
        set udg_K2DDestRadius[udg_UDex]=( udg_Knockback2DDestRadius * udg_Knockback2DDestRadius )
        if ( Trig_Knockback_2D_Func025Func003C() ) then
            // Update the size of the enumerating rect to compensate for the desired extra radius.
            set udg_K2DMaxDestRadius=( udg_Knockback2DDestRadius * 2.00 )
            call SetRect(udg_K2DRegion, 0.00, 0.00, udg_K2DMaxDestRadius, udg_K2DMaxDestRadius)
        else
        endif
        set udg_Knockback2DDestRadius=udg_Knockback2DDefaultDestRadius
    else
    endif
    //  
    set udg_K2DAmphibious[udg_UDex]=udg_Knockback2DAmphibious
    set udg_K2DBounce[udg_UDex]=udg_Knockback2DBounces
    set udg_K2DCollision[udg_UDex]=udg_Knockback2DCollision
    set udg_K2DFreeze[udg_UDex]=false
    set udg_K2DFXModel[udg_UDex]=udg_Knockback2DLoopFX
    set udg_K2DFXRate[udg_UDex]=udg_Knockback2DFXRate
    set udg_K2DFXTimeLeft[udg_UDex]=udg_Knockback2DFXRate
    set udg_K2DImpact[udg_UDex]=udg_Knockback2DOnImpact
    set udg_K2DOverride[udg_UDex]=udg_Knockback2DOverride
    set udg_K2DPause[udg_UDex]=udg_Knockback2DPause
    set udg_K2DSimple[udg_UDex]=udg_Knockback2DSimple
    set udg_K2DSource[udg_UDex]=udg_Knockback2DSource
    set udg_K2DTimeLeft[udg_UDex]=udg_Knockback2DTime
    set udg_K2DUnbiasedCollision[udg_UDex]=udg_Knockback2DUnbiasedCollision
    set udg_Knockback2DAmphibious=false
    set udg_Knockback2DBounces=udg_Knockback2DDefaultBounce
    set udg_Knockback2DCollision=0.00
    set udg_Knockback2DFriction=udg_Knockback2DDefaultFriction
    set udg_Knockback2DFXRate=udg_Knockback2DDefaultFXRate
    set udg_Knockback2DGravity=udg_Knockback2DDefaultGravity
    set udg_Knockback2DKillTrees=udg_Knockback2DDefaultKillTrees
    set udg_Knockback2DLoopFX=udg_Knockback2DDefaultFX
    set udg_Knockback2DOnImpact=null
    set udg_Knockback2DOverride=false
    set udg_Knockback2DPause=udg_Knockback2DDefaultPause
    set udg_Knockback2DSimple=false
    set udg_Knockback2DSource=null
    set udg_Knockback2DUnbiasedCollision=false
    set udg_UDex=pdex
endfunction

//===========================================================================
function InitTrig_Knockback_2D takes nothing returns nothing
    set gg_trg_Knockback_2D=CreateTrigger()
    call TriggerAddCondition(gg_trg_Knockback_2D, Condition(function Trig_Knockback_2D_Conditions))
    call TriggerAddAction(gg_trg_Knockback_2D, function Trig_Knockback_2D_Actions)
endfunction

//===========================================================================
// Trigger: Knockback 2D System
//===========================================================================
function K2DItemCheckXY takes real x,real y returns boolean
    call SetItemPosition(udg_K2DItem, x, y)
    return GetWidgetX(udg_K2DItem) == x and GetWidgetY(udg_K2DItem) == y
endfunction

function K2DItemCheckAxis takes real x,real y returns boolean
    local real x2= x * udg_K2DRadius[udg_UDex]
    local real y2= y * udg_K2DRadius[udg_UDex]
    set x=udg_K2DX + x2
    set y=udg_K2DY + y2
    if K2DItemCheckXY(x , y) and not IsTerrainPathable(x, y, PATHING_TYPE_WALKABILITY) then
        set x=udg_K2DX - x2
        set y=udg_K2DY - y2
        return K2DItemCheckXY(x , y) and not IsTerrainPathable(x, y, PATHING_TYPE_WALKABILITY)
    endif
    return false
endfunction

function K2DItemCheck takes nothing returns boolean
    local boolean result= K2DItemCheckXY(udg_K2DX , udg_K2DY)
    
    //Only perform additional pathing checks if the unit has a larger collision.
    if result and udg_Knockback2DRobustPathing > 0 and udg_K2DRadius[udg_UDex] > 0 then

        //Check horizontal axis of unit to make sure nothing is going to collide
        set result=K2DItemCheckAxis(udg_K2DCosH[udg_UDex] , udg_K2DSinH[udg_UDex])
        
        //Check vertical axis of unit to ensure nothing will collide
        set result=result and K2DItemCheckAxis(udg_K2DCos[udg_UDex] , udg_K2DSin[udg_UDex])
        
        if result and udg_Knockback2DRobustPathing == 2 and udg_K2DRadius[udg_UDex] > 16 then

            //Check diagonal axis of unit if more thorough pathing is desired
            set result=K2DItemCheckAxis(udg_K2DCosD1[udg_UDex] , udg_K2DSinD1[udg_UDex])
            set result=result and K2DItemCheckAxis(udg_K2DCosD2[udg_UDex] , udg_K2DSinD2[udg_UDex])
        endif
    endif
    
    //Reset item so it won't interfere with the map
    call SetItemPosition(udg_K2DItem, udg_K2DMaxX, udg_K2DMaxY)
    call SetItemVisible(udg_K2DItem, false)
    
    return result
endfunction

function K2DItemFilter takes nothing returns boolean
    //Check for visible items, temporarily hide them and add them to the filter.
    if IsItemVisible(GetFilterItem()) then
        call SetItemVisible(GetFilterItem(), false)
        return true
    endif
    return false
endfunction
function K2DItemCode takes nothing returns nothing
    //Perform the item-pathing check only once, then unhide those filtered items
    if not udg_K2DItemsFound then
        set udg_K2DItemsFound=true
        set udg_K2DItemOffset=K2DItemCheck()
    endif
    call SetItemVisible(GetEnumItem(), true)
endfunction

function K2DKillDest takes nothing returns nothing
    local real x
    local real y
    //Handle destruction of debris
    set bj_destRandomCurrentPick=GetEnumDestructable()
    if GetWidgetLife(bj_destRandomCurrentPick) > 0.405 and IssueTargetOrder(udg_K2DDebrisKiller, udg_Knockback2DTreeOrDebris, bj_destRandomCurrentPick) then
        set x=GetWidgetX(bj_destRandomCurrentPick) - udg_K2DX
        set y=GetWidgetY(bj_destRandomCurrentPick) - udg_K2DY
        if x * x + y * y <= udg_K2DDestRadius[udg_UDex] then
            call KillDestructable(bj_destRandomCurrentPick)
        endif
    endif
endfunction

function K2DEnumDests takes nothing returns nothing
    call MoveRectTo(udg_K2DRegion, udg_K2DX, udg_K2DY)
    if udg_K2DKillTrees[udg_UDex] then
        call SetUnitX(udg_K2DDebrisKiller, udg_K2DX)
        call SetUnitY(udg_K2DDebrisKiller, udg_K2DY)
        call EnumDestructablesInRect(udg_K2DRegion, null, function K2DKillDest)
    endif
endfunction

function Knockback2DCheckXY takes real x,real y returns boolean
    set udg_K2DX=x + udg_K2DVelocity[udg_UDex] * udg_K2DCos[udg_UDex]
    set udg_K2DY=y + udg_K2DVelocity[udg_UDex] * udg_K2DSin[udg_UDex]
    if udg_K2DSimple[udg_UDex] then
        //A "pull" effect or a missile system does not require complex pathing.
        if udg_K2DX <= udg_K2DMaxX and udg_K2DX >= udg_K2DMinX and udg_K2DY <= udg_K2DMaxY and udg_K2DY >= udg_K2DMinY then
            call K2DEnumDests()
            return true
        endif
        return false
    elseif udg_K2DFlying[udg_UDex] then
        return not IsTerrainPathable(udg_K2DX, udg_K2DY, PATHING_TYPE_FLYABILITY)
    elseif not IsTerrainPathable(udg_K2DX, udg_K2DY, PATHING_TYPE_WALKABILITY) then
        call K2DEnumDests()
        set udg_K2DItemOffset=false
        call EnumItemsInRect(udg_K2DRegion, Filter(function K2DItemFilter), function K2DItemCode)
        if udg_K2DItemsFound then
            //If items were found, the check was already performed.
            set udg_K2DItemsFound=false
        else
            //Otherwise, perform the check right now.
            set udg_K2DItemOffset=K2DItemCheck()
        endif
        return udg_K2DItemOffset
    endif
    return udg_K2DAmphibious[udg_UDex] and not IsTerrainPathable(udg_K2DX, udg_K2DY, PATHING_TYPE_FLOATABILITY)
endfunction

function Knockback2DApplyAngle takes real angle returns nothing
    set angle=ModuloReal(angle, udg_Radians_Turn)
    set udg_K2DCos[udg_UDex]=Cos(angle)
    set udg_K2DSin[udg_UDex]=Sin(angle)
    set udg_K2DAngle[udg_UDex]=angle
    if udg_Knockback2DRobustPathing > 0 then
        set angle=ModuloReal(angle + udg_Radians_QuarterTurn, udg_Radians_Turn)
        set udg_K2DCosH[udg_UDex]=Cos(angle)
        set udg_K2DSinH[udg_UDex]=Sin(angle)
        if udg_Knockback2DRobustPathing == 2 and udg_K2DRadius[udg_UDex] > 16 then
            set angle=ModuloReal(angle + udg_Radians_QuarterPi, udg_Radians_Turn)
            set udg_K2DCosD1[udg_UDex]=Cos(angle)
            set udg_K2DSinD1[udg_UDex]=Sin(angle)
            set angle=ModuloReal(angle + udg_Radians_QuarterTurn, udg_Radians_Turn)
            set udg_K2DCosD2[udg_UDex]=Cos(angle)
            set udg_K2DSinD2[udg_UDex]=Sin(angle)
        endif
    endif
endfunction

function Knockback2DLooper takes nothing returns nothing
    local integer i= 0
    local unit u
    local real x
    local real y
    
    call PauseUnit(udg_K2DDebrisKiller, false)
    
    loop
        set i=udg_K2DNext[i]
        exitwhen i == 0
        set udg_UDex=i
        set udg_K2DTimeLeft[i]=udg_K2DTimeLeft[i] - udg_K2DTimeout
        set udg_K2DDistanceLeft[i]=udg_K2DDistanceLeft[i] - udg_K2DVelocity[i]
        set u=udg_UDexUnits[i]
        
        if udg_K2DTimeLeft[i] > 0.00 then
            if udg_K2DTimeLeft[i] < udg_K2DHeightThreshold[i] and udg_K2DHeightThreshold[i] != 0.00 then
                call SetUnitFlyHeight(u, GetUnitDefaultFlyHeight(u), GetUnitFlyHeight(u) - GetUnitDefaultFlyHeight(u) / udg_K2DHeightThreshold[i])
                set udg_K2DHeightThreshold[i]=0.00
            endif
            if udg_K2DPause[i] then
                set x=udg_K2DLastX[i]
                set y=udg_K2DLastY[i]
            else
                set x=GetUnitX(u)
                set y=GetUnitY(u)
            endif
            
            if not Knockback2DCheckXY(x , y) then
                if not udg_K2DFreeze[i] and IsTriggerEnabled(udg_K2DImpact[i]) and TriggerEvaluate(udg_K2DImpact[i]) then
                    call TriggerExecute(udg_K2DImpact[i])
                endif
                if udg_K2DBounce[i] then
                    call Knockback2DApplyAngle(udg_Radians_Turn - udg_K2DAngle[i])
                    if not Knockback2DCheckXY(x , y) then
                        call Knockback2DApplyAngle(udg_K2DAngle[i] + bj_PI)
                        if not Knockback2DCheckXY(x , y) then
                            call Knockback2DApplyAngle(udg_Radians_Turn - udg_K2DAngle[i])
                            set udg_K2DX=x
                            set udg_K2DY=y
                        endif
                    endif
                else
                    set udg_K2DX=x
                    set udg_K2DY=y
                    set udg_K2DFreeze[i]=true
                endif
            endif
            call SetUnitX(u, udg_K2DX)
            call SetUnitY(u, udg_K2DY)
            set udg_K2DLastX[i]=udg_K2DX
            set udg_K2DLastY[i]=udg_K2DY
            if udg_K2DFXModel[i] != "" then
                set udg_K2DFXTimeLeft[i]=udg_K2DFXTimeLeft[i] - udg_K2DTimeout
                if udg_K2DFXTimeLeft[i] <= 0.00 then
                    set udg_K2DFXTimeLeft[i]=udg_K2DFXRate[i]
                    if udg_K2DFlying[i] then
                        call DestroyEffect(AddSpecialEffectTarget(udg_K2DFXModel[i], u, "origin"))
                    else
                        call DestroyEffect(AddSpecialEffect(udg_K2DFXModel[i], udg_K2DX, udg_K2DY))
                    endif
                endif
            endif
            if udg_K2DCollision[i] >= 0.00 then
                set udg_Knockback2DSource=u
                call GroupEnumUnitsInRange(bj_lastCreatedGroup, udg_K2DX, udg_K2DY, 200.00, null)
                call GroupRemoveUnit(bj_lastCreatedGroup, u)
                loop
                    set udg_Knockback2DUnit=FirstOfGroup(bj_lastCreatedGroup)
                    exitwhen udg_Knockback2DUnit == null
                    call GroupRemoveUnit(bj_lastCreatedGroup, udg_Knockback2DUnit)
                    
                    if IsUnitInRange(udg_Knockback2DUnit, u, udg_K2DCollision[i]) and udg_K2DFlying[i] == IsUnitType(udg_Knockback2DUnit, UNIT_TYPE_FLYING) and ( not IsUnitType(udg_Knockback2DUnit, UNIT_TYPE_STRUCTURE) ) and not IsUnitType(udg_Knockback2DUnit, UNIT_TYPE_DEAD) and ( udg_K2DUnbiasedCollision[i] or IsUnitAlly(udg_Knockback2DUnit, GetOwningPlayer(u)) ) and TriggerEvaluate(gg_trg_Knockback_2D) then
                        set udg_Knockback2DAngle=bj_RADTODEG * Atan2(GetUnitY(udg_Knockback2DUnit) - udg_K2DY, GetUnitX(udg_Knockback2DUnit) - udg_K2DX)
                        set udg_Knockback2DDistance=udg_K2DDistanceLeft[i]
                        set udg_Knockback2DBounces=udg_K2DBounce[i]
                        set udg_Knockback2DCollision=udg_K2DCollision[i]
                        if udg_K2DHeight[i] != 0.00 then
                            set udg_Knockback2DHeight=GetUnitFlyHeight(u) - GetUnitDefaultFlyHeight(u)
                        endif
                        set udg_Knockback2DLoopFX=udg_K2DFXModel[i]
                        set udg_Knockback2DTime=udg_K2DTimeLeft[i]
                        set udg_Knockback2DUnbiasedCollision=udg_K2DUnbiasedCollision[i]
                        call TriggerExecute(gg_trg_Knockback_2D)
                        set udg_Knockback2DSource=u //in case of a recursive knockback
                    endif
                endloop
            endif
            set udg_K2DVelocity[i]=udg_K2DVelocity[i] - udg_K2DFriction[i]
        else
            call TriggerExecute(gg_trg_Knockback_2D_Destroy)
        endif
    endloop
    set u=null
    
    //Disable dummy after the loop finishes so it doesn't interfere with the map
    call PauseUnit(udg_K2DDebrisKiller, true)
endfunction

//===========================================================================
function StartKnockback2DTimer takes nothing returns nothing
    call TimerStart(udg_K2DTimer, udg_K2DTimeout, true, function Knockback2DLooper)
endfunction
function InitTrig_Knockback_2D_System takes nothing returns nothing
endfunction


//===========================================================================
// Trigger: MoveSpeedXGUI
//===========================================================================
//===========================================================================
// Trigger: MoveSpeedXGlobals
//===========================================================================
function Trig_MoveSpeedXGlobals_Actions takes nothing returns nothing
    // Copy and paste this trigger to create this variable
    set udg_UnitSpeedX[0]=0.00
    // This variable will store unit speeds above 522
endfunction

//===========================================================================
function InitTrig_MoveSpeedXGlobals takes nothing returns nothing
    set gg_trg_MoveSpeedXGlobals=CreateTrigger()
    call TriggerAddAction(gg_trg_MoveSpeedXGlobals, function Trig_MoveSpeedXGlobals_Actions)
endfunction

//===========================================================================
// Trigger: TimedAbility
//===========================================================================

//--------------------------------------------------------------------------------------
//===========================================================================
// Trigger: TimedHandles
//===========================================================================
//===========================================================================
// Trigger: TimerUtils
//===========================================================================



//===========================================================================
// Trigger: RegisterNativeEvent
//===========================================================================

//===========================================================================
// Trigger: RegisterPlayerUnitEvent
//===========================================================================



//===========================================================================
// Trigger: RegisterPlayerEvent
//===========================================================================


//===========================================================================
// Trigger: RegisterUnitEvent
//===========================================================================



//===========================================================================
// Trigger: Damage Engine Config
//===========================================================================
function Trig_Damage_Engine_Config_Actions takes nothing returns nothing
    // You can add extra classifications here if you want to differentiate between your triggered damage
    // Use DamageTypeExplosive (or any negative value damage type) if you want a unit killed by that damage to explode
    // -
    // The pre-defined type Code might be set by Damage Engine if Unit - Damage Target is detected and the user didn't define a type of their own.
    // "Pure" is especially important because it overrides both the Damage Engine as well as WarCraft 3 damage modification.
    // I therefore gave the user "Explosive Pure" in case one wants to combine the functionality of the two.
    // -
    set udg_DamageTypePureExplosive=- 2
    set udg_DamageTypeExplosive=- 1
    set udg_DamageTypeCode=1
    set udg_DamageTypePure=2
    // -
    set udg_DamageTypeHeal=3
    set udg_DamageTypeBlocked=4
    set udg_DamageTypeReduced=5
    // -
    set udg_DamageTypeCriticalStrike=6
    // -
    call DamageEngine_DebugStr()
endfunction

//===========================================================================
function InitTrig_Damage_Engine_Config takes nothing returns nothing
    set gg_trg_Damage_Engine_Config=CreateTrigger()
    call TriggerAddAction(gg_trg_Damage_Engine_Config, function Trig_Damage_Engine_Config_Actions)
endfunction

//===========================================================================
// Trigger: Damage Engine
//===========================================================================
//===========================================================================
//
//  Damage Engine 5.9.0.0 - update requires re-copying the Damage Engine category.
//


//===========================================================================

//===========================================================================
// Trigger: MissileEffect
//===========================================================================
//===========================================================================
// Trigger: DummyRecycler
//===========================================================================
//===========================================================================
// Trigger: Missiles
//===========================================================================
//===========================================================================
// Trigger: WorldBounds
//===========================================================================
//===========================================================================
// Trigger: Alloc
//===========================================================================


//===========================================================================
// Trigger: GenericReaction
//
// XA00 Acid
// B003 Ice
// XA02 Fire
// XA03 Telsa
// XA04 Explosion
// XA05 Plasma
// XA06 Photonic
// XA07 Water
// XA08 Rad
// XA09 Scientist
//  static method create(unit, percentBonus, flatBonus)
//             - Create a Movespeed modification.
//             EXAMPLE: local Movespeed ms = Movespeed.create(GetTriggerUnit(), 0.15, 0)
//            
//         method operator duration= 
//             - Sets the current duration of the Movespeed instace.
//             EXAMPLE: set ms.duration = 5
//===========================================================================
//===========================================================================
// Trigger: FireReactions
//
// ShareFunc
//===========================================================================
//===========================================================================
// Trigger: IceReactions
//===========================================================================
//===========================================================================
// Trigger: WaterReactions
//===========================================================================
//===========================================================================
// Trigger: ElectroReactions
//===========================================================================
//===========================================================================
// Trigger: Chat System Script
//===========================================================================
//===========================================================================
// Trigger: AutoArtillary
//
// ArtLaunch .onDamage()
// BlzGetAbilityId
//===========================================================================
//===========================================================================
function InitCustomTriggers takes nothing returns nothing
    call InitTrig_Untitled_Trigger_001()
    call InitTrig_Explorer_infection_Bugfix()
    call InitTrig_Minotaur_Charge_Bugfix()
    call InitTrig_Rapid_Infection_Bugfix()
    call InitTrig_Tetrabin_Bugfix()
    call InitTrig_Mutalien_bugfix_Copy()
    call InitTrig_AlienDeathShipControl()
    call InitTrig_HarbringerDeathShipControl()
    call InitTrig_Stalker_Range_Restriction_Attack()
    call InitTrig_Stalker_Range_Restriction_GroundAttack()
    call InitTrig_Stalker_Range_Restriction_Activation()
    call InitTrig_PhoenixHeight()
    call InitTrig_IllusionPodstart()
    call InitTrig_IllusionStop()
    call InitTrig_IllusionTimer()
    //Function not found: call InitTrig_Color_Library_and_PathingFuncs_and_Antisave()
    call InitTrig_UnitCustomData()
    call Init_ForGlobal() // INLINED!!
    call InitTrig_InitGUI()
    call InitTrig_Sound()
    call InitTrig_ReadTheChangelog()
    call InitTrig_FixVis()
    call InitTrig_WinOn()
    call InitTrig_Quests()
    call InitTrig_ConstPing()
    call InitTrig_DeathSysTwo()
    call InitTrig_DeathSysClick()
    call InitTrig_Votekick()
    call InitTrig_GetSectorInit()
    call InitTrig_MapCenterError()
    call InitTrig_Barrel_Coloring()
    call InitTrig_Init_Cinematic_Unstuck()
    call InitTrig_DoorSys()
    call InitTrig_DoorInit2()
    call InitTrig_Selection()
    call InitTrig_SelectorUpdate()
    call InitTrig_GenStation()
    call InitTrig_SelectSpace()
    call InitTrig_ST1mInit()
    call InitTrig_ST1Abilities()
    call InitTrig_ST1Death()
    call InitTrig_ST1Attack()
    call InitTrig_ST1AttackEnd()
    call InitTrig_RadarSweepSector()
    call InitTrig_Explorer_Locator()
    call InitTrig_ScanAcquireASAD()
    call InitTrig_ST2mInit()
    call InitTrig_ST2Death()
    call InitTrig_ST2Attack()
    call InitTrig_ST2AttackEnd()
    call InitTrig_ST3Abilities()
    call InitTrig_ST3mInit()
    call InitTrig_ST3Death()
    call InitTrig_ST3Attack()
    call InitTrig_ST3AttackEnd()
    //Function not found: call InitTrig_ST3CannonProjectile()
    call InitTrig_ST3Cannon()
    call InitTrig_AMTFire()
    call InitTrig_ATMAcquire()
    call InitTrig_ST4Abilities()
    call InitTrig_ST4mInit()
    call InitTrig_ST4Death()
    call InitTrig_ST4Attack()
    call InitTrig_ST4AttackEnd()
    call InitTrig_ST4DefenseDrone1()
    call InitTrig_ST4DefenseDrone1Loss()
    call InitTrig_ST4DefenseDrone2()
    call InitTrig_ST4DefenseDrone2Loss()
    call InitTrig_RepositioningDrive()
    call InitTrig_RepositioningDriveGo()
    call InitTrig_ARDAcquire()
    call InitTrig_ResetPowerBonus()
    call InitTrig_AmbientPower()
    call InitTrig_ExplorerPower()
    call InitTrig_StationPower()
    call InitTrig_LaboratoryPower()
    call InitTrig_LaboratorySpawnExperiments()
    call InitTrig_GITDeath()
    call InitTrig_Niffy_Lockdown()
    call InitTrig_ST5mInit()
    call InitTrig_ST5Death()
    call InitTrig_ST5Attack()
    call InitTrig_ST5AttackEnd()
    call InitTrig_ST5Abilities()
    call InitTrig_SwaggerTeleportToPlanet()
    call InitTrig_SwaggerTeleportToSwagger()
    call InitTrig_Autopilot()
    call InitTrig_ST6Init()
    call InitTrig_ST6Console()
    call InitTrig_ST6DeathNotification()
    call InitTrig_ST6Death()
    call InitTrig_ST7Init()
    call InitTrig_ST7Death()
    call InitTrig_DestroyST7()
    call InitTrig_ST7Control()
    call InitTrig_ST7ControlLoss()
    call InitTrig_PirateCaptainDeath()
    call InitTrig_ST8mInit()
    call InitTrig_ST8Attack()
    call InitTrig_ST8AttackEnd()
    call InitTrig_ST8Death()
    call InitTrig_CalipoaAttack()
    call InitTrig_NeurotoxinStart()
    call InitTrig_NeurotoxinEnd()
    call InitTrig_ST9Init()
    call InitTrig_ST9UnInit()
    call InitTrig_ST9Attack()
    call InitTrig_ST9AttackEnd()
    call InitTrig_ST9Death()
    call InitTrig_SyllusCageOpen()
    call InitTrig_SyllusCageCell()
    call InitTrig_SyllusCageCreate()
    call InitTrig_SyllusCageDeath()
    call InitTrig_ST9Cell2AnomalyFix()
    call InitTrig_GravitationalPull()
    call InitTrig_GravitationalPush()
    call InitTrig_ST10Init()
    call InitTrig_ST10UnInit()
    call InitTrig_ST10Attack()
    call InitTrig_ST10AttackEnd()
    call InitTrig_ST10Death()
    call InitTrig_ST10Abilities()
    call InitTrig_ST10ExplorerAid()
    call InitTrig_ST10ViewLast()
    call InitTrig_ST11Init()
    call InitTrig_ST11BloodEffect()
    call InitTrig_ST11HivesDie()
    call InitTrig_ST11DieNatural()
    call InitTrig_ST11DoomTimerExpired()
    call InitTrig_Overlord_Pods()
    call InitTrig_ViewIntestines()
    call InitTrig_Overlorddockbug()
    call InitTrig_HoldZoneMask()
    call InitTrig_RadarSweepPlanet()
    call InitTrig_PlanetmInit()
    call InitTrig_PlanetMovement()
    call InitTrig_Snoeglay_Death()
    call InitTrig_PlanetDeath()
    //Function not found: call InitTrig_PlanetDamage()
    call InitTrig_PlanetDamagePerSecond()
    call InitTrig_MoonmInit()
    call InitTrig_MoonMovement()
    call InitTrig_MoonDeath()
    call InitTrig_GravitationalControl()
    call InitTrig_GravitationalControlTarget()
    call InitTrig_GravitationalControlAngle()
    call InitTrig_MoonAttack()
    call InitTrig_MoonAttackEnd()
    call InitTrig_MoonShieldFailure()
    call InitTrig_MoonDamage()
    call InitTrig_AssemblyPlant()
    call InitTrig_CancelProductionGo()
    call InitTrig_ASAD()
    call InitTrig_ATM()
    call InitTrig_RUM()
    call InitTrig_ARD()
    call InitTrig_Ore()
    call InitTrig_Neurotoxin()
    call InitTrig_RUMAcquire()
    call InitTrig_OreAcquire()
    call InitTrig_NeurotoxinAcquire()
    call InitTrig_SunUnitInRange()
    call InitTrig_Sunpod_apocalypse()
    call InitTrig_SpaceshipFuncs()
    call InitTrig_SSInit()
    call InitTrig_SSThorlarInit()
    //Function not found: call InitTrig_SSThorlarFunctions()
    call InitTrig_SSGenEnter()
    call InitTrig_SSGenExit()
    call InitTrig_SSGenControl()
    call InitTrig_SSGenControlLoss()
    call InitTrig_SSGenDock()
    call InitTrig_SSGenDeath()
    call InitTrig_SSGenBoard()
    call InitTrig_Raptor0()
    call InitTrig_Raptor1()
    call InitTrig_Raptor2()
    call InitTrig_Raptor3()
    call InitTrig_Raptor4()
    call InitTrig_Raptor5()
    call InitTrig_Raptor6()
    call InitTrig_Raptor7()
    call InitTrig_Raptor8()
    call InitTrig_Hunter9()
    call InitTrig_Obda10()
    call InitTrig_Obda11()
    call InitTrig_Albadar12()
    call InitTrig_Raptor13()
    call InitTrig_Barrels_Explosion()
    call InitTrig_Gargoyle_Easter_Egg()
    call InitTrig_SCD_Shut_Down()
    call InitTrig_Alodimensional1()
    call InitTrig_Alodimensional_A_I()
    call InitTrig_Water_shield_Effect()
    call InitTrig_Item_drop()
    call InitTrig_Mirror_A_I()
    call InitTrig_Warp_Artificial_Intelligence()
    call InitTrig_The_Warp_Start()
    call InitTrig_The_Warp_ongoing()
    call InitTrig_The_Warp_ongoing_spawn()
    call InitTrig_The_Warp_relocation()
    call InitTrig_Mirror_start()
    call InitTrig_Mirror_relocation()
    call InitTrig_Mirror_un_abuse()
    call InitTrig_SpaceAILogicTick()
    call InitTrig_LifeformScan()
    call InitTrig_Force_Dock()
    call InitTrig_FocusedWave()
    call InitTrig_CordoningBeacon()
    call InitTrig_PrismRocketsAlbadar()
    call InitTrig_PrismRocketsEndAlbadar()
    call InitTrig_RotaryDodge()
    call InitTrig_PulseWave()
    call InitTrig_PrismRockets()
    call InitTrig_PrismRocketsEnd()
    call InitTrig_TacticalNuclearWarhead()
    call InitTrig_TacticalNuclearExplosion()
    call InitTrig_AshenDeath()
    call InitTrig_AshenDeathTimerAlliances()
    call InitTrig_AshenFade()
    call InitTrig_DuplicateMedPack()
    call InitTrig_DuplicateAntibodies()
    call InitTrig_DuplicateMedicalRegenerator()
    call InitTrig_Global_Infection()
    call InitTrig_Smash()
    call InitTrig_Sludge()
    call InitTrig_Carrier()
    call InitTrig_Vector()
    call InitTrig_RaininRocks()
    call InitTrig_SwarmTraining()
    call InitTrig_TaintedVendor()
    call InitTrig_TaintedVendorBuy()
    call InitTrig_TaintedVendorBuyCyborg()
    call InitTrig_RocksFallEveryoneDies()
    call InitTrig_Roar()
    call InitTrig_SpatialBurst()
    call InitTrig_CarrierExplode()
    call InitTrig_CarrierSackExplode()
    call InitTrig_SlyTentacles()
    call InitTrig_TotalInfection()
    call InitTrig_Panic()
    call InitTrig_Fleshies()
    call InitTrig_Shockwave()
    call InitTrig_RollingThunder()
    call InitTrig_Charge()
    call InitTrig_CrabMutant()
    call InitTrig_GroundOverlordDoubleTraining()
    call InitTrig_Tripwire()
    call InitTrig_Blackness()
    call InitTrig_ProjectedExplosion()
    call InitTrig_ProjectedExplosionExplode()
    call InitTrig_Lightning_Strike()
    call InitTrig_ElectromagneticDisruption()
    call InitTrig_SpatialRelocation()
    call InitTrig_SpatialSwap()
    call InitTrig_AlienBoard()
    call InitTrig_Entropy()
    call InitTrig_Entropytimer()
    call InitTrig_ClosedTimeLikeLoopSavePos()
    call InitTrig_ClosedTimeLikeLoop()
    //Function not found: call InitTrig_Muteilate()
    call InitTrig_NightOfTheMasks()
    call InitTrig_NightOfTheMasksESC()
    call InitTrig_BackFromHell()
    call InitTrig_BackFromHellDialog()
    call InitTrig_BackFromHellEldritchDeath()
    call InitTrig_Petrify()
    call InitTrig_NeurotoxicPoison()
    call InitTrig_Manifold()
    call InitTrig_TemporalFlux()
    call InitTrig_GargoyleSekritInit()
    call InitTrig_GargoyleSekritTransform()
    call InitTrig_GargoyleSekritBombs()
    call InitTrig_Warpal()
    call InitTrig_Grenade()
    call InitTrig_BurstGrenade()
    call InitTrig_ThingyCannon()
    call InitTrig_VoidCannon()
    call InitTrig_SantaHat()
    call InitTrig_ConsoleRepair()
    call InitTrig_ElectromagneticGrenade()
    call InitTrig_EMGrenadeForceKill()
    call InitTrig_Tetrabin()
    call InitTrig_Snoeglay_Life_Gain()
    call InitTrig_Phase_Cloak()
    call InitTrig_WormFood()
    call InitTrig_Solace_Shield()
    call InitTrig_TrackingDevice()
    call InitTrig_InventoryScanner()
    call InitTrig_MotionSensor()
    call InitTrig_Wrench()
    call InitTrig_Rubble_Clearing_Device()
    call InitTrig_CaptainsKeycard()
    call InitTrig_JanitorsKeycard()
    call InitTrig_BlackHoleDevice()
    call InitTrig_BlackHoleExplode()
    call InitTrig_BlackHoleDeathExit()
    call InitTrig_AntiBodyPack()
    call InitTrig_TeleportBomb()
    call InitTrig_TeleportBombExplode()
    call InitTrig_Fusion_Bomb()
    call InitTrig_FusionBombExplode()
    call InitTrig_GIT()
    call InitTrig_GITResolver()
    call InitTrig_GITAcquire()
    call InitTrig_GITResults()
    call InitTrig_GITAddTestsToMedshops()
    call InitTrig_Nanovirus()
    call InitTrig_EnergyTransmission()
    call InitTrig_Deterministic_Invigoration()
    call InitTrig_Deterministic_Invigoration_Convert()
    call InitTrig_Deterministic_Invigoration_Expiration()
    call InitTrig_EnergyLeechCheckBegin()
    call InitTrig_EnergyLeechCheckEnd()
    call InitTrig_EnergyOfferingCheckBegin()
    call InitTrig_EnergyOfferingCheckEnd()
    call InitTrig_EnergyShift()
    call InitTrig_SummonMetal()
    call InitTrig_MagneticThrust()
    call InitTrig_CoreoverloadBegin()
    call InitTrig_Coreoverload()
    call InitTrig_CoreoverloadStop()
    call InitTrig_ChargeupBegin()
    call InitTrig_ChargeupFinish()
    call InitTrig_ChargeupStop()
    call InitTrig_LightningStorm()
    call InitTrig_ElectricDischarge()
    call InitTrig_HandMissile()
    call InitTrig_HalberdRocket()
    call InitTrig_KineticRush()
    call InitTrig_ForceSuitAttackGround()
    call InitTrig_RDGLimit()
    call InitTrig_RDGLimitHard()
    call InitTrig_RDGDetonate()
    call InitTrig_GooSpray()
    call InitTrig_Setup()
    call InitTrig_BlindingCloud()
    call InitTrig_KidotProjection()
    call InitTrig_Overheat()
    call InitTrig_CryoShock()
    call InitTrig_Cryogenesis()
    call InitTrig_PhaseShift()
    call InitTrig_Phase_Vortex()
    call InitTrig_MatterDrainingDevice()
    call InitTrig_Physics()
    call InitTrig_Swap()
    call InitTrig_DoorHack()
    call InitTrig_Rummage()
    call InitTrig_Suits()
    call InitTrig_SuitsDrop()
    call InitTrig_ForceSuitAttack()
    call InitTrig_PulseSuitAttack()
    call InitTrig_AnyDeath()
    call InitTrig_PlayerMurder()
    call InitTrig_PlayerMurderPart2()
    call InitTrig_WinCheck()
    call InitTrig_WinDelay()
    call InitTrig_PlayerLeaves()
    //Function not found: call InitTrig_ChatConverter()
    //Function not found: call InitTrig_EscapePodOld()
    call InitTrig_EscapePodDies()
    call InitTrig_SetTrajectory()
    call InitTrig_DamageSys()
    call InitTrig_UpgradeStatus()
    call InitTrig_AntiTKSys()
    call InitTrig_SpaceCollision()
    call InitTrig_SpawnVoidCannon()
    call InitTrig_RemindTKBad()
    call InitTrig_Albadar_Anti_Abuse()
    call InitTrig_Defunct_dead_confirm()
    call InitTrig_Defunct_Anti_Teleportation()
    call InitTrig_AntiShareControl()
    call InitTrig_AllSectorsTargetCheck()
    call InitTrig_PreventOutOfSectorAttackGround()
    call InitTrig_PreventOutOfSectorAttack()
    call InitTrig_BnetNames()
    call InitTrig_Rename()
    call InitTrig_RenameEnd()
    call InitTrig_Slugglyship()
    call InitTrig_SlugglyControl()
    call InitTrig_SlugglyDeath()
    call InitTrig_FusionBombsInit()
    call InitTrig_FusionBombPurchase()
    call InitTrig_TimeIndicator()
    call InitTrig_RandomEventsInit()
    call InitTrig_RandomEventsTimer()
    call InitTrig_CommissarPromotion()
    call InitTrig_LostStation()
    call InitTrig_LostStationDisappear()
    call InitTrig_SilentVoidInit()
    call InitTrig_SilentVoidAll()
    call InitTrig_SilentVoidEnd()
    call InitTrig_PirateShip()
    call InitTrig_Snoeglays()
    call InitTrig_Anomaly()
    call InitTrig_AnomalyDeath()
    call InitTrig_News()
    call InitTrig_PersonnelUpgrade()
    call InitTrig_PersonnelUpgradeEnter()
    call InitTrig_PersonnelUpgradeDialog()
    call InitTrig_DroneSwarm()
    call InitTrig_SolarIntensity()
    call InitTrig_LocalBlackout()
    call InitTrig_GiantAsteroid()
    call InitTrig_MultiEvent()
    call InitTrig_FakeGameEnd()
    call InitTrig_CommunicationError()
    call InitTrig_DoorMalfunction()
    call InitTrig_DoorMalfunctionEnd()
    call InitTrig_BlackoutEnd()
    call InitTrig_ApocalypseSpawn()
    call InitTrig_USIBattleFleet()
    call InitTrig_BlackHole()
    call InitTrig_DragIntoSun()
    //Function not found: call InitTrig_CamCommand()
    call InitTrig_CamAuto()
    call InitTrig_RolesInit()
    call InitTrig_ChooseRoles()
    call InitTrig_Chooser()
    call InitTrig_Researcher()
    call InitTrig_CEO()
    call InitTrig_Commissar()
    call InitTrig_Engineer()
    call InitTrig_Pilot()
    call InitTrig_WarVeteran()
    call InitTrig_Captain()
    call InitTrig_Janitor()
    call InitTrig_Medic()
    call InitTrig_SecurityGuard()
    call InitTrig_RepickAlien()
    call InitTrig_RepickAlienClick0()
    call InitTrig_RepickAlienClick1()
    call InitTrig_RepickAlienChoice()
    call InitTrig_RepickMutant()
    call InitTrig_RepickMutantClick0()
    call InitTrig_RepickMutantClick1()
    call InitTrig_RepickMutantChoice()
    call InitTrig_RepickRogue()
    call InitTrig_RepickRogueClick0()
    call InitTrig_RepickRogueClick1()
    call InitTrig_RepickRogueChoice()
    call InitTrig_RepickDialogTimeout()
    call InitTrig_BadSpawns()
    call InitTrig_Allow()
    call InitTrig_Disallow()
    call InitTrig_NoMutantTK()
    call InitTrig_ListMutants()
    call InitTrig_LiquidateDialogAlien()
    call InitTrig_NoAlienTK()
    call InitTrig_ListAliens()
    call InitTrig_LiquidateDialogMutant()
    call InitTrig_NoCyborgTK()
    call InitTrig_ListCyborgs()
    call InitTrig_LiquidateDialogCyborg()
    call InitTrig_MutantUpgrade()
    call InitTrig_MutantDialog()
    call InitTrig_MutantUpgradeFinish()
    call InitTrig_MutantDevour()
    call InitTrig_MutantCannibalize()
    call InitTrig_PrionRemoveParasite()
    call InitTrig_AlienEgg()
    call InitTrig_AlienEggDeath()
    call InitTrig_AlienAdjustShop()
    call InitTrig_AlienForm()
    call InitTrig_AlienFormTransfer()
    call InitTrig_AlienFormSpawn()
    call InitTrig_HumanForm()
    call InitTrig_HumanFormSpawn()
    call InitTrig_AlienFormDies()
    call InitTrig_ParasiteUpgrade()
    call InitTrig_ParasiteDialog()
    call InitTrig_ParasiteUpgradeFinish()
    call InitTrig_ParasiteSpawnCreateSpell()
    call InitTrig_ParasiteRemovePrion()
    call InitTrig_Shutdown()
    call InitTrig_AndroidChat()
    call InitTrig_AndroidCardVision()
    call InitTrig_AntiacquireRemote()
    call InitTrig_AndroidRemote()
    call InitTrig_AndroidUpgrade()
    call InitTrig_AndroidUpgradeDialogClick()
    call InitTrig_AndroidRevive()
    call InitTrig_AndroidPacificationRevive()
    call InitTrig_PlantChip()
    call InitTrig_UnpauseRogueAndroidChip()
    call InitTrig_ChipRevival()
    call InitTrig_ChipDestruction()
    call InitTrig_PingChips()
    call InitTrig_PingNextChip()
    call InitTrig_SwapChips()
    call InitTrig_ResetAbility()
    call InitTrig_ShutdownRogue()
    //Function not found: call InitTrig_VesselUpgrade()
    //Function not found: call InitTrig_VesselUpgradeFinish()
    call InitTrig_SuitSkillDatabase()
    call InitTrig_LoadCapabilities()
    call InitTrig_InstallBiomass()
    call InitTrig_CompressBiomass()
    call InitTrig_MissileBarrage()
    call InitTrig_CyborgInfectionRemoveInfections()
    call InitTrig_Help()
    call InitTrig_SpawnHelp()
    call InitTrig_SpawnCodeGet()
    call InitTrig_SpawnUnit()
    call InitTrig_AlienEvoPoints()
    call InitTrig_NoWin()
    call InitTrig_Mine()
    call InitTrig_Hostile()
    call InitTrig_ForceRandom()
    call InitTrig_TestAbilities()
    call InitTrig_SetPlayerhero()
    call InitTrig_SpawnApocalypse()
    call InitTrig_UseItemSlot()
    call InitTrig_GlobalVision()
    call InitTrig_DebugMultiplayer()
    call InitTrig_Kill()
    call InitTrig_BecomeAlien()
    call InitTrig_BecomeMutant()
    call InitTrig_BecomeAndroid()
    call InitTrig_BecomeRogueAndroid()
    call InitTrig_BecomeHuman()
    call InitTrig_DEBUGQ()
    call InitTrig_DEBUGW()
    //Function not found: call InitTrig_AttachObject()
    //Function not found: call InitTrig_ListT()
    //Function not found: call InitTrig_RiseAndFall()
    call InitTrig_Spell_System_Config()
    call InitTrig_Spell_System()
    //Function not found: call InitTrig_Table()
    call InitTrig_Unit_Event_Config()
    call InitTrig_Unit_Event()
    call InitTrig_Knockback_2D_Config()
    call InitTrig_Knockback_2D_Destroy()
    call InitTrig_Knockback_2D()
    call InitTrig_Knockback_2D_System()
    //Function not found: call InitTrig_MoveSpeedXGUI()
    call InitTrig_MoveSpeedXGlobals()
    //Function not found: call InitTrig_TimedAbility()
    //Function not found: call InitTrig_TimedHandles()
    //Function not found: call InitTrig_TimerUtils()
    //Function not found: call InitTrig_RegisterNativeEvent()
    //Function not found: call InitTrig_RegisterPlayerUnitEvent()
    //Function not found: call InitTrig_RegisterPlayerEvent()
    //Function not found: call InitTrig_RegisterUnitEvent()
    call InitTrig_Damage_Engine_Config()
    //Function not found: call InitTrig_Damage_Engine()
    //Function not found: call InitTrig_MissileEffect()
    //Function not found: call InitTrig_DummyRecycler()
    //Function not found: call InitTrig_Missiles()
    //Function not found: call InitTrig_WorldBounds()
    //Function not found: call InitTrig_Alloc()
    //Function not found: call InitTrig_GenericReaction()
    //Function not found: call InitTrig_FireReactions()
    //Function not found: call InitTrig_IceReactions()
    //Function not found: call InitTrig_WaterReactions()
    //Function not found: call InitTrig_ElectroReactions()
    //Function not found: call InitTrig_Chat_System_Script()
    //Function not found: call InitTrig_AutoArtillary()
endfunction

//===========================================================================
function RunInitializationTriggers takes nothing returns nothing
    call ConditionalTriggerExecute(gg_trg_Quests)
    call ConditionalTriggerExecute(gg_trg_GetSectorInit)
    call ConditionalTriggerExecute(gg_trg_Init_Cinematic_Unstuck)
    call ConditionalTriggerExecute(gg_trg_DoorInit2)
    call ConditionalTriggerExecute(gg_trg_ST1mInit)
    call ConditionalTriggerExecute(gg_trg_ST2mInit)
    call ConditionalTriggerExecute(gg_trg_ST3mInit)
    call ConditionalTriggerExecute(gg_trg_ST4mInit)
    call ConditionalTriggerExecute(gg_trg_ST5mInit)
    call ConditionalTriggerExecute(gg_trg_ST6Init)
    call ConditionalTriggerExecute(gg_trg_ST7Init)
    call ConditionalTriggerExecute(gg_trg_PlanetmInit)
    call ConditionalTriggerExecute(gg_trg_MoonmInit)
    call ConditionalTriggerExecute(gg_trg_SSThorlarInit)
    call ConditionalTriggerExecute(gg_trg_SCD_Shut_Down)
    call ConditionalTriggerExecute(gg_trg_TotalInfection)
    call ConditionalTriggerExecute(gg_trg_GITAddTestsToMedshops)
    call ConditionalTriggerExecute(gg_trg_FusionBombsInit)
    call ConditionalTriggerExecute(gg_trg_RandomEventsInit)
    call ConditionalTriggerExecute(gg_trg_RolesInit)
    call ConditionalTriggerExecute(gg_trg_SuitSkillDatabase)
    call ConditionalTriggerExecute(gg_trg_Unit_Event_Config)
    call ConditionalTriggerExecute(gg_trg_Damage_Engine_Config)
endfunction

//***************************************************************************
//*
//*  Players
//*
//***************************************************************************

function InitCustomPlayerSlots takes nothing returns nothing

    // Player 0
    call SetPlayerStartLocation(Player(0), 0)
    call SetPlayerColor(Player(0), ConvertPlayerColor(0))
    call SetPlayerRacePreference(Player(0), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(0), false)
    call SetPlayerController(Player(0), MAP_CONTROL_USER)

    // Player 1
    call SetPlayerStartLocation(Player(1), 1)
    call SetPlayerColor(Player(1), ConvertPlayerColor(1))
    call SetPlayerRacePreference(Player(1), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(1), false)
    call SetPlayerController(Player(1), MAP_CONTROL_USER)

    // Player 2
    call SetPlayerStartLocation(Player(2), 2)
    call SetPlayerColor(Player(2), ConvertPlayerColor(2))
    call SetPlayerRacePreference(Player(2), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(2), false)
    call SetPlayerController(Player(2), MAP_CONTROL_USER)

    // Player 3
    call SetPlayerStartLocation(Player(3), 3)
    call SetPlayerColor(Player(3), ConvertPlayerColor(3))
    call SetPlayerRacePreference(Player(3), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(3), false)
    call SetPlayerController(Player(3), MAP_CONTROL_USER)

    // Player 4
    call SetPlayerStartLocation(Player(4), 4)
    call SetPlayerColor(Player(4), ConvertPlayerColor(4))
    call SetPlayerRacePreference(Player(4), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(4), false)
    call SetPlayerController(Player(4), MAP_CONTROL_USER)

    // Player 5
    call SetPlayerStartLocation(Player(5), 5)
    call SetPlayerColor(Player(5), ConvertPlayerColor(5))
    call SetPlayerRacePreference(Player(5), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(5), false)
    call SetPlayerController(Player(5), MAP_CONTROL_USER)

    // Player 6
    call SetPlayerStartLocation(Player(6), 6)
    call SetPlayerColor(Player(6), ConvertPlayerColor(6))
    call SetPlayerRacePreference(Player(6), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(6), false)
    call SetPlayerController(Player(6), MAP_CONTROL_USER)

    // Player 7
    call SetPlayerStartLocation(Player(7), 7)
    call SetPlayerColor(Player(7), ConvertPlayerColor(7))
    call SetPlayerRacePreference(Player(7), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(7), false)
    call SetPlayerController(Player(7), MAP_CONTROL_USER)

    // Player 8
    call SetPlayerStartLocation(Player(8), 8)
    call SetPlayerColor(Player(8), ConvertPlayerColor(8))
    call SetPlayerRacePreference(Player(8), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(8), false)
    call SetPlayerController(Player(8), MAP_CONTROL_USER)

    // Player 9
    call SetPlayerStartLocation(Player(9), 9)
    call SetPlayerColor(Player(9), ConvertPlayerColor(9))
    call SetPlayerRacePreference(Player(9), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(9), false)
    call SetPlayerController(Player(9), MAP_CONTROL_USER)

    // Player 10
    call SetPlayerStartLocation(Player(10), 10)
    call SetPlayerColor(Player(10), ConvertPlayerColor(10))
    call SetPlayerRacePreference(Player(10), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(10), false)
    call SetPlayerController(Player(10), MAP_CONTROL_USER)

    // Player 11
    call SetPlayerStartLocation(Player(11), 11)
    call SetPlayerColor(Player(11), ConvertPlayerColor(11))
    call SetPlayerRacePreference(Player(11), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(11), false)
    call SetPlayerController(Player(11), MAP_CONTROL_USER)

endfunction

function InitCustomTeams takes nothing returns nothing
    // Force: TRIGSTR_5174
    call SetPlayerTeam(Player(0), 0)
    call SetPlayerTeam(Player(1), 0)
    call SetPlayerTeam(Player(2), 0)
    call SetPlayerTeam(Player(3), 0)
    call SetPlayerTeam(Player(4), 0)
    call SetPlayerTeam(Player(5), 0)

    //   Allied
    call SetPlayerAllianceStateAllyBJ(Player(0), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(0), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(0), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(0), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(0), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(0), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(1), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(0), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(2), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(0), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(4), true)
    call SetPlayerAllianceStateAllyBJ(Player(3), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(0), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(4), Player(5), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(0), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(1), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(2), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(3), true)
    call SetPlayerAllianceStateAllyBJ(Player(5), Player(4), true)

    // Force: TRIGSTR_5175
    call SetPlayerTeam(Player(6), 1)
    call SetPlayerTeam(Player(7), 1)
    call SetPlayerTeam(Player(8), 1)
    call SetPlayerTeam(Player(9), 1)
    call SetPlayerTeam(Player(10), 1)
    call SetPlayerTeam(Player(11), 1)

    //   Allied
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(6), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(7), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(8), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(10), true)
    call SetPlayerAllianceStateAllyBJ(Player(9), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(10), Player(11), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(6), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(7), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(8), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(9), true)
    call SetPlayerAllianceStateAllyBJ(Player(11), Player(10), true)

endfunction

function InitAllyPriorities takes nothing returns nothing

    call SetStartLocPrioCount(0, 11)
    call SetStartLocPrio(0, 0, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 1, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 2, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 3, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 4, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 5, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 6, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 7, 8, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 8, 9, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 9, 10, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(0, 10, 11, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(1, 11)
    call SetStartLocPrio(1, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 1, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 2, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 3, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 4, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 5, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 6, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 7, 8, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 8, 9, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 9, 10, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(1, 10, 11, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(2, 11)
    call SetStartLocPrio(2, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 2, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 3, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 4, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 5, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 6, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 7, 8, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 8, 9, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 9, 10, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(2, 10, 11, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(3, 11)
    call SetStartLocPrio(3, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 3, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 4, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 5, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 6, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 7, 8, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 8, 9, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 9, 10, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(3, 10, 11, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(4, 11)
    call SetStartLocPrio(4, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 3, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 4, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 5, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 6, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 7, 8, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 8, 9, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 9, 10, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(4, 10, 11, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(5, 11)
    call SetStartLocPrio(5, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 3, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 4, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 5, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 6, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 7, 8, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 8, 9, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 9, 10, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(5, 10, 11, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(6, 11)
    call SetStartLocPrio(6, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 3, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 4, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 5, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 6, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 7, 8, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 8, 9, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 9, 10, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(6, 10, 11, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(7, 11)
    call SetStartLocPrio(7, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 3, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 4, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 5, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 6, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 7, 8, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 8, 9, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 9, 10, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(7, 10, 11, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(8, 11)
    call SetStartLocPrio(8, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 3, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 4, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 5, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 6, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 7, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 8, 9, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 9, 10, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(8, 10, 11, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(9, 11)
    call SetStartLocPrio(9, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(9, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(9, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(9, 3, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(9, 4, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(9, 5, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(9, 6, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(9, 7, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(9, 8, 8, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(9, 9, 10, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(9, 10, 11, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(10, 11)
    call SetStartLocPrio(10, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(10, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(10, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(10, 3, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(10, 4, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(10, 5, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(10, 6, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(10, 7, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(10, 8, 8, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(10, 9, 9, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(10, 10, 11, MAP_LOC_PRIO_HIGH)

    call SetStartLocPrioCount(11, 11)
    call SetStartLocPrio(11, 0, 0, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(11, 1, 1, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(11, 2, 2, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(11, 3, 3, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(11, 4, 4, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(11, 5, 5, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(11, 6, 6, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(11, 7, 7, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(11, 8, 8, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(11, 9, 9, MAP_LOC_PRIO_HIGH)
    call SetStartLocPrio(11, 10, 10, MAP_LOC_PRIO_HIGH)
endfunction

//***************************************************************************
//*
//*  Main Initialization
//*
//***************************************************************************

//===========================================================================
function main takes nothing returns nothing
    call SetCameraBounds(- 16384.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), - 16384.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM), 16384.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), 16384.0 - GetCameraMargin(CAMERA_MARGIN_TOP), - 16384.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), 16384.0 - GetCameraMargin(CAMERA_MARGIN_TOP), 16384.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), - 16384.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM))
    call SetDayNightModels("Environment\\DNC\\DNCDalaran\\DNCDalaranTerrain\\DNCDalaranTerrain.mdl", "Environment\\DNC\\DNCDalaran\\DNCDalaranUnit\\DNCDalaranUnit.mdl")
    call NewSoundEnvironment("Default")
    call SetAmbientDaySound("DalaranRuinsDay")
    call SetAmbientNightSound("DalaranRuinsNight")
    call SetMapMusic("Music", true, 0)
    call InitSounds()
    call CreateRegions()
    call CreateAllDestructables()
    call CreateAllItems()
    call CreateAllUnits()
    call InitBlizzard()

call ExecuteFunc("jasshelper__initstructs27873406")
call ExecuteFunc("IsTerrainWalkable__init")
call ExecuteFunc("PathingFuncs__init")
call ExecuteFunc("PreventSave__onInit")
call ExecuteFunc("PolarityChange__onInit")
call ExecuteFunc("chatTest__onInit")
call ExecuteFunc("ForceVortex__onInit")
call ExecuteFunc("MagneticAttacks__onInit")
call ExecuteFunc("SwitchInit__onInit")

    call InitGlobals()
    call InitCustomTriggers()
    call RunInitializationTriggers()

endfunction

//***************************************************************************
//*
//*  Map Configuration
//*
//***************************************************************************

function config takes nothing returns nothing
    call SetMapName("TRIGSTR_003")
    call SetMapDescription("TRIGSTR_005")
    call SetPlayers(12)
    call SetTeams(12)
    call SetGamePlacement(MAP_PLACEMENT_TEAMS_TOGETHER)

    call DefineStartLocation(0, - 5376.0, 6912.0)
    call DefineStartLocation(1, - 5376.0, 6912.0)
    call DefineStartLocation(2, - 5376.0, 6912.0)
    call DefineStartLocation(3, - 5376.0, 6912.0)
    call DefineStartLocation(4, - 5376.0, 6912.0)
    call DefineStartLocation(5, - 5376.0, 6912.0)
    call DefineStartLocation(6, - 5376.0, 6912.0)
    call DefineStartLocation(7, - 5376.0, 6912.0)
    call DefineStartLocation(8, - 5376.0, 6912.0)
    call DefineStartLocation(9, - 5376.0, 6912.0)
    call DefineStartLocation(10, - 5376.0, 6912.0)
    call DefineStartLocation(11, - 5376.0, 6912.0)

    // Player setup
    call InitCustomPlayerSlots()
    call InitCustomTeams()
    call InitAllyPriorities()
endfunction




//Struct method generated initializers/callers:
function sa__VesselUpgradeFinish_Done takes nothing returns boolean

        local integer pi= GetPlayerId(udg_RogueAndroid) + 1
        if udg_RogueAndroidEvolveTick < 12 then
            call DestroyEffect(AddSpecialEffect("Rogue Droid Evolve.mdx", GetUnitX(udg_Playerhero[pi]), GetUnitY(udg_Playerhero[pi]))) //Tech circles
            set udg_RogueAndroidEvolveTick=udg_RogueAndroidEvolveTick + 1
        else
            call PauseTimer(udg_RogueAndroidEvolveTimer)
            set udg_RogueAndroidEvolveTick=0
            call GroupEnumUnitsOfPlayer(TempEnumGroup, Player(PLAYER_NEUTRAL_PASSIVE), Condition(function IterateCorpsesEvolutionCleanUp))
            call RogueAndroidEvolutionFinish()
        endif
   return true
endfunction
function sa__EscapePod_IntEscapePod takes nothing returns boolean

    set gg_trg_EscapePodOld=CreateTrigger()
    call TriggerRegisterAnyUnitEventBJ(gg_trg_EscapePodOld, EVENT_PLAYER_UNIT_SELL_ITEM)
    call TriggerAddCondition(gg_trg_EscapePodOld, Condition(function s__EscapePod_Trig_EscapePodOld_Conditions))
    call TriggerAddAction(gg_trg_EscapePodOld, function s__EscapePod_Trig_EscapePodOld_Actions)
   return true
endfunction
function sa__PsychoTime__set_index takes nothing returns boolean
local integer this=f__arg_this
local integer i=f__arg_integer1
                  set s__PsychoTime_pIndex[this]=i
   return true
endfunction
function sa__PsychoTime__get_pid takes nothing returns boolean
local integer this=f__arg_this
set f__result_integer= s__PsychoTime_pi[this]
   return true
endfunction
function sa__PsychoTime__get_ep takes nothing returns boolean
local integer this=f__arg_this
set f__result_integer= s__PsychoTime_epi[this]
   return true
endfunction
function sa__PsychoTime__set_ep takes nothing returns boolean
local integer this=f__arg_this
local integer epid=f__arg_integer1
                 set s__PsychoTime_epi[this]=epid
   return true
endfunction
function sa__PsychoTime__get_task takes nothing returns boolean
local integer this=f__arg_this
set f__result_integer= s__PsychoTime_t[this]
   return true
endfunction
function sa__PsychoTime__set_task takes nothing returns boolean
local integer this=f__arg_this
local integer tid=f__arg_integer1
                set s__PsychoTime_t[this]=tid
   return true
endfunction
function sa__PsychoTime__get_bool takes nothing returns boolean
local integer this=f__arg_this
set f__result_boolexpr= s__PsychoTime_m[this]
   return true
endfunction
function sa__PsychoTime_start takes nothing returns boolean
    set f__result_integer=s__PsychoTime_start(f__arg_integer1,f__arg_conditionfunc1)
   return true
endfunction
function sa__PsychoOnInit_InitSet takes nothing returns boolean
local integer pi=f__arg_integer1
              local integer ti= PsychoUser
              call SaveStr(Table__ht, (((PsyI))), (1), ( "Subject " + I2S(PsychoInt__PC2A(pi)) + " is not yet conscious of the empirical protocol being conducted.")) // INLINED!!
              set s__PsychoTime_pi[PsychoUser]=pi
              set s__PsychoTime_r[PsychoUser]=0
              set s__PsychoTime_t[(ti)]=(0) // INLINED!!
              set s__PsychoTime_epi[(ti)]=(- 1) // INLINED!!
              call SaveInteger(Table__ht, (PsyI), (0), ( 0)) // INLINED!!
   return true
endfunction
function sa__PsychoOnInit_Init takes nothing returns boolean

                local timer t= GetExpiredTimer()
                local integer g= s__IPool_create()
                local integer p= s__User_first
                local integer ti= PsychoUser
                loop
                    exitwhen p == s__User_NULL
                    if s__User_Local != udg_Parasite and s__User_Local != udg_Mutant and s__User_Local != udg_RogueAndroid and s__User_Local != udg_HiddenAndroid then
                        if ( PsychoUser != - 1 and (s__PsychoTime_pi[(ti)]) != s__User_id[p] ) or PsychoUser == - 1 then // INLINED!!
                                call s__IPool_add(g,s__User_id[p] , 1)
                        endif
                    endif
                    set p=s__User_next[p]
                endloop
                if (LoadInteger(Table__ht, (PsyI), (0))) == 0 then // INLINED!!
                    set PsychoUser=s__IPool_getItem(g)
                    call PsychoInt__IntWRSString()
                    call TimerStart(t, 5, false, function s__PsychoOnInit_StartPsychoTimer)
                    set s__TimerUtilsEx__Data_data[(GetHandleId((t )) ) - 0x100000]=( ( 1)) // INLINED!!
                else
                    call s__PsychoOnInit_InitSet(s__IPool_getItem(g))
                endif
                if (s__TimerUtilsEx__Data_data[(GetHandleId((t))) - 0x100000]) == 0 then // INLINED!!
                    call ReleaseTimer(t)
                endif
                set t=null
                call s__IPool_destroy(g)
   return true
endfunction
function sa__Count_create takes nothing returns boolean

            local integer this= (Alloc_Allocate(si__Count)) // INLINED!!
            set s__Count_c[this]=0
set f__result_integer= this
   return true
endfunction
function sa__Count_destroy takes nothing returns boolean
local integer this=f__arg_this
            call Alloc_Deallocate(si__Count , (this)) // INLINED!!
   return true
endfunction
function sa__WRSMissData_create takes nothing returns boolean
local integer tipe=f__arg_integer1
            local integer this= (Alloc_Allocate(si__WRSMissData)) // INLINED!!
            set s__WRSMissData_c[this]=0
            set s__WRSMissData_t[this]=tipe
set f__result_integer= this
   return true
endfunction
function sa__WRSMissData_destroy takes nothing returns boolean
local integer this=f__arg_this
            call BJDebugMsg("Destroying: " + I2S(this))
            call Alloc_Deallocate(si__WRSMissData , (this)) // INLINED!!
   return true
endfunction
function sa__ArtLaunch_onDamage takes nothing returns boolean

            local integer this= (CTL__CT(s__ArtLaunch_rctl32)) // INLINED!!
            set s__ArtLaunch_u[this]=sor2
            set s__ArtLaunch_x[this]=GetUnitX(tar2)
            set s__ArtLaunch_y[this]=GetUnitY(tar2)
            set s__ArtLaunch_tar[this]=tar2
            set s__ArtLaunch_z[this]=75
            set s__ArtLaunch_c[this]=(10) // INLINED!!
            set s__ArtLaunch_d[this]=EDamage / s__ArtLaunch_c[this]
   return true
endfunction
function sa__WaterEffect_cast takes nothing returns boolean

            local integer h
            local integer t
            local unit tar
            local unit sor
            local real dam
            set tar=tar2
            set sor=sor2
            set dam=EDamage
            set h=GetUnitUserData(tar)
            if GetUnitAbilityLevel(tar, 'B003') > 0 then
                    set t=(LoadInteger(Table__ht, (Elements), (h + 1 * 5000))) // INLINED!!
                    if s__ShareFunc_tar[t] == null then
                        call s__ShareFunc_Freeze(tar , sor)
                    endif
            elseif GetUnitAbilityLevel(tar, 'B01Z') > 0 then
                    call s__ShareFunc_ElectricCharge(tar , sor)
            elseif GetUnitAbilityLevel(tar, 'B01X') > 0 then
                    call s__ShareFunc_Vaporize(tar , sor , dam)
            endif
            set tar=null
            set sor=null
set f__result_boolean= true
return true
   return true
endfunction
function sa__Event_Event__destroyNode takes nothing returns boolean
local integer this=f__arg_this
            set s__Event_next[s__Event_prev[this]]=s__Event_next[this]
            set s__Event_prev[s__Event_next[this]]=s__Event_prev[this]
            call s__Event_deallocate(this)
   return true
endfunction
function sa__IceEffect_cast takes nothing returns boolean

            local integer h
            local integer t
            local unit tar
            local unit sor
            set tar=tar2
            set sor=sor2
            set h=GetUnitUserData(tar)
            if GetUnitAbilityLevel(tar, 'B024') > 0 or GetUnitAbilityLevel(tar, 'B023') > 0 then
                    set t=(LoadInteger(Table__ht, (Elements), (h + 1 * 5000))) // INLINED!!
                    if s__ShareFunc_tar[t] == null then
                        call s__ShareFunc_Freeze(tar , sor)
                    endif
            elseif GetUnitAbilityLevel(tar, 'B01Z') > 0 then
            elseif GetUnitAbilityLevel(tar, 'B01X') > 0 then
                    call s__ShareFunc_Melt(tar , sor)
            endif
            set tar=null
            set sor=null
set f__result_boolean= true
return true
   return true
endfunction
function sa__FireEffect_cast takes nothing returns boolean

            local integer h
            local integer t
            local unit tar
            local real dam= EDamage
            local unit sor
                set tar=tar2
                set sor=sor2
                if GetUnitAbilityLevel(tar, 'B024') > 0 or GetUnitAbilityLevel(tar, 'B023') > 0 then
                        call s__ShareFunc_Vaporize(tar , sor , dam)
                elseif GetUnitAbilityLevel(tar, 'B01Z') > 0 then
                        call s__ShareFunc_Overload(tar , sor , dam)
                elseif GetUnitAbilityLevel(tar, 'B003') > 0 then
                        call s__ShareFunc_Melt(tar , sor)
                endif
                set h=GetUnitUserData(tar)
                set t=(LoadInteger(Table__ht, (Elements), (h + 1 * 5000))) // INLINED!!
                if s__ShareFunc_tar[t] != null then
                    set s__ShareFunc_c[t]=s__ShareFunc_c[t] + 48
                endif
                set tar=null
                set sor=null
set f__result_boolean= true
return true
   return true
endfunction
function sa__ElectroEffect_cast takes nothing returns boolean

            local unit sor
            local unit tar
            local real dam
            set tar=tar2
            set sor=sor2
            set dam=EDamage
            if GetUnitAbilityLevel(tar, 'B024') > 0 or GetUnitAbilityLevel(tar, 'B023') > 0 then
                    call s__ShareFunc_ElectricCharge(tar , sor)
            elseif GetUnitAbilityLevel(tar, 'B01X') > 0 then
                    call s__ShareFunc_Overload(tar , sor , dam)
            endif
            set sor=null
            set tar=null
set f__result_boolean= true
return true
   return true
endfunction
function sa__ChatSys_ChatInt takes nothing returns boolean

                local timer t= (NewTimerEx(0)) // INLINED!!
                set GroupChat=s__Table_create()
                call IndexString(DEAD_MESSAGE_TYPE)
                call SaveStr(Table__ht, (((GroupChat))), (- 3), ( "|cFF00FF40Status: |cffc0c0c0Unknown|r |r")) // INLINED!!
                call IndexString(ROGUE_MESSAGE_TYPE)
                call SaveStr(Table__ht, (((GroupChat))), (- 2), ( (LoadStr(Table__ht, (((GroupChat))), (- 3))))) // INLINED!!
                call IndexString(MUTANT_MESSAGE_TYPE)
                call SaveStr(Table__ht, (((GroupChat))), (- 1), ( (LoadStr(Table__ht, (((GroupChat))), (- 3))))) // INLINED!!
                call IndexString(ALIEN_MESSAGE_TYPE)
                call Generator_GenInt()
                set Miss=s__Table_create()
                set PsyP=s__Table_create()
                set PsyN=s__Table_create()
                set PsyT=s__Table_create()
                set PsyI=s__Table_create()
                call RegisterAnyPlayerEvent(EVENT_PLAYER_CHAT , function ChatSystem__Message)
                call TimerStart(t, 0.01, false, function sc__PsychoOnInit_Init)
                set t=null
   return true
endfunction
function sa__AcidEffect_cast takes nothing returns boolean

            local unit sor
            local unit tar
            local real dam
            set tar=tar2
            set sor=sor2
            set dam=EDamage
            if GetUnitAbilityLevel(tar, 'B01X') > 0 then
                call s__ShareFunc_Overload(tar , sor , dam)
            endif
            set sor=null
            set tar=null
set f__result_boolean= true
return true
   return true
endfunction
function sa__Finish_EnumDestructablesInCircle takes nothing returns boolean
local integer this=f__arg_this
local real radius=f__arg_real1
local code actionFunc=f__arg_code1
            local rect r
            if radius >= 0 then
                set r=Rect(s__Finish_x[this] - radius, s__Finish_y[this] - radius, s__Finish_x[this] + radius, s__Finish_y[this] + radius)
                call EnumDestructablesInRect(r, null, actionFunc)
            endif
            call RemoveRect(r)
   return true
endfunction
function sa__GenTimer_StatMess takes nothing returns boolean
local integer sector=f__arg_integer1
            local integer b= 0
            local integer p= s__User_first
            loop
                exitwhen p == s__User_NULL
                if GetSectorMain(udg_Playerhero[s__User_id[p] + 1] , 0 , 0) == sector then
                    set b=b + R2I(1 * Pow(2, s__User_id[p]))
                endif
                set p=s__User_next[p]
            endloop
set f__result_integer= b
return true
   return true
endfunction
function sa__Table_create takes nothing returns boolean

        local integer this= (LoadInteger(Table__ht, ((Table__listK)), (0))) // INLINED!!
        if this == 0 then
            set this=Table__more + 1
            set Table__more=this
        else
            call SaveInteger(Table__ht, ((Table__listK)), (0), ( (LoadInteger(Table__ht, ((Table__listK)), (this))))) // INLINED!!
            call RemoveSavedInteger(Table__ht, ((Table__listK)), (this)) //Clear hashed memory // INLINED!!
        endif
set f__result_integer= this
   return true
endfunction
function sa__Missiles_terminate takes nothing returns boolean
local integer this=f__arg_this
        local integer aux
        if s__Missiles_allocated[this] and s__Missiles_launched[this] then
            set s__Missiles_allocated[this]=false
            if s__Missiles_pkey[this] != - 1 then
                set aux=s__Missiles_frozen[s__Missiles_pid]
                set s__Missiles_pkey[aux]=s__Missiles_pkey[this]
                set s__Missiles_frozen[s__Missiles_pkey[this]]=s__Missiles_frozen[s__Missiles_pid]
                set s__Missiles_pid=s__Missiles_pid - 1
                set s__Missiles_pkey[this]=- 1
            endif
            if (st__Missiles__MissileEvents_onRemove[si__Missiles__MissileEvents_type[this]]!=null) then
                call sc__Missiles__MissileEvents_onRemove(this)
            endif
            if s__Missiles_dummy[this] != null then
                call s__Missiles__Pool_recycle(s__Missiles_dummy[this])
            endif
            set aux=s__Missiles_collection[s__Missiles_count]
            set s__Missiles_index[aux]=s__Missiles_index[this]
            set s__Missiles_collection[s__Missiles_index[this]]=s__Missiles_collection[s__Missiles_count]
            set s__Missiles_count=s__Missiles_count - 1
            set s__Missiles_index[this]=- 1
            call s__Missiles__Coordinates_deallocate((s__Missiles_origin[this])) // INLINED!!
            call s__Missiles__Coordinates_deallocate((s__Missiles_impact[this])) // INLINED!!
            call s__MissileEffect_destroy(s__Missiles_effect[this])
            call sc__Missiles_reset(this)
            call FlushChildHashtable(s__Missiles_table, this)
        endif
   return true
endfunction
function sa__Missiles_reset takes nothing returns boolean
local integer this=f__arg_this
            set s__Missiles_launched[this]=false
            set s__Missiles_finished[this]=false
            set s__Missiles_collideZ[this]=false
            set s__Missiles_paused[this]=false
            set s__Missiles_roll[this]=false
            set s__Missiles_source[this]=null
            set s__Missiles_target[this]=null
            set s__Missiles_owner[this]=null
            set s__Missiles_dummy[this]=null
            set s__Missiles_open[this]=0.
            set s__Missiles_height[this]=0.
            set s__Missiles_veloc[this]=0.
            set s__Missiles_acceleration[this]=0.
            set s__Missiles_collision[this]=0.
            set s__Missiles_damage[this]=0.
            set s__Missiles_travel[this]=0.
            set s__Missiles_turn[this]=0.
            set s__Missiles_time[this]=0.
            set s__Missiles_sight[this]=0.
            set s__Missiles_data[this]=0
            set s__Missiles_type[this]=0
            set s__Missiles_tileset[this]=0
            set s__Missiles_pkey[this]=- 1
            set s__Missiles_index[this]=- 1
   return true
endfunction
function sa__Missiles_move takes nothing returns boolean

            local integer j= 0
            local integer i
            local integer k
            local unit u
            local real a
            local real d
            local real s
            local real h
            local real c
            local real dx
            local real dy
            local real vel
            local real yaw
            local real pitch
            local integer missile
            local integer o
            local integer this
            if Missiles_SWEET_SPOT > 0 then
                set i=s__Missiles_last
            else
                set i=0
            endif
            loop
                exitwhen ( ( j >= Missiles_SWEET_SPOT and Missiles_SWEET_SPOT > 0 ) or j > s__Missiles_id )
                    set this=s__Missiles_missiles[i]
                    set s__Missiles_temp=this
                    if s__Missiles_allocated[this] and not s__Missiles_paused[this] then
        set o=s__Missiles_origin[this]
        set h=s__Missiles_height[this]
        set c=s__Missiles_open[this]
        set d=s__Missiles__Coordinates_distance[o]
        if (st__Missiles__MissileEvents_onHit[si__Missiles__MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                call GroupEnumUnitsInRange(s__Missiles_group, s__Missiles_x[this], s__Missiles_y[this], s__Missiles_collision[this] + Missiles__COLLISION_SIZE, null)
                loop
                    set u=FirstOfGroup(s__Missiles_group)
                    exitwhen u == null
                        if not HaveSavedBoolean(s__Missiles_table, this, GetHandleId(u)) then
                            if IsUnitInRangeXY(u, s__Missiles_x[this], s__Missiles_y[this], s__Missiles_collision[this]) then
                                if s__Missiles_collideZ[this] then
                                    set dx=Missiles__GetLocZ(GetUnitX(u) , GetUnitY(u)) + GetUnitFlyHeight(u)
                                    set dy=BlzGetUnitCollisionSize(u)
                                    if dx + dy >= s__Missiles_z[this] - s__Missiles_collision[this] and dx <= s__Missiles_z[this] + s__Missiles_collision[this] then
                                        call SaveBoolean(s__Missiles_table, this, GetHandleId(u), true)
                                        if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onHit(this,u) then
                                            call s__Missiles_terminate(this)
                                            exitwhen true
                                        endif
                                    endif
                                else
                                    call SaveBoolean(s__Missiles_table, this, GetHandleId(u), true)
                                    if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onHit(this,u) then
                                        call s__Missiles_terminate(this)
                                        exitwhen true
                                    endif
                                endif
                            endif
                        endif
                    call GroupRemoveUnit(s__Missiles_group, u)
                endloop
            endif
        endif
        if (st__Missiles__MissileEvents_onMissile[si__Missiles__MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                set k=0
                loop
                    exitwhen k > s__Missiles_count
                        set missile=s__Missiles_collection[k]
                        if missile != this then
                            if not HaveSavedBoolean(s__Missiles_table, this, missile) then
                                set dx=s__Missiles_x[missile] - s__Missiles_x[this]
                                set dy=s__Missiles_y[missile] - s__Missiles_y[this]
                                if SquareRoot(dx * dx + dy * dy) <= s__Missiles_collision[this] then
                                    call SaveBoolean(s__Missiles_table, this, missile, true)
                                    if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onMissile(this,missile) then
                                        call s__Missiles_terminate(this)
                                        exitwhen true
                                    endif
                                endif
                            endif
                        endif
                    set k=k + 1
                endloop
            endif
        endif
        if (st__Missiles__MissileEvents_onDestructable[si__Missiles__MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                set dx=s__Missiles_collision[this]
                call SetRect(s__Missiles_rect, s__Missiles_x[this] - dx, s__Missiles_y[this] - dx, s__Missiles_x[this] + dx, s__Missiles_y[this] + dx)
                call EnumDestructablesInRect(s__Missiles_rect, null, function s__Missiles_onDest)
            endif
        endif
        if (st__Missiles__MissileEvents_onItem[si__Missiles__MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                set dx=s__Missiles_collision[this]
                call SetRect(s__Missiles_rect, s__Missiles_x[this] - dx, s__Missiles_y[this] - dx, s__Missiles_x[this] + dx, s__Missiles_y[this] + dx)
                call EnumItemsInRect(s__Missiles_rect, null, function s__Missiles_onItems)
            endif
        endif
        if (st__Missiles__MissileEvents_onCliff[si__Missiles__MissileEvents_type[this]]!=null) then
            set dx=GetTerrainCliffLevel(s__Missiles_nextX[this], s__Missiles_nextY[this])
            set dy=GetTerrainCliffLevel(s__Missiles_x[this], s__Missiles_y[this])
            if dy < dx and s__Missiles_z[this] < ( dx - (GetTerrainCliffLevel(s__WorldBounds_maxX, s__WorldBounds_maxY)) ) * bj_CLIFFHEIGHT then // INLINED!!
                if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onCliff(this) then
                    call s__Missiles_terminate(this)
                endif
            endif
        endif
        if (st__Missiles__MissileEvents_onTerrain[si__Missiles__MissileEvents_type[this]]!=null) then
            if Missiles__GetLocZ(s__Missiles_x[this] , s__Missiles_y[this]) > s__Missiles_z[this] then
                if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onTerrain(this) then
                    call s__Missiles_terminate(this)
                endif
            endif
        endif
        if (st__Missiles__MissileEvents_onTileset[si__Missiles__MissileEvents_type[this]]!=null) then
            set k=GetTerrainType(s__Missiles_x[this], s__Missiles_y[this])
            if k != s__Missiles_tileset[this] then
                if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onTileset(this,k) then
                    call s__Missiles_terminate(this)
                endif
            endif
            set s__Missiles_tileset[this]=k
        endif
        if (st__Missiles__MissileEvents_onPeriod[si__Missiles__MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onPeriod(this) then
                call s__Missiles_terminate(this)
            endif
        endif
        set u=s__Missiles_target[this]
        if u != null and GetUnitTypeId(u) != 0 then
            call s__Missiles__Coordinates_move(s__Missiles_impact[this],GetUnitX(u) , GetUnitY(u) , GetUnitFlyHeight(u) + s__Missiles_toZ[this])
            set dx=s__Missiles__Coordinates_x[s__Missiles_impact[this]] - s__Missiles_nextX[this]
            set dy=s__Missiles__Coordinates_y[s__Missiles_impact[this]] - s__Missiles_nextY[this]
            set a=Atan2(dy, dx)
            set s__Missiles_travel[this]=s__Missiles__Coordinates_distance[o] - SquareRoot(dx * dx + dy * dy)
        else
            set a=s__Missiles__Coordinates_angle[o]
            set s__Missiles_target[this]=null
        endif
        if s__Missiles_turn[this] != 0 and not ( Cos(s__Missiles_cA[this] - a) >= Cos(s__Missiles_turn[this]) ) then
            if Sin(a - s__Missiles_cA[this]) >= 0 then
                set s__Missiles_cA[this]=s__Missiles_cA[this] + s__Missiles_turn[this]
            else
                set s__Missiles_cA[this]=s__Missiles_cA[this] - s__Missiles_turn[this]
            endif
        else
            set s__Missiles_cA[this]=a
        endif
        set vel=s__Missiles_veloc[this] * s__Missiles_dilation
        set yaw=s__Missiles_cA[this]
        set s=s__Missiles_travel[this] + vel
        set s__Missiles_veloc[this]=s__Missiles_veloc[this] + s__Missiles_acceleration[this]
        set s__Missiles_travel[this]=s
        set pitch=s__Missiles__Coordinates_alpha[o]
        set s__Missiles_prevX[this]=s__Missiles_x[this]
        set s__Missiles_prevY[this]=s__Missiles_y[this]
        set s__Missiles_prevZ[this]=s__Missiles_z[this]
        set s__Missiles_x[this]=s__Missiles_nextX[this]
        set s__Missiles_y[this]=s__Missiles_nextY[this]
        set s__Missiles_z[this]=s__Missiles_nextZ[this]
        set s__Missiles_nextX[this]=s__Missiles_x[this] + vel * Cos(yaw)
        set s__Missiles_nextY[this]=s__Missiles_y[this] + vel * Sin(yaw)
        if h != 0 or s__Missiles__Coordinates_slope[o] != 0 then
            set s__Missiles_nextZ[this]=4 * h * s * ( d - s ) / ( d * d ) + s__Missiles__Coordinates_slope[o] * s + s__Missiles__Coordinates_z[o]
            set pitch=pitch - Atan(( ( 4 * h ) * ( 2 * s - d ) ) / ( d * d ))
        endif
        if c != 0 then
            set dx=4 * c * s * ( d - s ) / ( d * d )
            set a=yaw + bj_PI / 2
            set s__Missiles_x[this]=s__Missiles_x[this] + dx * Cos(a)
            set s__Missiles_y[this]=s__Missiles_y[this] + dx * Sin(a)
            set yaw=yaw + Atan(- ( ( 4 * c ) * ( 2 * s - d ) ) / ( d * d ))
        endif
        if s >= d - 0.0001 then
            set s__Missiles_finished[this]=true
            if (st__Missiles__MissileEvents_onFinish[si__Missiles__MissileEvents_type[this]]!=null) then
                if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onFinish(this) then
                    call s__Missiles_terminate(this)
                else
                    if s__Missiles_travel[this] > 0 and not s__Missiles_paused[this] then
                        call s__Missiles_terminate(this)
                    endif
                endif
            else
                call s__Missiles_terminate(this)
            endif
        else
            if not s__Missiles_roll[this] then
                call s__MissileEffect_orient(s__Missiles_effect[this],yaw , - pitch , 0)
            else
                call s__MissileEffect_orient(s__Missiles_effect[this],yaw , - pitch , Atan2(c, h))
            endif
        endif
        if not s__MissileEffect_move(s__Missiles_effect[this],s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_z[this]) then
            if (st__Missiles__MissileEvents_onBoundaries[si__Missiles__MissileEvents_type[this]]!=null) then
                if s__Missiles_allocated[this] and sc__Missiles__MissileEvents_onBoundaries(this) then
                    call s__Missiles_terminate(this)
                endif
            endif
        else
            if s__Missiles_dummy[this] != null then
                call SetUnitX(s__Missiles_dummy[this], s__Missiles_x[this])
                call SetUnitY(s__Missiles_dummy[this], s__Missiles_y[this])
            endif
        endif
                    else
                        set i=s__Missiles_remove(this,i)
                        set j=j - 1
                    endif
                set i=i + 1
                set j=j + 1
                if i > s__Missiles_id and Missiles_SWEET_SPOT > 0 then
                    set i=0
                endif
            endloop
            set s__Missiles_last=i
            set u=null
   return true
endfunction
function sa__Missiles_create takes nothing returns boolean
local real x=f__arg_real1
local real y=f__arg_real2
local real z=f__arg_real3
local real toX=f__arg_real4
local real toY=f__arg_real5
local real toZ=f__arg_real6
            local integer this= s__Missiles__allocate()
            call s__Missiles_reset(this)
            set s__Missiles_origin[this]=s__Missiles__Coordinates_create(x , y , z)
            set s__Missiles_impact[this]=s__Missiles__Coordinates_create(toX , toY , toZ)
            set s__Missiles_effect[this]=s__MissileEffect_create(x , y , s__Missiles__Coordinates_z[s__Missiles_origin[this]])
            call s__Missiles__Coordinates_link(s__Missiles_origin[this] , s__Missiles_impact[this])
            set s__Missiles_allocated[this]=true
            set s__Missiles_cA[this]=s__Missiles__Coordinates_angle[s__Missiles_origin[this]]
            set s__Missiles_x[this]=x
            set s__Missiles_y[this]=y
            set s__Missiles_z[this]=s__Missiles__Coordinates_z[s__Missiles_impact[this]]
            set s__Missiles_prevX[this]=x
            set s__Missiles_prevY[this]=y
            set s__Missiles_prevZ[this]=s__Missiles__Coordinates_z[s__Missiles_impact[this]]
            set s__Missiles_nextX[this]=x
            set s__Missiles_nextY[this]=y
            set s__Missiles_nextZ[this]=s__Missiles__Coordinates_z[s__Missiles_impact[this]]
            set s__Missiles_toZ[this]=toZ
set f__result_integer= this
   return true
endfunction
function sa__WRSMissile_GetMissileFunctionEx takes nothing returns boolean
    call s__WRSMissile_GetMissileFunctionEx(f__arg_unit1,f__arg_real1,f__arg_unit2,f__arg_integer1)
   return true
endfunction
function sa__WRSMissile_onRemove takes nothing returns boolean
local integer this=f__arg_this
                 local integer wm= s__Missiles_data[this]
                 call s__WRSMissData_destroy(wm)
   return true
endfunction
function sa__WRSMissile_onPeriod takes nothing returns boolean
local integer this=f__arg_this
            local integer wm= s__Missiles_data[this]
            local integer d= (LoadInteger(Table__ht, (Miss), (s__WRSMissData_t[wm]))) // INLINED!!
            local real x2= GetUnitX(s__WRSMissile_tar[this])
            local real y2= GetUnitY(s__WRSMissile_tar[this])
            if (s__Missiles_veloc[(this)] / Missiles_PERIOD) != BlzGetUnitWeaponRealField(s__Missiles_source[this], UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED, 0) then // INLINED!!
                call s__Missiles__set_speed(this,BlzGetUnitWeaponRealField(s__Missiles_source[this], UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED, 0))
            endif
            set s__WRSMissData_c[wm]=s__WRSMissData_c[wm] + 1
            if (LoadInteger(Table__ht, (PsyI), (- 25))) == 7 or (LoadInteger(Table__ht, (PsyI), (- 25))) == 18 or (LoadInteger(Table__ht, (PsyI), (- 25))) == 5 or (LoadInteger(Table__ht, (PsyI), (- 25))) == 11 or (LoadInteger(Table__ht, (PsyI), (- 25))) == 10 then // INLINED!!
                  call s__Missiles__set_scale(this,3.0)
            endif
            if s__WRSMissData_c[wm] > s__MissData_vis[d] and (s__MissileEffect_transparency[(s__Missiles_effect[(this)])]) == 0 then // INLINED!!
                call s__MissileEffect__set_alpha(s__Missiles_effect[(this)],(255)) // INLINED!!
                call s__Missiles__set_model(this,s__MissData_model[d])
            endif
            if s__WRSMissData_c[wm] > 480 then
                  set s__WRSMissile_tar[this]=null
                  set s__WRSMissile_hit[this]=null
set f__result_boolean= true
return true
            endif
            if not WithinDistance(s__Missiles_x[this] , s__Missiles_y[this] , x2 , y2 , 25) and UnitAlive(s__WRSMissile_tar[this]) then
                call s__Missiles_deflect(this,x2 , y2 , 0)
            elseif WithinDistance(s__Missiles_x[this] , s__Missiles_y[this] , x2 , y2 , 25) then
                set s__WRSMissile_hit[this]=s__WRSMissile_tar[this]
                call s__WRSMissile_GetMissileFunction(this)
                call GroupEnumUnitsInRange(TempEnumGroup, s__Missiles_x[this], s__Missiles_y[this], 200, null)
                call AreaDamage(s__Missiles_source[this] , s__Missiles_x[this] , s__Missiles_y[this] , 200 , s__Missiles_damage[this])
                set s__WRSMissile_tar[this]=null
set f__result_boolean= true
return true
            endif
set f__result_boolean= false
return true
   return true
endfunction
function sa__WRSMissile_onHit takes nothing returns boolean
    set f__result_boolean=s__WRSMissile_onHit(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__WRSMissile_ReAddAbility takes nothing returns boolean

                  local timer ti= GetExpiredTimer()
                  local integer t= GetUnitTypeId((LoadUnitHandle(Table__ht, (((PsyI))), (0)))) // INLINED!!
                  local integer d= (LoadInteger(Table__ht, (Miss), (t))) // INLINED!!
                  if (LoadInteger(Table__ht, (PsyI), (- 1))) != 0 then // INLINED!!
                    call UnitAddAbility((LoadUnitHandle(Table__ht, (((PsyI))), (0))), s__MissData_abil2[d]) // INLINED!!
                  endif
                  call ReleaseTimer(ti)
                  set ti=null
   return true
endfunction
function sa__FlashGrenade__Flash_onPeriod takes nothing returns boolean
local integer this=f__arg_this
                  local integer c= s__Missiles_data[this]
                  set s__Count_c[c]=s__Count_c[c] + 1
                  if s__Count_c[c] > 224 then
set f__result_boolean= true
return true
                  endif
                  if (s__Missiles_veloc[(this)] / Missiles_PERIOD) != 800 then // INLINED!!
                    call s__Missiles__set_speed(this,800)
                  endif
set f__result_boolean= false
   return true
endfunction
function sa__FlashGrenade__Flash_onDestructable takes nothing returns boolean
    set f__result_boolean=s__FlashGrenade__Flash_onDestructable(f__arg_this,f__arg_destructable1)
   return true
endfunction
function sa__FlashGrenade__Flash_onCliff takes nothing returns boolean
local integer this=f__arg_this
                  local real x= s__Missiles_x[this] + Cos(3.14159 - s__FlashGrenade__Flash_ang[this]) * 200
                  local real y= s__Missiles_y[this] + Sin(3.14159 - s__FlashGrenade__Flash_ang[this]) * 200
                  set s__FlashGrenade__Flash_ang[this]=Atan2(y - s__Missiles_y[this], x - s__Missiles_x[this])
                  call s__Missiles_deflect(this,x , y , 25)
set f__result_boolean= false
return true
   return true
endfunction
function sa__FlashGrenade__Flash_onFinish takes nothing returns boolean
local integer this=f__arg_this
                 local integer c= s__Missiles_data[this]
                 local unit fog= null
                 local real s= 0
                 local ability a
                 local integer p= ((GetPlayerId(GetOwningPlayer(s__Missiles_source[this])))) // INLINED!!
                 if ( s__User_id[(s__User_LocalId)] == s__User_id[p] ) then // INLINED!!
                    set s=9999999999999999
                 endif
                 set bj_lastCreatedEffect=AddSpecialEffect("SuitEffects\\Flashbang.mdx", s__Missiles_x[this], s__Missiles_y[this])
                 call BlzSetSpecialEffectZ(bj_lastCreatedEffect, s)
call s__effectTimed_create((bj_lastCreatedEffect ) , (( 0.01)*1.0)) // INLINED!!
                 call sc__Count_destroy(c)
                 call GroupEnumUnitsInRange(TempEnumGroup, s__Missiles_x[this], s__Missiles_y[this], 400, null)
                 loop
                      set fog=FirstOfGroup(TempEnumGroup)
                      exitwhen fog == null
                      set bj_lastCreatedUnit=(GetRecycledDummy(((s__Missiles_x[this] )*1.0) , (( s__Missiles_y[this] )*1.0) , (( 0)*1.0) , DummyRecycler__angle[DummyRecycler__countNext[DummyRecycler__countHead[DummyRecycler__upper]]])) // INLINED!!
                      call PauseUnit(bj_lastCreatedUnit, false)
                      call UnitAddTimedAbility((bj_lastCreatedUnit ) , ( 'A00N' ) , 1 , (( 3.0 )*1.0) , ( true) , 0 , 0.00 , null , null) // INLINED!!
                      set a=BlzGetUnitAbility(bj_lastCreatedUnit, 'A00N')
                      call BlzSetAbilityRealLevelField(a, ABILITY_RLF_CAST_RANGE, 0, 9999999999)
                      call BlzSetUnitAbilityCooldown(bj_lastCreatedUnit, 'A00N', 0, 0)
                      call BlzSetUnitAbilityManaCost(bj_lastCreatedUnit, 'A00N', 0, 0)
                      call BlzSetAbilityRealLevelField(a, ABILITY_RLF_CHANCE_TO_MISS_CRS, 0, 300)
                      call SetUnitAbilityLevel(bj_lastCreatedUnit, 'A00N', 2)
                      call SetUnitAbilityLevel(bj_lastCreatedUnit, 'A00N', 1)
                      if fog != s__Missiles_source[this] then
                        call IssueTargetOrderById(bj_lastCreatedUnit, 852190, fog)
                      endif
                      call DummyAddRecycleTimer(bj_lastCreatedUnit , 3.0)
                      call GroupRemoveUnit(TempEnumGroup, fog)
                 endloop
                 set a=null
                 set p=s__User_NULL
set f__result_boolean= false
   return true
endfunction
function sa__Launch__Launch_onPeriod takes nothing returns boolean
local integer this=f__arg_this
                  if (s__Missiles_veloc[(this)] / Missiles_PERIOD) != BlzGetUnitWeaponRealField(s__Missiles_source[this], UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED, 0) then // INLINED!!
                    call s__Missiles__set_speed(this,BlzGetUnitWeaponRealField(s__Missiles_source[this], UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED, 0))
                  endif
                  if s__Missiles_travel[this] > 75 and (s__MissileEffect_transparency[(s__Missiles_effect[(this)])]) == 0 then // INLINED!!
                    call s__MissileEffect__set_alpha(s__Missiles_effect[(this)],(255)) // INLINED!!
                    call s__Missiles__set_model(this,BlzGetUnitWeaponStringField(s__Missiles_source[this], UNIT_WEAPON_SF_ATTACK_PROJECTILE_ART, 1))
                  endif
                  if s__Missiles_travel[this] > BlzGetUnitWeaponRealField(s__Missiles_source[this], UNIT_WEAPON_RF_ATTACK_RANGE, 0) + 200 then
set f__result_boolean= true
return true
                  endif
                  if s__Missiles_data[this] < 0 and s__Missiles_data[this] != - 62 then
                    set s__Missiles_data[this]=s__Missiles_data[this] + 1
                  elseif s__Missiles_data[this] >= - 62 and s__Missiles_data[this] < 0 then
set f__result_boolean= true
return true
                  endif
set f__result_boolean= false
return true
   return true
endfunction
function sa__Launch__Launch_onHit takes nothing returns boolean
    set f__result_boolean=s__Launch__Launch_onHit(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__Launch__Launch_onMissile takes nothing returns boolean
local integer this=f__arg_this
local integer missile=f__arg_integer1
set f__result_boolean= false
   return true
endfunction
function sa__AutoArtillary__ArtMissile_onHit takes nothing returns boolean
    set f__result_boolean=s__AutoArtillary__ArtMissile_onHit(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__AutoArtillary__ArtMissile_onDestructable takes nothing returns boolean
    set f__result_boolean=s__AutoArtillary__ArtMissile_onDestructable(f__arg_this,f__arg_destructable1)
   return true
endfunction
function sa__AutoArtillary__ArtMissile_onPeriod takes nothing returns boolean
local integer this=f__arg_this
                local integer d= (LoadInteger(Table__ht, (Miss), (GetUnitTypeId(s__Missiles_source[this])))) // INLINED!!
                local integer mi= s__Missiles_data[this]
                set s__WRSMissData_c[mi]=s__WRSMissData_c[mi] + 1
                if s__WRSMissData_c[mi] == 4 then
                    call s__Missiles__set_speed(this,(900.0)) // INLINED!!
                endif
                if s__WRSMissData_c[mi] >= 480 then
set f__result_boolean= true
return true
                endif
                if not UnitAlive(s__Missiles_target[this]) then
set f__result_boolean= true
return true
                endif
set f__result_boolean= false
return true
   return true
endfunction
function sa__AutoArtillary__ArtMissile_onRemove takes nothing returns boolean
local integer this=f__arg_this
                 local integer wm= s__Missiles_data[this]
                 call sc__WRSMissData_destroy(wm)
   return true
endfunction
function sa__AutoArtillary__ArtMissile_onFinish takes nothing returns boolean
local integer this=f__arg_this
                    call GroupEnumUnitsInRange(TempEnumGroup, s__Missiles_x[this], s__Missiles_y[this], 200, null)
                    call AreaDamage(s__Missiles_source[this] , s__Missiles_x[this] , s__Missiles_y[this] , 200 , s__Missiles_damage[this])
set f__result_boolean= true
   return true
endfunction
function sa__CannonProjectile__Launch_onPeriod takes nothing returns boolean
local integer this=f__arg_this
                  local real x= GetUnitX(s__CannonProjectile__Launch_tar[this])
                  local real y= GetUnitY(s__CannonProjectile__Launch_tar[this])
                  if (s__Missiles_veloc[(this)] / Missiles_PERIOD) != 150 then // INLINED!!
                    call s__Missiles__set_speed(this,150)
                  endif
                  if WithinDistance(s__Missiles_x[this] , s__Missiles_y[this] , x , y , 10) == false then
                        call s__Missiles_deflect(this,x , y , 300)
                  else
                        call s__CannonProjectile__DPSTimer_KyoStart(1250 , s__Missiles_source[this] , s__CannonProjectile__Launch_tar[this])
                        call s__Missiles__set_model(this,null)
set f__result_boolean= true
return true
                  endif
set f__result_boolean= false
return true
   return true
endfunction
function sa__CannonProjectile__Launch_onHit takes nothing returns boolean
    set f__result_boolean=s__CannonProjectile__Launch_onHit(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__MagneticSaw__Saw_onPeriod takes nothing returns boolean
local integer this=f__arg_this
                  if (s__Missiles_veloc[(this)] / Missiles_PERIOD) != 1200 then // INLINED!!
                    call s__Missiles__set_speed(this,1200)
                  endif
set f__result_boolean= false
   return true
endfunction
function sa__MagneticSaw__Saw_onHit takes nothing returns boolean
    set f__result_boolean=s__MagneticSaw__Saw_onHit(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__MagneticSaw__Saw_onDestructable takes nothing returns boolean
    set f__result_boolean=s__MagneticSaw__Saw_onDestructable(f__arg_this,f__arg_destructable1)
   return true
endfunction
function sa__MagneticSaw__Saw_onCliff takes nothing returns boolean
local integer this=f__arg_this
set f__result_boolean= true
   return true
endfunction
function sa__PhaseBurn__Phase_onPeriod takes nothing returns boolean
local integer this=f__arg_this
                  local real x= GetUnitX(s__PhaseBurn__Phase_tar[this])
                  local real y= GetUnitY(s__PhaseBurn__Phase_tar[this])
                  local real m= GetUnitState(s__PhaseBurn__Phase_tar[this], UNIT_STATE_MANA)
                  local real d= m * 1.10
                  local integer c= s__Missiles_data[this]
                  if (s__Missiles_veloc[(this)] / Missiles_PERIOD) != 1800 then // INLINED!!
                    call s__Missiles__set_speed(this,1800)
                  endif
                  set s__Count_c[c]=s__Count_c[c] + 1
                  if s__Count_c[c] > 1 and (s__MissileEffect_transparency[(s__Missiles_effect[(this)])]) == 0 then // INLINED!!
                        call s__Missiles__set_model(this,"SuitEffects\\Void Spear.mdx")
                        call s__MissileEffect__set_alpha(s__Missiles_effect[(this)],(255)) // INLINED!!
                  endif
                  if s__Count_c[c] > 384 then
set f__result_boolean= true
return true
                  endif
                  if WithinDistance(x , y , s__Missiles_x[this] , s__Missiles_y[this] , 40) then
                    call UnitDamageTarget(s__Missiles_source[this], s__PhaseBurn__Phase_tar[this], d, false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNKNOWN, WEAPON_TYPE_WHOKNOWS)
                    call SetUnitState(s__PhaseBurn__Phase_tar[this], UNIT_STATE_MANA, m * 0.5)
                    call DisplayTextToPlayer(Player(0), 0, 0, "DAMAGED")
set f__result_boolean= true
return true
                  else
                    call s__Missiles_deflect(this,x , y , 25)
                  endif
set f__result_boolean= false
return true
   return true
endfunction
function sa__PhaseBurn__Phase_onRemove takes nothing returns boolean
local integer this=f__arg_this
                local integer c= s__Missiles_data[this]
                call sc__Count_destroy(c)
   return true
endfunction
function sa___prototype9_DamageEngine_RegisterFromHook takes nothing returns boolean
    call DamageEngine_RegisterFromHook(f__arg_trigger1,f__arg_string1,f__arg_limitop1,f__arg_real1)
    return true
endfunction
function sa___prototype31_SetUnitMoveSpeedX takes nothing returns boolean
    call SetUnitMoveSpeedX(f__arg_unit1,f__arg_real1)
    return true
endfunction

function jasshelper__initstructs27873406 takes nothing returns nothing
    set st__VesselUpgradeFinish_Done=CreateTrigger()
    call TriggerAddCondition(st__VesselUpgradeFinish_Done,Condition( function sa__VesselUpgradeFinish_Done))
    set st__EscapePod_IntEscapePod=CreateTrigger()
    call TriggerAddCondition(st__EscapePod_IntEscapePod,Condition( function sa__EscapePod_IntEscapePod))
    set st__PsychoTime__set_index=CreateTrigger()
    call TriggerAddCondition(st__PsychoTime__set_index,Condition( function sa__PsychoTime__set_index))
    set st__PsychoTime__get_pid=CreateTrigger()
    call TriggerAddCondition(st__PsychoTime__get_pid,Condition( function sa__PsychoTime__get_pid))
    set st__PsychoTime__get_ep=CreateTrigger()
    call TriggerAddCondition(st__PsychoTime__get_ep,Condition( function sa__PsychoTime__get_ep))
    set st__PsychoTime__set_ep=CreateTrigger()
    call TriggerAddCondition(st__PsychoTime__set_ep,Condition( function sa__PsychoTime__set_ep))
    set st__PsychoTime__get_task=CreateTrigger()
    call TriggerAddCondition(st__PsychoTime__get_task,Condition( function sa__PsychoTime__get_task))
    set st__PsychoTime__set_task=CreateTrigger()
    call TriggerAddCondition(st__PsychoTime__set_task,Condition( function sa__PsychoTime__set_task))
    set st__PsychoTime__get_bool=CreateTrigger()
    call TriggerAddCondition(st__PsychoTime__get_bool,Condition( function sa__PsychoTime__get_bool))
    set st__PsychoTime_start=CreateTrigger()
    call TriggerAddCondition(st__PsychoTime_start,Condition( function sa__PsychoTime_start))
    set st__PsychoOnInit_InitSet=CreateTrigger()
    call TriggerAddCondition(st__PsychoOnInit_InitSet,Condition( function sa__PsychoOnInit_InitSet))
    set st__PsychoOnInit_Init=CreateTrigger()
    call TriggerAddCondition(st__PsychoOnInit_Init,Condition( function sa__PsychoOnInit_Init))
    set st__Count_create=CreateTrigger()
    call TriggerAddCondition(st__Count_create,Condition( function sa__Count_create))
    set st__Count_destroy=CreateTrigger()
    call TriggerAddCondition(st__Count_destroy,Condition( function sa__Count_destroy))
    set st__WRSMissData_create=CreateTrigger()
    call TriggerAddCondition(st__WRSMissData_create,Condition( function sa__WRSMissData_create))
    set st__WRSMissData_destroy=CreateTrigger()
    call TriggerAddCondition(st__WRSMissData_destroy,Condition( function sa__WRSMissData_destroy))
    set st__ArtLaunch_onDamage=CreateTrigger()
    call TriggerAddCondition(st__ArtLaunch_onDamage,Condition( function sa__ArtLaunch_onDamage))
    set st__WaterEffect_cast=CreateTrigger()
    call TriggerAddCondition(st__WaterEffect_cast,Condition( function sa__WaterEffect_cast))
    set st__Event_Event__destroyNode=CreateTrigger()
    call TriggerAddCondition(st__Event_Event__destroyNode,Condition( function sa__Event_Event__destroyNode))
    set st__IceEffect_cast=CreateTrigger()
    call TriggerAddCondition(st__IceEffect_cast,Condition( function sa__IceEffect_cast))
    set st__FireEffect_cast=CreateTrigger()
    call TriggerAddCondition(st__FireEffect_cast,Condition( function sa__FireEffect_cast))
    set st__ElectroEffect_cast=CreateTrigger()
    call TriggerAddCondition(st__ElectroEffect_cast,Condition( function sa__ElectroEffect_cast))
    set st__ChatSys_ChatInt=CreateTrigger()
    call TriggerAddCondition(st__ChatSys_ChatInt,Condition( function sa__ChatSys_ChatInt))
    set st__AcidEffect_cast=CreateTrigger()
    call TriggerAddCondition(st__AcidEffect_cast,Condition( function sa__AcidEffect_cast))
    set st__Finish_EnumDestructablesInCircle=CreateTrigger()
    call TriggerAddCondition(st__Finish_EnumDestructablesInCircle,Condition( function sa__Finish_EnumDestructablesInCircle))
    set st__GenTimer_StatMess=CreateTrigger()
    call TriggerAddCondition(st__GenTimer_StatMess,Condition( function sa__GenTimer_StatMess))
    set st__Missiles__MissileEvents_onHit[59]=null
    set st__Missiles__MissileEvents_onHit[78]=null
    set st__Missiles__MissileEvents_onHit[98]=null
    set st__Missiles__MissileEvents_onMissile[59]=null
    set st__Missiles__MissileEvents_onMissile[78]=null
    set st__Missiles__MissileEvents_onMissile[93]=null
    set st__Missiles__MissileEvents_onMissile[96]=null
    set st__Missiles__MissileEvents_onMissile[97]=null
    set st__Missiles__MissileEvents_onMissile[98]=null
    set st__Missiles__MissileEvents_onMissile[100]=null
    set st__Missiles__MissileEvents_onDestructable[59]=null
    set st__Missiles__MissileEvents_onDestructable[91]=null
    set st__Missiles__MissileEvents_onDestructable[96]=null
    set st__Missiles__MissileEvents_onDestructable[98]=null
    set st__Missiles__MissileEvents_onDestructable[100]=null
    set st__Missiles__MissileEvents_onItem[59]=null
    set st__Missiles__MissileEvents_onItem[78]=null
    set st__Missiles__MissileEvents_onItem[91]=null
    set st__Missiles__MissileEvents_onItem[93]=null
    set st__Missiles__MissileEvents_onItem[96]=null
    set st__Missiles__MissileEvents_onItem[97]=null
    set st__Missiles__MissileEvents_onItem[98]=null
    set st__Missiles__MissileEvents_onItem[100]=null
    set st__Missiles__MissileEvents_onCliff[59]=null
    set st__Missiles__MissileEvents_onCliff[91]=null
    set st__Missiles__MissileEvents_onCliff[93]=null
    set st__Missiles__MissileEvents_onCliff[96]=null
    set st__Missiles__MissileEvents_onCliff[98]=null
    set st__Missiles__MissileEvents_onCliff[100]=null
    set st__Missiles__MissileEvents_onTerrain[59]=null
    set st__Missiles__MissileEvents_onTerrain[78]=null
    set st__Missiles__MissileEvents_onTerrain[91]=null
    set st__Missiles__MissileEvents_onTerrain[93]=null
    set st__Missiles__MissileEvents_onTerrain[96]=null
    set st__Missiles__MissileEvents_onTerrain[97]=null
    set st__Missiles__MissileEvents_onTerrain[98]=null
    set st__Missiles__MissileEvents_onTerrain[100]=null
    set st__Missiles__MissileEvents_onTileset[59]=null
    set st__Missiles__MissileEvents_onTileset[78]=null
    set st__Missiles__MissileEvents_onTileset[91]=null
    set st__Missiles__MissileEvents_onTileset[93]=null
    set st__Missiles__MissileEvents_onTileset[96]=null
    set st__Missiles__MissileEvents_onTileset[97]=null
    set st__Missiles__MissileEvents_onTileset[98]=null
    set st__Missiles__MissileEvents_onTileset[100]=null
    set st__Missiles__MissileEvents_onPeriod[59]=null
    set st__Missiles__MissileEvents_onFinish[59]=null
    set st__Missiles__MissileEvents_onFinish[91]=null
    set st__Missiles__MissileEvents_onFinish[96]=null
    set st__Missiles__MissileEvents_onFinish[97]=null
    set st__Missiles__MissileEvents_onFinish[98]=null
    set st__Missiles__MissileEvents_onFinish[100]=null
    set st__Missiles__MissileEvents_onBoundaries[59]=null
    set st__Missiles__MissileEvents_onBoundaries[78]=null
    set st__Missiles__MissileEvents_onBoundaries[91]=null
    set st__Missiles__MissileEvents_onBoundaries[93]=null
    set st__Missiles__MissileEvents_onBoundaries[96]=null
    set st__Missiles__MissileEvents_onBoundaries[97]=null
    set st__Missiles__MissileEvents_onBoundaries[98]=null
    set st__Missiles__MissileEvents_onBoundaries[100]=null
    set st__Missiles__MissileEvents_onPause[59]=null
    set st__Missiles__MissileEvents_onPause[78]=null
    set st__Missiles__MissileEvents_onPause[91]=null
    set st__Missiles__MissileEvents_onPause[93]=null
    set st__Missiles__MissileEvents_onPause[96]=null
    set st__Missiles__MissileEvents_onPause[97]=null
    set st__Missiles__MissileEvents_onPause[98]=null
    set st__Missiles__MissileEvents_onPause[100]=null
    set st__Missiles__MissileEvents_onResume[59]=null
    set st__Missiles__MissileEvents_onResume[78]=null
    set st__Missiles__MissileEvents_onResume[91]=null
    set st__Missiles__MissileEvents_onResume[93]=null
    set st__Missiles__MissileEvents_onResume[96]=null
    set st__Missiles__MissileEvents_onResume[97]=null
    set st__Missiles__MissileEvents_onResume[98]=null
    set st__Missiles__MissileEvents_onResume[100]=null
    set st__Missiles__MissileEvents_onRemove[59]=null
    set st__Missiles__MissileEvents_onRemove[78]=null
    set st__Missiles__MissileEvents_onRemove[91]=null
    set st__Missiles__MissileEvents_onRemove[96]=null
    set st__Missiles__MissileEvents_onRemove[97]=null
    set st__Table_create=CreateTrigger()
    call TriggerAddCondition(st__Table_create,Condition( function sa__Table_create))
    set st__Missiles_terminate=CreateTrigger()
    call TriggerAddCondition(st__Missiles_terminate,Condition( function sa__Missiles_terminate))
    set st__Missiles_reset=CreateTrigger()
    call TriggerAddCondition(st__Missiles_reset,Condition( function sa__Missiles_reset))
    set st__Missiles_move=CreateTrigger()
    call TriggerAddCondition(st__Missiles_move,Condition( function sa__Missiles_move))
    set st__Missiles_create=CreateTrigger()
    call TriggerAddCondition(st__Missiles_create,Condition( function sa__Missiles_create))
    set st__Missiles__MissileEvents_onDestroy[59]=null
    set st__Missiles__MissileEvents_onDestroy[78]=null
    set st__Missiles__MissileEvents_onDestroy[91]=null
    set st__Missiles__MissileEvents_onDestroy[93]=null
    set st__Missiles__MissileEvents_onDestroy[96]=null
    set st__Missiles__MissileEvents_onDestroy[97]=null
    set st__Missiles__MissileEvents_onDestroy[98]=null
    set st__Missiles__MissileEvents_onDestroy[100]=null
    set st__WRSMissile_GetMissileFunctionEx=CreateTrigger()
    call TriggerAddCondition(st__WRSMissile_GetMissileFunctionEx,Condition( function sa__WRSMissile_GetMissileFunctionEx))
    set st__Missiles__MissileEvents_onRemove[100]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onRemove[100],Condition( function sa__WRSMissile_onRemove))
    call TriggerAddAction(st__Missiles__MissileEvents_onRemove[100], function sa__WRSMissile_onRemove)
    set st__Missiles__MissileEvents_onPeriod[100]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onPeriod[100],Condition( function sa__WRSMissile_onPeriod))
    call TriggerAddAction(st__Missiles__MissileEvents_onPeriod[100], function sa__WRSMissile_onPeriod)
    set st__Missiles__MissileEvents_onHit[100]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onHit[100],Condition( function sa__WRSMissile_onHit))
    call TriggerAddAction(st__Missiles__MissileEvents_onHit[100], function sa__WRSMissile_onHit)
    set st__WRSMissile_ReAddAbility=CreateTrigger()
    call TriggerAddCondition(st__WRSMissile_ReAddAbility,Condition( function sa__WRSMissile_ReAddAbility))
    set st__Missiles__MissileEvents_onPeriod[78]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onPeriod[78],Condition( function sa__FlashGrenade__Flash_onPeriod))
    call TriggerAddAction(st__Missiles__MissileEvents_onPeriod[78], function sa__FlashGrenade__Flash_onPeriod)
    set st__Missiles__MissileEvents_onDestructable[78]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onDestructable[78],Condition( function sa__FlashGrenade__Flash_onDestructable))
    call TriggerAddAction(st__Missiles__MissileEvents_onDestructable[78], function sa__FlashGrenade__Flash_onDestructable)
    set st__Missiles__MissileEvents_onCliff[78]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onCliff[78],Condition( function sa__FlashGrenade__Flash_onCliff))
    call TriggerAddAction(st__Missiles__MissileEvents_onCliff[78], function sa__FlashGrenade__Flash_onCliff)
    set st__Missiles__MissileEvents_onFinish[78]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onFinish[78],Condition( function sa__FlashGrenade__Flash_onFinish))
    call TriggerAddAction(st__Missiles__MissileEvents_onFinish[78], function sa__FlashGrenade__Flash_onFinish)
    set st__Missiles__MissileEvents_onPeriod[91]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onPeriod[91],Condition( function sa__Launch__Launch_onPeriod))
    call TriggerAddAction(st__Missiles__MissileEvents_onPeriod[91], function sa__Launch__Launch_onPeriod)
    set st__Missiles__MissileEvents_onHit[91]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onHit[91],Condition( function sa__Launch__Launch_onHit))
    call TriggerAddAction(st__Missiles__MissileEvents_onHit[91], function sa__Launch__Launch_onHit)
    set st__Missiles__MissileEvents_onMissile[91]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onMissile[91],Condition( function sa__Launch__Launch_onMissile))
    call TriggerAddAction(st__Missiles__MissileEvents_onMissile[91], function sa__Launch__Launch_onMissile)
    set st__Missiles__MissileEvents_onHit[93]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onHit[93],Condition( function sa__AutoArtillary__ArtMissile_onHit))
    call TriggerAddAction(st__Missiles__MissileEvents_onHit[93], function sa__AutoArtillary__ArtMissile_onHit)
    set st__Missiles__MissileEvents_onDestructable[93]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onDestructable[93],Condition( function sa__AutoArtillary__ArtMissile_onDestructable))
    call TriggerAddAction(st__Missiles__MissileEvents_onDestructable[93], function sa__AutoArtillary__ArtMissile_onDestructable)
    set st__Missiles__MissileEvents_onPeriod[93]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onPeriod[93],Condition( function sa__AutoArtillary__ArtMissile_onPeriod))
    call TriggerAddAction(st__Missiles__MissileEvents_onPeriod[93], function sa__AutoArtillary__ArtMissile_onPeriod)
    set st__Missiles__MissileEvents_onRemove[93]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onRemove[93],Condition( function sa__AutoArtillary__ArtMissile_onRemove))
    call TriggerAddAction(st__Missiles__MissileEvents_onRemove[93], function sa__AutoArtillary__ArtMissile_onRemove)
    set st__Missiles__MissileEvents_onFinish[93]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onFinish[93],Condition( function sa__AutoArtillary__ArtMissile_onFinish))
    call TriggerAddAction(st__Missiles__MissileEvents_onFinish[93], function sa__AutoArtillary__ArtMissile_onFinish)
    set st__Missiles__MissileEvents_onPeriod[96]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onPeriod[96],Condition( function sa__CannonProjectile__Launch_onPeriod))
    call TriggerAddAction(st__Missiles__MissileEvents_onPeriod[96], function sa__CannonProjectile__Launch_onPeriod)
    set st__Missiles__MissileEvents_onHit[96]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onHit[96],Condition( function sa__CannonProjectile__Launch_onHit))
    call TriggerAddAction(st__Missiles__MissileEvents_onHit[96], function sa__CannonProjectile__Launch_onHit)
    set st__Missiles__MissileEvents_onPeriod[97]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onPeriod[97],Condition( function sa__MagneticSaw__Saw_onPeriod))
    call TriggerAddAction(st__Missiles__MissileEvents_onPeriod[97], function sa__MagneticSaw__Saw_onPeriod)
    set st__Missiles__MissileEvents_onHit[97]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onHit[97],Condition( function sa__MagneticSaw__Saw_onHit))
    call TriggerAddAction(st__Missiles__MissileEvents_onHit[97], function sa__MagneticSaw__Saw_onHit)
    set st__Missiles__MissileEvents_onDestructable[97]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onDestructable[97],Condition( function sa__MagneticSaw__Saw_onDestructable))
    call TriggerAddAction(st__Missiles__MissileEvents_onDestructable[97], function sa__MagneticSaw__Saw_onDestructable)
    set st__Missiles__MissileEvents_onCliff[97]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onCliff[97],Condition( function sa__MagneticSaw__Saw_onCliff))
    call TriggerAddAction(st__Missiles__MissileEvents_onCliff[97], function sa__MagneticSaw__Saw_onCliff)
    set st__Missiles__MissileEvents_onPeriod[98]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onPeriod[98],Condition( function sa__PhaseBurn__Phase_onPeriod))
    call TriggerAddAction(st__Missiles__MissileEvents_onPeriod[98], function sa__PhaseBurn__Phase_onPeriod)
    set st__Missiles__MissileEvents_onRemove[98]=CreateTrigger()
    call TriggerAddCondition(st__Missiles__MissileEvents_onRemove[98],Condition( function sa__PhaseBurn__Phase_onRemove))
    call TriggerAddAction(st__Missiles__MissileEvents_onRemove[98], function sa__PhaseBurn__Phase_onRemove)
    set st___prototype9[1]=CreateTrigger()
    call TriggerAddAction(st___prototype9[1],function sa___prototype9_DamageEngine_RegisterFromHook)
    call TriggerAddCondition(st___prototype9[1],Condition(function sa___prototype9_DamageEngine_RegisterFromHook))
    set st___prototype31[1]=CreateTrigger()
    call TriggerAddAction(st___prototype31[1],function sa___prototype31_SetUnitMoveSpeedX)
    call TriggerAddCondition(st___prototype31[1],Condition(function sa___prototype31_SetUnitMoveSpeedX))

call ExecuteFunc("s__Ascii__Inits_Ascii__Init___onInit")








call ExecuteFunc("s__MoveSpeedXGUI__MoveSpeedStruct_MoveSpeedXGUI__M___onInit")

call ExecuteFunc("s__User_PlayerUtils__PlayerUtilsInit___onInit")































call ExecuteFunc("s__WorldBounds_WorldBounds__WorldBoundInit___onInit")

call ExecuteFunc("s__AutoFly__Inits_AutoFly__Init___onInit")

call ExecuteFunc("s__DummyRecycler__S_DummyRecycler__M___onInit")

call ExecuteFunc("s__UnitMoving_IsUnitMoving__Init___onInit")

call ExecuteFunc("s__RegisterNativeEvent__NativeEvent_RegisterNativeEvent__NativeEventInit___onInit")

call ExecuteFunc("s__ResourcePreloader__S_ResourcePreloader__Init___onInit")

call ExecuteFunc("s__StringIndexer__D_StringIndexer__Init___onInit")

call ExecuteFunc("s__TimerUtilsEx__Data_TimerUtilsEx__Init___onInit")

call ExecuteFunc("s__IPool__data_IPool__Init___onInit")













call ExecuteFunc("s__RiseAndFall_RiseAndFall__Init___onInit")















call ExecuteFunc("s__AttachObject__Init_AttachObject__init___onInit")


call ExecuteFunc("s__GenTimer_CTLEnd___onInit")

call ExecuteFunc("s__Finish_CTLEnd___onInit")

call ExecuteFunc("s__MinerthaTimer_CTLEnd___onInit")


call ExecuteFunc("s__ShareFunc_CTLEnd___onInit")

call ExecuteFunc("s__Status__Recall_CTLEnd___onInit")

call ExecuteFunc("s__SwitchAbility__ChanKey_CTLEnd___onInit")









call ExecuteFunc("s__ArtLaunch_CTLEnd___onInit")

call ExecuteFunc("s__CannonProjectile__DPSTimer_CTLEnd___onInit")








call ExecuteFunc("s__PsychoTime_CTLEnd___onInit")

call ExecuteFunc("s__MuteTimer_CTLEnd___onInit")



    call ExecuteFunc("s__Damage_onInit")
    call ExecuteFunc("s__Missiles__Pool_onInit")
    call ExecuteFunc("s__Movespeed_onInit")
endfunction

